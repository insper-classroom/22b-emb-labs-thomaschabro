
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009234  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409234  00409234  00019234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040923c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bd18  204009d0  00409c0c  000209d0  2**2
                  ALLOC
  4 .stack        00002000  2040c6e8  00415924  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040e6e8  00417924  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00027fc2  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000057e5  00000000  00000000  00048a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000bc4f  00000000  00000000  0004e1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f80  00000000  00000000  00059e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001130  00000000  00000000  0005adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000df15  00000000  00000000  0005befd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001898b  00000000  00000000  00069e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00099c6a  00000000  00000000  0008279d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031d0  00000000  00000000  0011c408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 e6 40 20 35 32 40 00 31 32 40 00 31 32 40 00     ..@ 52@.12@.12@.
  400010:	31 32 40 00 31 32 40 00 31 32 40 00 00 00 00 00     12@.12@.12@.....
	...
  40002c:	31 32 40 00 31 32 40 00 00 00 00 00 31 32 40 00     12@.12@.....12@.
  40003c:	31 32 40 00 31 32 40 00 31 32 40 00 f9 35 40 00     12@.12@.12@..5@.
  40004c:	c1 35 40 00 31 32 40 00 31 32 40 00 31 32 40 00     .5@.12@.12@.12@.
  40005c:	31 32 40 00 31 32 40 00 00 00 00 00 81 2d 40 00     12@.12@......-@.
  40006c:	95 2d 40 00 a9 2d 40 00 31 32 40 00 31 32 40 00     .-@..-@.12@.12@.
  40007c:	31 32 40 00 bd 2d 40 00 d1 2d 40 00 31 32 40 00     12@..-@..-@.12@.
  40008c:	31 32 40 00 31 32 40 00 31 32 40 00 31 32 40 00     12@.12@.12@.12@.
  40009c:	31 32 40 00 05 38 40 00 31 32 40 00 31 32 40 00     12@..8@.12@.12@.
  4000ac:	31 38 40 00 31 32 40 00 35 02 40 00 31 32 40 00     18@.12@.5.@.12@.
  4000bc:	31 32 40 00 31 32 40 00 31 32 40 00 31 32 40 00     12@.12@.12@.12@.
  4000cc:	31 32 40 00 00 00 00 00 31 32 40 00 00 00 00 00     12@.....12@.....
  4000dc:	31 32 40 00 49 02 40 00 31 32 40 00 31 32 40 00     12@.I.@.12@.12@.
  4000ec:	31 32 40 00 31 32 40 00 31 32 40 00 31 32 40 00     12@.12@.12@.12@.
  4000fc:	31 32 40 00 61 38 40 00 31 32 40 00 31 32 40 00     12@.a8@.12@.12@.
  40010c:	31 32 40 00 31 32 40 00 00 00 00 00 00 00 00 00     12@.12@.........
  40011c:	00 00 00 00 31 32 40 00 31 32 40 00 31 32 40 00     ....12@.12@.12@.
  40012c:	31 32 40 00 31 32 40 00 00 00 00 00 31 32 40 00     12@.12@.....12@.
  40013c:	31 32 40 00                                         12@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040923c 	.word	0x0040923c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040923c 	.word	0x0040923c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040923c 	.word	0x0040923c
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	2040c5f0 	.word	0x2040c5f0
  400230:	40064000 	.word	0x40064000

00400234 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400234:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400236:	4802      	ldr	r0, [pc, #8]	; (400240 <AFEC0_Handler+0xc>)
  400238:	4b02      	ldr	r3, [pc, #8]	; (400244 <AFEC0_Handler+0x10>)
  40023a:	4798      	blx	r3
  40023c:	bd08      	pop	{r3, pc}
  40023e:	bf00      	nop
  400240:	4003c000 	.word	0x4003c000
  400244:	004001ad 	.word	0x004001ad

00400248 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400248:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40024a:	4802      	ldr	r0, [pc, #8]	; (400254 <AFEC1_Handler+0xc>)
  40024c:	4b02      	ldr	r3, [pc, #8]	; (400258 <AFEC1_Handler+0x10>)
  40024e:	4798      	blx	r3
  400250:	bd08      	pop	{r3, pc}
  400252:	bf00      	nop
  400254:	40064000 	.word	0x40064000
  400258:	004001ad 	.word	0x004001ad

0040025c <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  40025c:	b921      	cbnz	r1, 400268 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40025e:	6843      	ldr	r3, [r0, #4]
  400260:	f023 0301 	bic.w	r3, r3, #1
  400264:	6043      	str	r3, [r0, #4]
  400266:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400268:	6843      	ldr	r3, [r0, #4]
  40026a:	f043 0301 	orr.w	r3, r3, #1
  40026e:	6043      	str	r3, [r0, #4]
  400270:	4770      	bx	lr

00400272 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  400272:	6201      	str	r1, [r0, #32]
  400274:	4770      	bx	lr

00400276 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400276:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400278:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40027a:	6884      	ldr	r4, [r0, #8]
  40027c:	42a5      	cmp	r5, r4
  40027e:	d003      	beq.n	400288 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  400280:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400282:	6884      	ldr	r4, [r0, #8]
  400284:	42ac      	cmp	r4, r5
  400286:	d1fb      	bne.n	400280 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400288:	b161      	cbz	r1, 4002a4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40028a:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40028e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400292:	f3c4 4003 	ubfx	r0, r4, #16, #4
  400296:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40029a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40029e:	bf18      	it	ne
  4002a0:	300c      	addne	r0, #12
  4002a2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4002a4:	b142      	cbz	r2, 4002b8 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4002a6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4002aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4002ae:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4002b2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4002b6:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4002b8:	b143      	cbz	r3, 4002cc <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4002ba:	f3c4 1202 	ubfx	r2, r4, #4, #3
  4002be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4002c2:	f004 040f 	and.w	r4, r4, #15
  4002c6:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4002ca:	601c      	str	r4, [r3, #0]
	}
}
  4002cc:	bc30      	pop	{r4, r5}
  4002ce:	4770      	bx	lr

004002d0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4002d0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002d2:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4002d4:	f014 0f01 	tst.w	r4, #1
  4002d8:	d005      	beq.n	4002e6 <rtc_set_time+0x16>
  4002da:	290c      	cmp	r1, #12
  4002dc:	d903      	bls.n	4002e6 <rtc_set_time+0x16>
			ul_hour -= 12;
  4002de:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4002e0:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4002e4:	e000      	b.n	4002e8 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4002e6:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4002e8:	4c1c      	ldr	r4, [pc, #112]	; (40035c <rtc_set_time+0x8c>)
  4002ea:	fba4 5603 	umull	r5, r6, r4, r3
  4002ee:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4002f0:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4002f4:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4002f8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fc:	fba4 6502 	umull	r6, r5, r4, r2
  400300:	08ed      	lsrs	r5, r5, #3
  400302:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400306:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40030a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40030e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400312:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400314:	fba4 4201 	umull	r4, r2, r4, r1
  400318:	08d2      	lsrs	r2, r2, #3
  40031a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40031e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400322:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400326:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40032a:	6983      	ldr	r3, [r0, #24]
  40032c:	f013 0f04 	tst.w	r3, #4
  400330:	d0fb      	beq.n	40032a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400332:	6803      	ldr	r3, [r0, #0]
  400334:	f043 0301 	orr.w	r3, r3, #1
  400338:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40033a:	6983      	ldr	r3, [r0, #24]
  40033c:	f013 0f01 	tst.w	r3, #1
  400340:	d0fb      	beq.n	40033a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400342:	2301      	movs	r3, #1
  400344:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400346:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400348:	6803      	ldr	r3, [r0, #0]
  40034a:	f023 0301 	bic.w	r3, r3, #1
  40034e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400350:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400352:	f000 0001 	and.w	r0, r0, #1
  400356:	bcf0      	pop	{r4, r5, r6, r7}
  400358:	4770      	bx	lr
  40035a:	bf00      	nop
  40035c:	cccccccd 	.word	0xcccccccd

00400360 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  400360:	b5f0      	push	{r4, r5, r6, r7, lr}
  400362:	9c05      	ldr	r4, [sp, #20]
  400364:	9d06      	ldr	r5, [sp, #24]
  400366:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  400368:	460e      	mov	r6, r1
  40036a:	b1b1      	cbz	r1, 40039a <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40036c:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  40036e:	f011 0f01 	tst.w	r1, #1
  400372:	d005      	beq.n	400380 <rtc_set_time_alarm+0x20>
  400374:	2a0c      	cmp	r2, #12
  400376:	d903      	bls.n	400380 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  400378:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  40037a:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  40037e:	e000      	b.n	400382 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  400380:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400382:	4919      	ldr	r1, [pc, #100]	; (4003e8 <rtc_set_time_alarm+0x88>)
  400384:	fba1 e102 	umull	lr, r1, r1, r2
  400388:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40038a:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  40038e:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  400392:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400394:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  400398:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  40039a:	b15b      	cbz	r3, 4003b4 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40039c:	4b12      	ldr	r3, [pc, #72]	; (4003e8 <rtc_set_time_alarm+0x88>)
  40039e:	fba3 2304 	umull	r2, r3, r3, r4
  4003a2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4003a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4003a8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4003ac:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4003ae:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  4003b2:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  4003b4:	b155      	cbz	r5, 4003cc <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4003b6:	4b0c      	ldr	r3, [pc, #48]	; (4003e8 <rtc_set_time_alarm+0x88>)
  4003b8:	fba3 2307 	umull	r2, r3, r3, r7
  4003bc:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4003be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4003c2:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4003c6:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  4003ca:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4003cc:	6902      	ldr	r2, [r0, #16]
  4003ce:	4b07      	ldr	r3, [pc, #28]	; (4003ec <rtc_set_time_alarm+0x8c>)
  4003d0:	4013      	ands	r3, r2
  4003d2:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  4003d4:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4003d6:	6902      	ldr	r2, [r0, #16]
  4003d8:	4b05      	ldr	r3, [pc, #20]	; (4003f0 <rtc_set_time_alarm+0x90>)
  4003da:	4313      	orrs	r3, r2
  4003dc:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  4003de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003e0:	f000 0004 	and.w	r0, r0, #4
  4003e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4003e6:	bf00      	nop
  4003e8:	cccccccd 	.word	0xcccccccd
  4003ec:	ff7f7f7f 	.word	0xff7f7f7f
  4003f0:	00808080 	.word	0x00808080

004003f4 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4003f4:	b4f0      	push	{r4, r5, r6, r7}
  4003f6:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4003f8:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4003fa:	68c4      	ldr	r4, [r0, #12]
  4003fc:	42a5      	cmp	r5, r4
  4003fe:	d003      	beq.n	400408 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400400:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400402:	68c4      	ldr	r4, [r0, #12]
  400404:	42ac      	cmp	r4, r5
  400406:	d1fb      	bne.n	400400 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400408:	b199      	cbz	r1, 400432 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40040a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40040e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400412:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400416:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40041a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40041e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400422:	f004 000f 	and.w	r0, r4, #15
  400426:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40042a:	2564      	movs	r5, #100	; 0x64
  40042c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400430:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400432:	b142      	cbz	r2, 400446 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400434:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400438:	0081      	lsls	r1, r0, #2
  40043a:	4408      	add	r0, r1
  40043c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400440:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400444:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400446:	b143      	cbz	r3, 40045a <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400448:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40044c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400450:	f3c4 6103 	ubfx	r1, r4, #24, #4
  400454:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400458:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40045a:	b116      	cbz	r6, 400462 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40045c:	f3c4 5442 	ubfx	r4, r4, #21, #3
  400460:	6034      	str	r4, [r6, #0]
	}
}
  400462:	bcf0      	pop	{r4, r5, r6, r7}
  400464:	4770      	bx	lr
	...

00400468 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400468:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40046a:	4d2a      	ldr	r5, [pc, #168]	; (400514 <rtc_set_date+0xac>)
  40046c:	fba5 4603 	umull	r4, r6, r5, r3
  400470:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400472:	9c03      	ldr	r4, [sp, #12]
  400474:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400476:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40047a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40047e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400482:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400486:	fba5 6402 	umull	r6, r4, r5, r2
  40048a:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40048c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400490:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400494:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400498:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40049c:	4b1e      	ldr	r3, [pc, #120]	; (400518 <rtc_set_date+0xb0>)
  40049e:	fba3 4301 	umull	r4, r3, r3, r1
  4004a2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4004a8:	4b1c      	ldr	r3, [pc, #112]	; (40051c <rtc_set_date+0xb4>)
  4004aa:	fba3 4301 	umull	r4, r3, r3, r1
  4004ae:	095b      	lsrs	r3, r3, #5
  4004b0:	fba5 6403 	umull	r6, r4, r5, r3
  4004b4:	08e4      	lsrs	r4, r4, #3
  4004b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4004ba:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004be:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4004c0:	fba5 4301 	umull	r4, r3, r5, r1
  4004c4:	08db      	lsrs	r3, r3, #3
  4004c6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4004ca:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4004d2:	fba5 1503 	umull	r1, r5, r5, r3
  4004d6:	08ed      	lsrs	r5, r5, #3
  4004d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4004dc:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004e0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4004e4:	6983      	ldr	r3, [r0, #24]
  4004e6:	f013 0f04 	tst.w	r3, #4
  4004ea:	d0fb      	beq.n	4004e4 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4004ec:	6803      	ldr	r3, [r0, #0]
  4004ee:	f043 0302 	orr.w	r3, r3, #2
  4004f2:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4004f4:	6983      	ldr	r3, [r0, #24]
  4004f6:	f013 0f01 	tst.w	r3, #1
  4004fa:	d0fb      	beq.n	4004f4 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4004fc:	2301      	movs	r3, #1
  4004fe:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400500:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400502:	6803      	ldr	r3, [r0, #0]
  400504:	f023 0302 	bic.w	r3, r3, #2
  400508:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40050a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40050c:	f000 0002 	and.w	r0, r0, #2
  400510:	bc70      	pop	{r4, r5, r6}
  400512:	4770      	bx	lr
  400514:	cccccccd 	.word	0xcccccccd
  400518:	10624dd3 	.word	0x10624dd3
  40051c:	51eb851f 	.word	0x51eb851f

00400520 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400520:	b430      	push	{r4, r5}
  400522:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400524:	460c      	mov	r4, r1
  400526:	b151      	cbz	r1, 40053e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400528:	4c12      	ldr	r4, [pc, #72]	; (400574 <rtc_set_date_alarm+0x54>)
  40052a:	fba4 1402 	umull	r1, r4, r4, r2
  40052e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400530:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400534:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400538:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40053a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40053e:	b15b      	cbz	r3, 400558 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400540:	4a0c      	ldr	r2, [pc, #48]	; (400574 <rtc_set_date_alarm+0x54>)
  400542:	fba2 3205 	umull	r3, r2, r2, r5
  400546:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400548:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40054c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  400550:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400552:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  400556:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  400558:	6942      	ldr	r2, [r0, #20]
  40055a:	4b07      	ldr	r3, [pc, #28]	; (400578 <rtc_set_date_alarm+0x58>)
  40055c:	4013      	ands	r3, r2
  40055e:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  400560:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  400562:	6942      	ldr	r2, [r0, #20]
  400564:	4b05      	ldr	r3, [pc, #20]	; (40057c <rtc_set_date_alarm+0x5c>)
  400566:	4313      	orrs	r3, r2
  400568:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  40056a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40056c:	f000 0008 	and.w	r0, r0, #8
  400570:	bc30      	pop	{r4, r5}
  400572:	4770      	bx	lr
  400574:	cccccccd 	.word	0xcccccccd
  400578:	7f7fffff 	.word	0x7f7fffff
  40057c:	80800000 	.word	0x80800000

00400580 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400580:	6980      	ldr	r0, [r0, #24]
}
  400582:	4770      	bx	lr

00400584 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400584:	61c1      	str	r1, [r0, #28]
  400586:	4770      	bx	lr

00400588 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_init+0x10>)
  40058a:	681b      	ldr	r3, [r3, #0]
  40058c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400590:	4319      	orrs	r1, r3
  400592:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400594:	2000      	movs	r0, #0
  400596:	4770      	bx	lr
  400598:	204009ec 	.word	0x204009ec

0040059c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40059c:	b941      	cbnz	r1, 4005b0 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40059e:	4a09      	ldr	r2, [pc, #36]	; (4005c4 <rtt_sel_source+0x28>)
  4005a0:	6813      	ldr	r3, [r2, #0]
  4005a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4005a6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4005a8:	6802      	ldr	r2, [r0, #0]
  4005aa:	4313      	orrs	r3, r2
  4005ac:	6003      	str	r3, [r0, #0]
  4005ae:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4005b0:	4a04      	ldr	r2, [pc, #16]	; (4005c4 <rtt_sel_source+0x28>)
  4005b2:	6813      	ldr	r3, [r2, #0]
  4005b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4005b8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4005ba:	6802      	ldr	r2, [r0, #0]
  4005bc:	4313      	orrs	r3, r2
  4005be:	6003      	str	r3, [r0, #0]
  4005c0:	4770      	bx	lr
  4005c2:	bf00      	nop
  4005c4:	204009ec 	.word	0x204009ec

004005c8 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4005c8:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4005ca:	4b03      	ldr	r3, [pc, #12]	; (4005d8 <rtt_enable_interrupt+0x10>)
  4005cc:	681b      	ldr	r3, [r3, #0]
  4005ce:	4319      	orrs	r1, r3
  4005d0:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4005d2:	6001      	str	r1, [r0, #0]
  4005d4:	4770      	bx	lr
  4005d6:	bf00      	nop
  4005d8:	204009ec 	.word	0x204009ec

004005dc <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4005dc:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4005de:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4005e2:	4b02      	ldr	r3, [pc, #8]	; (4005ec <rtt_disable_interrupt+0x10>)
  4005e4:	681b      	ldr	r3, [r3, #0]
  4005e6:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4005e8:	6001      	str	r1, [r0, #0]
  4005ea:	4770      	bx	lr
  4005ec:	204009ec 	.word	0x204009ec

004005f0 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4005f0:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4005f2:	6883      	ldr	r3, [r0, #8]
  4005f4:	429a      	cmp	r2, r3
  4005f6:	d003      	beq.n	400600 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4005f8:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4005fa:	6883      	ldr	r3, [r0, #8]
  4005fc:	4293      	cmp	r3, r2
  4005fe:	d1fb      	bne.n	4005f8 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400600:	4618      	mov	r0, r3
  400602:	4770      	bx	lr

00400604 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400604:	68c0      	ldr	r0, [r0, #12]
}
  400606:	4770      	bx	lr

00400608 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400608:	b570      	push	{r4, r5, r6, lr}
  40060a:	4606      	mov	r6, r0
  40060c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40060e:	6804      	ldr	r4, [r0, #0]
  400610:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400614:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400618:	4809      	ldr	r0, [pc, #36]	; (400640 <rtt_write_alarm_time+0x38>)
  40061a:	4b0a      	ldr	r3, [pc, #40]	; (400644 <rtt_write_alarm_time+0x3c>)
  40061c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40061e:	b92d      	cbnz	r5, 40062c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400620:	f04f 33ff 	mov.w	r3, #4294967295
  400624:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400626:	b924      	cbnz	r4, 400632 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400628:	2000      	movs	r0, #0
  40062a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40062c:	3d01      	subs	r5, #1
  40062e:	6075      	str	r5, [r6, #4]
  400630:	e7f9      	b.n	400626 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400632:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400636:	4802      	ldr	r0, [pc, #8]	; (400640 <rtt_write_alarm_time+0x38>)
  400638:	4b03      	ldr	r3, [pc, #12]	; (400648 <rtt_write_alarm_time+0x40>)
  40063a:	4798      	blx	r3
  40063c:	e7f4      	b.n	400628 <rtt_write_alarm_time+0x20>
  40063e:	bf00      	nop
  400640:	400e1830 	.word	0x400e1830
  400644:	004005dd 	.word	0x004005dd
  400648:	004005c9 	.word	0x004005c9

0040064c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40064c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40064e:	4b07      	ldr	r3, [pc, #28]	; (40066c <spi_enable_clock+0x20>)
  400650:	4298      	cmp	r0, r3
  400652:	d003      	beq.n	40065c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400654:	4b06      	ldr	r3, [pc, #24]	; (400670 <spi_enable_clock+0x24>)
  400656:	4298      	cmp	r0, r3
  400658:	d004      	beq.n	400664 <spi_enable_clock+0x18>
  40065a:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40065c:	2015      	movs	r0, #21
  40065e:	4b05      	ldr	r3, [pc, #20]	; (400674 <spi_enable_clock+0x28>)
  400660:	4798      	blx	r3
  400662:	bd08      	pop	{r3, pc}
  400664:	202a      	movs	r0, #42	; 0x2a
  400666:	4b03      	ldr	r3, [pc, #12]	; (400674 <spi_enable_clock+0x28>)
  400668:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40066a:	e7f6      	b.n	40065a <spi_enable_clock+0xe>
  40066c:	40008000 	.word	0x40008000
  400670:	40058000 	.word	0x40058000
  400674:	00402f05 	.word	0x00402f05

00400678 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400678:	6843      	ldr	r3, [r0, #4]
  40067a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40067e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400680:	6843      	ldr	r3, [r0, #4]
  400682:	0409      	lsls	r1, r1, #16
  400684:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400688:	4319      	orrs	r1, r3
  40068a:	6041      	str	r1, [r0, #4]
  40068c:	4770      	bx	lr

0040068e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40068e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400690:	f643 2499 	movw	r4, #15001	; 0x3a99
  400694:	6905      	ldr	r5, [r0, #16]
  400696:	f015 0f02 	tst.w	r5, #2
  40069a:	d103      	bne.n	4006a4 <spi_write+0x16>
		if (!timeout--) {
  40069c:	3c01      	subs	r4, #1
  40069e:	d1f9      	bne.n	400694 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4006a0:	2001      	movs	r0, #1
  4006a2:	e00c      	b.n	4006be <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4006a4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4006a6:	f014 0f02 	tst.w	r4, #2
  4006aa:	d006      	beq.n	4006ba <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4006ac:	0412      	lsls	r2, r2, #16
  4006ae:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4006b2:	4311      	orrs	r1, r2
		if (uc_last) {
  4006b4:	b10b      	cbz	r3, 4006ba <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4006b6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4006ba:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4006bc:	2000      	movs	r0, #0
}
  4006be:	bc30      	pop	{r4, r5}
  4006c0:	4770      	bx	lr

004006c2 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4006c2:	b932      	cbnz	r2, 4006d2 <spi_set_clock_polarity+0x10>
  4006c4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4006c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4006ca:	f023 0301 	bic.w	r3, r3, #1
  4006ce:	6303      	str	r3, [r0, #48]	; 0x30
  4006d0:	4770      	bx	lr
  4006d2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4006d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4006d8:	f043 0301 	orr.w	r3, r3, #1
  4006dc:	6303      	str	r3, [r0, #48]	; 0x30
  4006de:	4770      	bx	lr

004006e0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4006e0:	b932      	cbnz	r2, 4006f0 <spi_set_clock_phase+0x10>
  4006e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4006e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4006e8:	f023 0302 	bic.w	r3, r3, #2
  4006ec:	6303      	str	r3, [r0, #48]	; 0x30
  4006ee:	4770      	bx	lr
  4006f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4006f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4006f6:	f043 0302 	orr.w	r3, r3, #2
  4006fa:	6303      	str	r3, [r0, #48]	; 0x30
  4006fc:	4770      	bx	lr

004006fe <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4006fe:	2a04      	cmp	r2, #4
  400700:	d003      	beq.n	40070a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400702:	b16a      	cbz	r2, 400720 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400704:	2a08      	cmp	r2, #8
  400706:	d016      	beq.n	400736 <spi_configure_cs_behavior+0x38>
  400708:	4770      	bx	lr
  40070a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40070e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400710:	f023 0308 	bic.w	r3, r3, #8
  400714:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400716:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400718:	f043 0304 	orr.w	r3, r3, #4
  40071c:	6303      	str	r3, [r0, #48]	; 0x30
  40071e:	4770      	bx	lr
  400720:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400724:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400726:	f023 0308 	bic.w	r3, r3, #8
  40072a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40072c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40072e:	f023 0304 	bic.w	r3, r3, #4
  400732:	6303      	str	r3, [r0, #48]	; 0x30
  400734:	4770      	bx	lr
  400736:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40073a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40073c:	f043 0308 	orr.w	r3, r3, #8
  400740:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400742:	e7e1      	b.n	400708 <spi_configure_cs_behavior+0xa>

00400744 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400748:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40074a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40074e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400750:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400752:	431a      	orrs	r2, r3
  400754:	630a      	str	r2, [r1, #48]	; 0x30
  400756:	4770      	bx	lr

00400758 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400758:	1e43      	subs	r3, r0, #1
  40075a:	4419      	add	r1, r3
  40075c:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400760:	1e43      	subs	r3, r0, #1
  400762:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400764:	bf94      	ite	ls
  400766:	b200      	sxthls	r0, r0
		return -1;
  400768:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40076c:	4770      	bx	lr

0040076e <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40076e:	b17a      	cbz	r2, 400790 <spi_set_baudrate_div+0x22>
{
  400770:	b410      	push	{r4}
  400772:	4614      	mov	r4, r2
  400774:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400778:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40077a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40077e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400780:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400782:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400786:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400788:	2000      	movs	r0, #0
}
  40078a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40078e:	4770      	bx	lr
        return -1;
  400790:	f04f 30ff 	mov.w	r0, #4294967295
  400794:	4770      	bx	lr

00400796 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400796:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400798:	0189      	lsls	r1, r1, #6
  40079a:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40079c:	2402      	movs	r4, #2
  40079e:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4007a0:	f04f 31ff 	mov.w	r1, #4294967295
  4007a4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4007a6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4007a8:	605a      	str	r2, [r3, #4]
}
  4007aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007ae:	4770      	bx	lr

004007b0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4007b0:	0189      	lsls	r1, r1, #6
  4007b2:	2305      	movs	r3, #5
  4007b4:	5043      	str	r3, [r0, r1]
  4007b6:	4770      	bx	lr

004007b8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4007b8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4007bc:	61ca      	str	r2, [r1, #28]
  4007be:	4770      	bx	lr

004007c0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007c0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4007c4:	624a      	str	r2, [r1, #36]	; 0x24
  4007c6:	4770      	bx	lr

004007c8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4007cc:	6a08      	ldr	r0, [r1, #32]
}
  4007ce:	4770      	bx	lr

004007d0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4007d0:	b4f0      	push	{r4, r5, r6, r7}
  4007d2:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4007d4:	2402      	movs	r4, #2
  4007d6:	9401      	str	r4, [sp, #4]
  4007d8:	2408      	movs	r4, #8
  4007da:	9402      	str	r4, [sp, #8]
  4007dc:	2420      	movs	r4, #32
  4007de:	9403      	str	r4, [sp, #12]
  4007e0:	2480      	movs	r4, #128	; 0x80
  4007e2:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4007e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4007e6:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4007e8:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4007ea:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4007ee:	d814      	bhi.n	40081a <tc_find_mck_divisor+0x4a>
  4007f0:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4007f2:	42a0      	cmp	r0, r4
  4007f4:	d217      	bcs.n	400826 <tc_find_mck_divisor+0x56>
  4007f6:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4007f8:	af01      	add	r7, sp, #4
  4007fa:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4007fe:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400802:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400804:	4284      	cmp	r4, r0
  400806:	d30a      	bcc.n	40081e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400808:	4286      	cmp	r6, r0
  40080a:	d90d      	bls.n	400828 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40080c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40080e:	2d05      	cmp	r5, #5
  400810:	d1f3      	bne.n	4007fa <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400812:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400814:	b006      	add	sp, #24
  400816:	bcf0      	pop	{r4, r5, r6, r7}
  400818:	4770      	bx	lr
			return 0;
  40081a:	2000      	movs	r0, #0
  40081c:	e7fa      	b.n	400814 <tc_find_mck_divisor+0x44>
  40081e:	2000      	movs	r0, #0
  400820:	e7f8      	b.n	400814 <tc_find_mck_divisor+0x44>
	return 1;
  400822:	2001      	movs	r0, #1
  400824:	e7f6      	b.n	400814 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400826:	2500      	movs	r5, #0
	if (p_uldiv) {
  400828:	b12a      	cbz	r2, 400836 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40082a:	a906      	add	r1, sp, #24
  40082c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400830:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400834:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400836:	2b00      	cmp	r3, #0
  400838:	d0f3      	beq.n	400822 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40083a:	601d      	str	r5, [r3, #0]
	return 1;
  40083c:	2001      	movs	r0, #1
  40083e:	e7e9      	b.n	400814 <tc_find_mck_divisor+0x44>

00400840 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400840:	f100 0308 	add.w	r3, r0, #8
  400844:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400846:	f04f 32ff 	mov.w	r2, #4294967295
  40084a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40084c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40084e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400850:	2300      	movs	r3, #0
  400852:	6003      	str	r3, [r0, #0]
  400854:	4770      	bx	lr

00400856 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400856:	2300      	movs	r3, #0
  400858:	6103      	str	r3, [r0, #16]
  40085a:	4770      	bx	lr

0040085c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40085c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40085e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400860:	689a      	ldr	r2, [r3, #8]
  400862:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400864:	689a      	ldr	r2, [r3, #8]
  400866:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400868:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40086a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40086c:	6803      	ldr	r3, [r0, #0]
  40086e:	3301      	adds	r3, #1
  400870:	6003      	str	r3, [r0, #0]
  400872:	4770      	bx	lr

00400874 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400874:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400876:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400878:	f1b5 3fff 	cmp.w	r5, #4294967295
  40087c:	d002      	beq.n	400884 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40087e:	f100 0208 	add.w	r2, r0, #8
  400882:	e002      	b.n	40088a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400884:	6902      	ldr	r2, [r0, #16]
  400886:	e004      	b.n	400892 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400888:	461a      	mov	r2, r3
  40088a:	6853      	ldr	r3, [r2, #4]
  40088c:	681c      	ldr	r4, [r3, #0]
  40088e:	42a5      	cmp	r5, r4
  400890:	d2fa      	bcs.n	400888 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400892:	6853      	ldr	r3, [r2, #4]
  400894:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400896:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400898:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40089a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40089c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40089e:	6803      	ldr	r3, [r0, #0]
  4008a0:	3301      	adds	r3, #1
  4008a2:	6003      	str	r3, [r0, #0]
}
  4008a4:	bc30      	pop	{r4, r5}
  4008a6:	4770      	bx	lr

004008a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4008a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4008aa:	6842      	ldr	r2, [r0, #4]
  4008ac:	6881      	ldr	r1, [r0, #8]
  4008ae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4008b0:	6882      	ldr	r2, [r0, #8]
  4008b2:	6841      	ldr	r1, [r0, #4]
  4008b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4008b6:	685a      	ldr	r2, [r3, #4]
  4008b8:	4290      	cmp	r0, r2
  4008ba:	d005      	beq.n	4008c8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4008bc:	2200      	movs	r2, #0
  4008be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4008c0:	6818      	ldr	r0, [r3, #0]
  4008c2:	3801      	subs	r0, #1
  4008c4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4008c6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4008c8:	6882      	ldr	r2, [r0, #8]
  4008ca:	605a      	str	r2, [r3, #4]
  4008cc:	e7f6      	b.n	4008bc <uxListRemove+0x14>
	...

004008d0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4008d0:	4b0d      	ldr	r3, [pc, #52]	; (400908 <prvTaskExitError+0x38>)
  4008d2:	681b      	ldr	r3, [r3, #0]
  4008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008d8:	d00a      	beq.n	4008f0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4008da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008de:	b672      	cpsid	i
  4008e0:	f383 8811 	msr	BASEPRI, r3
  4008e4:	f3bf 8f6f 	isb	sy
  4008e8:	f3bf 8f4f 	dsb	sy
  4008ec:	b662      	cpsie	i
  4008ee:	e7fe      	b.n	4008ee <prvTaskExitError+0x1e>
  4008f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008f4:	b672      	cpsid	i
  4008f6:	f383 8811 	msr	BASEPRI, r3
  4008fa:	f3bf 8f6f 	isb	sy
  4008fe:	f3bf 8f4f 	dsb	sy
  400902:	b662      	cpsie	i
  400904:	e7fe      	b.n	400904 <prvTaskExitError+0x34>
  400906:	bf00      	nop
  400908:	2040000c 	.word	0x2040000c

0040090c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40090c:	4806      	ldr	r0, [pc, #24]	; (400928 <prvPortStartFirstTask+0x1c>)
  40090e:	6800      	ldr	r0, [r0, #0]
  400910:	6800      	ldr	r0, [r0, #0]
  400912:	f380 8808 	msr	MSP, r0
  400916:	b662      	cpsie	i
  400918:	b661      	cpsie	f
  40091a:	f3bf 8f4f 	dsb	sy
  40091e:	f3bf 8f6f 	isb	sy
  400922:	df00      	svc	0
  400924:	bf00      	nop
  400926:	0000      	.short	0x0000
  400928:	e000ed08 	.word	0xe000ed08

0040092c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40092c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40093c <vPortEnableVFP+0x10>
  400930:	6801      	ldr	r1, [r0, #0]
  400932:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400936:	6001      	str	r1, [r0, #0]
  400938:	4770      	bx	lr
  40093a:	0000      	.short	0x0000
  40093c:	e000ed88 	.word	0xe000ed88

00400940 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400944:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400948:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40094c:	4b05      	ldr	r3, [pc, #20]	; (400964 <pxPortInitialiseStack+0x24>)
  40094e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400952:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400956:	f06f 0302 	mvn.w	r3, #2
  40095a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40095e:	3844      	subs	r0, #68	; 0x44
  400960:	4770      	bx	lr
  400962:	bf00      	nop
  400964:	004008d1 	.word	0x004008d1

00400968 <vPortEnterCritical>:
  400968:	f04f 0380 	mov.w	r3, #128	; 0x80
  40096c:	b672      	cpsid	i
  40096e:	f383 8811 	msr	BASEPRI, r3
  400972:	f3bf 8f6f 	isb	sy
  400976:	f3bf 8f4f 	dsb	sy
  40097a:	b662      	cpsie	i
	uxCriticalNesting++;
  40097c:	4a0b      	ldr	r2, [pc, #44]	; (4009ac <vPortEnterCritical+0x44>)
  40097e:	6813      	ldr	r3, [r2, #0]
  400980:	3301      	adds	r3, #1
  400982:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400984:	2b01      	cmp	r3, #1
  400986:	d10f      	bne.n	4009a8 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400988:	4b09      	ldr	r3, [pc, #36]	; (4009b0 <vPortEnterCritical+0x48>)
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400990:	d00a      	beq.n	4009a8 <vPortEnterCritical+0x40>
  400992:	f04f 0380 	mov.w	r3, #128	; 0x80
  400996:	b672      	cpsid	i
  400998:	f383 8811 	msr	BASEPRI, r3
  40099c:	f3bf 8f6f 	isb	sy
  4009a0:	f3bf 8f4f 	dsb	sy
  4009a4:	b662      	cpsie	i
  4009a6:	e7fe      	b.n	4009a6 <vPortEnterCritical+0x3e>
  4009a8:	4770      	bx	lr
  4009aa:	bf00      	nop
  4009ac:	2040000c 	.word	0x2040000c
  4009b0:	e000ed04 	.word	0xe000ed04

004009b4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4009b4:	4b0a      	ldr	r3, [pc, #40]	; (4009e0 <vPortExitCritical+0x2c>)
  4009b6:	681b      	ldr	r3, [r3, #0]
  4009b8:	b953      	cbnz	r3, 4009d0 <vPortExitCritical+0x1c>
  4009ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009be:	b672      	cpsid	i
  4009c0:	f383 8811 	msr	BASEPRI, r3
  4009c4:	f3bf 8f6f 	isb	sy
  4009c8:	f3bf 8f4f 	dsb	sy
  4009cc:	b662      	cpsie	i
  4009ce:	e7fe      	b.n	4009ce <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4009d0:	3b01      	subs	r3, #1
  4009d2:	4a03      	ldr	r2, [pc, #12]	; (4009e0 <vPortExitCritical+0x2c>)
  4009d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4009d6:	b90b      	cbnz	r3, 4009dc <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4009d8:	f383 8811 	msr	BASEPRI, r3
  4009dc:	4770      	bx	lr
  4009de:	bf00      	nop
  4009e0:	2040000c 	.word	0x2040000c

004009e4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4009e4:	4a03      	ldr	r2, [pc, #12]	; (4009f4 <vPortSetupTimerInterrupt+0x10>)
  4009e6:	4b04      	ldr	r3, [pc, #16]	; (4009f8 <vPortSetupTimerInterrupt+0x14>)
  4009e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4009ea:	2207      	movs	r2, #7
  4009ec:	3b04      	subs	r3, #4
  4009ee:	601a      	str	r2, [r3, #0]
  4009f0:	4770      	bx	lr
  4009f2:	bf00      	nop
  4009f4:	000927bf 	.word	0x000927bf
  4009f8:	e000e014 	.word	0xe000e014

004009fc <xPortStartScheduler>:
{
  4009fc:	b500      	push	{lr}
  4009fe:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400a00:	4b25      	ldr	r3, [pc, #148]	; (400a98 <xPortStartScheduler+0x9c>)
  400a02:	781a      	ldrb	r2, [r3, #0]
  400a04:	b2d2      	uxtb	r2, r2
  400a06:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400a08:	22ff      	movs	r2, #255	; 0xff
  400a0a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400a0c:	781b      	ldrb	r3, [r3, #0]
  400a0e:	b2db      	uxtb	r3, r3
  400a10:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400a14:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400a1c:	4a1f      	ldr	r2, [pc, #124]	; (400a9c <xPortStartScheduler+0xa0>)
  400a1e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400a20:	2207      	movs	r2, #7
  400a22:	4b1f      	ldr	r3, [pc, #124]	; (400aa0 <xPortStartScheduler+0xa4>)
  400a24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400a26:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400a2a:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a2e:	d010      	beq.n	400a52 <xPortStartScheduler+0x56>
  400a30:	2206      	movs	r2, #6
  400a32:	e000      	b.n	400a36 <xPortStartScheduler+0x3a>
  400a34:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400a36:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400a3a:	005b      	lsls	r3, r3, #1
  400a3c:	b2db      	uxtb	r3, r3
  400a3e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400a42:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400a46:	1e51      	subs	r1, r2, #1
  400a48:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a4c:	d1f2      	bne.n	400a34 <xPortStartScheduler+0x38>
  400a4e:	4b14      	ldr	r3, [pc, #80]	; (400aa0 <xPortStartScheduler+0xa4>)
  400a50:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400a52:	4a13      	ldr	r2, [pc, #76]	; (400aa0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400a54:	6813      	ldr	r3, [r2, #0]
  400a56:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400a5c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400a5e:	9b01      	ldr	r3, [sp, #4]
  400a60:	b2db      	uxtb	r3, r3
  400a62:	4a0d      	ldr	r2, [pc, #52]	; (400a98 <xPortStartScheduler+0x9c>)
  400a64:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400a66:	4b0f      	ldr	r3, [pc, #60]	; (400aa4 <xPortStartScheduler+0xa8>)
  400a68:	681a      	ldr	r2, [r3, #0]
  400a6a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400a6e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400a70:	681a      	ldr	r2, [r3, #0]
  400a72:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400a76:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400a78:	4b0b      	ldr	r3, [pc, #44]	; (400aa8 <xPortStartScheduler+0xac>)
  400a7a:	4798      	blx	r3
	uxCriticalNesting = 0;
  400a7c:	2200      	movs	r2, #0
  400a7e:	4b0b      	ldr	r3, [pc, #44]	; (400aac <xPortStartScheduler+0xb0>)
  400a80:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400a82:	4b0b      	ldr	r3, [pc, #44]	; (400ab0 <xPortStartScheduler+0xb4>)
  400a84:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400a86:	4a0b      	ldr	r2, [pc, #44]	; (400ab4 <xPortStartScheduler+0xb8>)
  400a88:	6813      	ldr	r3, [r2, #0]
  400a8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400a8e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400a90:	4b09      	ldr	r3, [pc, #36]	; (400ab8 <xPortStartScheduler+0xbc>)
  400a92:	4798      	blx	r3
	prvTaskExitError();
  400a94:	4b09      	ldr	r3, [pc, #36]	; (400abc <xPortStartScheduler+0xc0>)
  400a96:	4798      	blx	r3
  400a98:	e000e400 	.word	0xe000e400
  400a9c:	204009f0 	.word	0x204009f0
  400aa0:	204009f4 	.word	0x204009f4
  400aa4:	e000ed20 	.word	0xe000ed20
  400aa8:	004009e5 	.word	0x004009e5
  400aac:	2040000c 	.word	0x2040000c
  400ab0:	0040092d 	.word	0x0040092d
  400ab4:	e000ef34 	.word	0xe000ef34
  400ab8:	0040090d 	.word	0x0040090d
  400abc:	004008d1 	.word	0x004008d1

00400ac0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400ac0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400ac4:	2b0f      	cmp	r3, #15
  400ac6:	d911      	bls.n	400aec <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400ac8:	4a12      	ldr	r2, [pc, #72]	; (400b14 <vPortValidateInterruptPriority+0x54>)
  400aca:	5c9b      	ldrb	r3, [r3, r2]
  400acc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400ace:	4a12      	ldr	r2, [pc, #72]	; (400b18 <vPortValidateInterruptPriority+0x58>)
  400ad0:	7812      	ldrb	r2, [r2, #0]
  400ad2:	429a      	cmp	r2, r3
  400ad4:	d90a      	bls.n	400aec <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  400ad6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ada:	b672      	cpsid	i
  400adc:	f383 8811 	msr	BASEPRI, r3
  400ae0:	f3bf 8f6f 	isb	sy
  400ae4:	f3bf 8f4f 	dsb	sy
  400ae8:	b662      	cpsie	i
  400aea:	e7fe      	b.n	400aea <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400aec:	4b0b      	ldr	r3, [pc, #44]	; (400b1c <vPortValidateInterruptPriority+0x5c>)
  400aee:	681b      	ldr	r3, [r3, #0]
  400af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400af4:	4a0a      	ldr	r2, [pc, #40]	; (400b20 <vPortValidateInterruptPriority+0x60>)
  400af6:	6812      	ldr	r2, [r2, #0]
  400af8:	4293      	cmp	r3, r2
  400afa:	d90a      	bls.n	400b12 <vPortValidateInterruptPriority+0x52>
  400afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b00:	b672      	cpsid	i
  400b02:	f383 8811 	msr	BASEPRI, r3
  400b06:	f3bf 8f6f 	isb	sy
  400b0a:	f3bf 8f4f 	dsb	sy
  400b0e:	b662      	cpsie	i
  400b10:	e7fe      	b.n	400b10 <vPortValidateInterruptPriority+0x50>
  400b12:	4770      	bx	lr
  400b14:	e000e3f0 	.word	0xe000e3f0
  400b18:	204009f0 	.word	0x204009f0
  400b1c:	e000ed0c 	.word	0xe000ed0c
  400b20:	204009f4 	.word	0x204009f4

00400b24 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400b24:	b538      	push	{r3, r4, r5, lr}
  400b26:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400b28:	f010 0f07 	tst.w	r0, #7
  400b2c:	d002      	beq.n	400b34 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400b2e:	f020 0407 	bic.w	r4, r0, #7
  400b32:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400b34:	4b11      	ldr	r3, [pc, #68]	; (400b7c <pvPortMalloc+0x58>)
  400b36:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400b38:	4b11      	ldr	r3, [pc, #68]	; (400b80 <pvPortMalloc+0x5c>)
  400b3a:	681b      	ldr	r3, [r3, #0]
  400b3c:	b193      	cbz	r3, 400b64 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400b3e:	4b11      	ldr	r3, [pc, #68]	; (400b84 <pvPortMalloc+0x60>)
  400b40:	681b      	ldr	r3, [r3, #0]
  400b42:	441c      	add	r4, r3
  400b44:	42a3      	cmp	r3, r4
  400b46:	d213      	bcs.n	400b70 <pvPortMalloc+0x4c>
  400b48:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400b4c:	4294      	cmp	r4, r2
  400b4e:	d80f      	bhi.n	400b70 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400b50:	4a0b      	ldr	r2, [pc, #44]	; (400b80 <pvPortMalloc+0x5c>)
  400b52:	6815      	ldr	r5, [r2, #0]
  400b54:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400b56:	4b0b      	ldr	r3, [pc, #44]	; (400b84 <pvPortMalloc+0x60>)
  400b58:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400b5a:	4b0b      	ldr	r3, [pc, #44]	; (400b88 <pvPortMalloc+0x64>)
  400b5c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400b5e:	b14d      	cbz	r5, 400b74 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400b60:	4628      	mov	r0, r5
  400b62:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400b64:	4b09      	ldr	r3, [pc, #36]	; (400b8c <pvPortMalloc+0x68>)
  400b66:	f023 0307 	bic.w	r3, r3, #7
  400b6a:	4a05      	ldr	r2, [pc, #20]	; (400b80 <pvPortMalloc+0x5c>)
  400b6c:	6013      	str	r3, [r2, #0]
  400b6e:	e7e6      	b.n	400b3e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400b70:	4b05      	ldr	r3, [pc, #20]	; (400b88 <pvPortMalloc+0x64>)
  400b72:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400b74:	4b06      	ldr	r3, [pc, #24]	; (400b90 <pvPortMalloc+0x6c>)
  400b76:	4798      	blx	r3
  400b78:	2500      	movs	r5, #0
	return pvReturn;
  400b7a:	e7f1      	b.n	400b60 <pvPortMalloc+0x3c>
  400b7c:	00401801 	.word	0x00401801
  400b80:	204009f8 	.word	0x204009f8
  400b84:	2040c1fc 	.word	0x2040c1fc
  400b88:	00401969 	.word	0x00401969
  400b8c:	20400a04 	.word	0x20400a04
  400b90:	004035ab 	.word	0x004035ab

00400b94 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400b94:	b150      	cbz	r0, 400bac <vPortFree+0x18>
  400b96:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b9a:	b672      	cpsid	i
  400b9c:	f383 8811 	msr	BASEPRI, r3
  400ba0:	f3bf 8f6f 	isb	sy
  400ba4:	f3bf 8f4f 	dsb	sy
  400ba8:	b662      	cpsie	i
  400baa:	e7fe      	b.n	400baa <vPortFree+0x16>
  400bac:	4770      	bx	lr
	...

00400bb0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400bb0:	b538      	push	{r3, r4, r5, lr}
  400bb2:	4604      	mov	r4, r0
  400bb4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400bb6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400bb8:	b95a      	cbnz	r2, 400bd2 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400bba:	6803      	ldr	r3, [r0, #0]
  400bbc:	2b00      	cmp	r3, #0
  400bbe:	d12e      	bne.n	400c1e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400bc0:	6840      	ldr	r0, [r0, #4]
  400bc2:	4b1b      	ldr	r3, [pc, #108]	; (400c30 <prvCopyDataToQueue+0x80>)
  400bc4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400bc6:	2300      	movs	r3, #0
  400bc8:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400bcc:	3301      	adds	r3, #1
  400bce:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400bd0:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400bd2:	b96d      	cbnz	r5, 400bf0 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400bd4:	6880      	ldr	r0, [r0, #8]
  400bd6:	4b17      	ldr	r3, [pc, #92]	; (400c34 <prvCopyDataToQueue+0x84>)
  400bd8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400bda:	68a3      	ldr	r3, [r4, #8]
  400bdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400bde:	4413      	add	r3, r2
  400be0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400be2:	6862      	ldr	r2, [r4, #4]
  400be4:	4293      	cmp	r3, r2
  400be6:	d31c      	bcc.n	400c22 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400be8:	6823      	ldr	r3, [r4, #0]
  400bea:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400bec:	2000      	movs	r0, #0
  400bee:	e7ec      	b.n	400bca <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400bf0:	68c0      	ldr	r0, [r0, #12]
  400bf2:	4b10      	ldr	r3, [pc, #64]	; (400c34 <prvCopyDataToQueue+0x84>)
  400bf4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400bf8:	425b      	negs	r3, r3
  400bfa:	68e2      	ldr	r2, [r4, #12]
  400bfc:	441a      	add	r2, r3
  400bfe:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400c00:	6821      	ldr	r1, [r4, #0]
  400c02:	428a      	cmp	r2, r1
  400c04:	d202      	bcs.n	400c0c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400c06:	6862      	ldr	r2, [r4, #4]
  400c08:	4413      	add	r3, r2
  400c0a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400c0c:	2d02      	cmp	r5, #2
  400c0e:	d10a      	bne.n	400c26 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c12:	b153      	cbz	r3, 400c2a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c16:	3b01      	subs	r3, #1
  400c18:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400c1a:	2000      	movs	r0, #0
  400c1c:	e7d5      	b.n	400bca <prvCopyDataToQueue+0x1a>
  400c1e:	2000      	movs	r0, #0
  400c20:	e7d3      	b.n	400bca <prvCopyDataToQueue+0x1a>
  400c22:	2000      	movs	r0, #0
  400c24:	e7d1      	b.n	400bca <prvCopyDataToQueue+0x1a>
  400c26:	2000      	movs	r0, #0
  400c28:	e7cf      	b.n	400bca <prvCopyDataToQueue+0x1a>
  400c2a:	2000      	movs	r0, #0
  400c2c:	e7cd      	b.n	400bca <prvCopyDataToQueue+0x1a>
  400c2e:	bf00      	nop
  400c30:	00401e51 	.word	0x00401e51
  400c34:	00403c49 	.word	0x00403c49

00400c38 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400c38:	b530      	push	{r4, r5, lr}
  400c3a:	b083      	sub	sp, #12
  400c3c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400c3e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400c40:	b174      	cbz	r4, 400c60 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400c42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c46:	429a      	cmp	r2, r3
  400c48:	d315      	bcc.n	400c76 <prvNotifyQueueSetContainer+0x3e>
  400c4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c4e:	b672      	cpsid	i
  400c50:	f383 8811 	msr	BASEPRI, r3
  400c54:	f3bf 8f6f 	isb	sy
  400c58:	f3bf 8f4f 	dsb	sy
  400c5c:	b662      	cpsie	i
  400c5e:	e7fe      	b.n	400c5e <prvNotifyQueueSetContainer+0x26>
  400c60:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c64:	b672      	cpsid	i
  400c66:	f383 8811 	msr	BASEPRI, r3
  400c6a:	f3bf 8f6f 	isb	sy
  400c6e:	f3bf 8f4f 	dsb	sy
  400c72:	b662      	cpsie	i
  400c74:	e7fe      	b.n	400c74 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400c76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c78:	4293      	cmp	r3, r2
  400c7a:	d803      	bhi.n	400c84 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400c7c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400c7e:	4628      	mov	r0, r5
  400c80:	b003      	add	sp, #12
  400c82:	bd30      	pop	{r4, r5, pc}
  400c84:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400c86:	a901      	add	r1, sp, #4
  400c88:	4620      	mov	r0, r4
  400c8a:	4b0b      	ldr	r3, [pc, #44]	; (400cb8 <prvNotifyQueueSetContainer+0x80>)
  400c8c:	4798      	blx	r3
  400c8e:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400c90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400c92:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c96:	d10a      	bne.n	400cae <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c9a:	2b00      	cmp	r3, #0
  400c9c:	d0ef      	beq.n	400c7e <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400c9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ca2:	4b06      	ldr	r3, [pc, #24]	; (400cbc <prvNotifyQueueSetContainer+0x84>)
  400ca4:	4798      	blx	r3
  400ca6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400ca8:	bf18      	it	ne
  400caa:	2501      	movne	r5, #1
  400cac:	e7e7      	b.n	400c7e <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  400cae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400cb0:	3301      	adds	r3, #1
  400cb2:	64a3      	str	r3, [r4, #72]	; 0x48
  400cb4:	e7e3      	b.n	400c7e <prvNotifyQueueSetContainer+0x46>
  400cb6:	bf00      	nop
  400cb8:	00400bb1 	.word	0x00400bb1
  400cbc:	00401c25 	.word	0x00401c25

00400cc0 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400cc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400cc2:	b172      	cbz	r2, 400ce2 <prvCopyDataFromQueue+0x22>
{
  400cc4:	b510      	push	{r4, lr}
  400cc6:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400cc8:	68c4      	ldr	r4, [r0, #12]
  400cca:	4414      	add	r4, r2
  400ccc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400cce:	6840      	ldr	r0, [r0, #4]
  400cd0:	4284      	cmp	r4, r0
  400cd2:	d301      	bcc.n	400cd8 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400cd4:	6818      	ldr	r0, [r3, #0]
  400cd6:	60d8      	str	r0, [r3, #12]
  400cd8:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400cda:	68d9      	ldr	r1, [r3, #12]
  400cdc:	4b01      	ldr	r3, [pc, #4]	; (400ce4 <prvCopyDataFromQueue+0x24>)
  400cde:	4798      	blx	r3
  400ce0:	bd10      	pop	{r4, pc}
  400ce2:	4770      	bx	lr
  400ce4:	00403c49 	.word	0x00403c49

00400ce8 <prvUnlockQueue>:
{
  400ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400cec:	4b22      	ldr	r3, [pc, #136]	; (400d78 <prvUnlockQueue+0x90>)
  400cee:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400cf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400cf2:	2b00      	cmp	r3, #0
  400cf4:	dd1b      	ble.n	400d2e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400cf6:	4d21      	ldr	r5, [pc, #132]	; (400d7c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400cf8:	4f21      	ldr	r7, [pc, #132]	; (400d80 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cfa:	4e22      	ldr	r6, [pc, #136]	; (400d84 <prvUnlockQueue+0x9c>)
  400cfc:	e00b      	b.n	400d16 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d00:	b1ab      	cbz	r3, 400d2e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d02:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d06:	47b0      	blx	r6
  400d08:	b978      	cbnz	r0, 400d2a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400d0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d0c:	3b01      	subs	r3, #1
  400d0e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400d10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d12:	2b00      	cmp	r3, #0
  400d14:	dd0b      	ble.n	400d2e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400d16:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400d18:	2b00      	cmp	r3, #0
  400d1a:	d0f0      	beq.n	400cfe <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400d1c:	2100      	movs	r1, #0
  400d1e:	4620      	mov	r0, r4
  400d20:	47a8      	blx	r5
  400d22:	2801      	cmp	r0, #1
  400d24:	d1f1      	bne.n	400d0a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400d26:	47b8      	blx	r7
  400d28:	e7ef      	b.n	400d0a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400d2a:	47b8      	blx	r7
  400d2c:	e7ed      	b.n	400d0a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400d2e:	f04f 33ff 	mov.w	r3, #4294967295
  400d32:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400d34:	4b14      	ldr	r3, [pc, #80]	; (400d88 <prvUnlockQueue+0xa0>)
  400d36:	4798      	blx	r3
	taskENTER_CRITICAL();
  400d38:	4b0f      	ldr	r3, [pc, #60]	; (400d78 <prvUnlockQueue+0x90>)
  400d3a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400d3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d3e:	2b00      	cmp	r3, #0
  400d40:	dd14      	ble.n	400d6c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d42:	6923      	ldr	r3, [r4, #16]
  400d44:	b193      	cbz	r3, 400d6c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d46:	f104 0610 	add.w	r6, r4, #16
  400d4a:	4d0e      	ldr	r5, [pc, #56]	; (400d84 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400d4c:	4f0c      	ldr	r7, [pc, #48]	; (400d80 <prvUnlockQueue+0x98>)
  400d4e:	e007      	b.n	400d60 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400d50:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d52:	3b01      	subs	r3, #1
  400d54:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d58:	2b00      	cmp	r3, #0
  400d5a:	dd07      	ble.n	400d6c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d5c:	6923      	ldr	r3, [r4, #16]
  400d5e:	b12b      	cbz	r3, 400d6c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d60:	4630      	mov	r0, r6
  400d62:	47a8      	blx	r5
  400d64:	2800      	cmp	r0, #0
  400d66:	d0f3      	beq.n	400d50 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400d68:	47b8      	blx	r7
  400d6a:	e7f1      	b.n	400d50 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400d6c:	f04f 33ff 	mov.w	r3, #4294967295
  400d70:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400d72:	4b05      	ldr	r3, [pc, #20]	; (400d88 <prvUnlockQueue+0xa0>)
  400d74:	4798      	blx	r3
  400d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d78:	00400969 	.word	0x00400969
  400d7c:	00400c39 	.word	0x00400c39
  400d80:	00401d81 	.word	0x00401d81
  400d84:	00401c25 	.word	0x00401c25
  400d88:	004009b5 	.word	0x004009b5

00400d8c <xQueueGenericReset>:
{
  400d8c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400d8e:	b308      	cbz	r0, 400dd4 <xQueueGenericReset+0x48>
  400d90:	4604      	mov	r4, r0
  400d92:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400d94:	4b1d      	ldr	r3, [pc, #116]	; (400e0c <xQueueGenericReset+0x80>)
  400d96:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400d98:	6822      	ldr	r2, [r4, #0]
  400d9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d9e:	fb03 f301 	mul.w	r3, r3, r1
  400da2:	18d0      	adds	r0, r2, r3
  400da4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400da6:	2000      	movs	r0, #0
  400da8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400daa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400dac:	1a5b      	subs	r3, r3, r1
  400dae:	4413      	add	r3, r2
  400db0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400db2:	f04f 33ff 	mov.w	r3, #4294967295
  400db6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400db8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400dba:	b9fd      	cbnz	r5, 400dfc <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400dbc:	6923      	ldr	r3, [r4, #16]
  400dbe:	b12b      	cbz	r3, 400dcc <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400dc0:	f104 0010 	add.w	r0, r4, #16
  400dc4:	4b12      	ldr	r3, [pc, #72]	; (400e10 <xQueueGenericReset+0x84>)
  400dc6:	4798      	blx	r3
  400dc8:	2801      	cmp	r0, #1
  400dca:	d00e      	beq.n	400dea <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  400dcc:	4b11      	ldr	r3, [pc, #68]	; (400e14 <xQueueGenericReset+0x88>)
  400dce:	4798      	blx	r3
}
  400dd0:	2001      	movs	r0, #1
  400dd2:	bd38      	pop	{r3, r4, r5, pc}
  400dd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dd8:	b672      	cpsid	i
  400dda:	f383 8811 	msr	BASEPRI, r3
  400dde:	f3bf 8f6f 	isb	sy
  400de2:	f3bf 8f4f 	dsb	sy
  400de6:	b662      	cpsie	i
  400de8:	e7fe      	b.n	400de8 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  400dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400dee:	4b0a      	ldr	r3, [pc, #40]	; (400e18 <xQueueGenericReset+0x8c>)
  400df0:	601a      	str	r2, [r3, #0]
  400df2:	f3bf 8f4f 	dsb	sy
  400df6:	f3bf 8f6f 	isb	sy
  400dfa:	e7e7      	b.n	400dcc <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400dfc:	f104 0010 	add.w	r0, r4, #16
  400e00:	4d06      	ldr	r5, [pc, #24]	; (400e1c <xQueueGenericReset+0x90>)
  400e02:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400e04:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e08:	47a8      	blx	r5
  400e0a:	e7df      	b.n	400dcc <xQueueGenericReset+0x40>
  400e0c:	00400969 	.word	0x00400969
  400e10:	00401c25 	.word	0x00401c25
  400e14:	004009b5 	.word	0x004009b5
  400e18:	e000ed04 	.word	0xe000ed04
  400e1c:	00400841 	.word	0x00400841

00400e20 <xQueueGenericCreate>:
{
  400e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400e22:	b950      	cbnz	r0, 400e3a <xQueueGenericCreate+0x1a>
  400e24:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e28:	b672      	cpsid	i
  400e2a:	f383 8811 	msr	BASEPRI, r3
  400e2e:	f3bf 8f6f 	isb	sy
  400e32:	f3bf 8f4f 	dsb	sy
  400e36:	b662      	cpsie	i
  400e38:	e7fe      	b.n	400e38 <xQueueGenericCreate+0x18>
  400e3a:	4606      	mov	r6, r0
  400e3c:	4617      	mov	r7, r2
  400e3e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400e40:	b189      	cbz	r1, 400e66 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400e42:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400e46:	3059      	adds	r0, #89	; 0x59
  400e48:	4b12      	ldr	r3, [pc, #72]	; (400e94 <xQueueGenericCreate+0x74>)
  400e4a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400e4c:	4604      	mov	r4, r0
  400e4e:	b9e8      	cbnz	r0, 400e8c <xQueueGenericCreate+0x6c>
  400e50:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e54:	b672      	cpsid	i
  400e56:	f383 8811 	msr	BASEPRI, r3
  400e5a:	f3bf 8f6f 	isb	sy
  400e5e:	f3bf 8f4f 	dsb	sy
  400e62:	b662      	cpsie	i
  400e64:	e7fe      	b.n	400e64 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400e66:	2058      	movs	r0, #88	; 0x58
  400e68:	4b0a      	ldr	r3, [pc, #40]	; (400e94 <xQueueGenericCreate+0x74>)
  400e6a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400e6c:	4604      	mov	r4, r0
  400e6e:	2800      	cmp	r0, #0
  400e70:	d0ee      	beq.n	400e50 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400e72:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400e74:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400e76:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400e78:	2101      	movs	r1, #1
  400e7a:	4620      	mov	r0, r4
  400e7c:	4b06      	ldr	r3, [pc, #24]	; (400e98 <xQueueGenericCreate+0x78>)
  400e7e:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400e80:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400e84:	2300      	movs	r3, #0
  400e86:	6563      	str	r3, [r4, #84]	; 0x54
}
  400e88:	4620      	mov	r0, r4
  400e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400e8c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400e90:	6003      	str	r3, [r0, #0]
  400e92:	e7ef      	b.n	400e74 <xQueueGenericCreate+0x54>
  400e94:	00400b25 	.word	0x00400b25
  400e98:	00400d8d 	.word	0x00400d8d

00400e9c <xQueueGenericSend>:
{
  400e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ea0:	b085      	sub	sp, #20
  400ea2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400ea4:	b1b8      	cbz	r0, 400ed6 <xQueueGenericSend+0x3a>
  400ea6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400ea8:	b301      	cbz	r1, 400eec <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400eaa:	2b02      	cmp	r3, #2
  400eac:	d02c      	beq.n	400f08 <xQueueGenericSend+0x6c>
  400eae:	461d      	mov	r5, r3
  400eb0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400eb2:	4b66      	ldr	r3, [pc, #408]	; (40104c <xQueueGenericSend+0x1b0>)
  400eb4:	4798      	blx	r3
  400eb6:	2800      	cmp	r0, #0
  400eb8:	d134      	bne.n	400f24 <xQueueGenericSend+0x88>
  400eba:	9b01      	ldr	r3, [sp, #4]
  400ebc:	2b00      	cmp	r3, #0
  400ebe:	d038      	beq.n	400f32 <xQueueGenericSend+0x96>
  400ec0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ec4:	b672      	cpsid	i
  400ec6:	f383 8811 	msr	BASEPRI, r3
  400eca:	f3bf 8f6f 	isb	sy
  400ece:	f3bf 8f4f 	dsb	sy
  400ed2:	b662      	cpsie	i
  400ed4:	e7fe      	b.n	400ed4 <xQueueGenericSend+0x38>
  400ed6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eda:	b672      	cpsid	i
  400edc:	f383 8811 	msr	BASEPRI, r3
  400ee0:	f3bf 8f6f 	isb	sy
  400ee4:	f3bf 8f4f 	dsb	sy
  400ee8:	b662      	cpsie	i
  400eea:	e7fe      	b.n	400eea <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400eec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400eee:	2a00      	cmp	r2, #0
  400ef0:	d0db      	beq.n	400eaa <xQueueGenericSend+0xe>
  400ef2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef6:	b672      	cpsid	i
  400ef8:	f383 8811 	msr	BASEPRI, r3
  400efc:	f3bf 8f6f 	isb	sy
  400f00:	f3bf 8f4f 	dsb	sy
  400f04:	b662      	cpsie	i
  400f06:	e7fe      	b.n	400f06 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400f08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400f0a:	2a01      	cmp	r2, #1
  400f0c:	d0cf      	beq.n	400eae <xQueueGenericSend+0x12>
  400f0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f12:	b672      	cpsid	i
  400f14:	f383 8811 	msr	BASEPRI, r3
  400f18:	f3bf 8f6f 	isb	sy
  400f1c:	f3bf 8f4f 	dsb	sy
  400f20:	b662      	cpsie	i
  400f22:	e7fe      	b.n	400f22 <xQueueGenericSend+0x86>
  400f24:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400f26:	4e4a      	ldr	r6, [pc, #296]	; (401050 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400f28:	f8df a150 	ldr.w	sl, [pc, #336]	; 40107c <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  400f2c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40105c <xQueueGenericSend+0x1c0>
  400f30:	e042      	b.n	400fb8 <xQueueGenericSend+0x11c>
  400f32:	2700      	movs	r7, #0
  400f34:	e7f7      	b.n	400f26 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400f36:	462a      	mov	r2, r5
  400f38:	4641      	mov	r1, r8
  400f3a:	4620      	mov	r0, r4
  400f3c:	4b45      	ldr	r3, [pc, #276]	; (401054 <xQueueGenericSend+0x1b8>)
  400f3e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f42:	b19b      	cbz	r3, 400f6c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400f44:	4629      	mov	r1, r5
  400f46:	4620      	mov	r0, r4
  400f48:	4b43      	ldr	r3, [pc, #268]	; (401058 <xQueueGenericSend+0x1bc>)
  400f4a:	4798      	blx	r3
  400f4c:	2801      	cmp	r0, #1
  400f4e:	d107      	bne.n	400f60 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f54:	4b41      	ldr	r3, [pc, #260]	; (40105c <xQueueGenericSend+0x1c0>)
  400f56:	601a      	str	r2, [r3, #0]
  400f58:	f3bf 8f4f 	dsb	sy
  400f5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400f60:	4b3f      	ldr	r3, [pc, #252]	; (401060 <xQueueGenericSend+0x1c4>)
  400f62:	4798      	blx	r3
				return pdPASS;
  400f64:	2001      	movs	r0, #1
}
  400f66:	b005      	add	sp, #20
  400f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f6e:	b173      	cbz	r3, 400f8e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400f70:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f74:	4b3b      	ldr	r3, [pc, #236]	; (401064 <xQueueGenericSend+0x1c8>)
  400f76:	4798      	blx	r3
  400f78:	2801      	cmp	r0, #1
  400f7a:	d1f1      	bne.n	400f60 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f80:	4b36      	ldr	r3, [pc, #216]	; (40105c <xQueueGenericSend+0x1c0>)
  400f82:	601a      	str	r2, [r3, #0]
  400f84:	f3bf 8f4f 	dsb	sy
  400f88:	f3bf 8f6f 	isb	sy
  400f8c:	e7e8      	b.n	400f60 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400f8e:	2800      	cmp	r0, #0
  400f90:	d0e6      	beq.n	400f60 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f96:	4b31      	ldr	r3, [pc, #196]	; (40105c <xQueueGenericSend+0x1c0>)
  400f98:	601a      	str	r2, [r3, #0]
  400f9a:	f3bf 8f4f 	dsb	sy
  400f9e:	f3bf 8f6f 	isb	sy
  400fa2:	e7dd      	b.n	400f60 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400fa4:	4b2e      	ldr	r3, [pc, #184]	; (401060 <xQueueGenericSend+0x1c4>)
  400fa6:	4798      	blx	r3
					return errQUEUE_FULL;
  400fa8:	2000      	movs	r0, #0
  400faa:	e7dc      	b.n	400f66 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400fac:	4620      	mov	r0, r4
  400fae:	4b2e      	ldr	r3, [pc, #184]	; (401068 <xQueueGenericSend+0x1cc>)
  400fb0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400fb2:	4b2e      	ldr	r3, [pc, #184]	; (40106c <xQueueGenericSend+0x1d0>)
  400fb4:	4798      	blx	r3
  400fb6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400fb8:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400fba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400fbe:	429a      	cmp	r2, r3
  400fc0:	d3b9      	bcc.n	400f36 <xQueueGenericSend+0x9a>
  400fc2:	2d02      	cmp	r5, #2
  400fc4:	d0b7      	beq.n	400f36 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400fc6:	9b01      	ldr	r3, [sp, #4]
  400fc8:	2b00      	cmp	r3, #0
  400fca:	d0eb      	beq.n	400fa4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400fcc:	b90f      	cbnz	r7, 400fd2 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  400fce:	a802      	add	r0, sp, #8
  400fd0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400fd2:	4b23      	ldr	r3, [pc, #140]	; (401060 <xQueueGenericSend+0x1c4>)
  400fd4:	4798      	blx	r3
		vTaskSuspendAll();
  400fd6:	4b26      	ldr	r3, [pc, #152]	; (401070 <xQueueGenericSend+0x1d4>)
  400fd8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400fda:	47b0      	blx	r6
  400fdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400fde:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fe2:	d101      	bne.n	400fe8 <xQueueGenericSend+0x14c>
  400fe4:	2300      	movs	r3, #0
  400fe6:	6463      	str	r3, [r4, #68]	; 0x44
  400fe8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fea:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fee:	d101      	bne.n	400ff4 <xQueueGenericSend+0x158>
  400ff0:	2300      	movs	r3, #0
  400ff2:	64a3      	str	r3, [r4, #72]	; 0x48
  400ff4:	4b1a      	ldr	r3, [pc, #104]	; (401060 <xQueueGenericSend+0x1c4>)
  400ff6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400ff8:	a901      	add	r1, sp, #4
  400ffa:	a802      	add	r0, sp, #8
  400ffc:	4b1d      	ldr	r3, [pc, #116]	; (401074 <xQueueGenericSend+0x1d8>)
  400ffe:	4798      	blx	r3
  401000:	b9e0      	cbnz	r0, 40103c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401002:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401004:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401008:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40100a:	4b15      	ldr	r3, [pc, #84]	; (401060 <xQueueGenericSend+0x1c4>)
  40100c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40100e:	45bb      	cmp	fp, r7
  401010:	d1cc      	bne.n	400fac <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401012:	9901      	ldr	r1, [sp, #4]
  401014:	f104 0010 	add.w	r0, r4, #16
  401018:	4b17      	ldr	r3, [pc, #92]	; (401078 <xQueueGenericSend+0x1dc>)
  40101a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40101c:	4620      	mov	r0, r4
  40101e:	4b12      	ldr	r3, [pc, #72]	; (401068 <xQueueGenericSend+0x1cc>)
  401020:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401022:	4b12      	ldr	r3, [pc, #72]	; (40106c <xQueueGenericSend+0x1d0>)
  401024:	4798      	blx	r3
  401026:	2800      	cmp	r0, #0
  401028:	d1c5      	bne.n	400fb6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40102a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40102e:	f8c9 3000 	str.w	r3, [r9]
  401032:	f3bf 8f4f 	dsb	sy
  401036:	f3bf 8f6f 	isb	sy
  40103a:	e7bc      	b.n	400fb6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  40103c:	4620      	mov	r0, r4
  40103e:	4b0a      	ldr	r3, [pc, #40]	; (401068 <xQueueGenericSend+0x1cc>)
  401040:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401042:	4b0a      	ldr	r3, [pc, #40]	; (40106c <xQueueGenericSend+0x1d0>)
  401044:	4798      	blx	r3
			return errQUEUE_FULL;
  401046:	2000      	movs	r0, #0
  401048:	e78d      	b.n	400f66 <xQueueGenericSend+0xca>
  40104a:	bf00      	nop
  40104c:	00401d8d 	.word	0x00401d8d
  401050:	00400969 	.word	0x00400969
  401054:	00400bb1 	.word	0x00400bb1
  401058:	00400c39 	.word	0x00400c39
  40105c:	e000ed04 	.word	0xe000ed04
  401060:	004009b5 	.word	0x004009b5
  401064:	00401c25 	.word	0x00401c25
  401068:	00400ce9 	.word	0x00400ce9
  40106c:	00401969 	.word	0x00401969
  401070:	00401801 	.word	0x00401801
  401074:	00401ced 	.word	0x00401ced
  401078:	00401b21 	.word	0x00401b21
  40107c:	00401cbd 	.word	0x00401cbd

00401080 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401080:	2800      	cmp	r0, #0
  401082:	d036      	beq.n	4010f2 <xQueueGenericSendFromISR+0x72>
{
  401084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401088:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40108a:	2900      	cmp	r1, #0
  40108c:	d03c      	beq.n	401108 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40108e:	2b02      	cmp	r3, #2
  401090:	d048      	beq.n	401124 <xQueueGenericSendFromISR+0xa4>
  401092:	461e      	mov	r6, r3
  401094:	4615      	mov	r5, r2
  401096:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401098:	4b35      	ldr	r3, [pc, #212]	; (401170 <xQueueGenericSendFromISR+0xf0>)
  40109a:	4798      	blx	r3
	__asm volatile
  40109c:	f3ef 8711 	mrs	r7, BASEPRI
  4010a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010a4:	b672      	cpsid	i
  4010a6:	f383 8811 	msr	BASEPRI, r3
  4010aa:	f3bf 8f6f 	isb	sy
  4010ae:	f3bf 8f4f 	dsb	sy
  4010b2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4010b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4010b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010b8:	429a      	cmp	r2, r3
  4010ba:	d301      	bcc.n	4010c0 <xQueueGenericSendFromISR+0x40>
  4010bc:	2e02      	cmp	r6, #2
  4010be:	d14f      	bne.n	401160 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4010c0:	4632      	mov	r2, r6
  4010c2:	4641      	mov	r1, r8
  4010c4:	4620      	mov	r0, r4
  4010c6:	4b2b      	ldr	r3, [pc, #172]	; (401174 <xQueueGenericSendFromISR+0xf4>)
  4010c8:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4010ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010d0:	d141      	bne.n	401156 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4010d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4010d4:	2b00      	cmp	r3, #0
  4010d6:	d033      	beq.n	401140 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4010d8:	4631      	mov	r1, r6
  4010da:	4620      	mov	r0, r4
  4010dc:	4b26      	ldr	r3, [pc, #152]	; (401178 <xQueueGenericSendFromISR+0xf8>)
  4010de:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4010e0:	2d00      	cmp	r5, #0
  4010e2:	d03f      	beq.n	401164 <xQueueGenericSendFromISR+0xe4>
  4010e4:	2801      	cmp	r0, #1
  4010e6:	d13d      	bne.n	401164 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4010e8:	6028      	str	r0, [r5, #0]
	__asm volatile
  4010ea:	f387 8811 	msr	BASEPRI, r7
}
  4010ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4010f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010f6:	b672      	cpsid	i
  4010f8:	f383 8811 	msr	BASEPRI, r3
  4010fc:	f3bf 8f6f 	isb	sy
  401100:	f3bf 8f4f 	dsb	sy
  401104:	b662      	cpsie	i
  401106:	e7fe      	b.n	401106 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401108:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40110a:	2800      	cmp	r0, #0
  40110c:	d0bf      	beq.n	40108e <xQueueGenericSendFromISR+0xe>
  40110e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401112:	b672      	cpsid	i
  401114:	f383 8811 	msr	BASEPRI, r3
  401118:	f3bf 8f6f 	isb	sy
  40111c:	f3bf 8f4f 	dsb	sy
  401120:	b662      	cpsie	i
  401122:	e7fe      	b.n	401122 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401124:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401126:	2801      	cmp	r0, #1
  401128:	d0b3      	beq.n	401092 <xQueueGenericSendFromISR+0x12>
  40112a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112e:	b672      	cpsid	i
  401130:	f383 8811 	msr	BASEPRI, r3
  401134:	f3bf 8f6f 	isb	sy
  401138:	f3bf 8f4f 	dsb	sy
  40113c:	b662      	cpsie	i
  40113e:	e7fe      	b.n	40113e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401140:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401142:	b18b      	cbz	r3, 401168 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401144:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401148:	4b0c      	ldr	r3, [pc, #48]	; (40117c <xQueueGenericSendFromISR+0xfc>)
  40114a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40114c:	b175      	cbz	r5, 40116c <xQueueGenericSendFromISR+0xec>
  40114e:	b168      	cbz	r0, 40116c <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401150:	2001      	movs	r0, #1
  401152:	6028      	str	r0, [r5, #0]
  401154:	e7c9      	b.n	4010ea <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401156:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401158:	3301      	adds	r3, #1
  40115a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40115c:	2001      	movs	r0, #1
  40115e:	e7c4      	b.n	4010ea <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401160:	2000      	movs	r0, #0
  401162:	e7c2      	b.n	4010ea <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401164:	2001      	movs	r0, #1
  401166:	e7c0      	b.n	4010ea <xQueueGenericSendFromISR+0x6a>
  401168:	2001      	movs	r0, #1
  40116a:	e7be      	b.n	4010ea <xQueueGenericSendFromISR+0x6a>
  40116c:	2001      	movs	r0, #1
  40116e:	e7bc      	b.n	4010ea <xQueueGenericSendFromISR+0x6a>
  401170:	00400ac1 	.word	0x00400ac1
  401174:	00400bb1 	.word	0x00400bb1
  401178:	00400c39 	.word	0x00400c39
  40117c:	00401c25 	.word	0x00401c25

00401180 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401180:	b170      	cbz	r0, 4011a0 <xQueueGiveFromISR+0x20>
{
  401182:	b570      	push	{r4, r5, r6, lr}
  401184:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401186:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401188:	b1ab      	cbz	r3, 4011b6 <xQueueGiveFromISR+0x36>
  40118a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40118e:	b672      	cpsid	i
  401190:	f383 8811 	msr	BASEPRI, r3
  401194:	f3bf 8f6f 	isb	sy
  401198:	f3bf 8f4f 	dsb	sy
  40119c:	b662      	cpsie	i
  40119e:	e7fe      	b.n	40119e <xQueueGiveFromISR+0x1e>
  4011a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011a4:	b672      	cpsid	i
  4011a6:	f383 8811 	msr	BASEPRI, r3
  4011aa:	f3bf 8f6f 	isb	sy
  4011ae:	f3bf 8f4f 	dsb	sy
  4011b2:	b662      	cpsie	i
  4011b4:	e7fe      	b.n	4011b4 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4011b6:	6803      	ldr	r3, [r0, #0]
  4011b8:	b333      	cbz	r3, 401208 <xQueueGiveFromISR+0x88>
  4011ba:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4011bc:	4b25      	ldr	r3, [pc, #148]	; (401254 <xQueueGiveFromISR+0xd4>)
  4011be:	4798      	blx	r3
	__asm volatile
  4011c0:	f3ef 8611 	mrs	r6, BASEPRI
  4011c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011c8:	b672      	cpsid	i
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	f3bf 8f6f 	isb	sy
  4011d2:	f3bf 8f4f 	dsb	sy
  4011d6:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4011d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4011da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4011dc:	429a      	cmp	r2, r3
  4011de:	d231      	bcs.n	401244 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4011e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011e2:	3301      	adds	r3, #1
  4011e4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4011e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011ec:	d125      	bne.n	40123a <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4011ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4011f0:	b1c3      	cbz	r3, 401224 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4011f2:	2100      	movs	r1, #0
  4011f4:	4620      	mov	r0, r4
  4011f6:	4b18      	ldr	r3, [pc, #96]	; (401258 <xQueueGiveFromISR+0xd8>)
  4011f8:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4011fa:	b32d      	cbz	r5, 401248 <xQueueGiveFromISR+0xc8>
  4011fc:	2801      	cmp	r0, #1
  4011fe:	d123      	bne.n	401248 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401200:	6028      	str	r0, [r5, #0]
	__asm volatile
  401202:	f386 8811 	msr	BASEPRI, r6
}
  401206:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401208:	6843      	ldr	r3, [r0, #4]
  40120a:	2b00      	cmp	r3, #0
  40120c:	d0d5      	beq.n	4011ba <xQueueGiveFromISR+0x3a>
	__asm volatile
  40120e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401212:	b672      	cpsid	i
  401214:	f383 8811 	msr	BASEPRI, r3
  401218:	f3bf 8f6f 	isb	sy
  40121c:	f3bf 8f4f 	dsb	sy
  401220:	b662      	cpsie	i
  401222:	e7fe      	b.n	401222 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401224:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401226:	b18b      	cbz	r3, 40124c <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401228:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40122c:	4b0b      	ldr	r3, [pc, #44]	; (40125c <xQueueGiveFromISR+0xdc>)
  40122e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401230:	b175      	cbz	r5, 401250 <xQueueGiveFromISR+0xd0>
  401232:	b168      	cbz	r0, 401250 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401234:	2001      	movs	r0, #1
  401236:	6028      	str	r0, [r5, #0]
  401238:	e7e3      	b.n	401202 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  40123a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40123c:	3301      	adds	r3, #1
  40123e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401240:	2001      	movs	r0, #1
  401242:	e7de      	b.n	401202 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401244:	2000      	movs	r0, #0
  401246:	e7dc      	b.n	401202 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401248:	2001      	movs	r0, #1
  40124a:	e7da      	b.n	401202 <xQueueGiveFromISR+0x82>
  40124c:	2001      	movs	r0, #1
  40124e:	e7d8      	b.n	401202 <xQueueGiveFromISR+0x82>
  401250:	2001      	movs	r0, #1
  401252:	e7d6      	b.n	401202 <xQueueGiveFromISR+0x82>
  401254:	00400ac1 	.word	0x00400ac1
  401258:	00400c39 	.word	0x00400c39
  40125c:	00401c25 	.word	0x00401c25

00401260 <xQueueGenericReceive>:
{
  401260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401264:	b084      	sub	sp, #16
  401266:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401268:	b198      	cbz	r0, 401292 <xQueueGenericReceive+0x32>
  40126a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40126c:	b1e1      	cbz	r1, 4012a8 <xQueueGenericReceive+0x48>
  40126e:	4698      	mov	r8, r3
  401270:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401272:	4b61      	ldr	r3, [pc, #388]	; (4013f8 <xQueueGenericReceive+0x198>)
  401274:	4798      	blx	r3
  401276:	bb28      	cbnz	r0, 4012c4 <xQueueGenericReceive+0x64>
  401278:	9b01      	ldr	r3, [sp, #4]
  40127a:	b353      	cbz	r3, 4012d2 <xQueueGenericReceive+0x72>
  40127c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401280:	b672      	cpsid	i
  401282:	f383 8811 	msr	BASEPRI, r3
  401286:	f3bf 8f6f 	isb	sy
  40128a:	f3bf 8f4f 	dsb	sy
  40128e:	b662      	cpsie	i
  401290:	e7fe      	b.n	401290 <xQueueGenericReceive+0x30>
  401292:	f04f 0380 	mov.w	r3, #128	; 0x80
  401296:	b672      	cpsid	i
  401298:	f383 8811 	msr	BASEPRI, r3
  40129c:	f3bf 8f6f 	isb	sy
  4012a0:	f3bf 8f4f 	dsb	sy
  4012a4:	b662      	cpsie	i
  4012a6:	e7fe      	b.n	4012a6 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4012a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4012aa:	2a00      	cmp	r2, #0
  4012ac:	d0df      	beq.n	40126e <xQueueGenericReceive+0xe>
  4012ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012b2:	b672      	cpsid	i
  4012b4:	f383 8811 	msr	BASEPRI, r3
  4012b8:	f3bf 8f6f 	isb	sy
  4012bc:	f3bf 8f4f 	dsb	sy
  4012c0:	b662      	cpsie	i
  4012c2:	e7fe      	b.n	4012c2 <xQueueGenericReceive+0x62>
  4012c4:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4012c6:	4d4d      	ldr	r5, [pc, #308]	; (4013fc <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  4012c8:	f8df a160 	ldr.w	sl, [pc, #352]	; 40142c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4012cc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 40140c <xQueueGenericReceive+0x1ac>
  4012d0:	e04b      	b.n	40136a <xQueueGenericReceive+0x10a>
  4012d2:	2600      	movs	r6, #0
  4012d4:	e7f7      	b.n	4012c6 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4012d6:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4012d8:	4639      	mov	r1, r7
  4012da:	4620      	mov	r0, r4
  4012dc:	4b48      	ldr	r3, [pc, #288]	; (401400 <xQueueGenericReceive+0x1a0>)
  4012de:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4012e0:	f1b8 0f00 	cmp.w	r8, #0
  4012e4:	d11d      	bne.n	401322 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4012e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4012e8:	3b01      	subs	r3, #1
  4012ea:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4012ec:	6823      	ldr	r3, [r4, #0]
  4012ee:	b913      	cbnz	r3, 4012f6 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4012f0:	4b44      	ldr	r3, [pc, #272]	; (401404 <xQueueGenericReceive+0x1a4>)
  4012f2:	4798      	blx	r3
  4012f4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4012f6:	6923      	ldr	r3, [r4, #16]
  4012f8:	b16b      	cbz	r3, 401316 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4012fa:	f104 0010 	add.w	r0, r4, #16
  4012fe:	4b42      	ldr	r3, [pc, #264]	; (401408 <xQueueGenericReceive+0x1a8>)
  401300:	4798      	blx	r3
  401302:	2801      	cmp	r0, #1
  401304:	d107      	bne.n	401316 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40130a:	4b40      	ldr	r3, [pc, #256]	; (40140c <xQueueGenericReceive+0x1ac>)
  40130c:	601a      	str	r2, [r3, #0]
  40130e:	f3bf 8f4f 	dsb	sy
  401312:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401316:	4b3e      	ldr	r3, [pc, #248]	; (401410 <xQueueGenericReceive+0x1b0>)
  401318:	4798      	blx	r3
				return pdPASS;
  40131a:	2001      	movs	r0, #1
}
  40131c:	b004      	add	sp, #16
  40131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401322:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401324:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401326:	2b00      	cmp	r3, #0
  401328:	d0f5      	beq.n	401316 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40132a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40132e:	4b36      	ldr	r3, [pc, #216]	; (401408 <xQueueGenericReceive+0x1a8>)
  401330:	4798      	blx	r3
  401332:	2800      	cmp	r0, #0
  401334:	d0ef      	beq.n	401316 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40133a:	4b34      	ldr	r3, [pc, #208]	; (40140c <xQueueGenericReceive+0x1ac>)
  40133c:	601a      	str	r2, [r3, #0]
  40133e:	f3bf 8f4f 	dsb	sy
  401342:	f3bf 8f6f 	isb	sy
  401346:	e7e6      	b.n	401316 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401348:	4b31      	ldr	r3, [pc, #196]	; (401410 <xQueueGenericReceive+0x1b0>)
  40134a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40134c:	2000      	movs	r0, #0
  40134e:	e7e5      	b.n	40131c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401350:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401352:	6860      	ldr	r0, [r4, #4]
  401354:	4b2f      	ldr	r3, [pc, #188]	; (401414 <xQueueGenericReceive+0x1b4>)
  401356:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401358:	4b2d      	ldr	r3, [pc, #180]	; (401410 <xQueueGenericReceive+0x1b0>)
  40135a:	4798      	blx	r3
  40135c:	e030      	b.n	4013c0 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40135e:	4620      	mov	r0, r4
  401360:	4b2d      	ldr	r3, [pc, #180]	; (401418 <xQueueGenericReceive+0x1b8>)
  401362:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401364:	4b2d      	ldr	r3, [pc, #180]	; (40141c <xQueueGenericReceive+0x1bc>)
  401366:	4798      	blx	r3
  401368:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  40136a:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40136c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40136e:	2b00      	cmp	r3, #0
  401370:	d1b1      	bne.n	4012d6 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401372:	9b01      	ldr	r3, [sp, #4]
  401374:	2b00      	cmp	r3, #0
  401376:	d0e7      	beq.n	401348 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401378:	b90e      	cbnz	r6, 40137e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40137a:	a802      	add	r0, sp, #8
  40137c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40137e:	4b24      	ldr	r3, [pc, #144]	; (401410 <xQueueGenericReceive+0x1b0>)
  401380:	4798      	blx	r3
		vTaskSuspendAll();
  401382:	4b27      	ldr	r3, [pc, #156]	; (401420 <xQueueGenericReceive+0x1c0>)
  401384:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401386:	47a8      	blx	r5
  401388:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40138a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40138e:	d101      	bne.n	401394 <xQueueGenericReceive+0x134>
  401390:	2300      	movs	r3, #0
  401392:	6463      	str	r3, [r4, #68]	; 0x44
  401394:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401396:	f1b3 3fff 	cmp.w	r3, #4294967295
  40139a:	d101      	bne.n	4013a0 <xQueueGenericReceive+0x140>
  40139c:	2300      	movs	r3, #0
  40139e:	64a3      	str	r3, [r4, #72]	; 0x48
  4013a0:	4b1b      	ldr	r3, [pc, #108]	; (401410 <xQueueGenericReceive+0x1b0>)
  4013a2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4013a4:	a901      	add	r1, sp, #4
  4013a6:	a802      	add	r0, sp, #8
  4013a8:	4b1e      	ldr	r3, [pc, #120]	; (401424 <xQueueGenericReceive+0x1c4>)
  4013aa:	4798      	blx	r3
  4013ac:	b9e8      	cbnz	r0, 4013ea <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4013ae:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4013b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4013b2:	4b17      	ldr	r3, [pc, #92]	; (401410 <xQueueGenericReceive+0x1b0>)
  4013b4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4013b6:	2e00      	cmp	r6, #0
  4013b8:	d1d1      	bne.n	40135e <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013ba:	6823      	ldr	r3, [r4, #0]
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d0c7      	beq.n	401350 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4013c0:	9901      	ldr	r1, [sp, #4]
  4013c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013c6:	4b18      	ldr	r3, [pc, #96]	; (401428 <xQueueGenericReceive+0x1c8>)
  4013c8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4013ca:	4620      	mov	r0, r4
  4013cc:	4b12      	ldr	r3, [pc, #72]	; (401418 <xQueueGenericReceive+0x1b8>)
  4013ce:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4013d0:	4b12      	ldr	r3, [pc, #72]	; (40141c <xQueueGenericReceive+0x1bc>)
  4013d2:	4798      	blx	r3
  4013d4:	2800      	cmp	r0, #0
  4013d6:	d1c7      	bne.n	401368 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4013d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4013dc:	f8c9 3000 	str.w	r3, [r9]
  4013e0:	f3bf 8f4f 	dsb	sy
  4013e4:	f3bf 8f6f 	isb	sy
  4013e8:	e7be      	b.n	401368 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4013ea:	4620      	mov	r0, r4
  4013ec:	4b0a      	ldr	r3, [pc, #40]	; (401418 <xQueueGenericReceive+0x1b8>)
  4013ee:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4013f0:	4b0a      	ldr	r3, [pc, #40]	; (40141c <xQueueGenericReceive+0x1bc>)
  4013f2:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4013f4:	2000      	movs	r0, #0
  4013f6:	e791      	b.n	40131c <xQueueGenericReceive+0xbc>
  4013f8:	00401d8d 	.word	0x00401d8d
  4013fc:	00400969 	.word	0x00400969
  401400:	00400cc1 	.word	0x00400cc1
  401404:	00401f0d 	.word	0x00401f0d
  401408:	00401c25 	.word	0x00401c25
  40140c:	e000ed04 	.word	0xe000ed04
  401410:	004009b5 	.word	0x004009b5
  401414:	00401dad 	.word	0x00401dad
  401418:	00400ce9 	.word	0x00400ce9
  40141c:	00401969 	.word	0x00401969
  401420:	00401801 	.word	0x00401801
  401424:	00401ced 	.word	0x00401ced
  401428:	00401b21 	.word	0x00401b21
  40142c:	00401cbd 	.word	0x00401cbd

00401430 <vQueueAddToRegistry>:
	{
  401430:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401432:	4b0b      	ldr	r3, [pc, #44]	; (401460 <vQueueAddToRegistry+0x30>)
  401434:	681b      	ldr	r3, [r3, #0]
  401436:	b153      	cbz	r3, 40144e <vQueueAddToRegistry+0x1e>
  401438:	2301      	movs	r3, #1
  40143a:	4c09      	ldr	r4, [pc, #36]	; (401460 <vQueueAddToRegistry+0x30>)
  40143c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401440:	b132      	cbz	r2, 401450 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401442:	3301      	adds	r3, #1
  401444:	2b08      	cmp	r3, #8
  401446:	d1f9      	bne.n	40143c <vQueueAddToRegistry+0xc>
	}
  401448:	f85d 4b04 	ldr.w	r4, [sp], #4
  40144c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40144e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401450:	4a03      	ldr	r2, [pc, #12]	; (401460 <vQueueAddToRegistry+0x30>)
  401452:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401456:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40145a:	6058      	str	r0, [r3, #4]
				break;
  40145c:	e7f4      	b.n	401448 <vQueueAddToRegistry+0x18>
  40145e:	bf00      	nop
  401460:	2040c670 	.word	0x2040c670

00401464 <vQueueWaitForMessageRestricted>:
	{
  401464:	b570      	push	{r4, r5, r6, lr}
  401466:	4604      	mov	r4, r0
  401468:	460d      	mov	r5, r1
  40146a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40146c:	4b0f      	ldr	r3, [pc, #60]	; (4014ac <vQueueWaitForMessageRestricted+0x48>)
  40146e:	4798      	blx	r3
  401470:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401472:	f1b3 3fff 	cmp.w	r3, #4294967295
  401476:	d00b      	beq.n	401490 <vQueueWaitForMessageRestricted+0x2c>
  401478:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40147a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40147e:	d00a      	beq.n	401496 <vQueueWaitForMessageRestricted+0x32>
  401480:	4b0b      	ldr	r3, [pc, #44]	; (4014b0 <vQueueWaitForMessageRestricted+0x4c>)
  401482:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401486:	b14b      	cbz	r3, 40149c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401488:	4620      	mov	r0, r4
  40148a:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <vQueueWaitForMessageRestricted+0x50>)
  40148c:	4798      	blx	r3
  40148e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401490:	2300      	movs	r3, #0
  401492:	6463      	str	r3, [r4, #68]	; 0x44
  401494:	e7f0      	b.n	401478 <vQueueWaitForMessageRestricted+0x14>
  401496:	2300      	movs	r3, #0
  401498:	64a3      	str	r3, [r4, #72]	; 0x48
  40149a:	e7f1      	b.n	401480 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40149c:	4632      	mov	r2, r6
  40149e:	4629      	mov	r1, r5
  4014a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014a4:	4b04      	ldr	r3, [pc, #16]	; (4014b8 <vQueueWaitForMessageRestricted+0x54>)
  4014a6:	4798      	blx	r3
  4014a8:	e7ee      	b.n	401488 <vQueueWaitForMessageRestricted+0x24>
  4014aa:	bf00      	nop
  4014ac:	00400969 	.word	0x00400969
  4014b0:	004009b5 	.word	0x004009b5
  4014b4:	00400ce9 	.word	0x00400ce9
  4014b8:	00401ba5 	.word	0x00401ba5

004014bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4014bc:	4b08      	ldr	r3, [pc, #32]	; (4014e0 <prvResetNextTaskUnblockTime+0x24>)
  4014be:	681b      	ldr	r3, [r3, #0]
  4014c0:	681b      	ldr	r3, [r3, #0]
  4014c2:	b13b      	cbz	r3, 4014d4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4014c4:	4b06      	ldr	r3, [pc, #24]	; (4014e0 <prvResetNextTaskUnblockTime+0x24>)
  4014c6:	681b      	ldr	r3, [r3, #0]
  4014c8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4014ca:	68db      	ldr	r3, [r3, #12]
  4014cc:	685a      	ldr	r2, [r3, #4]
  4014ce:	4b05      	ldr	r3, [pc, #20]	; (4014e4 <prvResetNextTaskUnblockTime+0x28>)
  4014d0:	601a      	str	r2, [r3, #0]
  4014d2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4014d4:	f04f 32ff 	mov.w	r2, #4294967295
  4014d8:	4b02      	ldr	r3, [pc, #8]	; (4014e4 <prvResetNextTaskUnblockTime+0x28>)
  4014da:	601a      	str	r2, [r3, #0]
  4014dc:	4770      	bx	lr
  4014de:	bf00      	nop
  4014e0:	2040c204 	.word	0x2040c204
  4014e4:	2040c2b0 	.word	0x2040c2b0

004014e8 <prvAddCurrentTaskToDelayedList>:
{
  4014e8:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4014ea:	4b0f      	ldr	r3, [pc, #60]	; (401528 <prvAddCurrentTaskToDelayedList+0x40>)
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4014f0:	4b0e      	ldr	r3, [pc, #56]	; (40152c <prvAddCurrentTaskToDelayedList+0x44>)
  4014f2:	681b      	ldr	r3, [r3, #0]
  4014f4:	4298      	cmp	r0, r3
  4014f6:	d30e      	bcc.n	401516 <prvAddCurrentTaskToDelayedList+0x2e>
  4014f8:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4014fa:	4b0d      	ldr	r3, [pc, #52]	; (401530 <prvAddCurrentTaskToDelayedList+0x48>)
  4014fc:	6818      	ldr	r0, [r3, #0]
  4014fe:	4b0a      	ldr	r3, [pc, #40]	; (401528 <prvAddCurrentTaskToDelayedList+0x40>)
  401500:	6819      	ldr	r1, [r3, #0]
  401502:	3104      	adds	r1, #4
  401504:	4b0b      	ldr	r3, [pc, #44]	; (401534 <prvAddCurrentTaskToDelayedList+0x4c>)
  401506:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401508:	4b0b      	ldr	r3, [pc, #44]	; (401538 <prvAddCurrentTaskToDelayedList+0x50>)
  40150a:	681b      	ldr	r3, [r3, #0]
  40150c:	429c      	cmp	r4, r3
  40150e:	d201      	bcs.n	401514 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401510:	4b09      	ldr	r3, [pc, #36]	; (401538 <prvAddCurrentTaskToDelayedList+0x50>)
  401512:	601c      	str	r4, [r3, #0]
  401514:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401516:	4b09      	ldr	r3, [pc, #36]	; (40153c <prvAddCurrentTaskToDelayedList+0x54>)
  401518:	6818      	ldr	r0, [r3, #0]
  40151a:	4b03      	ldr	r3, [pc, #12]	; (401528 <prvAddCurrentTaskToDelayedList+0x40>)
  40151c:	6819      	ldr	r1, [r3, #0]
  40151e:	3104      	adds	r1, #4
  401520:	4b04      	ldr	r3, [pc, #16]	; (401534 <prvAddCurrentTaskToDelayedList+0x4c>)
  401522:	4798      	blx	r3
  401524:	bd10      	pop	{r4, pc}
  401526:	bf00      	nop
  401528:	2040c200 	.word	0x2040c200
  40152c:	2040c2f8 	.word	0x2040c2f8
  401530:	2040c204 	.word	0x2040c204
  401534:	00400875 	.word	0x00400875
  401538:	2040c2b0 	.word	0x2040c2b0
  40153c:	2040c208 	.word	0x2040c208

00401540 <xTaskGenericCreate>:
{
  401540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401544:	b083      	sub	sp, #12
  401546:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401548:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40154c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40154e:	b160      	cbz	r0, 40156a <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401550:	2d04      	cmp	r5, #4
  401552:	d915      	bls.n	401580 <xTaskGenericCreate+0x40>
  401554:	f04f 0380 	mov.w	r3, #128	; 0x80
  401558:	b672      	cpsid	i
  40155a:	f383 8811 	msr	BASEPRI, r3
  40155e:	f3bf 8f6f 	isb	sy
  401562:	f3bf 8f4f 	dsb	sy
  401566:	b662      	cpsie	i
  401568:	e7fe      	b.n	401568 <xTaskGenericCreate+0x28>
  40156a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40156e:	b672      	cpsid	i
  401570:	f383 8811 	msr	BASEPRI, r3
  401574:	f3bf 8f6f 	isb	sy
  401578:	f3bf 8f4f 	dsb	sy
  40157c:	b662      	cpsie	i
  40157e:	e7fe      	b.n	40157e <xTaskGenericCreate+0x3e>
  401580:	9001      	str	r0, [sp, #4]
  401582:	4698      	mov	r8, r3
  401584:	4691      	mov	r9, r2
  401586:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401588:	b936      	cbnz	r6, 401598 <xTaskGenericCreate+0x58>
  40158a:	0090      	lsls	r0, r2, #2
  40158c:	4b62      	ldr	r3, [pc, #392]	; (401718 <xTaskGenericCreate+0x1d8>)
  40158e:	4798      	blx	r3
		if( pxStack != NULL )
  401590:	4606      	mov	r6, r0
  401592:	2800      	cmp	r0, #0
  401594:	f000 809e 	beq.w	4016d4 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401598:	2058      	movs	r0, #88	; 0x58
  40159a:	4b5f      	ldr	r3, [pc, #380]	; (401718 <xTaskGenericCreate+0x1d8>)
  40159c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40159e:	4604      	mov	r4, r0
  4015a0:	2800      	cmp	r0, #0
  4015a2:	f000 8094 	beq.w	4016ce <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4015a6:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4015a8:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4015ac:	21a5      	movs	r1, #165	; 0xa5
  4015ae:	4630      	mov	r0, r6
  4015b0:	4b5a      	ldr	r3, [pc, #360]	; (40171c <xTaskGenericCreate+0x1dc>)
  4015b2:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4015b4:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4015b8:	444e      	add	r6, r9
  4015ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4015bc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4015c0:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4015c4:	783b      	ldrb	r3, [r7, #0]
  4015c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4015ca:	783b      	ldrb	r3, [r7, #0]
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	f040 8084 	bne.w	4016da <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4015d2:	2700      	movs	r7, #0
  4015d4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4015d8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4015da:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4015dc:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4015de:	f104 0904 	add.w	r9, r4, #4
  4015e2:	4648      	mov	r0, r9
  4015e4:	f8df b184 	ldr.w	fp, [pc, #388]	; 40176c <xTaskGenericCreate+0x22c>
  4015e8:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4015ea:	f104 0018 	add.w	r0, r4, #24
  4015ee:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4015f0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015f2:	f1c5 0305 	rsb	r3, r5, #5
  4015f6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4015f8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4015fa:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4015fc:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401600:	4642      	mov	r2, r8
  401602:	9901      	ldr	r1, [sp, #4]
  401604:	4630      	mov	r0, r6
  401606:	4b46      	ldr	r3, [pc, #280]	; (401720 <xTaskGenericCreate+0x1e0>)
  401608:	4798      	blx	r3
  40160a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  40160c:	f1ba 0f00 	cmp.w	sl, #0
  401610:	d001      	beq.n	401616 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401612:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401616:	4b43      	ldr	r3, [pc, #268]	; (401724 <xTaskGenericCreate+0x1e4>)
  401618:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40161a:	4a43      	ldr	r2, [pc, #268]	; (401728 <xTaskGenericCreate+0x1e8>)
  40161c:	6813      	ldr	r3, [r2, #0]
  40161e:	3301      	adds	r3, #1
  401620:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401622:	4b42      	ldr	r3, [pc, #264]	; (40172c <xTaskGenericCreate+0x1ec>)
  401624:	681b      	ldr	r3, [r3, #0]
  401626:	2b00      	cmp	r3, #0
  401628:	d166      	bne.n	4016f8 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40162a:	4b40      	ldr	r3, [pc, #256]	; (40172c <xTaskGenericCreate+0x1ec>)
  40162c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40162e:	6813      	ldr	r3, [r2, #0]
  401630:	2b01      	cmp	r3, #1
  401632:	d121      	bne.n	401678 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401634:	4f3e      	ldr	r7, [pc, #248]	; (401730 <xTaskGenericCreate+0x1f0>)
  401636:	4638      	mov	r0, r7
  401638:	4e3e      	ldr	r6, [pc, #248]	; (401734 <xTaskGenericCreate+0x1f4>)
  40163a:	47b0      	blx	r6
  40163c:	f107 0014 	add.w	r0, r7, #20
  401640:	47b0      	blx	r6
  401642:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401646:	47b0      	blx	r6
  401648:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  40164c:	47b0      	blx	r6
  40164e:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401652:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401654:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401770 <xTaskGenericCreate+0x230>
  401658:	4640      	mov	r0, r8
  40165a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  40165c:	4f36      	ldr	r7, [pc, #216]	; (401738 <xTaskGenericCreate+0x1f8>)
  40165e:	4638      	mov	r0, r7
  401660:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401662:	4836      	ldr	r0, [pc, #216]	; (40173c <xTaskGenericCreate+0x1fc>)
  401664:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401666:	4836      	ldr	r0, [pc, #216]	; (401740 <xTaskGenericCreate+0x200>)
  401668:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40166a:	4836      	ldr	r0, [pc, #216]	; (401744 <xTaskGenericCreate+0x204>)
  40166c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40166e:	4b36      	ldr	r3, [pc, #216]	; (401748 <xTaskGenericCreate+0x208>)
  401670:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401674:	4b35      	ldr	r3, [pc, #212]	; (40174c <xTaskGenericCreate+0x20c>)
  401676:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401678:	4a35      	ldr	r2, [pc, #212]	; (401750 <xTaskGenericCreate+0x210>)
  40167a:	6813      	ldr	r3, [r2, #0]
  40167c:	3301      	adds	r3, #1
  40167e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401680:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401682:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401684:	4a33      	ldr	r2, [pc, #204]	; (401754 <xTaskGenericCreate+0x214>)
  401686:	6811      	ldr	r1, [r2, #0]
  401688:	2301      	movs	r3, #1
  40168a:	4083      	lsls	r3, r0
  40168c:	430b      	orrs	r3, r1
  40168e:	6013      	str	r3, [r2, #0]
  401690:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401694:	4649      	mov	r1, r9
  401696:	4b26      	ldr	r3, [pc, #152]	; (401730 <xTaskGenericCreate+0x1f0>)
  401698:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40169c:	4b2e      	ldr	r3, [pc, #184]	; (401758 <xTaskGenericCreate+0x218>)
  40169e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4016a0:	4b2e      	ldr	r3, [pc, #184]	; (40175c <xTaskGenericCreate+0x21c>)
  4016a2:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4016a4:	4b2e      	ldr	r3, [pc, #184]	; (401760 <xTaskGenericCreate+0x220>)
  4016a6:	681b      	ldr	r3, [r3, #0]
  4016a8:	2b00      	cmp	r3, #0
  4016aa:	d031      	beq.n	401710 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4016ac:	4b1f      	ldr	r3, [pc, #124]	; (40172c <xTaskGenericCreate+0x1ec>)
  4016ae:	681b      	ldr	r3, [r3, #0]
  4016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016b2:	429d      	cmp	r5, r3
  4016b4:	d92e      	bls.n	401714 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4016b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016ba:	4b2a      	ldr	r3, [pc, #168]	; (401764 <xTaskGenericCreate+0x224>)
  4016bc:	601a      	str	r2, [r3, #0]
  4016be:	f3bf 8f4f 	dsb	sy
  4016c2:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4016c6:	2001      	movs	r0, #1
}
  4016c8:	b003      	add	sp, #12
  4016ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4016ce:	4630      	mov	r0, r6
  4016d0:	4b25      	ldr	r3, [pc, #148]	; (401768 <xTaskGenericCreate+0x228>)
  4016d2:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4016d4:	f04f 30ff 	mov.w	r0, #4294967295
  4016d8:	e7f6      	b.n	4016c8 <xTaskGenericCreate+0x188>
  4016da:	463b      	mov	r3, r7
  4016dc:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4016e0:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4016e2:	7859      	ldrb	r1, [r3, #1]
  4016e4:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4016e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4016ec:	2900      	cmp	r1, #0
  4016ee:	f43f af70 	beq.w	4015d2 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4016f2:	42bb      	cmp	r3, r7
  4016f4:	d1f5      	bne.n	4016e2 <xTaskGenericCreate+0x1a2>
  4016f6:	e76c      	b.n	4015d2 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4016f8:	4b19      	ldr	r3, [pc, #100]	; (401760 <xTaskGenericCreate+0x220>)
  4016fa:	681b      	ldr	r3, [r3, #0]
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	d1bb      	bne.n	401678 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401700:	4b0a      	ldr	r3, [pc, #40]	; (40172c <xTaskGenericCreate+0x1ec>)
  401702:	681b      	ldr	r3, [r3, #0]
  401704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401706:	429d      	cmp	r5, r3
  401708:	d3b6      	bcc.n	401678 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40170a:	4b08      	ldr	r3, [pc, #32]	; (40172c <xTaskGenericCreate+0x1ec>)
  40170c:	601c      	str	r4, [r3, #0]
  40170e:	e7b3      	b.n	401678 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401710:	2001      	movs	r0, #1
  401712:	e7d9      	b.n	4016c8 <xTaskGenericCreate+0x188>
  401714:	2001      	movs	r0, #1
	return xReturn;
  401716:	e7d7      	b.n	4016c8 <xTaskGenericCreate+0x188>
  401718:	00400b25 	.word	0x00400b25
  40171c:	00403d7d 	.word	0x00403d7d
  401720:	00400941 	.word	0x00400941
  401724:	00400969 	.word	0x00400969
  401728:	2040c270 	.word	0x2040c270
  40172c:	2040c200 	.word	0x2040c200
  401730:	2040c20c 	.word	0x2040c20c
  401734:	00400841 	.word	0x00400841
  401738:	2040c29c 	.word	0x2040c29c
  40173c:	2040c2b8 	.word	0x2040c2b8
  401740:	2040c2e4 	.word	0x2040c2e4
  401744:	2040c2d0 	.word	0x2040c2d0
  401748:	2040c204 	.word	0x2040c204
  40174c:	2040c208 	.word	0x2040c208
  401750:	2040c27c 	.word	0x2040c27c
  401754:	2040c284 	.word	0x2040c284
  401758:	0040085d 	.word	0x0040085d
  40175c:	004009b5 	.word	0x004009b5
  401760:	2040c2cc 	.word	0x2040c2cc
  401764:	e000ed04 	.word	0xe000ed04
  401768:	00400b95 	.word	0x00400b95
  40176c:	00400857 	.word	0x00400857
  401770:	2040c288 	.word	0x2040c288

00401774 <vTaskStartScheduler>:
{
  401774:	b510      	push	{r4, lr}
  401776:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401778:	2300      	movs	r3, #0
  40177a:	9303      	str	r3, [sp, #12]
  40177c:	9302      	str	r3, [sp, #8]
  40177e:	9301      	str	r3, [sp, #4]
  401780:	9300      	str	r3, [sp, #0]
  401782:	2282      	movs	r2, #130	; 0x82
  401784:	4916      	ldr	r1, [pc, #88]	; (4017e0 <vTaskStartScheduler+0x6c>)
  401786:	4817      	ldr	r0, [pc, #92]	; (4017e4 <vTaskStartScheduler+0x70>)
  401788:	4c17      	ldr	r4, [pc, #92]	; (4017e8 <vTaskStartScheduler+0x74>)
  40178a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40178c:	2801      	cmp	r0, #1
  40178e:	d00b      	beq.n	4017a8 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401790:	bb20      	cbnz	r0, 4017dc <vTaskStartScheduler+0x68>
  401792:	f04f 0380 	mov.w	r3, #128	; 0x80
  401796:	b672      	cpsid	i
  401798:	f383 8811 	msr	BASEPRI, r3
  40179c:	f3bf 8f6f 	isb	sy
  4017a0:	f3bf 8f4f 	dsb	sy
  4017a4:	b662      	cpsie	i
  4017a6:	e7fe      	b.n	4017a6 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4017a8:	4b10      	ldr	r3, [pc, #64]	; (4017ec <vTaskStartScheduler+0x78>)
  4017aa:	4798      	blx	r3
	if( xReturn == pdPASS )
  4017ac:	2801      	cmp	r0, #1
  4017ae:	d1ef      	bne.n	401790 <vTaskStartScheduler+0x1c>
  4017b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017b4:	b672      	cpsid	i
  4017b6:	f383 8811 	msr	BASEPRI, r3
  4017ba:	f3bf 8f6f 	isb	sy
  4017be:	f3bf 8f4f 	dsb	sy
  4017c2:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4017c4:	f04f 32ff 	mov.w	r2, #4294967295
  4017c8:	4b09      	ldr	r3, [pc, #36]	; (4017f0 <vTaskStartScheduler+0x7c>)
  4017ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4017cc:	2201      	movs	r2, #1
  4017ce:	4b09      	ldr	r3, [pc, #36]	; (4017f4 <vTaskStartScheduler+0x80>)
  4017d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4017d2:	2200      	movs	r2, #0
  4017d4:	4b08      	ldr	r3, [pc, #32]	; (4017f8 <vTaskStartScheduler+0x84>)
  4017d6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4017d8:	4b08      	ldr	r3, [pc, #32]	; (4017fc <vTaskStartScheduler+0x88>)
  4017da:	4798      	blx	r3
}
  4017dc:	b004      	add	sp, #16
  4017de:	bd10      	pop	{r4, pc}
  4017e0:	004084f8 	.word	0x004084f8
  4017e4:	00401a89 	.word	0x00401a89
  4017e8:	00401541 	.word	0x00401541
  4017ec:	00401ff9 	.word	0x00401ff9
  4017f0:	2040c2b0 	.word	0x2040c2b0
  4017f4:	2040c2cc 	.word	0x2040c2cc
  4017f8:	2040c2f8 	.word	0x2040c2f8
  4017fc:	004009fd 	.word	0x004009fd

00401800 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401800:	4a02      	ldr	r2, [pc, #8]	; (40180c <vTaskSuspendAll+0xc>)
  401802:	6813      	ldr	r3, [r2, #0]
  401804:	3301      	adds	r3, #1
  401806:	6013      	str	r3, [r2, #0]
  401808:	4770      	bx	lr
  40180a:	bf00      	nop
  40180c:	2040c278 	.word	0x2040c278

00401810 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401810:	4b01      	ldr	r3, [pc, #4]	; (401818 <xTaskGetTickCount+0x8>)
  401812:	6818      	ldr	r0, [r3, #0]
}
  401814:	4770      	bx	lr
  401816:	bf00      	nop
  401818:	2040c2f8 	.word	0x2040c2f8

0040181c <xTaskIncrementTick>:
{
  40181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401820:	4b42      	ldr	r3, [pc, #264]	; (40192c <xTaskIncrementTick+0x110>)
  401822:	681b      	ldr	r3, [r3, #0]
  401824:	2b00      	cmp	r3, #0
  401826:	d178      	bne.n	40191a <xTaskIncrementTick+0xfe>
		++xTickCount;
  401828:	4b41      	ldr	r3, [pc, #260]	; (401930 <xTaskIncrementTick+0x114>)
  40182a:	681a      	ldr	r2, [r3, #0]
  40182c:	3201      	adds	r2, #1
  40182e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401830:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401832:	b9d6      	cbnz	r6, 40186a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401834:	4b3f      	ldr	r3, [pc, #252]	; (401934 <xTaskIncrementTick+0x118>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	681b      	ldr	r3, [r3, #0]
  40183a:	b153      	cbz	r3, 401852 <xTaskIncrementTick+0x36>
  40183c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401840:	b672      	cpsid	i
  401842:	f383 8811 	msr	BASEPRI, r3
  401846:	f3bf 8f6f 	isb	sy
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	b662      	cpsie	i
  401850:	e7fe      	b.n	401850 <xTaskIncrementTick+0x34>
  401852:	4a38      	ldr	r2, [pc, #224]	; (401934 <xTaskIncrementTick+0x118>)
  401854:	6811      	ldr	r1, [r2, #0]
  401856:	4b38      	ldr	r3, [pc, #224]	; (401938 <xTaskIncrementTick+0x11c>)
  401858:	6818      	ldr	r0, [r3, #0]
  40185a:	6010      	str	r0, [r2, #0]
  40185c:	6019      	str	r1, [r3, #0]
  40185e:	4a37      	ldr	r2, [pc, #220]	; (40193c <xTaskIncrementTick+0x120>)
  401860:	6813      	ldr	r3, [r2, #0]
  401862:	3301      	adds	r3, #1
  401864:	6013      	str	r3, [r2, #0]
  401866:	4b36      	ldr	r3, [pc, #216]	; (401940 <xTaskIncrementTick+0x124>)
  401868:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40186a:	4b36      	ldr	r3, [pc, #216]	; (401944 <xTaskIncrementTick+0x128>)
  40186c:	681b      	ldr	r3, [r3, #0]
  40186e:	429e      	cmp	r6, r3
  401870:	d218      	bcs.n	4018a4 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  401872:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401874:	4b34      	ldr	r3, [pc, #208]	; (401948 <xTaskIncrementTick+0x12c>)
  401876:	681b      	ldr	r3, [r3, #0]
  401878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40187a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40187e:	4a33      	ldr	r2, [pc, #204]	; (40194c <xTaskIncrementTick+0x130>)
  401880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401884:	2b02      	cmp	r3, #2
  401886:	bf28      	it	cs
  401888:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40188a:	4b31      	ldr	r3, [pc, #196]	; (401950 <xTaskIncrementTick+0x134>)
  40188c:	681b      	ldr	r3, [r3, #0]
  40188e:	b90b      	cbnz	r3, 401894 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401890:	4b30      	ldr	r3, [pc, #192]	; (401954 <xTaskIncrementTick+0x138>)
  401892:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401894:	4b30      	ldr	r3, [pc, #192]	; (401958 <xTaskIncrementTick+0x13c>)
  401896:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401898:	2b00      	cmp	r3, #0
}
  40189a:	bf0c      	ite	eq
  40189c:	4620      	moveq	r0, r4
  40189e:	2001      	movne	r0, #1
  4018a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4018a4:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4018a6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401934 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4018aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401964 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4018ae:	4f2b      	ldr	r7, [pc, #172]	; (40195c <xTaskIncrementTick+0x140>)
  4018b0:	e01f      	b.n	4018f2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4018b2:	f04f 32ff 	mov.w	r2, #4294967295
  4018b6:	4b23      	ldr	r3, [pc, #140]	; (401944 <xTaskIncrementTick+0x128>)
  4018b8:	601a      	str	r2, [r3, #0]
						break;
  4018ba:	e7db      	b.n	401874 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4018bc:	4a21      	ldr	r2, [pc, #132]	; (401944 <xTaskIncrementTick+0x128>)
  4018be:	6013      	str	r3, [r2, #0]
							break;
  4018c0:	e7d8      	b.n	401874 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4018c2:	f105 0018 	add.w	r0, r5, #24
  4018c6:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4018c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4018ca:	683a      	ldr	r2, [r7, #0]
  4018cc:	2301      	movs	r3, #1
  4018ce:	4083      	lsls	r3, r0
  4018d0:	4313      	orrs	r3, r2
  4018d2:	603b      	str	r3, [r7, #0]
  4018d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4018d8:	4651      	mov	r1, sl
  4018da:	4b1c      	ldr	r3, [pc, #112]	; (40194c <xTaskIncrementTick+0x130>)
  4018dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4018e0:	4b1f      	ldr	r3, [pc, #124]	; (401960 <xTaskIncrementTick+0x144>)
  4018e2:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4018e4:	4b18      	ldr	r3, [pc, #96]	; (401948 <xTaskIncrementTick+0x12c>)
  4018e6:	681b      	ldr	r3, [r3, #0]
  4018e8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4018ec:	429a      	cmp	r2, r3
  4018ee:	bf28      	it	cs
  4018f0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4018f2:	f8d9 3000 	ldr.w	r3, [r9]
  4018f6:	681b      	ldr	r3, [r3, #0]
  4018f8:	2b00      	cmp	r3, #0
  4018fa:	d0da      	beq.n	4018b2 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4018fc:	f8d9 3000 	ldr.w	r3, [r9]
  401900:	68db      	ldr	r3, [r3, #12]
  401902:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401904:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401906:	429e      	cmp	r6, r3
  401908:	d3d8      	bcc.n	4018bc <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40190a:	f105 0a04 	add.w	sl, r5, #4
  40190e:	4650      	mov	r0, sl
  401910:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401912:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401914:	2b00      	cmp	r3, #0
  401916:	d1d4      	bne.n	4018c2 <xTaskIncrementTick+0xa6>
  401918:	e7d6      	b.n	4018c8 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40191a:	4a0d      	ldr	r2, [pc, #52]	; (401950 <xTaskIncrementTick+0x134>)
  40191c:	6813      	ldr	r3, [r2, #0]
  40191e:	3301      	adds	r3, #1
  401920:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401922:	4b0c      	ldr	r3, [pc, #48]	; (401954 <xTaskIncrementTick+0x138>)
  401924:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401926:	2400      	movs	r4, #0
  401928:	e7b4      	b.n	401894 <xTaskIncrementTick+0x78>
  40192a:	bf00      	nop
  40192c:	2040c278 	.word	0x2040c278
  401930:	2040c2f8 	.word	0x2040c2f8
  401934:	2040c204 	.word	0x2040c204
  401938:	2040c208 	.word	0x2040c208
  40193c:	2040c2b4 	.word	0x2040c2b4
  401940:	004014bd 	.word	0x004014bd
  401944:	2040c2b0 	.word	0x2040c2b0
  401948:	2040c200 	.word	0x2040c200
  40194c:	2040c20c 	.word	0x2040c20c
  401950:	2040c274 	.word	0x2040c274
  401954:	004035a9 	.word	0x004035a9
  401958:	2040c2fc 	.word	0x2040c2fc
  40195c:	2040c284 	.word	0x2040c284
  401960:	0040085d 	.word	0x0040085d
  401964:	004008a9 	.word	0x004008a9

00401968 <xTaskResumeAll>:
{
  401968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  40196c:	4b38      	ldr	r3, [pc, #224]	; (401a50 <xTaskResumeAll+0xe8>)
  40196e:	681b      	ldr	r3, [r3, #0]
  401970:	b953      	cbnz	r3, 401988 <xTaskResumeAll+0x20>
  401972:	f04f 0380 	mov.w	r3, #128	; 0x80
  401976:	b672      	cpsid	i
  401978:	f383 8811 	msr	BASEPRI, r3
  40197c:	f3bf 8f6f 	isb	sy
  401980:	f3bf 8f4f 	dsb	sy
  401984:	b662      	cpsie	i
  401986:	e7fe      	b.n	401986 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401988:	4b32      	ldr	r3, [pc, #200]	; (401a54 <xTaskResumeAll+0xec>)
  40198a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40198c:	4b30      	ldr	r3, [pc, #192]	; (401a50 <xTaskResumeAll+0xe8>)
  40198e:	681a      	ldr	r2, [r3, #0]
  401990:	3a01      	subs	r2, #1
  401992:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401994:	681b      	ldr	r3, [r3, #0]
  401996:	2b00      	cmp	r3, #0
  401998:	d155      	bne.n	401a46 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40199a:	4b2f      	ldr	r3, [pc, #188]	; (401a58 <xTaskResumeAll+0xf0>)
  40199c:	681b      	ldr	r3, [r3, #0]
  40199e:	2b00      	cmp	r3, #0
  4019a0:	d132      	bne.n	401a08 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4019a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4019a4:	4b2d      	ldr	r3, [pc, #180]	; (401a5c <xTaskResumeAll+0xf4>)
  4019a6:	4798      	blx	r3
}
  4019a8:	4620      	mov	r0, r4
  4019aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4019ae:	68fb      	ldr	r3, [r7, #12]
  4019b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4019b2:	f104 0018 	add.w	r0, r4, #24
  4019b6:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4019b8:	f104 0804 	add.w	r8, r4, #4
  4019bc:	4640      	mov	r0, r8
  4019be:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4019c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4019c2:	682a      	ldr	r2, [r5, #0]
  4019c4:	2301      	movs	r3, #1
  4019c6:	4083      	lsls	r3, r0
  4019c8:	4313      	orrs	r3, r2
  4019ca:	602b      	str	r3, [r5, #0]
  4019cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019d0:	4641      	mov	r1, r8
  4019d2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4019d6:	4b22      	ldr	r3, [pc, #136]	; (401a60 <xTaskResumeAll+0xf8>)
  4019d8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4019da:	4b22      	ldr	r3, [pc, #136]	; (401a64 <xTaskResumeAll+0xfc>)
  4019dc:	681b      	ldr	r3, [r3, #0]
  4019de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019e2:	429a      	cmp	r2, r3
  4019e4:	d20c      	bcs.n	401a00 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4019e6:	683b      	ldr	r3, [r7, #0]
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	d1e0      	bne.n	4019ae <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4019ec:	4b1e      	ldr	r3, [pc, #120]	; (401a68 <xTaskResumeAll+0x100>)
  4019ee:	681b      	ldr	r3, [r3, #0]
  4019f0:	b1db      	cbz	r3, 401a2a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4019f2:	4b1d      	ldr	r3, [pc, #116]	; (401a68 <xTaskResumeAll+0x100>)
  4019f4:	681b      	ldr	r3, [r3, #0]
  4019f6:	b1c3      	cbz	r3, 401a2a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4019f8:	4e1c      	ldr	r6, [pc, #112]	; (401a6c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4019fa:	4d1d      	ldr	r5, [pc, #116]	; (401a70 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4019fc:	4c1a      	ldr	r4, [pc, #104]	; (401a68 <xTaskResumeAll+0x100>)
  4019fe:	e00e      	b.n	401a1e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401a00:	2201      	movs	r2, #1
  401a02:	4b1b      	ldr	r3, [pc, #108]	; (401a70 <xTaskResumeAll+0x108>)
  401a04:	601a      	str	r2, [r3, #0]
  401a06:	e7ee      	b.n	4019e6 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401a08:	4f1a      	ldr	r7, [pc, #104]	; (401a74 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401a0a:	4e1b      	ldr	r6, [pc, #108]	; (401a78 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401a0c:	4d1b      	ldr	r5, [pc, #108]	; (401a7c <xTaskResumeAll+0x114>)
  401a0e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401a84 <xTaskResumeAll+0x11c>
  401a12:	e7e8      	b.n	4019e6 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401a14:	6823      	ldr	r3, [r4, #0]
  401a16:	3b01      	subs	r3, #1
  401a18:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401a1a:	6823      	ldr	r3, [r4, #0]
  401a1c:	b12b      	cbz	r3, 401a2a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401a1e:	47b0      	blx	r6
  401a20:	2800      	cmp	r0, #0
  401a22:	d0f7      	beq.n	401a14 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401a24:	2301      	movs	r3, #1
  401a26:	602b      	str	r3, [r5, #0]
  401a28:	e7f4      	b.n	401a14 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401a2a:	4b11      	ldr	r3, [pc, #68]	; (401a70 <xTaskResumeAll+0x108>)
  401a2c:	681b      	ldr	r3, [r3, #0]
  401a2e:	2b01      	cmp	r3, #1
  401a30:	d10b      	bne.n	401a4a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a36:	4b12      	ldr	r3, [pc, #72]	; (401a80 <xTaskResumeAll+0x118>)
  401a38:	601a      	str	r2, [r3, #0]
  401a3a:	f3bf 8f4f 	dsb	sy
  401a3e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401a42:	2401      	movs	r4, #1
  401a44:	e7ae      	b.n	4019a4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401a46:	2400      	movs	r4, #0
  401a48:	e7ac      	b.n	4019a4 <xTaskResumeAll+0x3c>
  401a4a:	2400      	movs	r4, #0
  401a4c:	e7aa      	b.n	4019a4 <xTaskResumeAll+0x3c>
  401a4e:	bf00      	nop
  401a50:	2040c278 	.word	0x2040c278
  401a54:	00400969 	.word	0x00400969
  401a58:	2040c270 	.word	0x2040c270
  401a5c:	004009b5 	.word	0x004009b5
  401a60:	0040085d 	.word	0x0040085d
  401a64:	2040c200 	.word	0x2040c200
  401a68:	2040c274 	.word	0x2040c274
  401a6c:	0040181d 	.word	0x0040181d
  401a70:	2040c2fc 	.word	0x2040c2fc
  401a74:	2040c2b8 	.word	0x2040c2b8
  401a78:	004008a9 	.word	0x004008a9
  401a7c:	2040c284 	.word	0x2040c284
  401a80:	e000ed04 	.word	0xe000ed04
  401a84:	2040c20c 	.word	0x2040c20c

00401a88 <prvIdleTask>:
{
  401a88:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401a8a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401b14 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401a8e:	4e19      	ldr	r6, [pc, #100]	; (401af4 <prvIdleTask+0x6c>)
				taskYIELD();
  401a90:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401b18 <prvIdleTask+0x90>
  401a94:	e02a      	b.n	401aec <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401a96:	4b18      	ldr	r3, [pc, #96]	; (401af8 <prvIdleTask+0x70>)
  401a98:	681b      	ldr	r3, [r3, #0]
  401a9a:	2b01      	cmp	r3, #1
  401a9c:	d81e      	bhi.n	401adc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401a9e:	682b      	ldr	r3, [r5, #0]
  401aa0:	2b00      	cmp	r3, #0
  401aa2:	d0f8      	beq.n	401a96 <prvIdleTask+0xe>
			vTaskSuspendAll();
  401aa4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401aa6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401aa8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401aaa:	2c00      	cmp	r4, #0
  401aac:	d0f7      	beq.n	401a9e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401aae:	4b13      	ldr	r3, [pc, #76]	; (401afc <prvIdleTask+0x74>)
  401ab0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401ab2:	68f3      	ldr	r3, [r6, #12]
  401ab4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ab6:	1d20      	adds	r0, r4, #4
  401ab8:	4b11      	ldr	r3, [pc, #68]	; (401b00 <prvIdleTask+0x78>)
  401aba:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401abc:	4a11      	ldr	r2, [pc, #68]	; (401b04 <prvIdleTask+0x7c>)
  401abe:	6813      	ldr	r3, [r2, #0]
  401ac0:	3b01      	subs	r3, #1
  401ac2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401ac4:	682b      	ldr	r3, [r5, #0]
  401ac6:	3b01      	subs	r3, #1
  401ac8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401aca:	4b0f      	ldr	r3, [pc, #60]	; (401b08 <prvIdleTask+0x80>)
  401acc:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401ace:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401ad0:	f8df a048 	ldr.w	sl, [pc, #72]	; 401b1c <prvIdleTask+0x94>
  401ad4:	47d0      	blx	sl
		vPortFree( pxTCB );
  401ad6:	4620      	mov	r0, r4
  401ad8:	47d0      	blx	sl
  401ada:	e7e0      	b.n	401a9e <prvIdleTask+0x16>
				taskYIELD();
  401adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401ae0:	f8c9 3000 	str.w	r3, [r9]
  401ae4:	f3bf 8f4f 	dsb	sy
  401ae8:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401aec:	4d07      	ldr	r5, [pc, #28]	; (401b0c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401aee:	4f08      	ldr	r7, [pc, #32]	; (401b10 <prvIdleTask+0x88>)
  401af0:	e7d5      	b.n	401a9e <prvIdleTask+0x16>
  401af2:	bf00      	nop
  401af4:	2040c2e4 	.word	0x2040c2e4
  401af8:	2040c20c 	.word	0x2040c20c
  401afc:	00400969 	.word	0x00400969
  401b00:	004008a9 	.word	0x004008a9
  401b04:	2040c270 	.word	0x2040c270
  401b08:	004009b5 	.word	0x004009b5
  401b0c:	2040c280 	.word	0x2040c280
  401b10:	00401969 	.word	0x00401969
  401b14:	00401801 	.word	0x00401801
  401b18:	e000ed04 	.word	0xe000ed04
  401b1c:	00400b95 	.word	0x00400b95

00401b20 <vTaskPlaceOnEventList>:
{
  401b20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  401b22:	b1e0      	cbz	r0, 401b5e <vTaskPlaceOnEventList+0x3e>
  401b24:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401b26:	4d17      	ldr	r5, [pc, #92]	; (401b84 <vTaskPlaceOnEventList+0x64>)
  401b28:	6829      	ldr	r1, [r5, #0]
  401b2a:	3118      	adds	r1, #24
  401b2c:	4b16      	ldr	r3, [pc, #88]	; (401b88 <vTaskPlaceOnEventList+0x68>)
  401b2e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401b30:	6828      	ldr	r0, [r5, #0]
  401b32:	3004      	adds	r0, #4
  401b34:	4b15      	ldr	r3, [pc, #84]	; (401b8c <vTaskPlaceOnEventList+0x6c>)
  401b36:	4798      	blx	r3
  401b38:	b940      	cbnz	r0, 401b4c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401b3a:	682a      	ldr	r2, [r5, #0]
  401b3c:	4914      	ldr	r1, [pc, #80]	; (401b90 <vTaskPlaceOnEventList+0x70>)
  401b3e:	680b      	ldr	r3, [r1, #0]
  401b40:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401b42:	2201      	movs	r2, #1
  401b44:	4082      	lsls	r2, r0
  401b46:	ea23 0302 	bic.w	r3, r3, r2
  401b4a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401b4c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b50:	d010      	beq.n	401b74 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401b52:	4b10      	ldr	r3, [pc, #64]	; (401b94 <vTaskPlaceOnEventList+0x74>)
  401b54:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b56:	4420      	add	r0, r4
  401b58:	4b0f      	ldr	r3, [pc, #60]	; (401b98 <vTaskPlaceOnEventList+0x78>)
  401b5a:	4798      	blx	r3
  401b5c:	bd38      	pop	{r3, r4, r5, pc}
  401b5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b62:	b672      	cpsid	i
  401b64:	f383 8811 	msr	BASEPRI, r3
  401b68:	f3bf 8f6f 	isb	sy
  401b6c:	f3bf 8f4f 	dsb	sy
  401b70:	b662      	cpsie	i
  401b72:	e7fe      	b.n	401b72 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401b74:	4b03      	ldr	r3, [pc, #12]	; (401b84 <vTaskPlaceOnEventList+0x64>)
  401b76:	6819      	ldr	r1, [r3, #0]
  401b78:	3104      	adds	r1, #4
  401b7a:	4808      	ldr	r0, [pc, #32]	; (401b9c <vTaskPlaceOnEventList+0x7c>)
  401b7c:	4b08      	ldr	r3, [pc, #32]	; (401ba0 <vTaskPlaceOnEventList+0x80>)
  401b7e:	4798      	blx	r3
  401b80:	bd38      	pop	{r3, r4, r5, pc}
  401b82:	bf00      	nop
  401b84:	2040c200 	.word	0x2040c200
  401b88:	00400875 	.word	0x00400875
  401b8c:	004008a9 	.word	0x004008a9
  401b90:	2040c284 	.word	0x2040c284
  401b94:	2040c2f8 	.word	0x2040c2f8
  401b98:	004014e9 	.word	0x004014e9
  401b9c:	2040c2d0 	.word	0x2040c2d0
  401ba0:	0040085d 	.word	0x0040085d

00401ba4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401ba4:	b1e8      	cbz	r0, 401be2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401ba6:	b570      	push	{r4, r5, r6, lr}
  401ba8:	4615      	mov	r5, r2
  401baa:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401bac:	4e16      	ldr	r6, [pc, #88]	; (401c08 <vTaskPlaceOnEventListRestricted+0x64>)
  401bae:	6831      	ldr	r1, [r6, #0]
  401bb0:	3118      	adds	r1, #24
  401bb2:	4b16      	ldr	r3, [pc, #88]	; (401c0c <vTaskPlaceOnEventListRestricted+0x68>)
  401bb4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401bb6:	6830      	ldr	r0, [r6, #0]
  401bb8:	3004      	adds	r0, #4
  401bba:	4b15      	ldr	r3, [pc, #84]	; (401c10 <vTaskPlaceOnEventListRestricted+0x6c>)
  401bbc:	4798      	blx	r3
  401bbe:	b940      	cbnz	r0, 401bd2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401bc0:	6832      	ldr	r2, [r6, #0]
  401bc2:	4914      	ldr	r1, [pc, #80]	; (401c14 <vTaskPlaceOnEventListRestricted+0x70>)
  401bc4:	680b      	ldr	r3, [r1, #0]
  401bc6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401bc8:	2201      	movs	r2, #1
  401bca:	4082      	lsls	r2, r0
  401bcc:	ea23 0302 	bic.w	r3, r3, r2
  401bd0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401bd2:	2d01      	cmp	r5, #1
  401bd4:	d010      	beq.n	401bf8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401bd6:	4b10      	ldr	r3, [pc, #64]	; (401c18 <vTaskPlaceOnEventListRestricted+0x74>)
  401bd8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401bda:	4420      	add	r0, r4
  401bdc:	4b0f      	ldr	r3, [pc, #60]	; (401c1c <vTaskPlaceOnEventListRestricted+0x78>)
  401bde:	4798      	blx	r3
  401be0:	bd70      	pop	{r4, r5, r6, pc}
  401be2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401be6:	b672      	cpsid	i
  401be8:	f383 8811 	msr	BASEPRI, r3
  401bec:	f3bf 8f6f 	isb	sy
  401bf0:	f3bf 8f4f 	dsb	sy
  401bf4:	b662      	cpsie	i
  401bf6:	e7fe      	b.n	401bf6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401bf8:	4b03      	ldr	r3, [pc, #12]	; (401c08 <vTaskPlaceOnEventListRestricted+0x64>)
  401bfa:	6819      	ldr	r1, [r3, #0]
  401bfc:	3104      	adds	r1, #4
  401bfe:	4808      	ldr	r0, [pc, #32]	; (401c20 <vTaskPlaceOnEventListRestricted+0x7c>)
  401c00:	4b02      	ldr	r3, [pc, #8]	; (401c0c <vTaskPlaceOnEventListRestricted+0x68>)
  401c02:	4798      	blx	r3
  401c04:	bd70      	pop	{r4, r5, r6, pc}
  401c06:	bf00      	nop
  401c08:	2040c200 	.word	0x2040c200
  401c0c:	0040085d 	.word	0x0040085d
  401c10:	004008a9 	.word	0x004008a9
  401c14:	2040c284 	.word	0x2040c284
  401c18:	2040c2f8 	.word	0x2040c2f8
  401c1c:	004014e9 	.word	0x004014e9
  401c20:	2040c2d0 	.word	0x2040c2d0

00401c24 <xTaskRemoveFromEventList>:
{
  401c24:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401c26:	68c3      	ldr	r3, [r0, #12]
  401c28:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401c2a:	b324      	cbz	r4, 401c76 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401c2c:	f104 0518 	add.w	r5, r4, #24
  401c30:	4628      	mov	r0, r5
  401c32:	4b1a      	ldr	r3, [pc, #104]	; (401c9c <xTaskRemoveFromEventList+0x78>)
  401c34:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c36:	4b1a      	ldr	r3, [pc, #104]	; (401ca0 <xTaskRemoveFromEventList+0x7c>)
  401c38:	681b      	ldr	r3, [r3, #0]
  401c3a:	bb3b      	cbnz	r3, 401c8c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401c3c:	1d25      	adds	r5, r4, #4
  401c3e:	4628      	mov	r0, r5
  401c40:	4b16      	ldr	r3, [pc, #88]	; (401c9c <xTaskRemoveFromEventList+0x78>)
  401c42:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401c44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c46:	4a17      	ldr	r2, [pc, #92]	; (401ca4 <xTaskRemoveFromEventList+0x80>)
  401c48:	6811      	ldr	r1, [r2, #0]
  401c4a:	2301      	movs	r3, #1
  401c4c:	4083      	lsls	r3, r0
  401c4e:	430b      	orrs	r3, r1
  401c50:	6013      	str	r3, [r2, #0]
  401c52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c56:	4629      	mov	r1, r5
  401c58:	4b13      	ldr	r3, [pc, #76]	; (401ca8 <xTaskRemoveFromEventList+0x84>)
  401c5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c5e:	4b13      	ldr	r3, [pc, #76]	; (401cac <xTaskRemoveFromEventList+0x88>)
  401c60:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401c62:	4b13      	ldr	r3, [pc, #76]	; (401cb0 <xTaskRemoveFromEventList+0x8c>)
  401c64:	681b      	ldr	r3, [r3, #0]
  401c66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c6a:	429a      	cmp	r2, r3
  401c6c:	d913      	bls.n	401c96 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401c6e:	2001      	movs	r0, #1
  401c70:	4b10      	ldr	r3, [pc, #64]	; (401cb4 <xTaskRemoveFromEventList+0x90>)
  401c72:	6018      	str	r0, [r3, #0]
  401c74:	bd38      	pop	{r3, r4, r5, pc}
  401c76:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c7a:	b672      	cpsid	i
  401c7c:	f383 8811 	msr	BASEPRI, r3
  401c80:	f3bf 8f6f 	isb	sy
  401c84:	f3bf 8f4f 	dsb	sy
  401c88:	b662      	cpsie	i
  401c8a:	e7fe      	b.n	401c8a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401c8c:	4629      	mov	r1, r5
  401c8e:	480a      	ldr	r0, [pc, #40]	; (401cb8 <xTaskRemoveFromEventList+0x94>)
  401c90:	4b06      	ldr	r3, [pc, #24]	; (401cac <xTaskRemoveFromEventList+0x88>)
  401c92:	4798      	blx	r3
  401c94:	e7e5      	b.n	401c62 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401c96:	2000      	movs	r0, #0
}
  401c98:	bd38      	pop	{r3, r4, r5, pc}
  401c9a:	bf00      	nop
  401c9c:	004008a9 	.word	0x004008a9
  401ca0:	2040c278 	.word	0x2040c278
  401ca4:	2040c284 	.word	0x2040c284
  401ca8:	2040c20c 	.word	0x2040c20c
  401cac:	0040085d 	.word	0x0040085d
  401cb0:	2040c200 	.word	0x2040c200
  401cb4:	2040c2fc 	.word	0x2040c2fc
  401cb8:	2040c2b8 	.word	0x2040c2b8

00401cbc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  401cbc:	b130      	cbz	r0, 401ccc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401cbe:	4a09      	ldr	r2, [pc, #36]	; (401ce4 <vTaskSetTimeOutState+0x28>)
  401cc0:	6812      	ldr	r2, [r2, #0]
  401cc2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401cc4:	4a08      	ldr	r2, [pc, #32]	; (401ce8 <vTaskSetTimeOutState+0x2c>)
  401cc6:	6812      	ldr	r2, [r2, #0]
  401cc8:	6042      	str	r2, [r0, #4]
  401cca:	4770      	bx	lr
  401ccc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd0:	b672      	cpsid	i
  401cd2:	f383 8811 	msr	BASEPRI, r3
  401cd6:	f3bf 8f6f 	isb	sy
  401cda:	f3bf 8f4f 	dsb	sy
  401cde:	b662      	cpsie	i
  401ce0:	e7fe      	b.n	401ce0 <vTaskSetTimeOutState+0x24>
  401ce2:	bf00      	nop
  401ce4:	2040c2b4 	.word	0x2040c2b4
  401ce8:	2040c2f8 	.word	0x2040c2f8

00401cec <xTaskCheckForTimeOut>:
{
  401cec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401cee:	b1c0      	cbz	r0, 401d22 <xTaskCheckForTimeOut+0x36>
  401cf0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401cf2:	b309      	cbz	r1, 401d38 <xTaskCheckForTimeOut+0x4c>
  401cf4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401cf6:	4b1d      	ldr	r3, [pc, #116]	; (401d6c <xTaskCheckForTimeOut+0x80>)
  401cf8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401cfa:	4b1d      	ldr	r3, [pc, #116]	; (401d70 <xTaskCheckForTimeOut+0x84>)
  401cfc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401cfe:	682b      	ldr	r3, [r5, #0]
  401d00:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d04:	d02e      	beq.n	401d64 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401d06:	491b      	ldr	r1, [pc, #108]	; (401d74 <xTaskCheckForTimeOut+0x88>)
  401d08:	6809      	ldr	r1, [r1, #0]
  401d0a:	6820      	ldr	r0, [r4, #0]
  401d0c:	4288      	cmp	r0, r1
  401d0e:	d002      	beq.n	401d16 <xTaskCheckForTimeOut+0x2a>
  401d10:	6861      	ldr	r1, [r4, #4]
  401d12:	428a      	cmp	r2, r1
  401d14:	d228      	bcs.n	401d68 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401d16:	6861      	ldr	r1, [r4, #4]
  401d18:	1a50      	subs	r0, r2, r1
  401d1a:	4283      	cmp	r3, r0
  401d1c:	d817      	bhi.n	401d4e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401d1e:	2401      	movs	r4, #1
  401d20:	e01c      	b.n	401d5c <xTaskCheckForTimeOut+0x70>
  401d22:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d26:	b672      	cpsid	i
  401d28:	f383 8811 	msr	BASEPRI, r3
  401d2c:	f3bf 8f6f 	isb	sy
  401d30:	f3bf 8f4f 	dsb	sy
  401d34:	b662      	cpsie	i
  401d36:	e7fe      	b.n	401d36 <xTaskCheckForTimeOut+0x4a>
  401d38:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d3c:	b672      	cpsid	i
  401d3e:	f383 8811 	msr	BASEPRI, r3
  401d42:	f3bf 8f6f 	isb	sy
  401d46:	f3bf 8f4f 	dsb	sy
  401d4a:	b662      	cpsie	i
  401d4c:	e7fe      	b.n	401d4c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401d4e:	1a9b      	subs	r3, r3, r2
  401d50:	440b      	add	r3, r1
  401d52:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401d54:	4620      	mov	r0, r4
  401d56:	4b08      	ldr	r3, [pc, #32]	; (401d78 <xTaskCheckForTimeOut+0x8c>)
  401d58:	4798      	blx	r3
			xReturn = pdFALSE;
  401d5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401d5c:	4b07      	ldr	r3, [pc, #28]	; (401d7c <xTaskCheckForTimeOut+0x90>)
  401d5e:	4798      	blx	r3
}
  401d60:	4620      	mov	r0, r4
  401d62:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401d64:	2400      	movs	r4, #0
  401d66:	e7f9      	b.n	401d5c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401d68:	2401      	movs	r4, #1
  401d6a:	e7f7      	b.n	401d5c <xTaskCheckForTimeOut+0x70>
  401d6c:	00400969 	.word	0x00400969
  401d70:	2040c2f8 	.word	0x2040c2f8
  401d74:	2040c2b4 	.word	0x2040c2b4
  401d78:	00401cbd 	.word	0x00401cbd
  401d7c:	004009b5 	.word	0x004009b5

00401d80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401d80:	2201      	movs	r2, #1
  401d82:	4b01      	ldr	r3, [pc, #4]	; (401d88 <vTaskMissedYield+0x8>)
  401d84:	601a      	str	r2, [r3, #0]
  401d86:	4770      	bx	lr
  401d88:	2040c2fc 	.word	0x2040c2fc

00401d8c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401d8c:	4b05      	ldr	r3, [pc, #20]	; (401da4 <xTaskGetSchedulerState+0x18>)
  401d8e:	681b      	ldr	r3, [r3, #0]
  401d90:	b133      	cbz	r3, 401da0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401d92:	4b05      	ldr	r3, [pc, #20]	; (401da8 <xTaskGetSchedulerState+0x1c>)
  401d94:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401d96:	2b00      	cmp	r3, #0
  401d98:	bf0c      	ite	eq
  401d9a:	2002      	moveq	r0, #2
  401d9c:	2000      	movne	r0, #0
  401d9e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401da0:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401da2:	4770      	bx	lr
  401da4:	2040c2cc 	.word	0x2040c2cc
  401da8:	2040c278 	.word	0x2040c278

00401dac <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401dac:	2800      	cmp	r0, #0
  401dae:	d044      	beq.n	401e3a <vTaskPriorityInherit+0x8e>
	{
  401db0:	b538      	push	{r3, r4, r5, lr}
  401db2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401db4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401db6:	4921      	ldr	r1, [pc, #132]	; (401e3c <vTaskPriorityInherit+0x90>)
  401db8:	6809      	ldr	r1, [r1, #0]
  401dba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401dbc:	428a      	cmp	r2, r1
  401dbe:	d214      	bcs.n	401dea <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401dc0:	6981      	ldr	r1, [r0, #24]
  401dc2:	2900      	cmp	r1, #0
  401dc4:	db05      	blt.n	401dd2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dc6:	491d      	ldr	r1, [pc, #116]	; (401e3c <vTaskPriorityInherit+0x90>)
  401dc8:	6809      	ldr	r1, [r1, #0]
  401dca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401dcc:	f1c1 0105 	rsb	r1, r1, #5
  401dd0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401dd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401dd6:	491a      	ldr	r1, [pc, #104]	; (401e40 <vTaskPriorityInherit+0x94>)
  401dd8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401ddc:	6961      	ldr	r1, [r4, #20]
  401dde:	4291      	cmp	r1, r2
  401de0:	d004      	beq.n	401dec <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401de2:	4a16      	ldr	r2, [pc, #88]	; (401e3c <vTaskPriorityInherit+0x90>)
  401de4:	6812      	ldr	r2, [r2, #0]
  401de6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401de8:	62e2      	str	r2, [r4, #44]	; 0x2c
  401dea:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401dec:	1d25      	adds	r5, r4, #4
  401dee:	4628      	mov	r0, r5
  401df0:	4b14      	ldr	r3, [pc, #80]	; (401e44 <vTaskPriorityInherit+0x98>)
  401df2:	4798      	blx	r3
  401df4:	b970      	cbnz	r0, 401e14 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401df6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401df8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401dfc:	4a10      	ldr	r2, [pc, #64]	; (401e40 <vTaskPriorityInherit+0x94>)
  401dfe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e02:	b93a      	cbnz	r2, 401e14 <vTaskPriorityInherit+0x68>
  401e04:	4810      	ldr	r0, [pc, #64]	; (401e48 <vTaskPriorityInherit+0x9c>)
  401e06:	6802      	ldr	r2, [r0, #0]
  401e08:	2101      	movs	r1, #1
  401e0a:	fa01 f303 	lsl.w	r3, r1, r3
  401e0e:	ea22 0303 	bic.w	r3, r2, r3
  401e12:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401e14:	4b09      	ldr	r3, [pc, #36]	; (401e3c <vTaskPriorityInherit+0x90>)
  401e16:	681b      	ldr	r3, [r3, #0]
  401e18:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401e1a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401e1c:	4a0a      	ldr	r2, [pc, #40]	; (401e48 <vTaskPriorityInherit+0x9c>)
  401e1e:	6811      	ldr	r1, [r2, #0]
  401e20:	2301      	movs	r3, #1
  401e22:	4083      	lsls	r3, r0
  401e24:	430b      	orrs	r3, r1
  401e26:	6013      	str	r3, [r2, #0]
  401e28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e2c:	4629      	mov	r1, r5
  401e2e:	4b04      	ldr	r3, [pc, #16]	; (401e40 <vTaskPriorityInherit+0x94>)
  401e30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e34:	4b05      	ldr	r3, [pc, #20]	; (401e4c <vTaskPriorityInherit+0xa0>)
  401e36:	4798      	blx	r3
  401e38:	bd38      	pop	{r3, r4, r5, pc}
  401e3a:	4770      	bx	lr
  401e3c:	2040c200 	.word	0x2040c200
  401e40:	2040c20c 	.word	0x2040c20c
  401e44:	004008a9 	.word	0x004008a9
  401e48:	2040c284 	.word	0x2040c284
  401e4c:	0040085d 	.word	0x0040085d

00401e50 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401e50:	2800      	cmp	r0, #0
  401e52:	d04d      	beq.n	401ef0 <xTaskPriorityDisinherit+0xa0>
	{
  401e54:	b538      	push	{r3, r4, r5, lr}
  401e56:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401e58:	4a27      	ldr	r2, [pc, #156]	; (401ef8 <xTaskPriorityDisinherit+0xa8>)
  401e5a:	6812      	ldr	r2, [r2, #0]
  401e5c:	4290      	cmp	r0, r2
  401e5e:	d00a      	beq.n	401e76 <xTaskPriorityDisinherit+0x26>
  401e60:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e64:	b672      	cpsid	i
  401e66:	f383 8811 	msr	BASEPRI, r3
  401e6a:	f3bf 8f6f 	isb	sy
  401e6e:	f3bf 8f4f 	dsb	sy
  401e72:	b662      	cpsie	i
  401e74:	e7fe      	b.n	401e74 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401e76:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401e78:	b952      	cbnz	r2, 401e90 <xTaskPriorityDisinherit+0x40>
  401e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e7e:	b672      	cpsid	i
  401e80:	f383 8811 	msr	BASEPRI, r3
  401e84:	f3bf 8f6f 	isb	sy
  401e88:	f3bf 8f4f 	dsb	sy
  401e8c:	b662      	cpsie	i
  401e8e:	e7fe      	b.n	401e8e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401e90:	3a01      	subs	r2, #1
  401e92:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401e94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401e96:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401e98:	4288      	cmp	r0, r1
  401e9a:	d02b      	beq.n	401ef4 <xTaskPriorityDisinherit+0xa4>
  401e9c:	bb52      	cbnz	r2, 401ef4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401e9e:	1d25      	adds	r5, r4, #4
  401ea0:	4628      	mov	r0, r5
  401ea2:	4b16      	ldr	r3, [pc, #88]	; (401efc <xTaskPriorityDisinherit+0xac>)
  401ea4:	4798      	blx	r3
  401ea6:	b968      	cbnz	r0, 401ec4 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401ea8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401eaa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401eae:	4b14      	ldr	r3, [pc, #80]	; (401f00 <xTaskPriorityDisinherit+0xb0>)
  401eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401eb4:	b933      	cbnz	r3, 401ec4 <xTaskPriorityDisinherit+0x74>
  401eb6:	4813      	ldr	r0, [pc, #76]	; (401f04 <xTaskPriorityDisinherit+0xb4>)
  401eb8:	6803      	ldr	r3, [r0, #0]
  401eba:	2201      	movs	r2, #1
  401ebc:	408a      	lsls	r2, r1
  401ebe:	ea23 0302 	bic.w	r3, r3, r2
  401ec2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401ec4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401ec6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ec8:	f1c0 0305 	rsb	r3, r0, #5
  401ecc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401ece:	4a0d      	ldr	r2, [pc, #52]	; (401f04 <xTaskPriorityDisinherit+0xb4>)
  401ed0:	6811      	ldr	r1, [r2, #0]
  401ed2:	2401      	movs	r4, #1
  401ed4:	fa04 f300 	lsl.w	r3, r4, r0
  401ed8:	430b      	orrs	r3, r1
  401eda:	6013      	str	r3, [r2, #0]
  401edc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ee0:	4629      	mov	r1, r5
  401ee2:	4b07      	ldr	r3, [pc, #28]	; (401f00 <xTaskPriorityDisinherit+0xb0>)
  401ee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ee8:	4b07      	ldr	r3, [pc, #28]	; (401f08 <xTaskPriorityDisinherit+0xb8>)
  401eea:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401eec:	4620      	mov	r0, r4
  401eee:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401ef0:	2000      	movs	r0, #0
  401ef2:	4770      	bx	lr
  401ef4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401ef6:	bd38      	pop	{r3, r4, r5, pc}
  401ef8:	2040c200 	.word	0x2040c200
  401efc:	004008a9 	.word	0x004008a9
  401f00:	2040c20c 	.word	0x2040c20c
  401f04:	2040c284 	.word	0x2040c284
  401f08:	0040085d 	.word	0x0040085d

00401f0c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401f0c:	4b05      	ldr	r3, [pc, #20]	; (401f24 <pvTaskIncrementMutexHeldCount+0x18>)
  401f0e:	681b      	ldr	r3, [r3, #0]
  401f10:	b123      	cbz	r3, 401f1c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401f12:	4b04      	ldr	r3, [pc, #16]	; (401f24 <pvTaskIncrementMutexHeldCount+0x18>)
  401f14:	681a      	ldr	r2, [r3, #0]
  401f16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401f18:	3301      	adds	r3, #1
  401f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401f1c:	4b01      	ldr	r3, [pc, #4]	; (401f24 <pvTaskIncrementMutexHeldCount+0x18>)
  401f1e:	6818      	ldr	r0, [r3, #0]
	}
  401f20:	4770      	bx	lr
  401f22:	bf00      	nop
  401f24:	2040c200 	.word	0x2040c200

00401f28 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401f28:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401f2a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f2c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401f2e:	4291      	cmp	r1, r2
  401f30:	d80c      	bhi.n	401f4c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401f32:	1ad2      	subs	r2, r2, r3
  401f34:	6983      	ldr	r3, [r0, #24]
  401f36:	429a      	cmp	r2, r3
  401f38:	d301      	bcc.n	401f3e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401f3a:	2001      	movs	r0, #1
  401f3c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401f3e:	1d01      	adds	r1, r0, #4
  401f40:	4b09      	ldr	r3, [pc, #36]	; (401f68 <prvInsertTimerInActiveList+0x40>)
  401f42:	6818      	ldr	r0, [r3, #0]
  401f44:	4b09      	ldr	r3, [pc, #36]	; (401f6c <prvInsertTimerInActiveList+0x44>)
  401f46:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401f48:	2000      	movs	r0, #0
  401f4a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401f4c:	429a      	cmp	r2, r3
  401f4e:	d203      	bcs.n	401f58 <prvInsertTimerInActiveList+0x30>
  401f50:	4299      	cmp	r1, r3
  401f52:	d301      	bcc.n	401f58 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401f54:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401f56:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f58:	1d01      	adds	r1, r0, #4
  401f5a:	4b05      	ldr	r3, [pc, #20]	; (401f70 <prvInsertTimerInActiveList+0x48>)
  401f5c:	6818      	ldr	r0, [r3, #0]
  401f5e:	4b03      	ldr	r3, [pc, #12]	; (401f6c <prvInsertTimerInActiveList+0x44>)
  401f60:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401f62:	2000      	movs	r0, #0
  401f64:	bd08      	pop	{r3, pc}
  401f66:	bf00      	nop
  401f68:	2040c304 	.word	0x2040c304
  401f6c:	00400875 	.word	0x00400875
  401f70:	2040c300 	.word	0x2040c300

00401f74 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401f74:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401f76:	4b15      	ldr	r3, [pc, #84]	; (401fcc <prvCheckForValidListAndQueue+0x58>)
  401f78:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401f7a:	4b15      	ldr	r3, [pc, #84]	; (401fd0 <prvCheckForValidListAndQueue+0x5c>)
  401f7c:	681b      	ldr	r3, [r3, #0]
  401f7e:	b113      	cbz	r3, 401f86 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401f80:	4b14      	ldr	r3, [pc, #80]	; (401fd4 <prvCheckForValidListAndQueue+0x60>)
  401f82:	4798      	blx	r3
  401f84:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401f86:	4d14      	ldr	r5, [pc, #80]	; (401fd8 <prvCheckForValidListAndQueue+0x64>)
  401f88:	4628      	mov	r0, r5
  401f8a:	4e14      	ldr	r6, [pc, #80]	; (401fdc <prvCheckForValidListAndQueue+0x68>)
  401f8c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401f8e:	4c14      	ldr	r4, [pc, #80]	; (401fe0 <prvCheckForValidListAndQueue+0x6c>)
  401f90:	4620      	mov	r0, r4
  401f92:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401f94:	4b13      	ldr	r3, [pc, #76]	; (401fe4 <prvCheckForValidListAndQueue+0x70>)
  401f96:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401f98:	4b13      	ldr	r3, [pc, #76]	; (401fe8 <prvCheckForValidListAndQueue+0x74>)
  401f9a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401f9c:	2200      	movs	r2, #0
  401f9e:	2110      	movs	r1, #16
  401fa0:	2005      	movs	r0, #5
  401fa2:	4b12      	ldr	r3, [pc, #72]	; (401fec <prvCheckForValidListAndQueue+0x78>)
  401fa4:	4798      	blx	r3
  401fa6:	4b0a      	ldr	r3, [pc, #40]	; (401fd0 <prvCheckForValidListAndQueue+0x5c>)
  401fa8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401faa:	b118      	cbz	r0, 401fb4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401fac:	4910      	ldr	r1, [pc, #64]	; (401ff0 <prvCheckForValidListAndQueue+0x7c>)
  401fae:	4b11      	ldr	r3, [pc, #68]	; (401ff4 <prvCheckForValidListAndQueue+0x80>)
  401fb0:	4798      	blx	r3
  401fb2:	e7e5      	b.n	401f80 <prvCheckForValidListAndQueue+0xc>
  401fb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fb8:	b672      	cpsid	i
  401fba:	f383 8811 	msr	BASEPRI, r3
  401fbe:	f3bf 8f6f 	isb	sy
  401fc2:	f3bf 8f4f 	dsb	sy
  401fc6:	b662      	cpsie	i
  401fc8:	e7fe      	b.n	401fc8 <prvCheckForValidListAndQueue+0x54>
  401fca:	bf00      	nop
  401fcc:	00400969 	.word	0x00400969
  401fd0:	2040c334 	.word	0x2040c334
  401fd4:	004009b5 	.word	0x004009b5
  401fd8:	2040c308 	.word	0x2040c308
  401fdc:	00400841 	.word	0x00400841
  401fe0:	2040c31c 	.word	0x2040c31c
  401fe4:	2040c300 	.word	0x2040c300
  401fe8:	2040c304 	.word	0x2040c304
  401fec:	00400e21 	.word	0x00400e21
  401ff0:	00408500 	.word	0x00408500
  401ff4:	00401431 	.word	0x00401431

00401ff8 <xTimerCreateTimerTask>:
{
  401ff8:	b510      	push	{r4, lr}
  401ffa:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401ffc:	4b0f      	ldr	r3, [pc, #60]	; (40203c <xTimerCreateTimerTask+0x44>)
  401ffe:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402000:	4b0f      	ldr	r3, [pc, #60]	; (402040 <xTimerCreateTimerTask+0x48>)
  402002:	681b      	ldr	r3, [r3, #0]
  402004:	b173      	cbz	r3, 402024 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402006:	2300      	movs	r3, #0
  402008:	9303      	str	r3, [sp, #12]
  40200a:	9302      	str	r3, [sp, #8]
  40200c:	9301      	str	r3, [sp, #4]
  40200e:	2204      	movs	r2, #4
  402010:	9200      	str	r2, [sp, #0]
  402012:	f44f 7282 	mov.w	r2, #260	; 0x104
  402016:	490b      	ldr	r1, [pc, #44]	; (402044 <xTimerCreateTimerTask+0x4c>)
  402018:	480b      	ldr	r0, [pc, #44]	; (402048 <xTimerCreateTimerTask+0x50>)
  40201a:	4c0c      	ldr	r4, [pc, #48]	; (40204c <xTimerCreateTimerTask+0x54>)
  40201c:	47a0      	blx	r4
	configASSERT( xReturn );
  40201e:	b108      	cbz	r0, 402024 <xTimerCreateTimerTask+0x2c>
}
  402020:	b004      	add	sp, #16
  402022:	bd10      	pop	{r4, pc}
  402024:	f04f 0380 	mov.w	r3, #128	; 0x80
  402028:	b672      	cpsid	i
  40202a:	f383 8811 	msr	BASEPRI, r3
  40202e:	f3bf 8f6f 	isb	sy
  402032:	f3bf 8f4f 	dsb	sy
  402036:	b662      	cpsie	i
  402038:	e7fe      	b.n	402038 <xTimerCreateTimerTask+0x40>
  40203a:	bf00      	nop
  40203c:	00401f75 	.word	0x00401f75
  402040:	2040c334 	.word	0x2040c334
  402044:	00408508 	.word	0x00408508
  402048:	00402179 	.word	0x00402179
  40204c:	00401541 	.word	0x00401541

00402050 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402050:	b1d8      	cbz	r0, 40208a <xTimerGenericCommand+0x3a>
{
  402052:	b530      	push	{r4, r5, lr}
  402054:	b085      	sub	sp, #20
  402056:	4615      	mov	r5, r2
  402058:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40205a:	4a15      	ldr	r2, [pc, #84]	; (4020b0 <xTimerGenericCommand+0x60>)
  40205c:	6810      	ldr	r0, [r2, #0]
  40205e:	b320      	cbz	r0, 4020aa <xTimerGenericCommand+0x5a>
  402060:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402062:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402064:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402066:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402068:	2905      	cmp	r1, #5
  40206a:	dc19      	bgt.n	4020a0 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40206c:	4b11      	ldr	r3, [pc, #68]	; (4020b4 <xTimerGenericCommand+0x64>)
  40206e:	4798      	blx	r3
  402070:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402072:	f04f 0300 	mov.w	r3, #0
  402076:	bf0c      	ite	eq
  402078:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40207a:	461a      	movne	r2, r3
  40207c:	4669      	mov	r1, sp
  40207e:	480c      	ldr	r0, [pc, #48]	; (4020b0 <xTimerGenericCommand+0x60>)
  402080:	6800      	ldr	r0, [r0, #0]
  402082:	4c0d      	ldr	r4, [pc, #52]	; (4020b8 <xTimerGenericCommand+0x68>)
  402084:	47a0      	blx	r4
}
  402086:	b005      	add	sp, #20
  402088:	bd30      	pop	{r4, r5, pc}
  40208a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40208e:	b672      	cpsid	i
  402090:	f383 8811 	msr	BASEPRI, r3
  402094:	f3bf 8f6f 	isb	sy
  402098:	f3bf 8f4f 	dsb	sy
  40209c:	b662      	cpsie	i
  40209e:	e7fe      	b.n	40209e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4020a0:	2300      	movs	r3, #0
  4020a2:	4669      	mov	r1, sp
  4020a4:	4c05      	ldr	r4, [pc, #20]	; (4020bc <xTimerGenericCommand+0x6c>)
  4020a6:	47a0      	blx	r4
  4020a8:	e7ed      	b.n	402086 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4020aa:	2000      	movs	r0, #0
	return xReturn;
  4020ac:	e7eb      	b.n	402086 <xTimerGenericCommand+0x36>
  4020ae:	bf00      	nop
  4020b0:	2040c334 	.word	0x2040c334
  4020b4:	00401d8d 	.word	0x00401d8d
  4020b8:	00400e9d 	.word	0x00400e9d
  4020bc:	00401081 	.word	0x00401081

004020c0 <prvSampleTimeNow>:
{
  4020c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020c4:	b082      	sub	sp, #8
  4020c6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4020c8:	4b24      	ldr	r3, [pc, #144]	; (40215c <prvSampleTimeNow+0x9c>)
  4020ca:	4798      	blx	r3
  4020cc:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4020ce:	4b24      	ldr	r3, [pc, #144]	; (402160 <prvSampleTimeNow+0xa0>)
  4020d0:	681b      	ldr	r3, [r3, #0]
  4020d2:	4298      	cmp	r0, r3
  4020d4:	d31b      	bcc.n	40210e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4020d6:	2300      	movs	r3, #0
  4020d8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4020dc:	4b20      	ldr	r3, [pc, #128]	; (402160 <prvSampleTimeNow+0xa0>)
  4020de:	601f      	str	r7, [r3, #0]
}
  4020e0:	4638      	mov	r0, r7
  4020e2:	b002      	add	sp, #8
  4020e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4020e8:	2100      	movs	r1, #0
  4020ea:	9100      	str	r1, [sp, #0]
  4020ec:	460b      	mov	r3, r1
  4020ee:	4652      	mov	r2, sl
  4020f0:	4620      	mov	r0, r4
  4020f2:	4c1c      	ldr	r4, [pc, #112]	; (402164 <prvSampleTimeNow+0xa4>)
  4020f4:	47a0      	blx	r4
				configASSERT( xResult );
  4020f6:	b960      	cbnz	r0, 402112 <prvSampleTimeNow+0x52>
  4020f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020fc:	b672      	cpsid	i
  4020fe:	f383 8811 	msr	BASEPRI, r3
  402102:	f3bf 8f6f 	isb	sy
  402106:	f3bf 8f4f 	dsb	sy
  40210a:	b662      	cpsie	i
  40210c:	e7fe      	b.n	40210c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40210e:	4d16      	ldr	r5, [pc, #88]	; (402168 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402110:	4e16      	ldr	r6, [pc, #88]	; (40216c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402112:	682b      	ldr	r3, [r5, #0]
  402114:	681a      	ldr	r2, [r3, #0]
  402116:	b1c2      	cbz	r2, 40214a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402118:	68db      	ldr	r3, [r3, #12]
  40211a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40211e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402120:	f104 0904 	add.w	r9, r4, #4
  402124:	4648      	mov	r0, r9
  402126:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402128:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40212a:	4620      	mov	r0, r4
  40212c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40212e:	69e3      	ldr	r3, [r4, #28]
  402130:	2b01      	cmp	r3, #1
  402132:	d1ee      	bne.n	402112 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402134:	69a3      	ldr	r3, [r4, #24]
  402136:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402138:	459a      	cmp	sl, r3
  40213a:	d2d5      	bcs.n	4020e8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40213c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40213e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402140:	4649      	mov	r1, r9
  402142:	6828      	ldr	r0, [r5, #0]
  402144:	4b0a      	ldr	r3, [pc, #40]	; (402170 <prvSampleTimeNow+0xb0>)
  402146:	4798      	blx	r3
  402148:	e7e3      	b.n	402112 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40214a:	4a0a      	ldr	r2, [pc, #40]	; (402174 <prvSampleTimeNow+0xb4>)
  40214c:	6810      	ldr	r0, [r2, #0]
  40214e:	4906      	ldr	r1, [pc, #24]	; (402168 <prvSampleTimeNow+0xa8>)
  402150:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402152:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402154:	2301      	movs	r3, #1
  402156:	f8c8 3000 	str.w	r3, [r8]
  40215a:	e7bf      	b.n	4020dc <prvSampleTimeNow+0x1c>
  40215c:	00401811 	.word	0x00401811
  402160:	2040c330 	.word	0x2040c330
  402164:	00402051 	.word	0x00402051
  402168:	2040c300 	.word	0x2040c300
  40216c:	004008a9 	.word	0x004008a9
  402170:	00400875 	.word	0x00400875
  402174:	2040c304 	.word	0x2040c304

00402178 <prvTimerTask>:
{
  402178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40217c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40217e:	4e75      	ldr	r6, [pc, #468]	; (402354 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402180:	4f75      	ldr	r7, [pc, #468]	; (402358 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402182:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402380 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402186:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402384 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40218a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  40218c:	681a      	ldr	r2, [r3, #0]
  40218e:	2a00      	cmp	r2, #0
  402190:	f000 80ce 	beq.w	402330 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402194:	68db      	ldr	r3, [r3, #12]
  402196:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402198:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40219a:	a804      	add	r0, sp, #16
  40219c:	4b6f      	ldr	r3, [pc, #444]	; (40235c <prvTimerTask+0x1e4>)
  40219e:	4798      	blx	r3
  4021a0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4021a2:	9b04      	ldr	r3, [sp, #16]
  4021a4:	2b00      	cmp	r3, #0
  4021a6:	d144      	bne.n	402232 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4021a8:	42a0      	cmp	r0, r4
  4021aa:	d212      	bcs.n	4021d2 <prvTimerTask+0x5a>
  4021ac:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4021ae:	1b61      	subs	r1, r4, r5
  4021b0:	4b6b      	ldr	r3, [pc, #428]	; (402360 <prvTimerTask+0x1e8>)
  4021b2:	6818      	ldr	r0, [r3, #0]
  4021b4:	4b6b      	ldr	r3, [pc, #428]	; (402364 <prvTimerTask+0x1ec>)
  4021b6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4021b8:	4b6b      	ldr	r3, [pc, #428]	; (402368 <prvTimerTask+0x1f0>)
  4021ba:	4798      	blx	r3
  4021bc:	2800      	cmp	r0, #0
  4021be:	d13a      	bne.n	402236 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4021c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4021c4:	f8c9 3000 	str.w	r3, [r9]
  4021c8:	f3bf 8f4f 	dsb	sy
  4021cc:	f3bf 8f6f 	isb	sy
  4021d0:	e031      	b.n	402236 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4021d2:	4b65      	ldr	r3, [pc, #404]	; (402368 <prvTimerTask+0x1f0>)
  4021d4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4021d6:	6833      	ldr	r3, [r6, #0]
  4021d8:	68db      	ldr	r3, [r3, #12]
  4021da:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4021de:	f10a 0004 	add.w	r0, sl, #4
  4021e2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4021e4:	f8da 301c 	ldr.w	r3, [sl, #28]
  4021e8:	2b01      	cmp	r3, #1
  4021ea:	d004      	beq.n	4021f6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4021ec:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4021f0:	4650      	mov	r0, sl
  4021f2:	4798      	blx	r3
  4021f4:	e01f      	b.n	402236 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4021f6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4021fa:	4623      	mov	r3, r4
  4021fc:	462a      	mov	r2, r5
  4021fe:	4421      	add	r1, r4
  402200:	4650      	mov	r0, sl
  402202:	4d5a      	ldr	r5, [pc, #360]	; (40236c <prvTimerTask+0x1f4>)
  402204:	47a8      	blx	r5
  402206:	2801      	cmp	r0, #1
  402208:	d1f0      	bne.n	4021ec <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40220a:	2100      	movs	r1, #0
  40220c:	9100      	str	r1, [sp, #0]
  40220e:	460b      	mov	r3, r1
  402210:	4622      	mov	r2, r4
  402212:	4650      	mov	r0, sl
  402214:	4c56      	ldr	r4, [pc, #344]	; (402370 <prvTimerTask+0x1f8>)
  402216:	47a0      	blx	r4
			configASSERT( xResult );
  402218:	2800      	cmp	r0, #0
  40221a:	d1e7      	bne.n	4021ec <prvTimerTask+0x74>
  40221c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402220:	b672      	cpsid	i
  402222:	f383 8811 	msr	BASEPRI, r3
  402226:	f3bf 8f6f 	isb	sy
  40222a:	f3bf 8f4f 	dsb	sy
  40222e:	b662      	cpsie	i
  402230:	e7fe      	b.n	402230 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402232:	4b4d      	ldr	r3, [pc, #308]	; (402368 <prvTimerTask+0x1f0>)
  402234:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402236:	4d4a      	ldr	r5, [pc, #296]	; (402360 <prvTimerTask+0x1e8>)
  402238:	4c4e      	ldr	r4, [pc, #312]	; (402374 <prvTimerTask+0x1fc>)
  40223a:	e006      	b.n	40224a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40223c:	9907      	ldr	r1, [sp, #28]
  40223e:	9806      	ldr	r0, [sp, #24]
  402240:	9b05      	ldr	r3, [sp, #20]
  402242:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402244:	9b04      	ldr	r3, [sp, #16]
  402246:	2b00      	cmp	r3, #0
  402248:	da09      	bge.n	40225e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40224a:	2300      	movs	r3, #0
  40224c:	461a      	mov	r2, r3
  40224e:	a904      	add	r1, sp, #16
  402250:	6828      	ldr	r0, [r5, #0]
  402252:	47a0      	blx	r4
  402254:	2800      	cmp	r0, #0
  402256:	d098      	beq.n	40218a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402258:	9b04      	ldr	r3, [sp, #16]
  40225a:	2b00      	cmp	r3, #0
  40225c:	dbee      	blt.n	40223c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40225e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402262:	f8da 3014 	ldr.w	r3, [sl, #20]
  402266:	b113      	cbz	r3, 40226e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402268:	f10a 0004 	add.w	r0, sl, #4
  40226c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40226e:	a803      	add	r0, sp, #12
  402270:	4b3a      	ldr	r3, [pc, #232]	; (40235c <prvTimerTask+0x1e4>)
  402272:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402274:	9b04      	ldr	r3, [sp, #16]
  402276:	2b09      	cmp	r3, #9
  402278:	d8e7      	bhi.n	40224a <prvTimerTask+0xd2>
  40227a:	a201      	add	r2, pc, #4	; (adr r2, 402280 <prvTimerTask+0x108>)
  40227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402280:	004022a9 	.word	0x004022a9
  402284:	004022a9 	.word	0x004022a9
  402288:	004022a9 	.word	0x004022a9
  40228c:	0040224b 	.word	0x0040224b
  402290:	004022fd 	.word	0x004022fd
  402294:	00402329 	.word	0x00402329
  402298:	004022a9 	.word	0x004022a9
  40229c:	004022a9 	.word	0x004022a9
  4022a0:	0040224b 	.word	0x0040224b
  4022a4:	004022fd 	.word	0x004022fd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4022a8:	9c05      	ldr	r4, [sp, #20]
  4022aa:	f8da 1018 	ldr.w	r1, [sl, #24]
  4022ae:	4623      	mov	r3, r4
  4022b0:	4602      	mov	r2, r0
  4022b2:	4421      	add	r1, r4
  4022b4:	4650      	mov	r0, sl
  4022b6:	4c2d      	ldr	r4, [pc, #180]	; (40236c <prvTimerTask+0x1f4>)
  4022b8:	47a0      	blx	r4
  4022ba:	2801      	cmp	r0, #1
  4022bc:	d1bc      	bne.n	402238 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4022be:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4022c2:	4650      	mov	r0, sl
  4022c4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4022c6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4022ca:	2b01      	cmp	r3, #1
  4022cc:	d1b4      	bne.n	402238 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4022ce:	f8da 2018 	ldr.w	r2, [sl, #24]
  4022d2:	2100      	movs	r1, #0
  4022d4:	9100      	str	r1, [sp, #0]
  4022d6:	460b      	mov	r3, r1
  4022d8:	9805      	ldr	r0, [sp, #20]
  4022da:	4402      	add	r2, r0
  4022dc:	4650      	mov	r0, sl
  4022de:	4c24      	ldr	r4, [pc, #144]	; (402370 <prvTimerTask+0x1f8>)
  4022e0:	47a0      	blx	r4
							configASSERT( xResult );
  4022e2:	2800      	cmp	r0, #0
  4022e4:	d1a8      	bne.n	402238 <prvTimerTask+0xc0>
  4022e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ea:	b672      	cpsid	i
  4022ec:	f383 8811 	msr	BASEPRI, r3
  4022f0:	f3bf 8f6f 	isb	sy
  4022f4:	f3bf 8f4f 	dsb	sy
  4022f8:	b662      	cpsie	i
  4022fa:	e7fe      	b.n	4022fa <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4022fc:	9905      	ldr	r1, [sp, #20]
  4022fe:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402302:	b131      	cbz	r1, 402312 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402304:	4603      	mov	r3, r0
  402306:	4602      	mov	r2, r0
  402308:	4401      	add	r1, r0
  40230a:	4650      	mov	r0, sl
  40230c:	4c17      	ldr	r4, [pc, #92]	; (40236c <prvTimerTask+0x1f4>)
  40230e:	47a0      	blx	r4
  402310:	e792      	b.n	402238 <prvTimerTask+0xc0>
  402312:	f04f 0380 	mov.w	r3, #128	; 0x80
  402316:	b672      	cpsid	i
  402318:	f383 8811 	msr	BASEPRI, r3
  40231c:	f3bf 8f6f 	isb	sy
  402320:	f3bf 8f4f 	dsb	sy
  402324:	b662      	cpsie	i
  402326:	e7fe      	b.n	402326 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402328:	4650      	mov	r0, sl
  40232a:	4b13      	ldr	r3, [pc, #76]	; (402378 <prvTimerTask+0x200>)
  40232c:	4798      	blx	r3
  40232e:	e783      	b.n	402238 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402330:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402332:	a804      	add	r0, sp, #16
  402334:	4b09      	ldr	r3, [pc, #36]	; (40235c <prvTimerTask+0x1e4>)
  402336:	4798      	blx	r3
  402338:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40233a:	9b04      	ldr	r3, [sp, #16]
  40233c:	2b00      	cmp	r3, #0
  40233e:	f47f af78 	bne.w	402232 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402342:	4b0e      	ldr	r3, [pc, #56]	; (40237c <prvTimerTask+0x204>)
  402344:	681b      	ldr	r3, [r3, #0]
  402346:	681a      	ldr	r2, [r3, #0]
  402348:	fab2 f282 	clz	r2, r2
  40234c:	0952      	lsrs	r2, r2, #5
  40234e:	2400      	movs	r4, #0
  402350:	e72d      	b.n	4021ae <prvTimerTask+0x36>
  402352:	bf00      	nop
  402354:	2040c300 	.word	0x2040c300
  402358:	00401801 	.word	0x00401801
  40235c:	004020c1 	.word	0x004020c1
  402360:	2040c334 	.word	0x2040c334
  402364:	00401465 	.word	0x00401465
  402368:	00401969 	.word	0x00401969
  40236c:	00401f29 	.word	0x00401f29
  402370:	00402051 	.word	0x00402051
  402374:	00401261 	.word	0x00401261
  402378:	00400b95 	.word	0x00400b95
  40237c:	2040c304 	.word	0x2040c304
  402380:	e000ed04 	.word	0xe000ed04
  402384:	004008a9 	.word	0x004008a9

00402388 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  402388:	4b01      	ldr	r3, [pc, #4]	; (402390 <gfx_mono_set_framebuffer+0x8>)
  40238a:	6018      	str	r0, [r3, #0]
  40238c:	4770      	bx	lr
  40238e:	bf00      	nop
  402390:	2040c338 	.word	0x2040c338

00402394 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  402394:	4b02      	ldr	r3, [pc, #8]	; (4023a0 <gfx_mono_framebuffer_put_byte+0xc>)
  402396:	681b      	ldr	r3, [r3, #0]
  402398:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40239c:	5442      	strb	r2, [r0, r1]
  40239e:	4770      	bx	lr
  4023a0:	2040c338 	.word	0x2040c338

004023a4 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4023a4:	4b02      	ldr	r3, [pc, #8]	; (4023b0 <gfx_mono_framebuffer_get_byte+0xc>)
  4023a6:	681b      	ldr	r3, [r3, #0]
  4023a8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4023ac:	5c40      	ldrb	r0, [r0, r1]
  4023ae:	4770      	bx	lr
  4023b0:	2040c338 	.word	0x2040c338

004023b4 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4023b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4023b8:	1884      	adds	r4, r0, r2
  4023ba:	2c80      	cmp	r4, #128	; 0x80
  4023bc:	dd02      	ble.n	4023c4 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4023be:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4023c2:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4023c4:	b322      	cbz	r2, 402410 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4023c6:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4023c8:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4023cc:	2601      	movs	r6, #1
  4023ce:	fa06 f101 	lsl.w	r1, r6, r1
  4023d2:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4023d4:	2b01      	cmp	r3, #1
  4023d6:	d01d      	beq.n	402414 <gfx_mono_generic_draw_horizontal_line+0x60>
  4023d8:	2b00      	cmp	r3, #0
  4023da:	d035      	beq.n	402448 <gfx_mono_generic_draw_horizontal_line+0x94>
  4023dc:	2b02      	cmp	r3, #2
  4023de:	d117      	bne.n	402410 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4023e0:	3801      	subs	r0, #1
  4023e2:	b2c7      	uxtb	r7, r0
  4023e4:	19d4      	adds	r4, r2, r7
  4023e6:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4023e8:	f8df a090 	ldr.w	sl, [pc, #144]	; 40247c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4023ec:	f04f 0900 	mov.w	r9, #0
  4023f0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 402480 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4023f4:	4621      	mov	r1, r4
  4023f6:	4628      	mov	r0, r5
  4023f8:	47d0      	blx	sl
			temp ^= pixelmask;
  4023fa:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4023fe:	464b      	mov	r3, r9
  402400:	b2d2      	uxtb	r2, r2
  402402:	4621      	mov	r1, r4
  402404:	4628      	mov	r0, r5
  402406:	47c0      	blx	r8
  402408:	3c01      	subs	r4, #1
  40240a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40240c:	42bc      	cmp	r4, r7
  40240e:	d1f1      	bne.n	4023f4 <gfx_mono_generic_draw_horizontal_line+0x40>
  402410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402414:	3801      	subs	r0, #1
  402416:	b2c7      	uxtb	r7, r0
  402418:	19d4      	adds	r4, r2, r7
  40241a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40241c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40247c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  402420:	f04f 0900 	mov.w	r9, #0
  402424:	f8df 8058 	ldr.w	r8, [pc, #88]	; 402480 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  402428:	4621      	mov	r1, r4
  40242a:	4628      	mov	r0, r5
  40242c:	47d0      	blx	sl
			temp |= pixelmask;
  40242e:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  402432:	464b      	mov	r3, r9
  402434:	b2d2      	uxtb	r2, r2
  402436:	4621      	mov	r1, r4
  402438:	4628      	mov	r0, r5
  40243a:	47c0      	blx	r8
  40243c:	3c01      	subs	r4, #1
  40243e:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  402440:	42bc      	cmp	r4, r7
  402442:	d1f1      	bne.n	402428 <gfx_mono_generic_draw_horizontal_line+0x74>
  402444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402448:	3801      	subs	r0, #1
  40244a:	b2c7      	uxtb	r7, r0
  40244c:	19d4      	adds	r4, r2, r7
  40244e:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  402450:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40247c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  402454:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  402456:	f8df 9028 	ldr.w	r9, [pc, #40]	; 402480 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40245a:	4621      	mov	r1, r4
  40245c:	4628      	mov	r0, r5
  40245e:	47c0      	blx	r8
			temp &= ~pixelmask;
  402460:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  402464:	2300      	movs	r3, #0
  402466:	b2d2      	uxtb	r2, r2
  402468:	4621      	mov	r1, r4
  40246a:	4628      	mov	r0, r5
  40246c:	47c8      	blx	r9
  40246e:	3c01      	subs	r4, #1
  402470:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  402472:	42bc      	cmp	r4, r7
  402474:	d1f1      	bne.n	40245a <gfx_mono_generic_draw_horizontal_line+0xa6>
  402476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40247a:	bf00      	nop
  40247c:	004026b5 	.word	0x004026b5
  402480:	004025b1 	.word	0x004025b1

00402484 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  402484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402488:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40248c:	b18b      	cbz	r3, 4024b2 <gfx_mono_generic_draw_filled_rect+0x2e>
  40248e:	461c      	mov	r4, r3
  402490:	4690      	mov	r8, r2
  402492:	4606      	mov	r6, r0
  402494:	1e4d      	subs	r5, r1, #1
  402496:	b2ed      	uxtb	r5, r5
  402498:	442c      	add	r4, r5
  40249a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40249c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4024b8 <gfx_mono_generic_draw_filled_rect+0x34>
  4024a0:	463b      	mov	r3, r7
  4024a2:	4642      	mov	r2, r8
  4024a4:	4621      	mov	r1, r4
  4024a6:	4630      	mov	r0, r6
  4024a8:	47c8      	blx	r9
  4024aa:	3c01      	subs	r4, #1
  4024ac:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4024ae:	42ac      	cmp	r4, r5
  4024b0:	d1f6      	bne.n	4024a0 <gfx_mono_generic_draw_filled_rect+0x1c>
  4024b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4024b6:	bf00      	nop
  4024b8:	004023b5 	.word	0x004023b5

004024bc <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024c0:	b083      	sub	sp, #12
  4024c2:	4604      	mov	r4, r0
  4024c4:	4688      	mov	r8, r1
  4024c6:	4691      	mov	r9, r2
  4024c8:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4024ca:	7a5b      	ldrb	r3, [r3, #9]
  4024cc:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4024d0:	2100      	movs	r1, #0
  4024d2:	9100      	str	r1, [sp, #0]
  4024d4:	4649      	mov	r1, r9
  4024d6:	4640      	mov	r0, r8
  4024d8:	4d21      	ldr	r5, [pc, #132]	; (402560 <gfx_mono_draw_char+0xa4>)
  4024da:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4024dc:	f89b 3000 	ldrb.w	r3, [fp]
  4024e0:	b113      	cbz	r3, 4024e8 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4024e2:	b003      	add	sp, #12
  4024e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4024e8:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4024ec:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4024ee:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4024f2:	bf18      	it	ne
  4024f4:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4024f6:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4024fa:	f89b 700a 	ldrb.w	r7, [fp, #10]
  4024fe:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  402500:	fb17 f70a 	smulbb	r7, r7, sl
  402504:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  402508:	f8db 3004 	ldr.w	r3, [fp, #4]
  40250c:	fa13 f787 	uxtah	r7, r3, r7
  402510:	e01f      	b.n	402552 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  402512:	0064      	lsls	r4, r4, #1
  402514:	b2e4      	uxtb	r4, r4
  402516:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  402518:	b2eb      	uxtb	r3, r5
  40251a:	429e      	cmp	r6, r3
  40251c:	d910      	bls.n	402540 <gfx_mono_draw_char+0x84>
  40251e:	b2eb      	uxtb	r3, r5
  402520:	eb08 0003 	add.w	r0, r8, r3
  402524:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  402526:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  40252a:	bf08      	it	eq
  40252c:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  402530:	f014 0f80 	tst.w	r4, #128	; 0x80
  402534:	d0ed      	beq.n	402512 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  402536:	2201      	movs	r2, #1
  402538:	4649      	mov	r1, r9
  40253a:	4b0a      	ldr	r3, [pc, #40]	; (402564 <gfx_mono_draw_char+0xa8>)
  40253c:	4798      	blx	r3
  40253e:	e7e8      	b.n	402512 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  402540:	f109 0901 	add.w	r9, r9, #1
  402544:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  402548:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  40254c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  402550:	d0c7      	beq.n	4024e2 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  402552:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  402556:	2e00      	cmp	r6, #0
  402558:	d0f2      	beq.n	402540 <gfx_mono_draw_char+0x84>
  40255a:	2500      	movs	r5, #0
  40255c:	462c      	mov	r4, r5
  40255e:	e7de      	b.n	40251e <gfx_mono_draw_char+0x62>
  402560:	00402485 	.word	0x00402485
  402564:	00402651 	.word	0x00402651

00402568 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  402568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40256c:	4604      	mov	r4, r0
  40256e:	4690      	mov	r8, r2
  402570:	461d      	mov	r5, r3
  402572:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  402574:	4f0d      	ldr	r7, [pc, #52]	; (4025ac <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  402576:	460e      	mov	r6, r1
  402578:	e008      	b.n	40258c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40257a:	7a6a      	ldrb	r2, [r5, #9]
  40257c:	3201      	adds	r2, #1
  40257e:	4442      	add	r2, r8
  402580:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  402584:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  402586:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40258a:	b16b      	cbz	r3, 4025a8 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  40258c:	7820      	ldrb	r0, [r4, #0]
  40258e:	280a      	cmp	r0, #10
  402590:	d0f3      	beq.n	40257a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  402592:	280d      	cmp	r0, #13
  402594:	d0f7      	beq.n	402586 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  402596:	462b      	mov	r3, r5
  402598:	4642      	mov	r2, r8
  40259a:	4649      	mov	r1, r9
  40259c:	47b8      	blx	r7
			x += font->width;
  40259e:	7a2b      	ldrb	r3, [r5, #8]
  4025a0:	4499      	add	r9, r3
  4025a2:	fa5f f989 	uxtb.w	r9, r9
  4025a6:	e7ee      	b.n	402586 <gfx_mono_draw_string+0x1e>
}
  4025a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025ac:	004024bd 	.word	0x004024bd

004025b0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4025b0:	b570      	push	{r4, r5, r6, lr}
  4025b2:	4604      	mov	r4, r0
  4025b4:	460d      	mov	r5, r1
  4025b6:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4025b8:	b91b      	cbnz	r3, 4025c2 <gfx_mono_ssd1306_put_byte+0x12>
  4025ba:	4b0d      	ldr	r3, [pc, #52]	; (4025f0 <gfx_mono_ssd1306_put_byte+0x40>)
  4025bc:	4798      	blx	r3
  4025be:	42b0      	cmp	r0, r6
  4025c0:	d015      	beq.n	4025ee <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4025c2:	4632      	mov	r2, r6
  4025c4:	4629      	mov	r1, r5
  4025c6:	4620      	mov	r0, r4
  4025c8:	4b0a      	ldr	r3, [pc, #40]	; (4025f4 <gfx_mono_ssd1306_put_byte+0x44>)
  4025ca:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4025cc:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4025d0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4025d4:	4c08      	ldr	r4, [pc, #32]	; (4025f8 <gfx_mono_ssd1306_put_byte+0x48>)
  4025d6:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4025d8:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4025dc:	f040 0010 	orr.w	r0, r0, #16
  4025e0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4025e2:	f005 000f 	and.w	r0, r5, #15
  4025e6:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4025e8:	4630      	mov	r0, r6
  4025ea:	4b04      	ldr	r3, [pc, #16]	; (4025fc <gfx_mono_ssd1306_put_byte+0x4c>)
  4025ec:	4798      	blx	r3
  4025ee:	bd70      	pop	{r4, r5, r6, pc}
  4025f0:	004023a5 	.word	0x004023a5
  4025f4:	00402395 	.word	0x00402395
  4025f8:	004026c1 	.word	0x004026c1
  4025fc:	004028e1 	.word	0x004028e1

00402600 <gfx_mono_ssd1306_init>:
{
  402600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  402604:	480d      	ldr	r0, [pc, #52]	; (40263c <gfx_mono_ssd1306_init+0x3c>)
  402606:	4b0e      	ldr	r3, [pc, #56]	; (402640 <gfx_mono_ssd1306_init+0x40>)
  402608:	4798      	blx	r3
	ssd1306_init();
  40260a:	4b0e      	ldr	r3, [pc, #56]	; (402644 <gfx_mono_ssd1306_init+0x44>)
  40260c:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40260e:	2040      	movs	r0, #64	; 0x40
  402610:	4b0d      	ldr	r3, [pc, #52]	; (402648 <gfx_mono_ssd1306_init+0x48>)
  402612:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  402614:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  402616:	f04f 0801 	mov.w	r8, #1
  40261a:	462f      	mov	r7, r5
  40261c:	4e0b      	ldr	r6, [pc, #44]	; (40264c <gfx_mono_ssd1306_init+0x4c>)
{
  40261e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  402620:	4643      	mov	r3, r8
  402622:	463a      	mov	r2, r7
  402624:	b2e1      	uxtb	r1, r4
  402626:	4628      	mov	r0, r5
  402628:	47b0      	blx	r6
  40262a:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40262c:	2c80      	cmp	r4, #128	; 0x80
  40262e:	d1f7      	bne.n	402620 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  402630:	3501      	adds	r5, #1
  402632:	b2ed      	uxtb	r5, r5
  402634:	2d04      	cmp	r5, #4
  402636:	d1f2      	bne.n	40261e <gfx_mono_ssd1306_init+0x1e>
  402638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40263c:	2040c33c 	.word	0x2040c33c
  402640:	00402389 	.word	0x00402389
  402644:	00402701 	.word	0x00402701
  402648:	004026c1 	.word	0x004026c1
  40264c:	004025b1 	.word	0x004025b1

00402650 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  402650:	09c3      	lsrs	r3, r0, #7
  402652:	d12a      	bne.n	4026aa <gfx_mono_ssd1306_draw_pixel+0x5a>
  402654:	291f      	cmp	r1, #31
  402656:	d828      	bhi.n	4026aa <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  402658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40265c:	4614      	mov	r4, r2
  40265e:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  402660:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  402662:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  402666:	2201      	movs	r2, #1
  402668:	fa02 f701 	lsl.w	r7, r2, r1
  40266c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  402670:	4601      	mov	r1, r0
  402672:	4630      	mov	r0, r6
  402674:	4b0d      	ldr	r3, [pc, #52]	; (4026ac <gfx_mono_ssd1306_draw_pixel+0x5c>)
  402676:	4798      	blx	r3
  402678:	4602      	mov	r2, r0
	switch (color) {
  40267a:	2c01      	cmp	r4, #1
  40267c:	d009      	beq.n	402692 <gfx_mono_ssd1306_draw_pixel+0x42>
  40267e:	b164      	cbz	r4, 40269a <gfx_mono_ssd1306_draw_pixel+0x4a>
  402680:	2c02      	cmp	r4, #2
  402682:	d00e      	beq.n	4026a2 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  402684:	2300      	movs	r3, #0
  402686:	4629      	mov	r1, r5
  402688:	4630      	mov	r0, r6
  40268a:	4c09      	ldr	r4, [pc, #36]	; (4026b0 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40268c:	47a0      	blx	r4
  40268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  402692:	ea48 0200 	orr.w	r2, r8, r0
  402696:	b2d2      	uxtb	r2, r2
		break;
  402698:	e7f4      	b.n	402684 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40269a:	ea20 0207 	bic.w	r2, r0, r7
  40269e:	b2d2      	uxtb	r2, r2
		break;
  4026a0:	e7f0      	b.n	402684 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4026a2:	ea88 0200 	eor.w	r2, r8, r0
  4026a6:	b2d2      	uxtb	r2, r2
		break;
  4026a8:	e7ec      	b.n	402684 <gfx_mono_ssd1306_draw_pixel+0x34>
  4026aa:	4770      	bx	lr
  4026ac:	004023a5 	.word	0x004023a5
  4026b0:	004025b1 	.word	0x004025b1

004026b4 <gfx_mono_ssd1306_get_byte>:
{
  4026b4:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4026b6:	4b01      	ldr	r3, [pc, #4]	; (4026bc <gfx_mono_ssd1306_get_byte+0x8>)
  4026b8:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4026ba:	bd08      	pop	{r3, pc}
  4026bc:	004023a5 	.word	0x004023a5

004026c0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4026c0:	b538      	push	{r3, r4, r5, lr}
  4026c2:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026c4:	2208      	movs	r2, #8
  4026c6:	4b09      	ldr	r3, [pc, #36]	; (4026ec <ssd1306_write_command+0x2c>)
  4026c8:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4026ca:	4c09      	ldr	r4, [pc, #36]	; (4026f0 <ssd1306_write_command+0x30>)
  4026cc:	2101      	movs	r1, #1
  4026ce:	4620      	mov	r0, r4
  4026d0:	4b08      	ldr	r3, [pc, #32]	; (4026f4 <ssd1306_write_command+0x34>)
  4026d2:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4026d4:	2301      	movs	r3, #1
  4026d6:	461a      	mov	r2, r3
  4026d8:	4629      	mov	r1, r5
  4026da:	4620      	mov	r0, r4
  4026dc:	4c06      	ldr	r4, [pc, #24]	; (4026f8 <ssd1306_write_command+0x38>)
  4026de:	47a0      	blx	r4
	delay_us(10);
  4026e0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4026e4:	4b05      	ldr	r3, [pc, #20]	; (4026fc <ssd1306_write_command+0x3c>)
  4026e6:	4798      	blx	r3
  4026e8:	bd38      	pop	{r3, r4, r5, pc}
  4026ea:	bf00      	nop
  4026ec:	400e1000 	.word	0x400e1000
  4026f0:	40008000 	.word	0x40008000
  4026f4:	00400679 	.word	0x00400679
  4026f8:	0040068f 	.word	0x0040068f
  4026fc:	20400001 	.word	0x20400001

00402700 <ssd1306_init>:
{
  402700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402704:	4d66      	ldr	r5, [pc, #408]	; (4028a0 <ssd1306_init+0x1a0>)
  402706:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40270a:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40270c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402710:	4b64      	ldr	r3, [pc, #400]	; (4028a4 <ssd1306_init+0x1a4>)
  402712:	2708      	movs	r7, #8
  402714:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402716:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40271a:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40271c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  402720:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  402722:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402724:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402728:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40272a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40272e:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402730:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  402732:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  402736:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  402738:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40273a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40273e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402740:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402742:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402748:	f022 0208 	bic.w	r2, r2, #8
  40274c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40274e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402750:	f022 0208 	bic.w	r2, r2, #8
  402754:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  402756:	601f      	str	r7, [r3, #0]
  402758:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40275a:	631f      	str	r7, [r3, #48]	; 0x30
  40275c:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40275e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4028dc <ssd1306_init+0x1dc>
  402762:	2300      	movs	r3, #0
  402764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402768:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40276c:	4640      	mov	r0, r8
  40276e:	4c4e      	ldr	r4, [pc, #312]	; (4028a8 <ssd1306_init+0x1a8>)
  402770:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  402772:	2300      	movs	r3, #0
  402774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402778:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40277c:	4640      	mov	r0, r8
  40277e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  402780:	2300      	movs	r3, #0
  402782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402786:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40278a:	4640      	mov	r0, r8
  40278c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40278e:	2300      	movs	r3, #0
  402790:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402794:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402798:	4640      	mov	r0, r8
  40279a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40279c:	2300      	movs	r3, #0
  40279e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4027a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4027a6:	4640      	mov	r0, r8
  4027a8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4027aa:	2300      	movs	r3, #0
  4027ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4027b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4027b4:	4640      	mov	r0, r8
  4027b6:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4027b8:	4c3c      	ldr	r4, [pc, #240]	; (4028ac <ssd1306_init+0x1ac>)
  4027ba:	f04f 0902 	mov.w	r9, #2
  4027be:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4027c2:	f04f 0880 	mov.w	r8, #128	; 0x80
  4027c6:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4027ca:	6863      	ldr	r3, [r4, #4]
  4027cc:	f043 0301 	orr.w	r3, r3, #1
  4027d0:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4027d2:	463a      	mov	r2, r7
  4027d4:	2101      	movs	r1, #1
  4027d6:	4620      	mov	r0, r4
  4027d8:	4b35      	ldr	r3, [pc, #212]	; (4028b0 <ssd1306_init+0x1b0>)
  4027da:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4027dc:	2200      	movs	r2, #0
  4027de:	2101      	movs	r1, #1
  4027e0:	4620      	mov	r0, r4
  4027e2:	4b34      	ldr	r3, [pc, #208]	; (4028b4 <ssd1306_init+0x1b4>)
  4027e4:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4027e6:	2200      	movs	r2, #0
  4027e8:	2101      	movs	r1, #1
  4027ea:	4620      	mov	r0, r4
  4027ec:	4b32      	ldr	r3, [pc, #200]	; (4028b8 <ssd1306_init+0x1b8>)
  4027ee:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4027f0:	6863      	ldr	r3, [r4, #4]
  4027f2:	f023 0302 	bic.w	r3, r3, #2
  4027f6:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  4027f8:	2200      	movs	r2, #0
  4027fa:	2101      	movs	r1, #1
  4027fc:	4620      	mov	r0, r4
  4027fe:	4b2f      	ldr	r3, [pc, #188]	; (4028bc <ssd1306_init+0x1bc>)
  402800:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  402802:	6863      	ldr	r3, [r4, #4]
  402804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402808:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40280a:	6863      	ldr	r3, [r4, #4]
  40280c:	f043 0310 	orr.w	r3, r3, #16
  402810:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  402812:	492b      	ldr	r1, [pc, #172]	; (4028c0 <ssd1306_init+0x1c0>)
  402814:	482b      	ldr	r0, [pc, #172]	; (4028c4 <ssd1306_init+0x1c4>)
  402816:	4b2c      	ldr	r3, [pc, #176]	; (4028c8 <ssd1306_init+0x1c8>)
  402818:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40281a:	b2c2      	uxtb	r2, r0
  40281c:	2101      	movs	r1, #1
  40281e:	4620      	mov	r0, r4
  402820:	4b2a      	ldr	r3, [pc, #168]	; (4028cc <ssd1306_init+0x1cc>)
  402822:	4798      	blx	r3
		spi_enable_clock(SPI0);
  402824:	4620      	mov	r0, r4
  402826:	4b2a      	ldr	r3, [pc, #168]	; (4028d0 <ssd1306_init+0x1d0>)
  402828:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40282a:	2301      	movs	r3, #1
  40282c:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40282e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  402830:	f640 30b8 	movw	r0, #3000	; 0xbb8
  402834:	4c27      	ldr	r4, [pc, #156]	; (4028d4 <ssd1306_init+0x1d4>)
  402836:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402838:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40283a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40283e:	47a0      	blx	r4
  402840:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  402842:	20a8      	movs	r0, #168	; 0xa8
  402844:	4c24      	ldr	r4, [pc, #144]	; (4028d8 <ssd1306_init+0x1d8>)
  402846:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  402848:	201f      	movs	r0, #31
  40284a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40284c:	20d3      	movs	r0, #211	; 0xd3
  40284e:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  402850:	2000      	movs	r0, #0
  402852:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  402854:	2040      	movs	r0, #64	; 0x40
  402856:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  402858:	20a1      	movs	r0, #161	; 0xa1
  40285a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40285c:	20c8      	movs	r0, #200	; 0xc8
  40285e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  402860:	20da      	movs	r0, #218	; 0xda
  402862:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  402864:	4648      	mov	r0, r9
  402866:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  402868:	2081      	movs	r0, #129	; 0x81
  40286a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40286c:	208f      	movs	r0, #143	; 0x8f
  40286e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  402870:	20a4      	movs	r0, #164	; 0xa4
  402872:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  402874:	20a6      	movs	r0, #166	; 0xa6
  402876:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  402878:	20d5      	movs	r0, #213	; 0xd5
  40287a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40287c:	4640      	mov	r0, r8
  40287e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  402880:	208d      	movs	r0, #141	; 0x8d
  402882:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  402884:	2014      	movs	r0, #20
  402886:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  402888:	20db      	movs	r0, #219	; 0xdb
  40288a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40288c:	2040      	movs	r0, #64	; 0x40
  40288e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  402890:	20d9      	movs	r0, #217	; 0xd9
  402892:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  402894:	20f1      	movs	r0, #241	; 0xf1
  402896:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  402898:	20af      	movs	r0, #175	; 0xaf
  40289a:	47a0      	blx	r4
  40289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4028a0:	400e1200 	.word	0x400e1200
  4028a4:	400e1000 	.word	0x400e1000
  4028a8:	00402be5 	.word	0x00402be5
  4028ac:	40008000 	.word	0x40008000
  4028b0:	004006ff 	.word	0x004006ff
  4028b4:	004006c3 	.word	0x004006c3
  4028b8:	004006e1 	.word	0x004006e1
  4028bc:	00400745 	.word	0x00400745
  4028c0:	08f0d180 	.word	0x08f0d180
  4028c4:	001e8480 	.word	0x001e8480
  4028c8:	00400759 	.word	0x00400759
  4028cc:	0040076f 	.word	0x0040076f
  4028d0:	0040064d 	.word	0x0040064d
  4028d4:	20400001 	.word	0x20400001
  4028d8:	004026c1 	.word	0x004026c1
  4028dc:	400e1400 	.word	0x400e1400

004028e0 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4028e0:	b538      	push	{r3, r4, r5, lr}
  4028e2:	4605      	mov	r5, r0
  4028e4:	2208      	movs	r2, #8
  4028e6:	4b09      	ldr	r3, [pc, #36]	; (40290c <ssd1306_write_data+0x2c>)
  4028e8:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4028ea:	4c09      	ldr	r4, [pc, #36]	; (402910 <ssd1306_write_data+0x30>)
  4028ec:	2101      	movs	r1, #1
  4028ee:	4620      	mov	r0, r4
  4028f0:	4b08      	ldr	r3, [pc, #32]	; (402914 <ssd1306_write_data+0x34>)
  4028f2:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  4028f4:	2301      	movs	r3, #1
  4028f6:	461a      	mov	r2, r3
  4028f8:	4629      	mov	r1, r5
  4028fa:	4620      	mov	r0, r4
  4028fc:	4c06      	ldr	r4, [pc, #24]	; (402918 <ssd1306_write_data+0x38>)
  4028fe:	47a0      	blx	r4
	delay_us(10);
  402900:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  402904:	4b05      	ldr	r3, [pc, #20]	; (40291c <ssd1306_write_data+0x3c>)
  402906:	4798      	blx	r3
  402908:	bd38      	pop	{r3, r4, r5, pc}
  40290a:	bf00      	nop
  40290c:	400e1000 	.word	0x400e1000
  402910:	40008000 	.word	0x40008000
  402914:	00400679 	.word	0x00400679
  402918:	0040068f 	.word	0x0040068f
  40291c:	20400001 	.word	0x20400001

00402920 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402920:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402922:	4810      	ldr	r0, [pc, #64]	; (402964 <sysclk_init+0x44>)
  402924:	4b10      	ldr	r3, [pc, #64]	; (402968 <sysclk_init+0x48>)
  402926:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402928:	213e      	movs	r1, #62	; 0x3e
  40292a:	2000      	movs	r0, #0
  40292c:	4b0f      	ldr	r3, [pc, #60]	; (40296c <sysclk_init+0x4c>)
  40292e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402930:	4c0f      	ldr	r4, [pc, #60]	; (402970 <sysclk_init+0x50>)
  402932:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402934:	2800      	cmp	r0, #0
  402936:	d0fc      	beq.n	402932 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402938:	4b0e      	ldr	r3, [pc, #56]	; (402974 <sysclk_init+0x54>)
  40293a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40293c:	4a0e      	ldr	r2, [pc, #56]	; (402978 <sysclk_init+0x58>)
  40293e:	4b0f      	ldr	r3, [pc, #60]	; (40297c <sysclk_init+0x5c>)
  402940:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402942:	4c0f      	ldr	r4, [pc, #60]	; (402980 <sysclk_init+0x60>)
  402944:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402946:	2800      	cmp	r0, #0
  402948:	d0fc      	beq.n	402944 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40294a:	2002      	movs	r0, #2
  40294c:	4b0d      	ldr	r3, [pc, #52]	; (402984 <sysclk_init+0x64>)
  40294e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402950:	2000      	movs	r0, #0
  402952:	4b0d      	ldr	r3, [pc, #52]	; (402988 <sysclk_init+0x68>)
  402954:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402956:	4b0d      	ldr	r3, [pc, #52]	; (40298c <sysclk_init+0x6c>)
  402958:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40295a:	4802      	ldr	r0, [pc, #8]	; (402964 <sysclk_init+0x44>)
  40295c:	4b02      	ldr	r3, [pc, #8]	; (402968 <sysclk_init+0x48>)
  40295e:	4798      	blx	r3
  402960:	bd10      	pop	{r4, pc}
  402962:	bf00      	nop
  402964:	11e1a300 	.word	0x11e1a300
  402968:	00403409 	.word	0x00403409
  40296c:	00402e81 	.word	0x00402e81
  402970:	00402ed5 	.word	0x00402ed5
  402974:	00402ee5 	.word	0x00402ee5
  402978:	20183f01 	.word	0x20183f01
  40297c:	400e0600 	.word	0x400e0600
  402980:	00402ef5 	.word	0x00402ef5
  402984:	00402de5 	.word	0x00402de5
  402988:	00402e1d 	.word	0x00402e1d
  40298c:	004032fd 	.word	0x004032fd

00402990 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402992:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402996:	4b48      	ldr	r3, [pc, #288]	; (402ab8 <board_init+0x128>)
  402998:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40299a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40299e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4029a2:	4b46      	ldr	r3, [pc, #280]	; (402abc <board_init+0x12c>)
  4029a4:	2200      	movs	r2, #0
  4029a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4029aa:	695a      	ldr	r2, [r3, #20]
  4029ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4029b0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4029b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4029b6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4029ba:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4029be:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4029c2:	f007 0007 	and.w	r0, r7, #7
  4029c6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4029c8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4029cc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4029d0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4029d4:	f3bf 8f4f 	dsb	sy
  4029d8:	f04f 34ff 	mov.w	r4, #4294967295
  4029dc:	fa04 fc00 	lsl.w	ip, r4, r0
  4029e0:	fa06 f000 	lsl.w	r0, r6, r0
  4029e4:	fa04 f40e 	lsl.w	r4, r4, lr
  4029e8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4029ec:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4029ee:	463a      	mov	r2, r7
  4029f0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4029f2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4029f6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4029fa:	3a01      	subs	r2, #1
  4029fc:	4423      	add	r3, r4
  4029fe:	f1b2 3fff 	cmp.w	r2, #4294967295
  402a02:	d1f6      	bne.n	4029f2 <board_init+0x62>
        } while(sets--);
  402a04:	3e01      	subs	r6, #1
  402a06:	4460      	add	r0, ip
  402a08:	f1b6 3fff 	cmp.w	r6, #4294967295
  402a0c:	d1ef      	bne.n	4029ee <board_init+0x5e>
  402a0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  402a12:	4b2a      	ldr	r3, [pc, #168]	; (402abc <board_init+0x12c>)
  402a14:	695a      	ldr	r2, [r3, #20]
  402a16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  402a1a:	615a      	str	r2, [r3, #20]
  402a1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a20:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402a24:	4a26      	ldr	r2, [pc, #152]	; (402ac0 <board_init+0x130>)
  402a26:	4927      	ldr	r1, [pc, #156]	; (402ac4 <board_init+0x134>)
  402a28:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402a2a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  402a2e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  402a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a34:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402a38:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  402a3c:	f022 0201 	bic.w	r2, r2, #1
  402a40:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402a44:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  402a48:	f022 0201 	bic.w	r2, r2, #1
  402a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  402a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a54:	f3bf 8f6f 	isb	sy
  402a58:	200a      	movs	r0, #10
  402a5a:	4c1b      	ldr	r4, [pc, #108]	; (402ac8 <board_init+0x138>)
  402a5c:	47a0      	blx	r4
  402a5e:	200b      	movs	r0, #11
  402a60:	47a0      	blx	r4
  402a62:	200c      	movs	r0, #12
  402a64:	47a0      	blx	r4
  402a66:	2010      	movs	r0, #16
  402a68:	47a0      	blx	r4
  402a6a:	2011      	movs	r0, #17
  402a6c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402a6e:	4b17      	ldr	r3, [pc, #92]	; (402acc <board_init+0x13c>)
  402a70:	f44f 7280 	mov.w	r2, #256	; 0x100
  402a74:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402a76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402a7a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402a7c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  402a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a84:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402a86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402a8a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402a90:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402a92:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402a98:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402a9a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402a9e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402aa0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402aa2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402aa6:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402aa8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402aac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402ab0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ab6:	bf00      	nop
  402ab8:	400e1850 	.word	0x400e1850
  402abc:	e000ed00 	.word	0xe000ed00
  402ac0:	400e0c00 	.word	0x400e0c00
  402ac4:	5a00080c 	.word	0x5a00080c
  402ac8:	00402f05 	.word	0x00402f05
  402acc:	400e1200 	.word	0x400e1200

00402ad0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  402ad0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  402ad4:	0053      	lsls	r3, r2, #1
  402ad6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402ada:	fbb2 f2f3 	udiv	r2, r2, r3
  402ade:	3a01      	subs	r2, #1
  402ae0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  402ae4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  402ae8:	4770      	bx	lr

00402aea <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402aea:	6301      	str	r1, [r0, #48]	; 0x30
  402aec:	4770      	bx	lr

00402aee <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402aee:	6341      	str	r1, [r0, #52]	; 0x34
  402af0:	4770      	bx	lr

00402af2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402af2:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402af4:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402af8:	d03a      	beq.n	402b70 <pio_set_peripheral+0x7e>
  402afa:	d813      	bhi.n	402b24 <pio_set_peripheral+0x32>
  402afc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402b00:	d025      	beq.n	402b4e <pio_set_peripheral+0x5c>
  402b02:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402b06:	d10a      	bne.n	402b1e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b08:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402b0a:	4313      	orrs	r3, r2
  402b0c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402b0e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402b10:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402b12:	400b      	ands	r3, r1
  402b14:	ea23 0302 	bic.w	r3, r3, r2
  402b18:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402b1a:	6042      	str	r2, [r0, #4]
  402b1c:	4770      	bx	lr
	switch (ul_type) {
  402b1e:	2900      	cmp	r1, #0
  402b20:	d1fb      	bne.n	402b1a <pio_set_peripheral+0x28>
  402b22:	4770      	bx	lr
  402b24:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402b28:	d021      	beq.n	402b6e <pio_set_peripheral+0x7c>
  402b2a:	d809      	bhi.n	402b40 <pio_set_peripheral+0x4e>
  402b2c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402b30:	d1f3      	bne.n	402b1a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b32:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402b34:	4313      	orrs	r3, r2
  402b36:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b38:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402b3a:	4313      	orrs	r3, r2
  402b3c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402b3e:	e7ec      	b.n	402b1a <pio_set_peripheral+0x28>
	switch (ul_type) {
  402b40:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402b44:	d013      	beq.n	402b6e <pio_set_peripheral+0x7c>
  402b46:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402b4a:	d010      	beq.n	402b6e <pio_set_peripheral+0x7c>
  402b4c:	e7e5      	b.n	402b1a <pio_set_peripheral+0x28>
{
  402b4e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b50:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b52:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402b54:	43d3      	mvns	r3, r2
  402b56:	4021      	ands	r1, r4
  402b58:	461c      	mov	r4, r3
  402b5a:	4019      	ands	r1, r3
  402b5c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b5e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402b60:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402b62:	400b      	ands	r3, r1
  402b64:	4023      	ands	r3, r4
  402b66:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402b68:	6042      	str	r2, [r0, #4]
}
  402b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b6e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b70:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b72:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402b74:	400b      	ands	r3, r1
  402b76:	ea23 0302 	bic.w	r3, r3, r2
  402b7a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b7c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402b7e:	4313      	orrs	r3, r2
  402b80:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402b82:	e7ca      	b.n	402b1a <pio_set_peripheral+0x28>

00402b84 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402b84:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402b86:	f012 0f01 	tst.w	r2, #1
  402b8a:	d10d      	bne.n	402ba8 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  402b8c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402b8e:	f012 0f0a 	tst.w	r2, #10
  402b92:	d00b      	beq.n	402bac <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  402b94:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402b96:	f012 0f02 	tst.w	r2, #2
  402b9a:	d109      	bne.n	402bb0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402b9c:	f012 0f08 	tst.w	r2, #8
  402ba0:	d008      	beq.n	402bb4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402ba2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  402ba6:	e005      	b.n	402bb4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  402ba8:	6641      	str	r1, [r0, #100]	; 0x64
  402baa:	e7f0      	b.n	402b8e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  402bac:	6241      	str	r1, [r0, #36]	; 0x24
  402bae:	e7f2      	b.n	402b96 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  402bb0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  402bb4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402bb6:	6001      	str	r1, [r0, #0]
  402bb8:	4770      	bx	lr

00402bba <pio_set_output>:
{
  402bba:	b410      	push	{r4}
  402bbc:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402bbe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402bc0:	b94c      	cbnz	r4, 402bd6 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  402bc2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402bc4:	b14b      	cbz	r3, 402bda <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  402bc6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402bc8:	b94a      	cbnz	r2, 402bde <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  402bca:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402bcc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402bce:	6001      	str	r1, [r0, #0]
}
  402bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  402bd4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402bd6:	6641      	str	r1, [r0, #100]	; 0x64
  402bd8:	e7f4      	b.n	402bc4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402bda:	6541      	str	r1, [r0, #84]	; 0x54
  402bdc:	e7f4      	b.n	402bc8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402bde:	6301      	str	r1, [r0, #48]	; 0x30
  402be0:	e7f4      	b.n	402bcc <pio_set_output+0x12>
	...

00402be4 <pio_configure>:
{
  402be4:	b570      	push	{r4, r5, r6, lr}
  402be6:	b082      	sub	sp, #8
  402be8:	4605      	mov	r5, r0
  402bea:	4616      	mov	r6, r2
  402bec:	461c      	mov	r4, r3
	switch (ul_type) {
  402bee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402bf2:	d014      	beq.n	402c1e <pio_configure+0x3a>
  402bf4:	d90a      	bls.n	402c0c <pio_configure+0x28>
  402bf6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402bfa:	d024      	beq.n	402c46 <pio_configure+0x62>
  402bfc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402c00:	d021      	beq.n	402c46 <pio_configure+0x62>
  402c02:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402c06:	d017      	beq.n	402c38 <pio_configure+0x54>
		return 0;
  402c08:	2000      	movs	r0, #0
  402c0a:	e01a      	b.n	402c42 <pio_configure+0x5e>
	switch (ul_type) {
  402c0c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402c10:	d005      	beq.n	402c1e <pio_configure+0x3a>
  402c12:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402c16:	d002      	beq.n	402c1e <pio_configure+0x3a>
  402c18:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402c1c:	d1f4      	bne.n	402c08 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402c1e:	4632      	mov	r2, r6
  402c20:	4628      	mov	r0, r5
  402c22:	4b11      	ldr	r3, [pc, #68]	; (402c68 <pio_configure+0x84>)
  402c24:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402c26:	f014 0f01 	tst.w	r4, #1
  402c2a:	d102      	bne.n	402c32 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  402c2c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  402c2e:	2001      	movs	r0, #1
  402c30:	e007      	b.n	402c42 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  402c32:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  402c34:	2001      	movs	r0, #1
  402c36:	e004      	b.n	402c42 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402c38:	461a      	mov	r2, r3
  402c3a:	4631      	mov	r1, r6
  402c3c:	4b0b      	ldr	r3, [pc, #44]	; (402c6c <pio_configure+0x88>)
  402c3e:	4798      	blx	r3
	return 1;
  402c40:	2001      	movs	r0, #1
}
  402c42:	b002      	add	sp, #8
  402c44:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402c46:	f004 0301 	and.w	r3, r4, #1
  402c4a:	9300      	str	r3, [sp, #0]
  402c4c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402c50:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402c54:	bf14      	ite	ne
  402c56:	2200      	movne	r2, #0
  402c58:	2201      	moveq	r2, #1
  402c5a:	4631      	mov	r1, r6
  402c5c:	4628      	mov	r0, r5
  402c5e:	4c04      	ldr	r4, [pc, #16]	; (402c70 <pio_configure+0x8c>)
  402c60:	47a0      	blx	r4
	return 1;
  402c62:	2001      	movs	r0, #1
		break;
  402c64:	e7ed      	b.n	402c42 <pio_configure+0x5e>
  402c66:	bf00      	nop
  402c68:	00402af3 	.word	0x00402af3
  402c6c:	00402b85 	.word	0x00402b85
  402c70:	00402bbb 	.word	0x00402bbb

00402c74 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  402c74:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402c76:	420b      	tst	r3, r1
}
  402c78:	bf14      	ite	ne
  402c7a:	2001      	movne	r0, #1
  402c7c:	2000      	moveq	r0, #0
  402c7e:	4770      	bx	lr

00402c80 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  402c80:	f012 0f10 	tst.w	r2, #16
  402c84:	d012      	beq.n	402cac <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  402c86:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402c8a:	f012 0f20 	tst.w	r2, #32
  402c8e:	d007      	beq.n	402ca0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  402c90:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  402c94:	f012 0f40 	tst.w	r2, #64	; 0x40
  402c98:	d005      	beq.n	402ca6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  402c9a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  402c9e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  402ca0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  402ca4:	e7f6      	b.n	402c94 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  402ca6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402caa:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  402cac:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402cb0:	4770      	bx	lr

00402cb2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  402cb2:	6401      	str	r1, [r0, #64]	; 0x40
  402cb4:	4770      	bx	lr

00402cb6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402cb6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402cb8:	4770      	bx	lr

00402cba <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402cba:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402cbc:	4770      	bx	lr
	...

00402cc0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cc4:	4604      	mov	r4, r0
  402cc6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402cc8:	4b0e      	ldr	r3, [pc, #56]	; (402d04 <pio_handler_process+0x44>)
  402cca:	4798      	blx	r3
  402ccc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402cce:	4620      	mov	r0, r4
  402cd0:	4b0d      	ldr	r3, [pc, #52]	; (402d08 <pio_handler_process+0x48>)
  402cd2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402cd4:	4005      	ands	r5, r0
  402cd6:	d013      	beq.n	402d00 <pio_handler_process+0x40>
  402cd8:	4c0c      	ldr	r4, [pc, #48]	; (402d0c <pio_handler_process+0x4c>)
  402cda:	f104 0660 	add.w	r6, r4, #96	; 0x60
  402cde:	e003      	b.n	402ce8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402ce0:	42b4      	cmp	r4, r6
  402ce2:	d00d      	beq.n	402d00 <pio_handler_process+0x40>
  402ce4:	3410      	adds	r4, #16
		while (status != 0) {
  402ce6:	b15d      	cbz	r5, 402d00 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402ce8:	6820      	ldr	r0, [r4, #0]
  402cea:	4540      	cmp	r0, r8
  402cec:	d1f8      	bne.n	402ce0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cee:	6861      	ldr	r1, [r4, #4]
  402cf0:	4229      	tst	r1, r5
  402cf2:	d0f5      	beq.n	402ce0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cf4:	68e3      	ldr	r3, [r4, #12]
  402cf6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cf8:	6863      	ldr	r3, [r4, #4]
  402cfa:	ea25 0503 	bic.w	r5, r5, r3
  402cfe:	e7ef      	b.n	402ce0 <pio_handler_process+0x20>
  402d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d04:	00402cb7 	.word	0x00402cb7
  402d08:	00402cbb 	.word	0x00402cbb
  402d0c:	2040c53c 	.word	0x2040c53c

00402d10 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402d12:	4c18      	ldr	r4, [pc, #96]	; (402d74 <pio_handler_set+0x64>)
  402d14:	6826      	ldr	r6, [r4, #0]
  402d16:	2e06      	cmp	r6, #6
  402d18:	d82a      	bhi.n	402d70 <pio_handler_set+0x60>
  402d1a:	f04f 0c00 	mov.w	ip, #0
  402d1e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402d20:	4f15      	ldr	r7, [pc, #84]	; (402d78 <pio_handler_set+0x68>)
  402d22:	e004      	b.n	402d2e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402d24:	3401      	adds	r4, #1
  402d26:	b2e4      	uxtb	r4, r4
  402d28:	46a4      	mov	ip, r4
  402d2a:	42a6      	cmp	r6, r4
  402d2c:	d309      	bcc.n	402d42 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  402d2e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402d30:	0125      	lsls	r5, r4, #4
  402d32:	597d      	ldr	r5, [r7, r5]
  402d34:	428d      	cmp	r5, r1
  402d36:	d1f5      	bne.n	402d24 <pio_handler_set+0x14>
  402d38:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  402d3c:	686d      	ldr	r5, [r5, #4]
  402d3e:	4295      	cmp	r5, r2
  402d40:	d1f0      	bne.n	402d24 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402d42:	4d0d      	ldr	r5, [pc, #52]	; (402d78 <pio_handler_set+0x68>)
  402d44:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402d48:	eb05 040e 	add.w	r4, r5, lr
  402d4c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  402d50:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  402d52:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  402d54:	9906      	ldr	r1, [sp, #24]
  402d56:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402d58:	3601      	adds	r6, #1
  402d5a:	4566      	cmp	r6, ip
  402d5c:	d005      	beq.n	402d6a <pio_handler_set+0x5a>
  402d5e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402d60:	461a      	mov	r2, r3
  402d62:	4b06      	ldr	r3, [pc, #24]	; (402d7c <pio_handler_set+0x6c>)
  402d64:	4798      	blx	r3

	return 0;
  402d66:	2000      	movs	r0, #0
  402d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  402d6a:	4902      	ldr	r1, [pc, #8]	; (402d74 <pio_handler_set+0x64>)
  402d6c:	600e      	str	r6, [r1, #0]
  402d6e:	e7f6      	b.n	402d5e <pio_handler_set+0x4e>
		return 1;
  402d70:	2001      	movs	r0, #1
}
  402d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d74:	2040c5ac 	.word	0x2040c5ac
  402d78:	2040c53c 	.word	0x2040c53c
  402d7c:	00402c81 	.word	0x00402c81

00402d80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402d80:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402d82:	210a      	movs	r1, #10
  402d84:	4801      	ldr	r0, [pc, #4]	; (402d8c <PIOA_Handler+0xc>)
  402d86:	4b02      	ldr	r3, [pc, #8]	; (402d90 <PIOA_Handler+0x10>)
  402d88:	4798      	blx	r3
  402d8a:	bd08      	pop	{r3, pc}
  402d8c:	400e0e00 	.word	0x400e0e00
  402d90:	00402cc1 	.word	0x00402cc1

00402d94 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402d94:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402d96:	210b      	movs	r1, #11
  402d98:	4801      	ldr	r0, [pc, #4]	; (402da0 <PIOB_Handler+0xc>)
  402d9a:	4b02      	ldr	r3, [pc, #8]	; (402da4 <PIOB_Handler+0x10>)
  402d9c:	4798      	blx	r3
  402d9e:	bd08      	pop	{r3, pc}
  402da0:	400e1000 	.word	0x400e1000
  402da4:	00402cc1 	.word	0x00402cc1

00402da8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402da8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402daa:	210c      	movs	r1, #12
  402dac:	4801      	ldr	r0, [pc, #4]	; (402db4 <PIOC_Handler+0xc>)
  402dae:	4b02      	ldr	r3, [pc, #8]	; (402db8 <PIOC_Handler+0x10>)
  402db0:	4798      	blx	r3
  402db2:	bd08      	pop	{r3, pc}
  402db4:	400e1200 	.word	0x400e1200
  402db8:	00402cc1 	.word	0x00402cc1

00402dbc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402dbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  402dbe:	2110      	movs	r1, #16
  402dc0:	4801      	ldr	r0, [pc, #4]	; (402dc8 <PIOD_Handler+0xc>)
  402dc2:	4b02      	ldr	r3, [pc, #8]	; (402dcc <PIOD_Handler+0x10>)
  402dc4:	4798      	blx	r3
  402dc6:	bd08      	pop	{r3, pc}
  402dc8:	400e1400 	.word	0x400e1400
  402dcc:	00402cc1 	.word	0x00402cc1

00402dd0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402dd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  402dd2:	2111      	movs	r1, #17
  402dd4:	4801      	ldr	r0, [pc, #4]	; (402ddc <PIOE_Handler+0xc>)
  402dd6:	4b02      	ldr	r3, [pc, #8]	; (402de0 <PIOE_Handler+0x10>)
  402dd8:	4798      	blx	r3
  402dda:	bd08      	pop	{r3, pc}
  402ddc:	400e1600 	.word	0x400e1600
  402de0:	00402cc1 	.word	0x00402cc1

00402de4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402de4:	2803      	cmp	r0, #3
  402de6:	d011      	beq.n	402e0c <pmc_mck_set_division+0x28>
  402de8:	2804      	cmp	r0, #4
  402dea:	d012      	beq.n	402e12 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402dec:	2802      	cmp	r0, #2
  402dee:	bf0c      	ite	eq
  402df0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402df4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402df6:	4a08      	ldr	r2, [pc, #32]	; (402e18 <pmc_mck_set_division+0x34>)
  402df8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402dfe:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  402e00:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402e02:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402e04:	f013 0f08 	tst.w	r3, #8
  402e08:	d0fb      	beq.n	402e02 <pmc_mck_set_division+0x1e>
}
  402e0a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402e0c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402e10:	e7f1      	b.n	402df6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402e12:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  402e16:	e7ee      	b.n	402df6 <pmc_mck_set_division+0x12>
  402e18:	400e0600 	.word	0x400e0600

00402e1c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402e1c:	4a17      	ldr	r2, [pc, #92]	; (402e7c <pmc_switch_mck_to_pllack+0x60>)
  402e1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402e24:	4318      	orrs	r0, r3
  402e26:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402e28:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402e2a:	f013 0f08 	tst.w	r3, #8
  402e2e:	d10a      	bne.n	402e46 <pmc_switch_mck_to_pllack+0x2a>
  402e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402e34:	4911      	ldr	r1, [pc, #68]	; (402e7c <pmc_switch_mck_to_pllack+0x60>)
  402e36:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402e38:	f012 0f08 	tst.w	r2, #8
  402e3c:	d103      	bne.n	402e46 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402e3e:	3b01      	subs	r3, #1
  402e40:	d1f9      	bne.n	402e36 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402e42:	2001      	movs	r0, #1
  402e44:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402e46:	4a0d      	ldr	r2, [pc, #52]	; (402e7c <pmc_switch_mck_to_pllack+0x60>)
  402e48:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e4a:	f023 0303 	bic.w	r3, r3, #3
  402e4e:	f043 0302 	orr.w	r3, r3, #2
  402e52:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402e54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402e56:	f013 0f08 	tst.w	r3, #8
  402e5a:	d10a      	bne.n	402e72 <pmc_switch_mck_to_pllack+0x56>
  402e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402e60:	4906      	ldr	r1, [pc, #24]	; (402e7c <pmc_switch_mck_to_pllack+0x60>)
  402e62:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402e64:	f012 0f08 	tst.w	r2, #8
  402e68:	d105      	bne.n	402e76 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402e6a:	3b01      	subs	r3, #1
  402e6c:	d1f9      	bne.n	402e62 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402e6e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402e70:	4770      	bx	lr
	return 0;
  402e72:	2000      	movs	r0, #0
  402e74:	4770      	bx	lr
  402e76:	2000      	movs	r0, #0
  402e78:	4770      	bx	lr
  402e7a:	bf00      	nop
  402e7c:	400e0600 	.word	0x400e0600

00402e80 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402e80:	b9a0      	cbnz	r0, 402eac <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402e82:	480e      	ldr	r0, [pc, #56]	; (402ebc <pmc_switch_mainck_to_xtal+0x3c>)
  402e84:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402e86:	0209      	lsls	r1, r1, #8
  402e88:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402e8a:	4a0d      	ldr	r2, [pc, #52]	; (402ec0 <pmc_switch_mainck_to_xtal+0x40>)
  402e8c:	401a      	ands	r2, r3
  402e8e:	4b0d      	ldr	r3, [pc, #52]	; (402ec4 <pmc_switch_mainck_to_xtal+0x44>)
  402e90:	4313      	orrs	r3, r2
  402e92:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402e94:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402e96:	4602      	mov	r2, r0
  402e98:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402e9a:	f013 0f01 	tst.w	r3, #1
  402e9e:	d0fb      	beq.n	402e98 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402ea0:	4a06      	ldr	r2, [pc, #24]	; (402ebc <pmc_switch_mainck_to_xtal+0x3c>)
  402ea2:	6a11      	ldr	r1, [r2, #32]
  402ea4:	4b08      	ldr	r3, [pc, #32]	; (402ec8 <pmc_switch_mainck_to_xtal+0x48>)
  402ea6:	430b      	orrs	r3, r1
  402ea8:	6213      	str	r3, [r2, #32]
  402eaa:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402eac:	4903      	ldr	r1, [pc, #12]	; (402ebc <pmc_switch_mainck_to_xtal+0x3c>)
  402eae:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402eb0:	4a06      	ldr	r2, [pc, #24]	; (402ecc <pmc_switch_mainck_to_xtal+0x4c>)
  402eb2:	401a      	ands	r2, r3
  402eb4:	4b06      	ldr	r3, [pc, #24]	; (402ed0 <pmc_switch_mainck_to_xtal+0x50>)
  402eb6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402eb8:	620b      	str	r3, [r1, #32]
  402eba:	4770      	bx	lr
  402ebc:	400e0600 	.word	0x400e0600
  402ec0:	ffc8fffc 	.word	0xffc8fffc
  402ec4:	00370001 	.word	0x00370001
  402ec8:	01370000 	.word	0x01370000
  402ecc:	fec8fffc 	.word	0xfec8fffc
  402ed0:	01370002 	.word	0x01370002

00402ed4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402ed4:	4b02      	ldr	r3, [pc, #8]	; (402ee0 <pmc_osc_is_ready_mainck+0xc>)
  402ed6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402ed8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402edc:	4770      	bx	lr
  402ede:	bf00      	nop
  402ee0:	400e0600 	.word	0x400e0600

00402ee4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402ee4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402ee8:	4b01      	ldr	r3, [pc, #4]	; (402ef0 <pmc_disable_pllack+0xc>)
  402eea:	629a      	str	r2, [r3, #40]	; 0x28
  402eec:	4770      	bx	lr
  402eee:	bf00      	nop
  402ef0:	400e0600 	.word	0x400e0600

00402ef4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402ef4:	4b02      	ldr	r3, [pc, #8]	; (402f00 <pmc_is_locked_pllack+0xc>)
  402ef6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402ef8:	f000 0002 	and.w	r0, r0, #2
  402efc:	4770      	bx	lr
  402efe:	bf00      	nop
  402f00:	400e0600 	.word	0x400e0600

00402f04 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402f04:	283f      	cmp	r0, #63	; 0x3f
  402f06:	d81e      	bhi.n	402f46 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402f08:	281f      	cmp	r0, #31
  402f0a:	d80c      	bhi.n	402f26 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402f0c:	4b11      	ldr	r3, [pc, #68]	; (402f54 <pmc_enable_periph_clk+0x50>)
  402f0e:	699a      	ldr	r2, [r3, #24]
  402f10:	2301      	movs	r3, #1
  402f12:	4083      	lsls	r3, r0
  402f14:	4393      	bics	r3, r2
  402f16:	d018      	beq.n	402f4a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402f18:	2301      	movs	r3, #1
  402f1a:	fa03 f000 	lsl.w	r0, r3, r0
  402f1e:	4b0d      	ldr	r3, [pc, #52]	; (402f54 <pmc_enable_periph_clk+0x50>)
  402f20:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402f22:	2000      	movs	r0, #0
  402f24:	4770      	bx	lr
		ul_id -= 32;
  402f26:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402f28:	4b0a      	ldr	r3, [pc, #40]	; (402f54 <pmc_enable_periph_clk+0x50>)
  402f2a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402f2e:	2301      	movs	r3, #1
  402f30:	4083      	lsls	r3, r0
  402f32:	4393      	bics	r3, r2
  402f34:	d00b      	beq.n	402f4e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402f36:	2301      	movs	r3, #1
  402f38:	fa03 f000 	lsl.w	r0, r3, r0
  402f3c:	4b05      	ldr	r3, [pc, #20]	; (402f54 <pmc_enable_periph_clk+0x50>)
  402f3e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  402f42:	2000      	movs	r0, #0
  402f44:	4770      	bx	lr
		return 1;
  402f46:	2001      	movs	r0, #1
  402f48:	4770      	bx	lr
	return 0;
  402f4a:	2000      	movs	r0, #0
  402f4c:	4770      	bx	lr
  402f4e:	2000      	movs	r0, #0
}
  402f50:	4770      	bx	lr
  402f52:	bf00      	nop
  402f54:	400e0600 	.word	0x400e0600

00402f58 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  402f58:	f44f 7380 	mov.w	r3, #256	; 0x100
  402f5c:	fa03 f000 	lsl.w	r0, r3, r0
  402f60:	4b01      	ldr	r3, [pc, #4]	; (402f68 <pmc_enable_pck+0x10>)
  402f62:	6018      	str	r0, [r3, #0]
  402f64:	4770      	bx	lr
  402f66:	bf00      	nop
  402f68:	400e0600 	.word	0x400e0600

00402f6c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  402f6c:	4770      	bx	lr
	...

00402f70 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  402f70:	4a10      	ldr	r2, [pc, #64]	; (402fb4 <pmc_enable_waitmode+0x44>)
  402f72:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402f74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  402f7c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  402f7e:	6a11      	ldr	r1, [r2, #32]
  402f80:	4b0d      	ldr	r3, [pc, #52]	; (402fb8 <pmc_enable_waitmode+0x48>)
  402f82:	430b      	orrs	r3, r1
  402f84:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402f86:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f88:	f013 0f08 	tst.w	r3, #8
  402f8c:	d0fb      	beq.n	402f86 <pmc_enable_waitmode+0x16>
  402f8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  402f92:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  402f94:	3b01      	subs	r3, #1
  402f96:	d1fc      	bne.n	402f92 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  402f98:	4a06      	ldr	r2, [pc, #24]	; (402fb4 <pmc_enable_waitmode+0x44>)
  402f9a:	6a13      	ldr	r3, [r2, #32]
  402f9c:	f013 0f08 	tst.w	r3, #8
  402fa0:	d0fb      	beq.n	402f9a <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  402fa2:	4a04      	ldr	r2, [pc, #16]	; (402fb4 <pmc_enable_waitmode+0x44>)
  402fa4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402fa6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  402fae:	6713      	str	r3, [r2, #112]	; 0x70
  402fb0:	4770      	bx	lr
  402fb2:	bf00      	nop
  402fb4:	400e0600 	.word	0x400e0600
  402fb8:	00370004 	.word	0x00370004

00402fbc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  402fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  402fc0:	1e43      	subs	r3, r0, #1
  402fc2:	2b04      	cmp	r3, #4
  402fc4:	f200 8107 	bhi.w	4031d6 <pmc_sleep+0x21a>
  402fc8:	e8df f013 	tbh	[pc, r3, lsl #1]
  402fcc:	00050005 	.word	0x00050005
  402fd0:	00150015 	.word	0x00150015
  402fd4:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  402fd6:	4a81      	ldr	r2, [pc, #516]	; (4031dc <pmc_sleep+0x220>)
  402fd8:	6913      	ldr	r3, [r2, #16]
  402fda:	f023 0304 	bic.w	r3, r3, #4
  402fde:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  402fe0:	2201      	movs	r2, #1
  402fe2:	4b7f      	ldr	r3, [pc, #508]	; (4031e0 <pmc_sleep+0x224>)
  402fe4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402fe6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402fea:	b662      	cpsie	i
  __ASM volatile ("dsb");
  402fec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  402ff0:	bf30      	wfi
  402ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ff6:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  402ff8:	2803      	cmp	r0, #3
  402ffa:	bf0c      	ite	eq
  402ffc:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  402ffe:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  403002:	4b78      	ldr	r3, [pc, #480]	; (4031e4 <pmc_sleep+0x228>)
  403004:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403006:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403008:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40300c:	2200      	movs	r2, #0
  40300e:	4b74      	ldr	r3, [pc, #464]	; (4031e0 <pmc_sleep+0x224>)
  403010:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  403012:	2201      	movs	r2, #1
  403014:	4b74      	ldr	r3, [pc, #464]	; (4031e8 <pmc_sleep+0x22c>)
  403016:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  403018:	4b74      	ldr	r3, [pc, #464]	; (4031ec <pmc_sleep+0x230>)
  40301a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40301c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40301e:	4a74      	ldr	r2, [pc, #464]	; (4031f0 <pmc_sleep+0x234>)
  403020:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  403024:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  403026:	4a73      	ldr	r2, [pc, #460]	; (4031f4 <pmc_sleep+0x238>)
  403028:	433a      	orrs	r2, r7
  40302a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40302c:	f005 0903 	and.w	r9, r5, #3
  403030:	f1b9 0f01 	cmp.w	r9, #1
  403034:	f240 8089 	bls.w	40314a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  403038:	f025 0103 	bic.w	r1, r5, #3
  40303c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  403040:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403042:	461a      	mov	r2, r3
  403044:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403046:	f013 0f08 	tst.w	r3, #8
  40304a:	d0fb      	beq.n	403044 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40304c:	f011 0f70 	tst.w	r1, #112	; 0x70
  403050:	d008      	beq.n	403064 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  403052:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  403056:	4b65      	ldr	r3, [pc, #404]	; (4031ec <pmc_sleep+0x230>)
  403058:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40305a:	461a      	mov	r2, r3
  40305c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40305e:	f013 0f08 	tst.w	r3, #8
  403062:	d0fb      	beq.n	40305c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  403064:	4b64      	ldr	r3, [pc, #400]	; (4031f8 <pmc_sleep+0x23c>)
  403066:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403068:	4a60      	ldr	r2, [pc, #384]	; (4031ec <pmc_sleep+0x230>)
  40306a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40306c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  403070:	d0fb      	beq.n	40306a <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403072:	4a5e      	ldr	r2, [pc, #376]	; (4031ec <pmc_sleep+0x230>)
  403074:	6a11      	ldr	r1, [r2, #32]
  403076:	4b61      	ldr	r3, [pc, #388]	; (4031fc <pmc_sleep+0x240>)
  403078:	400b      	ands	r3, r1
  40307a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40307e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  403080:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403082:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403086:	d0fb      	beq.n	403080 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  403088:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  40308c:	4a58      	ldr	r2, [pc, #352]	; (4031f0 <pmc_sleep+0x234>)
  40308e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  403090:	2c04      	cmp	r4, #4
  403092:	d05c      	beq.n	40314e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  403094:	4c52      	ldr	r4, [pc, #328]	; (4031e0 <pmc_sleep+0x224>)
  403096:	2301      	movs	r3, #1
  403098:	7023      	strb	r3, [r4, #0]
  40309a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40309e:	b662      	cpsie	i

		pmc_enable_waitmode();
  4030a0:	4b57      	ldr	r3, [pc, #348]	; (403200 <pmc_sleep+0x244>)
  4030a2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4030a4:	b672      	cpsid	i
  4030a6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4030aa:	2300      	movs	r3, #0
  4030ac:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4030ae:	f017 0f02 	tst.w	r7, #2
  4030b2:	d055      	beq.n	403160 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4030b4:	4a4d      	ldr	r2, [pc, #308]	; (4031ec <pmc_sleep+0x230>)
  4030b6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4030b8:	4952      	ldr	r1, [pc, #328]	; (403204 <pmc_sleep+0x248>)
  4030ba:	4019      	ands	r1, r3
  4030bc:	4b52      	ldr	r3, [pc, #328]	; (403208 <pmc_sleep+0x24c>)
  4030be:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4030c0:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4030c2:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4030c4:	4b51      	ldr	r3, [pc, #324]	; (40320c <pmc_sleep+0x250>)
  4030c6:	400b      	ands	r3, r1
  4030c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4030cc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4030ce:	4b50      	ldr	r3, [pc, #320]	; (403210 <pmc_sleep+0x254>)
  4030d0:	4033      	ands	r3, r6
  4030d2:	2b00      	cmp	r3, #0
  4030d4:	d06e      	beq.n	4031b4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4030d6:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4030da:	4b44      	ldr	r3, [pc, #272]	; (4031ec <pmc_sleep+0x230>)
  4030dc:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4030de:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4030e0:	f1b9 0f02 	cmp.w	r9, #2
  4030e4:	d104      	bne.n	4030f0 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4030e6:	4a41      	ldr	r2, [pc, #260]	; (4031ec <pmc_sleep+0x230>)
  4030e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4030ea:	f013 0f02 	tst.w	r3, #2
  4030ee:	d0fb      	beq.n	4030e8 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4030f0:	4a3e      	ldr	r2, [pc, #248]	; (4031ec <pmc_sleep+0x230>)
  4030f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4030f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4030f8:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4030fc:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4030fe:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403100:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403102:	f013 0f08 	tst.w	r3, #8
  403106:	d0fb      	beq.n	403100 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  403108:	4b39      	ldr	r3, [pc, #228]	; (4031f0 <pmc_sleep+0x234>)
  40310a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40310e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  403112:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403114:	461a      	mov	r2, r3
  403116:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403118:	f013 0f08 	tst.w	r3, #8
  40311c:	d0fb      	beq.n	403116 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40311e:	4a33      	ldr	r2, [pc, #204]	; (4031ec <pmc_sleep+0x230>)
  403120:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403122:	420b      	tst	r3, r1
  403124:	d0fc      	beq.n	403120 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  403126:	2200      	movs	r2, #0
  403128:	4b2f      	ldr	r3, [pc, #188]	; (4031e8 <pmc_sleep+0x22c>)
  40312a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40312c:	4b39      	ldr	r3, [pc, #228]	; (403214 <pmc_sleep+0x258>)
  40312e:	681b      	ldr	r3, [r3, #0]
  403130:	b11b      	cbz	r3, 40313a <pmc_sleep+0x17e>
			callback_clocks_restored();
  403132:	4798      	blx	r3
			callback_clocks_restored = NULL;
  403134:	2200      	movs	r2, #0
  403136:	4b37      	ldr	r3, [pc, #220]	; (403214 <pmc_sleep+0x258>)
  403138:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40313a:	2201      	movs	r2, #1
  40313c:	4b28      	ldr	r3, [pc, #160]	; (4031e0 <pmc_sleep+0x224>)
  40313e:	701a      	strb	r2, [r3, #0]
  403140:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403144:	b662      	cpsie	i
  403146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40314a:	4629      	mov	r1, r5
  40314c:	e77e      	b.n	40304c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40314e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  403152:	6a11      	ldr	r1, [r2, #32]
  403154:	4b30      	ldr	r3, [pc, #192]	; (403218 <pmc_sleep+0x25c>)
  403156:	400b      	ands	r3, r1
  403158:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40315c:	6213      	str	r3, [r2, #32]
  40315e:	e799      	b.n	403094 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  403160:	f017 0f01 	tst.w	r7, #1
  403164:	d0b3      	beq.n	4030ce <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  403166:	4b21      	ldr	r3, [pc, #132]	; (4031ec <pmc_sleep+0x230>)
  403168:	6a1b      	ldr	r3, [r3, #32]
  40316a:	f013 0f01 	tst.w	r3, #1
  40316e:	d10b      	bne.n	403188 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403170:	491e      	ldr	r1, [pc, #120]	; (4031ec <pmc_sleep+0x230>)
  403172:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  403174:	4a29      	ldr	r2, [pc, #164]	; (40321c <pmc_sleep+0x260>)
  403176:	401a      	ands	r2, r3
  403178:	4b29      	ldr	r3, [pc, #164]	; (403220 <pmc_sleep+0x264>)
  40317a:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40317c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40317e:	460a      	mov	r2, r1
  403180:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403182:	f013 0f01 	tst.w	r3, #1
  403186:	d0fb      	beq.n	403180 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  403188:	4b18      	ldr	r3, [pc, #96]	; (4031ec <pmc_sleep+0x230>)
  40318a:	6a1b      	ldr	r3, [r3, #32]
  40318c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403190:	d108      	bne.n	4031a4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403192:	4a16      	ldr	r2, [pc, #88]	; (4031ec <pmc_sleep+0x230>)
  403194:	6a11      	ldr	r1, [r2, #32]
  403196:	4b23      	ldr	r3, [pc, #140]	; (403224 <pmc_sleep+0x268>)
  403198:	430b      	orrs	r3, r1
  40319a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40319c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40319e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4031a2:	d0fb      	beq.n	40319c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4031a4:	4a11      	ldr	r2, [pc, #68]	; (4031ec <pmc_sleep+0x230>)
  4031a6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4031a8:	4b18      	ldr	r3, [pc, #96]	; (40320c <pmc_sleep+0x250>)
  4031aa:	400b      	ands	r3, r1
  4031ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4031b0:	6213      	str	r3, [r2, #32]
  4031b2:	e78c      	b.n	4030ce <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4031b4:	2100      	movs	r1, #0
  4031b6:	e793      	b.n	4030e0 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4031b8:	4a08      	ldr	r2, [pc, #32]	; (4031dc <pmc_sleep+0x220>)
  4031ba:	6913      	ldr	r3, [r2, #16]
  4031bc:	f043 0304 	orr.w	r3, r3, #4
  4031c0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4031c2:	4a19      	ldr	r2, [pc, #100]	; (403228 <pmc_sleep+0x26c>)
  4031c4:	4b19      	ldr	r3, [pc, #100]	; (40322c <pmc_sleep+0x270>)
  4031c6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4031c8:	2201      	movs	r2, #1
  4031ca:	4b05      	ldr	r3, [pc, #20]	; (4031e0 <pmc_sleep+0x224>)
  4031cc:	701a      	strb	r2, [r3, #0]
  4031ce:	f3bf 8f5f 	dmb	sy
  4031d2:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4031d4:	bf30      	wfi
  4031d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4031da:	bf00      	nop
  4031dc:	e000ed00 	.word	0xe000ed00
  4031e0:	2040001c 	.word	0x2040001c
  4031e4:	00402f6d 	.word	0x00402f6d
  4031e8:	2040c5b0 	.word	0x2040c5b0
  4031ec:	400e0600 	.word	0x400e0600
  4031f0:	400e0c00 	.word	0x400e0c00
  4031f4:	00370008 	.word	0x00370008
  4031f8:	00402ee5 	.word	0x00402ee5
  4031fc:	fec8ffff 	.word	0xfec8ffff
  403200:	00402f71 	.word	0x00402f71
  403204:	fec8fffc 	.word	0xfec8fffc
  403208:	01370002 	.word	0x01370002
  40320c:	ffc8ff87 	.word	0xffc8ff87
  403210:	07ff0000 	.word	0x07ff0000
  403214:	2040c5b4 	.word	0x2040c5b4
  403218:	ffc8fffe 	.word	0xffc8fffe
  40321c:	ffc8fffc 	.word	0xffc8fffc
  403220:	00370001 	.word	0x00370001
  403224:	01370000 	.word	0x01370000
  403228:	a5000004 	.word	0xa5000004
  40322c:	400e1810 	.word	0x400e1810

00403230 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403230:	e7fe      	b.n	403230 <Dummy_Handler>
	...

00403234 <Reset_Handler>:
{
  403234:	b500      	push	{lr}
  403236:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  403238:	4b25      	ldr	r3, [pc, #148]	; (4032d0 <Reset_Handler+0x9c>)
  40323a:	4a26      	ldr	r2, [pc, #152]	; (4032d4 <Reset_Handler+0xa0>)
  40323c:	429a      	cmp	r2, r3
  40323e:	d010      	beq.n	403262 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  403240:	4b25      	ldr	r3, [pc, #148]	; (4032d8 <Reset_Handler+0xa4>)
  403242:	4a23      	ldr	r2, [pc, #140]	; (4032d0 <Reset_Handler+0x9c>)
  403244:	429a      	cmp	r2, r3
  403246:	d20c      	bcs.n	403262 <Reset_Handler+0x2e>
  403248:	3b01      	subs	r3, #1
  40324a:	1a9b      	subs	r3, r3, r2
  40324c:	f023 0303 	bic.w	r3, r3, #3
  403250:	3304      	adds	r3, #4
  403252:	4413      	add	r3, r2
  403254:	491f      	ldr	r1, [pc, #124]	; (4032d4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  403256:	f851 0b04 	ldr.w	r0, [r1], #4
  40325a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40325e:	429a      	cmp	r2, r3
  403260:	d1f9      	bne.n	403256 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  403262:	4b1e      	ldr	r3, [pc, #120]	; (4032dc <Reset_Handler+0xa8>)
  403264:	4a1e      	ldr	r2, [pc, #120]	; (4032e0 <Reset_Handler+0xac>)
  403266:	429a      	cmp	r2, r3
  403268:	d20a      	bcs.n	403280 <Reset_Handler+0x4c>
  40326a:	3b01      	subs	r3, #1
  40326c:	1a9b      	subs	r3, r3, r2
  40326e:	f023 0303 	bic.w	r3, r3, #3
  403272:	3304      	adds	r3, #4
  403274:	4413      	add	r3, r2
                *pDest++ = 0;
  403276:	2100      	movs	r1, #0
  403278:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40327c:	4293      	cmp	r3, r2
  40327e:	d1fb      	bne.n	403278 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403280:	4a18      	ldr	r2, [pc, #96]	; (4032e4 <Reset_Handler+0xb0>)
  403282:	4b19      	ldr	r3, [pc, #100]	; (4032e8 <Reset_Handler+0xb4>)
  403284:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403288:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40328a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40328e:	fab3 f383 	clz	r3, r3
  403292:	095b      	lsrs	r3, r3, #5
  403294:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403296:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403298:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40329c:	2200      	movs	r2, #0
  40329e:	4b13      	ldr	r3, [pc, #76]	; (4032ec <Reset_Handler+0xb8>)
  4032a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4032a2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4032a4:	4a12      	ldr	r2, [pc, #72]	; (4032f0 <Reset_Handler+0xbc>)
  4032a6:	6813      	ldr	r3, [r2, #0]
  4032a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4032ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4032ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4032b2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4032b6:	b129      	cbz	r1, 4032c4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4032b8:	2201      	movs	r2, #1
  4032ba:	4b0c      	ldr	r3, [pc, #48]	; (4032ec <Reset_Handler+0xb8>)
  4032bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4032be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4032c2:	b662      	cpsie	i
        __libc_init_array();
  4032c4:	4b0b      	ldr	r3, [pc, #44]	; (4032f4 <Reset_Handler+0xc0>)
  4032c6:	4798      	blx	r3
        main();
  4032c8:	4b0b      	ldr	r3, [pc, #44]	; (4032f8 <Reset_Handler+0xc4>)
  4032ca:	4798      	blx	r3
  4032cc:	e7fe      	b.n	4032cc <Reset_Handler+0x98>
  4032ce:	bf00      	nop
  4032d0:	20400000 	.word	0x20400000
  4032d4:	0040923c 	.word	0x0040923c
  4032d8:	204009d0 	.word	0x204009d0
  4032dc:	2040c6e8 	.word	0x2040c6e8
  4032e0:	204009d0 	.word	0x204009d0
  4032e4:	e000ed00 	.word	0xe000ed00
  4032e8:	00400000 	.word	0x00400000
  4032ec:	2040001c 	.word	0x2040001c
  4032f0:	e000ed88 	.word	0xe000ed88
  4032f4:	00403bf9 	.word	0x00403bf9
  4032f8:	00403b65 	.word	0x00403b65

004032fc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4032fc:	4b3b      	ldr	r3, [pc, #236]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  4032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403300:	f003 0303 	and.w	r3, r3, #3
  403304:	2b01      	cmp	r3, #1
  403306:	d01d      	beq.n	403344 <SystemCoreClockUpdate+0x48>
  403308:	b183      	cbz	r3, 40332c <SystemCoreClockUpdate+0x30>
  40330a:	2b02      	cmp	r3, #2
  40330c:	d036      	beq.n	40337c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40330e:	4b37      	ldr	r3, [pc, #220]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  403310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403312:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403316:	2b70      	cmp	r3, #112	; 0x70
  403318:	d05f      	beq.n	4033da <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40331a:	4b34      	ldr	r3, [pc, #208]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  40331c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40331e:	4934      	ldr	r1, [pc, #208]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  403320:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403324:	680b      	ldr	r3, [r1, #0]
  403326:	40d3      	lsrs	r3, r2
  403328:	600b      	str	r3, [r1, #0]
  40332a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40332c:	4b31      	ldr	r3, [pc, #196]	; (4033f4 <SystemCoreClockUpdate+0xf8>)
  40332e:	695b      	ldr	r3, [r3, #20]
  403330:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403334:	bf14      	ite	ne
  403336:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40333a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40333e:	4b2c      	ldr	r3, [pc, #176]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  403340:	601a      	str	r2, [r3, #0]
  403342:	e7e4      	b.n	40330e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403344:	4b29      	ldr	r3, [pc, #164]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  403346:	6a1b      	ldr	r3, [r3, #32]
  403348:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40334c:	d003      	beq.n	403356 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40334e:	4a2a      	ldr	r2, [pc, #168]	; (4033f8 <SystemCoreClockUpdate+0xfc>)
  403350:	4b27      	ldr	r3, [pc, #156]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  403352:	601a      	str	r2, [r3, #0]
  403354:	e7db      	b.n	40330e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403356:	4a29      	ldr	r2, [pc, #164]	; (4033fc <SystemCoreClockUpdate+0x100>)
  403358:	4b25      	ldr	r3, [pc, #148]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  40335a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40335c:	4b23      	ldr	r3, [pc, #140]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  40335e:	6a1b      	ldr	r3, [r3, #32]
  403360:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403364:	2b10      	cmp	r3, #16
  403366:	d005      	beq.n	403374 <SystemCoreClockUpdate+0x78>
  403368:	2b20      	cmp	r3, #32
  40336a:	d1d0      	bne.n	40330e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40336c:	4a22      	ldr	r2, [pc, #136]	; (4033f8 <SystemCoreClockUpdate+0xfc>)
  40336e:	4b20      	ldr	r3, [pc, #128]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  403370:	601a      	str	r2, [r3, #0]
          break;
  403372:	e7cc      	b.n	40330e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  403374:	4a22      	ldr	r2, [pc, #136]	; (403400 <SystemCoreClockUpdate+0x104>)
  403376:	4b1e      	ldr	r3, [pc, #120]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  403378:	601a      	str	r2, [r3, #0]
          break;
  40337a:	e7c8      	b.n	40330e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40337c:	4b1b      	ldr	r3, [pc, #108]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  40337e:	6a1b      	ldr	r3, [r3, #32]
  403380:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403384:	d016      	beq.n	4033b4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403386:	4a1c      	ldr	r2, [pc, #112]	; (4033f8 <SystemCoreClockUpdate+0xfc>)
  403388:	4b19      	ldr	r3, [pc, #100]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  40338a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40338c:	4b17      	ldr	r3, [pc, #92]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  40338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403390:	f003 0303 	and.w	r3, r3, #3
  403394:	2b02      	cmp	r3, #2
  403396:	d1ba      	bne.n	40330e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403398:	4a14      	ldr	r2, [pc, #80]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  40339a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40339c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40339e:	4814      	ldr	r0, [pc, #80]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4033a0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4033a4:	6803      	ldr	r3, [r0, #0]
  4033a6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4033aa:	b2d2      	uxtb	r2, r2
  4033ac:	fbb3 f3f2 	udiv	r3, r3, r2
  4033b0:	6003      	str	r3, [r0, #0]
  4033b2:	e7ac      	b.n	40330e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4033b4:	4a11      	ldr	r2, [pc, #68]	; (4033fc <SystemCoreClockUpdate+0x100>)
  4033b6:	4b0e      	ldr	r3, [pc, #56]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  4033b8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4033ba:	4b0c      	ldr	r3, [pc, #48]	; (4033ec <SystemCoreClockUpdate+0xf0>)
  4033bc:	6a1b      	ldr	r3, [r3, #32]
  4033be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4033c2:	2b10      	cmp	r3, #16
  4033c4:	d005      	beq.n	4033d2 <SystemCoreClockUpdate+0xd6>
  4033c6:	2b20      	cmp	r3, #32
  4033c8:	d1e0      	bne.n	40338c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4033ca:	4a0b      	ldr	r2, [pc, #44]	; (4033f8 <SystemCoreClockUpdate+0xfc>)
  4033cc:	4b08      	ldr	r3, [pc, #32]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  4033ce:	601a      	str	r2, [r3, #0]
          break;
  4033d0:	e7dc      	b.n	40338c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4033d2:	4a0b      	ldr	r2, [pc, #44]	; (403400 <SystemCoreClockUpdate+0x104>)
  4033d4:	4b06      	ldr	r3, [pc, #24]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  4033d6:	601a      	str	r2, [r3, #0]
          break;
  4033d8:	e7d8      	b.n	40338c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4033da:	4a05      	ldr	r2, [pc, #20]	; (4033f0 <SystemCoreClockUpdate+0xf4>)
  4033dc:	6813      	ldr	r3, [r2, #0]
  4033de:	4909      	ldr	r1, [pc, #36]	; (403404 <SystemCoreClockUpdate+0x108>)
  4033e0:	fba1 1303 	umull	r1, r3, r1, r3
  4033e4:	085b      	lsrs	r3, r3, #1
  4033e6:	6013      	str	r3, [r2, #0]
  4033e8:	4770      	bx	lr
  4033ea:	bf00      	nop
  4033ec:	400e0600 	.word	0x400e0600
  4033f0:	20400020 	.word	0x20400020
  4033f4:	400e1810 	.word	0x400e1810
  4033f8:	00b71b00 	.word	0x00b71b00
  4033fc:	003d0900 	.word	0x003d0900
  403400:	007a1200 	.word	0x007a1200
  403404:	aaaaaaab 	.word	0xaaaaaaab

00403408 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403408:	4b16      	ldr	r3, [pc, #88]	; (403464 <system_init_flash+0x5c>)
  40340a:	4298      	cmp	r0, r3
  40340c:	d913      	bls.n	403436 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40340e:	4b16      	ldr	r3, [pc, #88]	; (403468 <system_init_flash+0x60>)
  403410:	4298      	cmp	r0, r3
  403412:	d915      	bls.n	403440 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403414:	4b15      	ldr	r3, [pc, #84]	; (40346c <system_init_flash+0x64>)
  403416:	4298      	cmp	r0, r3
  403418:	d916      	bls.n	403448 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40341a:	4b15      	ldr	r3, [pc, #84]	; (403470 <system_init_flash+0x68>)
  40341c:	4298      	cmp	r0, r3
  40341e:	d917      	bls.n	403450 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403420:	4b14      	ldr	r3, [pc, #80]	; (403474 <system_init_flash+0x6c>)
  403422:	4298      	cmp	r0, r3
  403424:	d918      	bls.n	403458 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  403426:	4b14      	ldr	r3, [pc, #80]	; (403478 <system_init_flash+0x70>)
  403428:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40342a:	bf94      	ite	ls
  40342c:	4a13      	ldrls	r2, [pc, #76]	; (40347c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40342e:	4a14      	ldrhi	r2, [pc, #80]	; (403480 <system_init_flash+0x78>)
  403430:	4b14      	ldr	r3, [pc, #80]	; (403484 <system_init_flash+0x7c>)
  403432:	601a      	str	r2, [r3, #0]
  403434:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403436:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40343a:	4b12      	ldr	r3, [pc, #72]	; (403484 <system_init_flash+0x7c>)
  40343c:	601a      	str	r2, [r3, #0]
  40343e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403440:	4a11      	ldr	r2, [pc, #68]	; (403488 <system_init_flash+0x80>)
  403442:	4b10      	ldr	r3, [pc, #64]	; (403484 <system_init_flash+0x7c>)
  403444:	601a      	str	r2, [r3, #0]
  403446:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403448:	4a10      	ldr	r2, [pc, #64]	; (40348c <system_init_flash+0x84>)
  40344a:	4b0e      	ldr	r3, [pc, #56]	; (403484 <system_init_flash+0x7c>)
  40344c:	601a      	str	r2, [r3, #0]
  40344e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403450:	4a0f      	ldr	r2, [pc, #60]	; (403490 <system_init_flash+0x88>)
  403452:	4b0c      	ldr	r3, [pc, #48]	; (403484 <system_init_flash+0x7c>)
  403454:	601a      	str	r2, [r3, #0]
  403456:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403458:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40345c:	4b09      	ldr	r3, [pc, #36]	; (403484 <system_init_flash+0x7c>)
  40345e:	601a      	str	r2, [r3, #0]
  403460:	4770      	bx	lr
  403462:	bf00      	nop
  403464:	015ef3bf 	.word	0x015ef3bf
  403468:	02bde77f 	.word	0x02bde77f
  40346c:	041cdb3f 	.word	0x041cdb3f
  403470:	057bceff 	.word	0x057bceff
  403474:	06dac2bf 	.word	0x06dac2bf
  403478:	0839b67f 	.word	0x0839b67f
  40347c:	04000500 	.word	0x04000500
  403480:	04000600 	.word	0x04000600
  403484:	400e0c00 	.word	0x400e0c00
  403488:	04000100 	.word	0x04000100
  40348c:	04000200 	.word	0x04000200
  403490:	04000300 	.word	0x04000300

00403494 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403494:	4b0a      	ldr	r3, [pc, #40]	; (4034c0 <_sbrk+0x2c>)
  403496:	681b      	ldr	r3, [r3, #0]
  403498:	b153      	cbz	r3, 4034b0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40349a:	4b09      	ldr	r3, [pc, #36]	; (4034c0 <_sbrk+0x2c>)
  40349c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40349e:	181a      	adds	r2, r3, r0
  4034a0:	4908      	ldr	r1, [pc, #32]	; (4034c4 <_sbrk+0x30>)
  4034a2:	4291      	cmp	r1, r2
  4034a4:	db08      	blt.n	4034b8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4034a6:	4610      	mov	r0, r2
  4034a8:	4a05      	ldr	r2, [pc, #20]	; (4034c0 <_sbrk+0x2c>)
  4034aa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4034ac:	4618      	mov	r0, r3
  4034ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4034b0:	4a05      	ldr	r2, [pc, #20]	; (4034c8 <_sbrk+0x34>)
  4034b2:	4b03      	ldr	r3, [pc, #12]	; (4034c0 <_sbrk+0x2c>)
  4034b4:	601a      	str	r2, [r3, #0]
  4034b6:	e7f0      	b.n	40349a <_sbrk+0x6>
		return (caddr_t) -1;	
  4034b8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4034bc:	4770      	bx	lr
  4034be:	bf00      	nop
  4034c0:	2040c5b8 	.word	0x2040c5b8
  4034c4:	2045fffc 	.word	0x2045fffc
  4034c8:	2040e8e8 	.word	0x2040e8e8

004034cc <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  4034cc:	b500      	push	{lr}
  4034ce:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4034d0:	a902      	add	r1, sp, #8
  4034d2:	2300      	movs	r3, #0
  4034d4:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphore2, &xHigherPriorityTaskWoken);
  4034d8:	4b03      	ldr	r3, [pc, #12]	; (4034e8 <but_callback+0x1c>)
  4034da:	6818      	ldr	r0, [r3, #0]
  4034dc:	4b03      	ldr	r3, [pc, #12]	; (4034ec <but_callback+0x20>)
  4034de:	4798      	blx	r3
	// printf("but_callback\n");
}
  4034e0:	b003      	add	sp, #12
  4034e2:	f85d fb04 	ldr.w	pc, [sp], #4
  4034e6:	bf00      	nop
  4034e8:	2040c6bc 	.word	0x2040c6bc
  4034ec:	00401181 	.word	0x00401181

004034f0 <RTT_init>:
static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4034f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034f4:	ed2d 8b02 	vpush	{d8}
  4034f8:	b082      	sub	sp, #8
  4034fa:	eeb0 8a40 	vmov.f32	s16, s0
  4034fe:	4680      	mov	r8, r0
  403500:	460f      	mov	r7, r1
  rtt_sel_source(RTT, false);
  403502:	4c20      	ldr	r4, [pc, #128]	; (403584 <RTT_init+0x94>)
  403504:	2100      	movs	r1, #0
  403506:	4620      	mov	r0, r4
  403508:	4b1f      	ldr	r3, [pc, #124]	; (403588 <RTT_init+0x98>)
  40350a:	4798      	blx	r3
  uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  40350c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 40358c <RTT_init+0x9c>
  403510:	eec7 7a08 	vdiv.f32	s15, s14, s16
  403514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  403518:	edcd 7a01 	vstr	s15, [sp, #4]
  rtt_init(RTT, pllPreScale);
  40351c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  403520:	4620      	mov	r0, r4
  403522:	4b1b      	ldr	r3, [pc, #108]	; (403590 <RTT_init+0xa0>)
  403524:	4798      	blx	r3
  if (rttIRQSource & RTT_MR_ALMIEN) {
  403526:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  40352a:	d116      	bne.n	40355a <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40352c:	4b19      	ldr	r3, [pc, #100]	; (403594 <RTT_init+0xa4>)
  40352e:	2208      	movs	r2, #8
  403530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403534:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403538:	2180      	movs	r1, #128	; 0x80
  40353a:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40353e:	601a      	str	r2, [r3, #0]
  if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  403540:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  403544:	d119      	bne.n	40357a <RTT_init+0x8a>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  403546:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  40354a:	480e      	ldr	r0, [pc, #56]	; (403584 <RTT_init+0x94>)
  40354c:	4b12      	ldr	r3, [pc, #72]	; (403598 <RTT_init+0xa8>)
  40354e:	4798      	blx	r3
}
  403550:	b002      	add	sp, #8
  403552:	ecbd 8b02 	vpop	{d8}
  403556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	ul_previous_time = rtt_read_timer_value(RTT);
  40355a:	4620      	mov	r0, r4
  40355c:	4b0f      	ldr	r3, [pc, #60]	; (40359c <RTT_init+0xac>)
  40355e:	4798      	blx	r3
  403560:	4604      	mov	r4, r0
  	while (ul_previous_time == rtt_read_timer_value(RTT));
  403562:	4e08      	ldr	r6, [pc, #32]	; (403584 <RTT_init+0x94>)
  403564:	4d0d      	ldr	r5, [pc, #52]	; (40359c <RTT_init+0xac>)
  403566:	4630      	mov	r0, r6
  403568:	47a8      	blx	r5
  40356a:	4284      	cmp	r4, r0
  40356c:	d0fb      	beq.n	403566 <RTT_init+0x76>
  	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  40356e:	eb04 0108 	add.w	r1, r4, r8
  403572:	4804      	ldr	r0, [pc, #16]	; (403584 <RTT_init+0x94>)
  403574:	4b0a      	ldr	r3, [pc, #40]	; (4035a0 <RTT_init+0xb0>)
  403576:	4798      	blx	r3
  403578:	e7d8      	b.n	40352c <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  40357a:	4639      	mov	r1, r7
  40357c:	4801      	ldr	r0, [pc, #4]	; (403584 <RTT_init+0x94>)
  40357e:	4b09      	ldr	r3, [pc, #36]	; (4035a4 <RTT_init+0xb4>)
  403580:	4798      	blx	r3
  403582:	e7e5      	b.n	403550 <RTT_init+0x60>
  403584:	400e1830 	.word	0x400e1830
  403588:	0040059d 	.word	0x0040059d
  40358c:	47000000 	.word	0x47000000
  403590:	00400589 	.word	0x00400589
  403594:	e000e100 	.word	0xe000e100
  403598:	004005dd 	.word	0x004005dd
  40359c:	004005f1 	.word	0x004005f1
  4035a0:	00400609 	.word	0x00400609
  4035a4:	004005c9 	.word	0x004005c9

004035a8 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4035a8:	4770      	bx	lr

004035aa <vApplicationMallocFailedHook>:
  4035aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ae:	b672      	cpsid	i
  4035b0:	f383 8811 	msr	BASEPRI, r3
  4035b4:	f3bf 8f6f 	isb	sy
  4035b8:	f3bf 8f4f 	dsb	sy
  4035bc:	b662      	cpsie	i
  4035be:	e7fe      	b.n	4035be <vApplicationMallocFailedHook+0x14>

004035c0 <RTT_Handler>:
void RTT_Handler(void) {
  4035c0:	b500      	push	{lr}
  4035c2:	b083      	sub	sp, #12
  ul_status = rtt_get_status(RTT);
  4035c4:	4808      	ldr	r0, [pc, #32]	; (4035e8 <RTT_Handler+0x28>)
  4035c6:	4b09      	ldr	r3, [pc, #36]	; (4035ec <RTT_Handler+0x2c>)
  4035c8:	4798      	blx	r3
  if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  4035ca:	f010 0f01 	tst.w	r0, #1
  4035ce:	d102      	bne.n	4035d6 <RTT_Handler+0x16>
}
  4035d0:	b003      	add	sp, #12
  4035d2:	f85d fb04 	ldr.w	pc, [sp], #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4035d6:	a902      	add	r1, sp, #8
  4035d8:	2300      	movs	r3, #0
  4035da:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  4035de:	4b04      	ldr	r3, [pc, #16]	; (4035f0 <RTT_Handler+0x30>)
  4035e0:	6818      	ldr	r0, [r3, #0]
  4035e2:	4b04      	ldr	r3, [pc, #16]	; (4035f4 <RTT_Handler+0x34>)
  4035e4:	4798      	blx	r3
}
  4035e6:	e7f3      	b.n	4035d0 <RTT_Handler+0x10>
  4035e8:	400e1830 	.word	0x400e1830
  4035ec:	00400605 	.word	0x00400605
  4035f0:	2040c6b4 	.word	0x2040c6b4
  4035f4:	00401181 	.word	0x00401181

004035f8 <RTC_Handler>:
void RTC_Handler(void) {
  4035f8:	b530      	push	{r4, r5, lr}
  4035fa:	b083      	sub	sp, #12
    uint32_t ul_status = rtc_get_status(RTC);
  4035fc:	4819      	ldr	r0, [pc, #100]	; (403664 <RTC_Handler+0x6c>)
  4035fe:	4b1a      	ldr	r3, [pc, #104]	; (403668 <RTC_Handler+0x70>)
  403600:	4798      	blx	r3
  403602:	4604      	mov	r4, r0
    if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {	
  403604:	f010 0f04 	tst.w	r0, #4
  403608:	d115      	bne.n	403636 <RTC_Handler+0x3e>
    if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  40360a:	f014 0f02 	tst.w	r4, #2
  40360e:	d11f      	bne.n	403650 <RTC_Handler+0x58>
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  403610:	4d14      	ldr	r5, [pc, #80]	; (403664 <RTC_Handler+0x6c>)
  403612:	2102      	movs	r1, #2
  403614:	4628      	mov	r0, r5
  403616:	4c15      	ldr	r4, [pc, #84]	; (40366c <RTC_Handler+0x74>)
  403618:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40361a:	2101      	movs	r1, #1
  40361c:	4628      	mov	r0, r5
  40361e:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403620:	2108      	movs	r1, #8
  403622:	4628      	mov	r0, r5
  403624:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  403626:	2110      	movs	r1, #16
  403628:	4628      	mov	r0, r5
  40362a:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  40362c:	2120      	movs	r1, #32
  40362e:	4628      	mov	r0, r5
  403630:	47a0      	blx	r4
}
  403632:	b003      	add	sp, #12
  403634:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  403636:	a902      	add	r1, sp, #8
  403638:	2301      	movs	r3, #1
  40363a:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphore3, &xHigherPriorityTaskWoken);
  40363e:	4b0c      	ldr	r3, [pc, #48]	; (403670 <RTC_Handler+0x78>)
  403640:	6818      	ldr	r0, [r3, #0]
  403642:	4b0c      	ldr	r3, [pc, #48]	; (403674 <RTC_Handler+0x7c>)
  403644:	4798      	blx	r3
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403646:	2104      	movs	r1, #4
  403648:	4806      	ldr	r0, [pc, #24]	; (403664 <RTC_Handler+0x6c>)
  40364a:	4b08      	ldr	r3, [pc, #32]	; (40366c <RTC_Handler+0x74>)
  40364c:	4798      	blx	r3
  40364e:	e7dc      	b.n	40360a <RTC_Handler+0x12>
		BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  403650:	a902      	add	r1, sp, #8
  403652:	2301      	movs	r3, #1
  403654:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphore4, &xHigherPriorityTaskWoken);
  403658:	4b07      	ldr	r3, [pc, #28]	; (403678 <RTC_Handler+0x80>)
  40365a:	6818      	ldr	r0, [r3, #0]
  40365c:	4b05      	ldr	r3, [pc, #20]	; (403674 <RTC_Handler+0x7c>)
  40365e:	4798      	blx	r3
  403660:	e7d6      	b.n	403610 <RTC_Handler+0x18>
  403662:	bf00      	nop
  403664:	400e1860 	.word	0x400e1860
  403668:	00400581 	.word	0x00400581
  40366c:	00400585 	.word	0x00400585
  403670:	2040c6b0 	.word	0x2040c6b0
  403674:	00401181 	.word	0x00401181
  403678:	2040c6b8 	.word	0x2040c6b8

0040367c <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  40367c:	b082      	sub	sp, #8
  40367e:	b570      	push	{r4, r5, r6, lr}
  403680:	b082      	sub	sp, #8
  403682:	4605      	mov	r5, r0
  403684:	460c      	mov	r4, r1
  403686:	a906      	add	r1, sp, #24
  403688:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  40368c:	2002      	movs	r0, #2
  40368e:	4b1d      	ldr	r3, [pc, #116]	; (403704 <RTC_init+0x88>)
  403690:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  403692:	2100      	movs	r1, #0
  403694:	4628      	mov	r0, r5
  403696:	4b1c      	ldr	r3, [pc, #112]	; (403708 <RTC_init+0x8c>)
  403698:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  40369a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40369c:	9300      	str	r3, [sp, #0]
  40369e:	9b08      	ldr	r3, [sp, #32]
  4036a0:	9a07      	ldr	r2, [sp, #28]
  4036a2:	9906      	ldr	r1, [sp, #24]
  4036a4:	4628      	mov	r0, r5
  4036a6:	4e19      	ldr	r6, [pc, #100]	; (40370c <RTC_init+0x90>)
  4036a8:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  4036aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4036ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4036ae:	990a      	ldr	r1, [sp, #40]	; 0x28
  4036b0:	4628      	mov	r0, r5
  4036b2:	4e17      	ldr	r6, [pc, #92]	; (403710 <RTC_init+0x94>)
  4036b4:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  4036b6:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4036b8:	b2e4      	uxtb	r4, r4
  4036ba:	f004 011f 	and.w	r1, r4, #31
  4036be:	2301      	movs	r3, #1
  4036c0:	408b      	lsls	r3, r1
  4036c2:	0956      	lsrs	r6, r2, #5
  4036c4:	4813      	ldr	r0, [pc, #76]	; (403714 <RTC_init+0x98>)
  4036c6:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  4036ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4036ce:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  4036d2:	2a00      	cmp	r2, #0
  4036d4:	db0f      	blt.n	4036f6 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4036d6:	490f      	ldr	r1, [pc, #60]	; (403714 <RTC_init+0x98>)
  4036d8:	4411      	add	r1, r2
  4036da:	2280      	movs	r2, #128	; 0x80
  4036dc:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4036e0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  4036e4:	990d      	ldr	r1, [sp, #52]	; 0x34
  4036e6:	4628      	mov	r0, r5
  4036e8:	4b0b      	ldr	r3, [pc, #44]	; (403718 <RTC_init+0x9c>)
  4036ea:	4798      	blx	r3
}
  4036ec:	b002      	add	sp, #8
  4036ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4036f2:	b002      	add	sp, #8
  4036f4:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4036f6:	f004 040f 	and.w	r4, r4, #15
  4036fa:	4a08      	ldr	r2, [pc, #32]	; (40371c <RTC_init+0xa0>)
  4036fc:	2180      	movs	r1, #128	; 0x80
  4036fe:	5511      	strb	r1, [r2, r4]
  403700:	e7ee      	b.n	4036e0 <RTC_init+0x64>
  403702:	bf00      	nop
  403704:	00402f05 	.word	0x00402f05
  403708:	0040025d 	.word	0x0040025d
  40370c:	00400469 	.word	0x00400469
  403710:	004002d1 	.word	0x004002d1
  403714:	e000e100 	.word	0xe000e100
  403718:	00400273 	.word	0x00400273
  40371c:	e000ed14 	.word	0xe000ed14

00403720 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403724:	b084      	sub	sp, #16
  403726:	4605      	mov	r5, r0
  403728:	460c      	mov	r4, r1
  40372a:	4616      	mov	r6, r2
  40372c:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ID_TC);
  40372e:	4608      	mov	r0, r1
  403730:	4b1f      	ldr	r3, [pc, #124]	; (4037b0 <TC_init+0x90>)
  403732:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403734:	491f      	ldr	r1, [pc, #124]	; (4037b4 <TC_init+0x94>)
  403736:	9100      	str	r1, [sp, #0]
  403738:	ab02      	add	r3, sp, #8
  40373a:	aa03      	add	r2, sp, #12
  40373c:	4638      	mov	r0, r7
  40373e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4037d4 <TC_init+0xb4>
  403742:	47c0      	blx	r8
	if(ul_tcclks == 0 )
  403744:	9b02      	ldr	r3, [sp, #8]
  403746:	b33b      	cbz	r3, 403798 <TC_init+0x78>
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  403748:	9a02      	ldr	r2, [sp, #8]
  40374a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40374e:	4631      	mov	r1, r6
  403750:	4628      	mov	r0, r5
  403752:	4b19      	ldr	r3, [pc, #100]	; (4037b8 <TC_init+0x98>)
  403754:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  403756:	9b03      	ldr	r3, [sp, #12]
  403758:	4a16      	ldr	r2, [pc, #88]	; (4037b4 <TC_init+0x94>)
  40375a:	fbb2 f2f3 	udiv	r2, r2, r3
  40375e:	fbb2 f2f7 	udiv	r2, r2, r7
  403762:	4631      	mov	r1, r6
  403764:	4628      	mov	r0, r5
  403766:	4b15      	ldr	r3, [pc, #84]	; (4037bc <TC_init+0x9c>)
  403768:	4798      	blx	r3
  	NVIC_SetPriority(ID_TC, 4);
  40376a:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  40376c:	2b00      	cmp	r3, #0
  40376e:	db17      	blt.n	4037a0 <TC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403770:	4a13      	ldr	r2, [pc, #76]	; (4037c0 <TC_init+0xa0>)
  403772:	2180      	movs	r1, #128	; 0x80
  403774:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403776:	095b      	lsrs	r3, r3, #5
  403778:	f004 041f 	and.w	r4, r4, #31
  40377c:	2201      	movs	r2, #1
  40377e:	fa02 f404 	lsl.w	r4, r2, r4
  403782:	4a10      	ldr	r2, [pc, #64]	; (4037c4 <TC_init+0xa4>)
  403784:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  403788:	2210      	movs	r2, #16
  40378a:	4631      	mov	r1, r6
  40378c:	4628      	mov	r0, r5
  40378e:	4b0e      	ldr	r3, [pc, #56]	; (4037c8 <TC_init+0xa8>)
  403790:	4798      	blx	r3
}
  403792:	b004      	add	sp, #16
  403794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    pmc_enable_pck(PMC_PCK_6);
  403798:	2006      	movs	r0, #6
  40379a:	4b0c      	ldr	r3, [pc, #48]	; (4037cc <TC_init+0xac>)
  40379c:	4798      	blx	r3
  40379e:	e7d3      	b.n	403748 <TC_init+0x28>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4037a0:	f004 010f 	and.w	r1, r4, #15
  4037a4:	4a0a      	ldr	r2, [pc, #40]	; (4037d0 <TC_init+0xb0>)
  4037a6:	440a      	add	r2, r1
  4037a8:	2180      	movs	r1, #128	; 0x80
  4037aa:	7611      	strb	r1, [r2, #24]
  4037ac:	e7e3      	b.n	403776 <TC_init+0x56>
  4037ae:	bf00      	nop
  4037b0:	00402f05 	.word	0x00402f05
  4037b4:	11e1a300 	.word	0x11e1a300
  4037b8:	00400797 	.word	0x00400797
  4037bc:	004007b9 	.word	0x004007b9
  4037c0:	e000e400 	.word	0xe000e400
  4037c4:	e000e100 	.word	0xe000e100
  4037c8:	004007c1 	.word	0x004007c1
  4037cc:	00402f59 	.word	0x00402f59
  4037d0:	e000ecfc 	.word	0xe000ecfc
  4037d4:	004007d1 	.word	0x004007d1

004037d8 <pin_toggle>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void pin_toggle(Pio *pio, uint32_t mask){
  4037d8:	b538      	push	{r3, r4, r5, lr}
  4037da:	4604      	mov	r4, r0
  4037dc:	460d      	mov	r5, r1
  if(pio_get_output_data_status(pio, mask))
  4037de:	4b06      	ldr	r3, [pc, #24]	; (4037f8 <pin_toggle+0x20>)
  4037e0:	4798      	blx	r3
  4037e2:	b920      	cbnz	r0, 4037ee <pin_toggle+0x16>
    pio_clear(pio, mask);
  else
    pio_set(pio,mask);
  4037e4:	4629      	mov	r1, r5
  4037e6:	4620      	mov	r0, r4
  4037e8:	4b04      	ldr	r3, [pc, #16]	; (4037fc <pin_toggle+0x24>)
  4037ea:	4798      	blx	r3
  4037ec:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  4037ee:	4629      	mov	r1, r5
  4037f0:	4620      	mov	r0, r4
  4037f2:	4b03      	ldr	r3, [pc, #12]	; (403800 <pin_toggle+0x28>)
  4037f4:	4798      	blx	r3
  4037f6:	bd38      	pop	{r3, r4, r5, pc}
  4037f8:	00402c75 	.word	0x00402c75
  4037fc:	00402aeb 	.word	0x00402aeb
  403800:	00402aef 	.word	0x00402aef

00403804 <TC1_Handler>:
void TC1_Handler(void) {
  403804:	b500      	push	{lr}
  403806:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  403808:	2101      	movs	r1, #1
  40380a:	4805      	ldr	r0, [pc, #20]	; (403820 <TC1_Handler+0x1c>)
  40380c:	4b05      	ldr	r3, [pc, #20]	; (403824 <TC1_Handler+0x20>)
  40380e:	4798      	blx	r3
  403810:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);  
  403812:	2101      	movs	r1, #1
  403814:	4804      	ldr	r0, [pc, #16]	; (403828 <TC1_Handler+0x24>)
  403816:	4b05      	ldr	r3, [pc, #20]	; (40382c <TC1_Handler+0x28>)
  403818:	4798      	blx	r3
}
  40381a:	b003      	add	sp, #12
  40381c:	f85d fb04 	ldr.w	pc, [sp], #4
  403820:	4000c000 	.word	0x4000c000
  403824:	004007c9 	.word	0x004007c9
  403828:	400e0e00 	.word	0x400e0e00
  40382c:	004037d9 	.word	0x004037d9

00403830 <TC4_Handler>:
void TC4_Handler(void) {
  403830:	b500      	push	{lr}
  403832:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC1, 1);
  403834:	2101      	movs	r1, #1
  403836:	4806      	ldr	r0, [pc, #24]	; (403850 <TC4_Handler+0x20>)
  403838:	4b06      	ldr	r3, [pc, #24]	; (403854 <TC4_Handler+0x24>)
  40383a:	4798      	blx	r3
  40383c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_IDX_MASK);  
  40383e:	f44f 7180 	mov.w	r1, #256	; 0x100
  403842:	4805      	ldr	r0, [pc, #20]	; (403858 <TC4_Handler+0x28>)
  403844:	4b05      	ldr	r3, [pc, #20]	; (40385c <TC4_Handler+0x2c>)
  403846:	4798      	blx	r3
}
  403848:	b003      	add	sp, #12
  40384a:	f85d fb04 	ldr.w	pc, [sp], #4
  40384e:	bf00      	nop
  403850:	40010000 	.word	0x40010000
  403854:	004007c9 	.word	0x004007c9
  403858:	400e1200 	.word	0x400e1200
  40385c:	004037d9 	.word	0x004037d9

00403860 <TC7_Handler>:
void TC7_Handler(void) {
  403860:	b500      	push	{lr}
  403862:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC2, 1);
  403864:	2101      	movs	r1, #1
  403866:	4805      	ldr	r0, [pc, #20]	; (40387c <TC7_Handler+0x1c>)
  403868:	4b05      	ldr	r3, [pc, #20]	; (403880 <TC7_Handler+0x20>)
  40386a:	4798      	blx	r3
  40386c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);  
  40386e:	2104      	movs	r1, #4
  403870:	4804      	ldr	r0, [pc, #16]	; (403884 <TC7_Handler+0x24>)
  403872:	4b05      	ldr	r3, [pc, #20]	; (403888 <TC7_Handler+0x28>)
  403874:	4798      	blx	r3
}
  403876:	b003      	add	sp, #12
  403878:	f85d fb04 	ldr.w	pc, [sp], #4
  40387c:	40014000 	.word	0x40014000
  403880:	004007c9 	.word	0x004007c9
  403884:	400e1000 	.word	0x400e1000
  403888:	004037d9 	.word	0x004037d9

0040388c <task_oled>:
static void task_oled(void *pvParameters) {
  40388c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  403890:	b09b      	sub	sp, #108	; 0x6c
	gfx_mono_ssd1306_init();
  403892:	4b8f      	ldr	r3, [pc, #572]	; (403ad0 <task_oled+0x244>)
  403894:	4798      	blx	r3
// }

static void BUT_init(void) {

	/* conf botão como entrada */
	pio_configure(BUT_PLACA_PIO, PIO_INPUT, BUT_PLACA_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403896:	4c8f      	ldr	r4, [pc, #572]	; (403ad4 <task_oled+0x248>)
  403898:	2309      	movs	r3, #9
  40389a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40389e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4038a2:	4620      	mov	r0, r4
  4038a4:	4d8c      	ldr	r5, [pc, #560]	; (403ad8 <task_oled+0x24c>)
  4038a6:	47a8      	blx	r5
	pio_set_debounce_filter(BUT_PLACA_PIO, BUT_PLACA_PIO_PIN_MASK, 60);
  4038a8:	223c      	movs	r2, #60	; 0x3c
  4038aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4038ae:	4620      	mov	r0, r4
  4038b0:	4b8a      	ldr	r3, [pc, #552]	; (403adc <task_oled+0x250>)
  4038b2:	4798      	blx	r3
	
	pio_handler_set(BUT_PLACA_PIO,
  4038b4:	4b8a      	ldr	r3, [pc, #552]	; (403ae0 <task_oled+0x254>)
  4038b6:	9300      	str	r3, [sp, #0]
  4038b8:	2350      	movs	r3, #80	; 0x50
  4038ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4038be:	210a      	movs	r1, #10
  4038c0:	4620      	mov	r0, r4
  4038c2:	4e88      	ldr	r6, [pc, #544]	; (403ae4 <task_oled+0x258>)
  4038c4:	47b0      	blx	r6
					BUT_PLACA_PIO_ID,
					BUT_PLACA_PIO_PIN_MASK,
					PIO_IT_FALL_EDGE,
					but_callback);
					
	pio_enable_interrupt(BUT_PLACA_PIO, BUT_PLACA_PIO_PIN_MASK);
  4038c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4038ca:	4620      	mov	r0, r4
  4038cc:	4b86      	ldr	r3, [pc, #536]	; (403ae8 <task_oled+0x25c>)
  4038ce:	4798      	blx	r3
	pio_get_interrupt_status(BUT_PLACA_PIO);
  4038d0:	4620      	mov	r0, r4
  4038d2:	4b86      	ldr	r3, [pc, #536]	; (403aec <task_oled+0x260>)
  4038d4:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4038d6:	4b86      	ldr	r3, [pc, #536]	; (403af0 <task_oled+0x264>)
  4038d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4038dc:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4038de:	2280      	movs	r2, #128	; 0x80
  4038e0:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	/* configura prioridae */
	NVIC_EnableIRQ(BUT_PLACA_PIO_ID);
	NVIC_SetPriority(BUT_PLACA_PIO_ID, 4);

	/* Led Placa */
	pmc_enable_periph_clk(LED_PIO_ID);
  4038e4:	200c      	movs	r0, #12
  4038e6:	4e83      	ldr	r6, [pc, #524]	; (403af4 <task_oled+0x268>)
  4038e8:	47b0      	blx	r6
 	pio_configure(LED_PIO, PIO_OUTPUT_1, LED_IDX_MASK, PIO_DEFAULT);
  4038ea:	4f83      	ldr	r7, [pc, #524]	; (403af8 <task_oled+0x26c>)
  4038ec:	2300      	movs	r3, #0
  4038ee:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4038f6:	4638      	mov	r0, r7
  4038f8:	47a8      	blx	r5

	pmc_enable_periph_clk(LED1_PIO_ID);
  4038fa:	200a      	movs	r0, #10
  4038fc:	47b0      	blx	r6
 	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  4038fe:	2300      	movs	r3, #0
  403900:	2201      	movs	r2, #1
  403902:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403906:	4620      	mov	r0, r4
  403908:	47a8      	blx	r5
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  40390a:	2101      	movs	r1, #1
  40390c:	4620      	mov	r0, r4
  40390e:	4c7b      	ldr	r4, [pc, #492]	; (403afc <task_oled+0x270>)
  403910:	47a0      	blx	r4

	pmc_enable_periph_clk(LED2_PIO_ID);
  403912:	200c      	movs	r0, #12
  403914:	47b0      	blx	r6
 	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  403916:	2300      	movs	r3, #0
  403918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40391c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403920:	4638      	mov	r0, r7
  403922:	47a8      	blx	r5
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403928:	4638      	mov	r0, r7
  40392a:	47a0      	blx	r4

	pmc_enable_periph_clk(LED3_PIO_ID);
  40392c:	200b      	movs	r0, #11
  40392e:	47b0      	blx	r6
 	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  403930:	4e73      	ldr	r6, [pc, #460]	; (403b00 <task_oled+0x274>)
  403932:	2300      	movs	r3, #0
  403934:	2204      	movs	r2, #4
  403936:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40393a:	4630      	mov	r0, r6
  40393c:	47a8      	blx	r5
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  40393e:	2104      	movs	r1, #4
  403940:	4630      	mov	r0, r6
  403942:	47a0      	blx	r4
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  403944:	ac13      	add	r4, sp, #76	; 0x4c
  403946:	4d6f      	ldr	r5, [pc, #444]	; (403b04 <task_oled+0x278>)
  403948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40394a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40394c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403950:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  403954:	2306      	movs	r3, #6
  403956:	9305      	str	r3, [sp, #20]
  403958:	466c      	mov	r4, sp
  40395a:	ad15      	add	r5, sp, #84	; 0x54
  40395c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40395e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403960:	682b      	ldr	r3, [r5, #0]
  403962:	6023      	str	r3, [r4, #0]
  403964:	ab13      	add	r3, sp, #76	; 0x4c
  403966:	cb0c      	ldmia	r3, {r2, r3}
  403968:	2102      	movs	r1, #2
  40396a:	4867      	ldr	r0, [pc, #412]	; (403b08 <task_oled+0x27c>)
  40396c:	4c67      	ldr	r4, [pc, #412]	; (403b0c <task_oled+0x280>)
  40396e:	47a0      	blx	r4
	RTT_init(4, 1, RTT_MR_ALMIEN);
  403970:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403974:	2001      	movs	r0, #1
  403976:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  40397a:	4b65      	ldr	r3, [pc, #404]	; (403b10 <task_oled+0x284>)
  40397c:	4798      	blx	r3
	TC_init(TC0, ID_TC1, 1, 4);
  40397e:	4c65      	ldr	r4, [pc, #404]	; (403b14 <task_oled+0x288>)
  403980:	2304      	movs	r3, #4
  403982:	2201      	movs	r2, #1
  403984:	2118      	movs	r1, #24
  403986:	4620      	mov	r0, r4
  403988:	4e63      	ldr	r6, [pc, #396]	; (403b18 <task_oled+0x28c>)
  40398a:	47b0      	blx	r6
	tc_start(TC0, 1);
  40398c:	2101      	movs	r1, #1
  40398e:	4620      	mov	r0, r4
  403990:	4c62      	ldr	r4, [pc, #392]	; (403b1c <task_oled+0x290>)
  403992:	47a0      	blx	r4
	TC_init(TC1, ID_TC4, 1, 5);
  403994:	4d62      	ldr	r5, [pc, #392]	; (403b20 <task_oled+0x294>)
  403996:	2305      	movs	r3, #5
  403998:	2201      	movs	r2, #1
  40399a:	211b      	movs	r1, #27
  40399c:	4628      	mov	r0, r5
  40399e:	47b0      	blx	r6
	tc_start(TC1, 1);
  4039a0:	2101      	movs	r1, #1
  4039a2:	4628      	mov	r0, r5
  4039a4:	47a0      	blx	r4
		if(xSemaphoreTake(xSemaphore, 10)){
  4039a6:	4e5f      	ldr	r6, [pc, #380]	; (403b24 <task_oled+0x298>)
			pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  4039a8:	46ba      	mov	sl, r7
			RTT_init(4, 1, RTT_MR_ALMIEN);
  4039aa:	f04f 0801 	mov.w	r8, #1
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  4039ae:	f507 67cc 	add.w	r7, r7, #1632	; 0x660
  4039b2:	e088      	b.n	403ac6 <task_oled+0x23a>
			pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  4039b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4039b8:	4650      	mov	r0, sl
  4039ba:	4b5b      	ldr	r3, [pc, #364]	; (403b28 <task_oled+0x29c>)
  4039bc:	4798      	blx	r3
			RTT_init(4, 1, RTT_MR_ALMIEN);
  4039be:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4039c2:	4640      	mov	r0, r8
  4039c4:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  4039c8:	4b51      	ldr	r3, [pc, #324]	; (403b10 <task_oled+0x284>)
  4039ca:	4798      	blx	r3
  4039cc:	e037      	b.n	403a3e <task_oled+0x1b2>
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  4039ce:	ab0c      	add	r3, sp, #48	; 0x30
  4039d0:	9300      	str	r3, [sp, #0]
  4039d2:	ab0d      	add	r3, sp, #52	; 0x34
  4039d4:	aa0e      	add	r2, sp, #56	; 0x38
  4039d6:	a90f      	add	r1, sp, #60	; 0x3c
  4039d8:	4638      	mov	r0, r7
  4039da:	f8df b168 	ldr.w	fp, [pc, #360]	; 403b44 <task_oled+0x2b8>
  4039de:	47d8      	blx	fp
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  4039e0:	ab10      	add	r3, sp, #64	; 0x40
  4039e2:	aa11      	add	r2, sp, #68	; 0x44
  4039e4:	a912      	add	r1, sp, #72	; 0x48
  4039e6:	4638      	mov	r0, r7
  4039e8:	f8df b15c 	ldr.w	fp, [pc, #348]	; 403b48 <task_oled+0x2bc>
  4039ec:	47d8      	blx	fp
    		rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);                              
  4039ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039f0:	9300      	str	r3, [sp, #0]
  4039f2:	4643      	mov	r3, r8
  4039f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039f6:	4641      	mov	r1, r8
  4039f8:	4638      	mov	r0, r7
  4039fa:	f8df b150 	ldr.w	fp, [pc, #336]	; 403b4c <task_oled+0x2c0>
  4039fe:	47d8      	blx	fp
			rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 5);
  403a00:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403a02:	3305      	adds	r3, #5
  403a04:	9302      	str	r3, [sp, #8]
  403a06:	f8cd 8004 	str.w	r8, [sp, #4]
  403a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a0c:	9300      	str	r3, [sp, #0]
  403a0e:	4643      	mov	r3, r8
  403a10:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403a12:	4641      	mov	r1, r8
  403a14:	4638      	mov	r0, r7
  403a16:	f8df b138 	ldr.w	fp, [pc, #312]	; 403b50 <task_oled+0x2c4>
  403a1a:	47d8      	blx	fp
  403a1c:	e017      	b.n	403a4e <task_oled+0x1c2>
		if(xSemaphoreTake(xSemaphore4, 10)){
  403a1e:	4623      	mov	r3, r4
  403a20:	462a      	mov	r2, r5
  403a22:	4621      	mov	r1, r4
  403a24:	4841      	ldr	r0, [pc, #260]	; (403b2c <task_oled+0x2a0>)
  403a26:	6800      	ldr	r0, [r0, #0]
  403a28:	47b0      	blx	r6
  403a2a:	2800      	cmp	r0, #0
  403a2c:	d140      	bne.n	403ab0 <task_oled+0x224>
		if(xSemaphoreTake(xSemaphore, 10)){
  403a2e:	4623      	mov	r3, r4
  403a30:	462a      	mov	r2, r5
  403a32:	4621      	mov	r1, r4
  403a34:	f8d9 0000 	ldr.w	r0, [r9]
  403a38:	47b0      	blx	r6
  403a3a:	2800      	cmp	r0, #0
  403a3c:	d1ba      	bne.n	4039b4 <task_oled+0x128>
		if(xSemaphoreTake(xSemaphore2, 10)){    
  403a3e:	4623      	mov	r3, r4
  403a40:	462a      	mov	r2, r5
  403a42:	4621      	mov	r1, r4
  403a44:	483a      	ldr	r0, [pc, #232]	; (403b30 <task_oled+0x2a4>)
  403a46:	6800      	ldr	r0, [r0, #0]
  403a48:	47b0      	blx	r6
  403a4a:	2800      	cmp	r0, #0
  403a4c:	d1bf      	bne.n	4039ce <task_oled+0x142>
		if(xSemaphoreTake(xSemaphore3, 10)){
  403a4e:	4623      	mov	r3, r4
  403a50:	462a      	mov	r2, r5
  403a52:	4621      	mov	r1, r4
  403a54:	4837      	ldr	r0, [pc, #220]	; (403b34 <task_oled+0x2a8>)
  403a56:	6800      	ldr	r0, [r0, #0]
  403a58:	47b0      	blx	r6
  403a5a:	2800      	cmp	r0, #0
  403a5c:	d0df      	beq.n	403a1e <task_oled+0x192>
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  403a5e:	ab0c      	add	r3, sp, #48	; 0x30
  403a60:	9300      	str	r3, [sp, #0]
  403a62:	ab0d      	add	r3, sp, #52	; 0x34
  403a64:	aa0e      	add	r2, sp, #56	; 0x38
  403a66:	a90f      	add	r1, sp, #60	; 0x3c
  403a68:	4638      	mov	r0, r7
  403a6a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 403b44 <task_oled+0x2b8>
  403a6e:	47d8      	blx	fp
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403a70:	ab10      	add	r3, sp, #64	; 0x40
  403a72:	aa11      	add	r2, sp, #68	; 0x44
  403a74:	a912      	add	r1, sp, #72	; 0x48
  403a76:	4638      	mov	r0, r7
  403a78:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 403b48 <task_oled+0x2bc>
  403a7c:	47d8      	blx	fp
			gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
  403a7e:	9400      	str	r4, [sp, #0]
  403a80:	2320      	movs	r3, #32
  403a82:	2280      	movs	r2, #128	; 0x80
  403a84:	4621      	mov	r1, r4
  403a86:	4620      	mov	r0, r4
  403a88:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 403b54 <task_oled+0x2c8>
  403a8c:	47d8      	blx	fp
			sprintf(oi,"%d:%d:%02d",current_hour, current_min, current_sec);
  403a8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403a90:	9300      	str	r3, [sp, #0]
  403a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403a96:	4928      	ldr	r1, [pc, #160]	; (403b38 <task_oled+0x2ac>)
  403a98:	a807      	add	r0, sp, #28
  403a9a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 403b58 <task_oled+0x2cc>
  403a9e:	47d8      	blx	fp
			gfx_mono_draw_string(oi, 10, 10, &sysfont);
  403aa0:	4b26      	ldr	r3, [pc, #152]	; (403b3c <task_oled+0x2b0>)
  403aa2:	462a      	mov	r2, r5
  403aa4:	4629      	mov	r1, r5
  403aa6:	a807      	add	r0, sp, #28
  403aa8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 403b5c <task_oled+0x2d0>
  403aac:	47d8      	blx	fp
  403aae:	e7b6      	b.n	403a1e <task_oled+0x192>
			TC_init(TC2, ID_TC7, 1, 1);
  403ab0:	4c23      	ldr	r4, [pc, #140]	; (403b40 <task_oled+0x2b4>)
  403ab2:	4643      	mov	r3, r8
  403ab4:	4642      	mov	r2, r8
  403ab6:	2130      	movs	r1, #48	; 0x30
  403ab8:	4620      	mov	r0, r4
  403aba:	4d17      	ldr	r5, [pc, #92]	; (403b18 <task_oled+0x28c>)
  403abc:	47a8      	blx	r5
			tc_start(TC2, 1);
  403abe:	4641      	mov	r1, r8
  403ac0:	4620      	mov	r0, r4
  403ac2:	4b16      	ldr	r3, [pc, #88]	; (403b1c <task_oled+0x290>)
  403ac4:	4798      	blx	r3
		if(xSemaphoreTake(xSemaphore, 10)){
  403ac6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 403b60 <task_oled+0x2d4>
  403aca:	2400      	movs	r4, #0
  403acc:	250a      	movs	r5, #10
  403ace:	e7ae      	b.n	403a2e <task_oled+0x1a2>
  403ad0:	00402601 	.word	0x00402601
  403ad4:	400e0e00 	.word	0x400e0e00
  403ad8:	00402be5 	.word	0x00402be5
  403adc:	00402ad1 	.word	0x00402ad1
  403ae0:	004034cd 	.word	0x004034cd
  403ae4:	00402d11 	.word	0x00402d11
  403ae8:	00402cb3 	.word	0x00402cb3
  403aec:	00402cb7 	.word	0x00402cb7
  403af0:	e000e100 	.word	0xe000e100
  403af4:	00402f05 	.word	0x00402f05
  403af8:	400e1200 	.word	0x400e1200
  403afc:	00402aeb 	.word	0x00402aeb
  403b00:	400e1000 	.word	0x400e1000
  403b04:	00408f58 	.word	0x00408f58
  403b08:	400e1860 	.word	0x400e1860
  403b0c:	0040367d 	.word	0x0040367d
  403b10:	004034f1 	.word	0x004034f1
  403b14:	4000c000 	.word	0x4000c000
  403b18:	00403721 	.word	0x00403721
  403b1c:	004007b1 	.word	0x004007b1
  403b20:	40010000 	.word	0x40010000
  403b24:	00401261 	.word	0x00401261
  403b28:	004037d9 	.word	0x004037d9
  403b2c:	2040c6b8 	.word	0x2040c6b8
  403b30:	2040c6bc 	.word	0x2040c6bc
  403b34:	2040c6b0 	.word	0x2040c6b0
  403b38:	00408f7c 	.word	0x00408f7c
  403b3c:	20400010 	.word	0x20400010
  403b40:	40014000 	.word	0x40014000
  403b44:	004003f5 	.word	0x004003f5
  403b48:	00400277 	.word	0x00400277
  403b4c:	00400521 	.word	0x00400521
  403b50:	00400361 	.word	0x00400361
  403b54:	00402485 	.word	0x00402485
  403b58:	00403e19 	.word	0x00403e19
  403b5c:	00402569 	.word	0x00402569
  403b60:	2040c6b4 	.word	0x2040c6b4

00403b64 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  403b64:	b500      	push	{lr}
  403b66:	b085      	sub	sp, #20
	/* Initialize the SAM system */
	sysclk_init();
  403b68:	4b17      	ldr	r3, [pc, #92]	; (403bc8 <main+0x64>)
  403b6a:	4798      	blx	r3
	board_init();
  403b6c:	4b17      	ldr	r3, [pc, #92]	; (403bcc <main+0x68>)
  403b6e:	4798      	blx	r3

	/* Initialize the console uart */
	// configure_console();

	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403b70:	2400      	movs	r4, #0
  403b72:	9403      	str	r4, [sp, #12]
  403b74:	9402      	str	r4, [sp, #8]
  403b76:	9401      	str	r4, [sp, #4]
  403b78:	9400      	str	r4, [sp, #0]
  403b7a:	4623      	mov	r3, r4
  403b7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403b80:	4913      	ldr	r1, [pc, #76]	; (403bd0 <main+0x6c>)
  403b82:	4814      	ldr	r0, [pc, #80]	; (403bd4 <main+0x70>)
  403b84:	4d14      	ldr	r5, [pc, #80]	; (403bd8 <main+0x74>)
  403b86:	47a8      	blx	r5
	//   printf("Failed to create oled task\r\n");
	}

	xSemaphore = xSemaphoreCreateBinary();
  403b88:	2203      	movs	r2, #3
  403b8a:	4621      	mov	r1, r4
  403b8c:	2001      	movs	r0, #1
  403b8e:	4d13      	ldr	r5, [pc, #76]	; (403bdc <main+0x78>)
  403b90:	47a8      	blx	r5
  403b92:	4b13      	ldr	r3, [pc, #76]	; (403be0 <main+0x7c>)
  403b94:	6018      	str	r0, [r3, #0]
	if (xSemaphore == NULL){
		// printf("falha em criar o semaforo \n");
	}

	xSemaphore2 = xSemaphoreCreateBinary();
  403b96:	2203      	movs	r2, #3
  403b98:	4621      	mov	r1, r4
  403b9a:	2001      	movs	r0, #1
  403b9c:	47a8      	blx	r5
  403b9e:	4b11      	ldr	r3, [pc, #68]	; (403be4 <main+0x80>)
  403ba0:	6018      	str	r0, [r3, #0]
	if (xSemaphore2 == NULL){
		// printf("falha em criar o semaforo \n");
	}

	xSemaphore3 = xSemaphoreCreateBinary();
  403ba2:	2203      	movs	r2, #3
  403ba4:	4621      	mov	r1, r4
  403ba6:	2001      	movs	r0, #1
  403ba8:	47a8      	blx	r5
  403baa:	4b0f      	ldr	r3, [pc, #60]	; (403be8 <main+0x84>)
  403bac:	6018      	str	r0, [r3, #0]
	if (xSemaphore3 == NULL){
		// printf("falha em criar o semaforo \n");
	}

	xSemaphore4 = xSemaphoreCreateBinary();
  403bae:	2203      	movs	r2, #3
  403bb0:	4621      	mov	r1, r4
  403bb2:	2001      	movs	r0, #1
  403bb4:	47a8      	blx	r5
  403bb6:	4b0d      	ldr	r3, [pc, #52]	; (403bec <main+0x88>)
  403bb8:	6018      	str	r0, [r3, #0]
	if (xSemaphore4 == NULL){
		// printf("falha em criar o semaforo \n");
	}
	/* Start the scheduler. */
	vTaskStartScheduler();
  403bba:	4b0d      	ldr	r3, [pc, #52]	; (403bf0 <main+0x8c>)
  403bbc:	4798      	blx	r3

  /* RTOS não deve chegar aqui !! */
	while(1){
		//entrar em sleep mode;
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  403bbe:	2502      	movs	r5, #2
  403bc0:	4c0c      	ldr	r4, [pc, #48]	; (403bf4 <main+0x90>)
  403bc2:	4628      	mov	r0, r5
  403bc4:	47a0      	blx	r4
  403bc6:	e7fc      	b.n	403bc2 <main+0x5e>
  403bc8:	00402921 	.word	0x00402921
  403bcc:	00402991 	.word	0x00402991
  403bd0:	00408f74 	.word	0x00408f74
  403bd4:	0040388d 	.word	0x0040388d
  403bd8:	00401541 	.word	0x00401541
  403bdc:	00400e21 	.word	0x00400e21
  403be0:	2040c6b4 	.word	0x2040c6b4
  403be4:	2040c6bc 	.word	0x2040c6bc
  403be8:	2040c6b0 	.word	0x2040c6b0
  403bec:	2040c6b8 	.word	0x2040c6b8
  403bf0:	00401775 	.word	0x00401775
  403bf4:	00402fbd 	.word	0x00402fbd

00403bf8 <__libc_init_array>:
  403bf8:	b570      	push	{r4, r5, r6, lr}
  403bfa:	4e0f      	ldr	r6, [pc, #60]	; (403c38 <__libc_init_array+0x40>)
  403bfc:	4d0f      	ldr	r5, [pc, #60]	; (403c3c <__libc_init_array+0x44>)
  403bfe:	1b76      	subs	r6, r6, r5
  403c00:	10b6      	asrs	r6, r6, #2
  403c02:	bf18      	it	ne
  403c04:	2400      	movne	r4, #0
  403c06:	d005      	beq.n	403c14 <__libc_init_array+0x1c>
  403c08:	3401      	adds	r4, #1
  403c0a:	f855 3b04 	ldr.w	r3, [r5], #4
  403c0e:	4798      	blx	r3
  403c10:	42a6      	cmp	r6, r4
  403c12:	d1f9      	bne.n	403c08 <__libc_init_array+0x10>
  403c14:	4e0a      	ldr	r6, [pc, #40]	; (403c40 <__libc_init_array+0x48>)
  403c16:	4d0b      	ldr	r5, [pc, #44]	; (403c44 <__libc_init_array+0x4c>)
  403c18:	1b76      	subs	r6, r6, r5
  403c1a:	f005 faf9 	bl	409210 <_init>
  403c1e:	10b6      	asrs	r6, r6, #2
  403c20:	bf18      	it	ne
  403c22:	2400      	movne	r4, #0
  403c24:	d006      	beq.n	403c34 <__libc_init_array+0x3c>
  403c26:	3401      	adds	r4, #1
  403c28:	f855 3b04 	ldr.w	r3, [r5], #4
  403c2c:	4798      	blx	r3
  403c2e:	42a6      	cmp	r6, r4
  403c30:	d1f9      	bne.n	403c26 <__libc_init_array+0x2e>
  403c32:	bd70      	pop	{r4, r5, r6, pc}
  403c34:	bd70      	pop	{r4, r5, r6, pc}
  403c36:	bf00      	nop
  403c38:	0040921c 	.word	0x0040921c
  403c3c:	0040921c 	.word	0x0040921c
  403c40:	00409224 	.word	0x00409224
  403c44:	0040921c 	.word	0x0040921c

00403c48 <memcpy>:
  403c48:	4684      	mov	ip, r0
  403c4a:	ea41 0300 	orr.w	r3, r1, r0
  403c4e:	f013 0303 	ands.w	r3, r3, #3
  403c52:	d16d      	bne.n	403d30 <memcpy+0xe8>
  403c54:	3a40      	subs	r2, #64	; 0x40
  403c56:	d341      	bcc.n	403cdc <memcpy+0x94>
  403c58:	f851 3b04 	ldr.w	r3, [r1], #4
  403c5c:	f840 3b04 	str.w	r3, [r0], #4
  403c60:	f851 3b04 	ldr.w	r3, [r1], #4
  403c64:	f840 3b04 	str.w	r3, [r0], #4
  403c68:	f851 3b04 	ldr.w	r3, [r1], #4
  403c6c:	f840 3b04 	str.w	r3, [r0], #4
  403c70:	f851 3b04 	ldr.w	r3, [r1], #4
  403c74:	f840 3b04 	str.w	r3, [r0], #4
  403c78:	f851 3b04 	ldr.w	r3, [r1], #4
  403c7c:	f840 3b04 	str.w	r3, [r0], #4
  403c80:	f851 3b04 	ldr.w	r3, [r1], #4
  403c84:	f840 3b04 	str.w	r3, [r0], #4
  403c88:	f851 3b04 	ldr.w	r3, [r1], #4
  403c8c:	f840 3b04 	str.w	r3, [r0], #4
  403c90:	f851 3b04 	ldr.w	r3, [r1], #4
  403c94:	f840 3b04 	str.w	r3, [r0], #4
  403c98:	f851 3b04 	ldr.w	r3, [r1], #4
  403c9c:	f840 3b04 	str.w	r3, [r0], #4
  403ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ca4:	f840 3b04 	str.w	r3, [r0], #4
  403ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cac:	f840 3b04 	str.w	r3, [r0], #4
  403cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cb4:	f840 3b04 	str.w	r3, [r0], #4
  403cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cbc:	f840 3b04 	str.w	r3, [r0], #4
  403cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cc4:	f840 3b04 	str.w	r3, [r0], #4
  403cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ccc:	f840 3b04 	str.w	r3, [r0], #4
  403cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cd4:	f840 3b04 	str.w	r3, [r0], #4
  403cd8:	3a40      	subs	r2, #64	; 0x40
  403cda:	d2bd      	bcs.n	403c58 <memcpy+0x10>
  403cdc:	3230      	adds	r2, #48	; 0x30
  403cde:	d311      	bcc.n	403d04 <memcpy+0xbc>
  403ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ce4:	f840 3b04 	str.w	r3, [r0], #4
  403ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cec:	f840 3b04 	str.w	r3, [r0], #4
  403cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cf4:	f840 3b04 	str.w	r3, [r0], #4
  403cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cfc:	f840 3b04 	str.w	r3, [r0], #4
  403d00:	3a10      	subs	r2, #16
  403d02:	d2ed      	bcs.n	403ce0 <memcpy+0x98>
  403d04:	320c      	adds	r2, #12
  403d06:	d305      	bcc.n	403d14 <memcpy+0xcc>
  403d08:	f851 3b04 	ldr.w	r3, [r1], #4
  403d0c:	f840 3b04 	str.w	r3, [r0], #4
  403d10:	3a04      	subs	r2, #4
  403d12:	d2f9      	bcs.n	403d08 <memcpy+0xc0>
  403d14:	3204      	adds	r2, #4
  403d16:	d008      	beq.n	403d2a <memcpy+0xe2>
  403d18:	07d2      	lsls	r2, r2, #31
  403d1a:	bf1c      	itt	ne
  403d1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403d20:	f800 3b01 	strbne.w	r3, [r0], #1
  403d24:	d301      	bcc.n	403d2a <memcpy+0xe2>
  403d26:	880b      	ldrh	r3, [r1, #0]
  403d28:	8003      	strh	r3, [r0, #0]
  403d2a:	4660      	mov	r0, ip
  403d2c:	4770      	bx	lr
  403d2e:	bf00      	nop
  403d30:	2a08      	cmp	r2, #8
  403d32:	d313      	bcc.n	403d5c <memcpy+0x114>
  403d34:	078b      	lsls	r3, r1, #30
  403d36:	d08d      	beq.n	403c54 <memcpy+0xc>
  403d38:	f010 0303 	ands.w	r3, r0, #3
  403d3c:	d08a      	beq.n	403c54 <memcpy+0xc>
  403d3e:	f1c3 0304 	rsb	r3, r3, #4
  403d42:	1ad2      	subs	r2, r2, r3
  403d44:	07db      	lsls	r3, r3, #31
  403d46:	bf1c      	itt	ne
  403d48:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403d4c:	f800 3b01 	strbne.w	r3, [r0], #1
  403d50:	d380      	bcc.n	403c54 <memcpy+0xc>
  403d52:	f831 3b02 	ldrh.w	r3, [r1], #2
  403d56:	f820 3b02 	strh.w	r3, [r0], #2
  403d5a:	e77b      	b.n	403c54 <memcpy+0xc>
  403d5c:	3a04      	subs	r2, #4
  403d5e:	d3d9      	bcc.n	403d14 <memcpy+0xcc>
  403d60:	3a01      	subs	r2, #1
  403d62:	f811 3b01 	ldrb.w	r3, [r1], #1
  403d66:	f800 3b01 	strb.w	r3, [r0], #1
  403d6a:	d2f9      	bcs.n	403d60 <memcpy+0x118>
  403d6c:	780b      	ldrb	r3, [r1, #0]
  403d6e:	7003      	strb	r3, [r0, #0]
  403d70:	784b      	ldrb	r3, [r1, #1]
  403d72:	7043      	strb	r3, [r0, #1]
  403d74:	788b      	ldrb	r3, [r1, #2]
  403d76:	7083      	strb	r3, [r0, #2]
  403d78:	4660      	mov	r0, ip
  403d7a:	4770      	bx	lr

00403d7c <memset>:
  403d7c:	b470      	push	{r4, r5, r6}
  403d7e:	0786      	lsls	r6, r0, #30
  403d80:	d046      	beq.n	403e10 <memset+0x94>
  403d82:	1e54      	subs	r4, r2, #1
  403d84:	2a00      	cmp	r2, #0
  403d86:	d041      	beq.n	403e0c <memset+0x90>
  403d88:	b2ca      	uxtb	r2, r1
  403d8a:	4603      	mov	r3, r0
  403d8c:	e002      	b.n	403d94 <memset+0x18>
  403d8e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403d92:	d33b      	bcc.n	403e0c <memset+0x90>
  403d94:	f803 2b01 	strb.w	r2, [r3], #1
  403d98:	079d      	lsls	r5, r3, #30
  403d9a:	d1f8      	bne.n	403d8e <memset+0x12>
  403d9c:	2c03      	cmp	r4, #3
  403d9e:	d92e      	bls.n	403dfe <memset+0x82>
  403da0:	b2cd      	uxtb	r5, r1
  403da2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403da6:	2c0f      	cmp	r4, #15
  403da8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403dac:	d919      	bls.n	403de2 <memset+0x66>
  403dae:	f103 0210 	add.w	r2, r3, #16
  403db2:	4626      	mov	r6, r4
  403db4:	3e10      	subs	r6, #16
  403db6:	2e0f      	cmp	r6, #15
  403db8:	f842 5c10 	str.w	r5, [r2, #-16]
  403dbc:	f842 5c0c 	str.w	r5, [r2, #-12]
  403dc0:	f842 5c08 	str.w	r5, [r2, #-8]
  403dc4:	f842 5c04 	str.w	r5, [r2, #-4]
  403dc8:	f102 0210 	add.w	r2, r2, #16
  403dcc:	d8f2      	bhi.n	403db4 <memset+0x38>
  403dce:	f1a4 0210 	sub.w	r2, r4, #16
  403dd2:	f022 020f 	bic.w	r2, r2, #15
  403dd6:	f004 040f 	and.w	r4, r4, #15
  403dda:	3210      	adds	r2, #16
  403ddc:	2c03      	cmp	r4, #3
  403dde:	4413      	add	r3, r2
  403de0:	d90d      	bls.n	403dfe <memset+0x82>
  403de2:	461e      	mov	r6, r3
  403de4:	4622      	mov	r2, r4
  403de6:	3a04      	subs	r2, #4
  403de8:	2a03      	cmp	r2, #3
  403dea:	f846 5b04 	str.w	r5, [r6], #4
  403dee:	d8fa      	bhi.n	403de6 <memset+0x6a>
  403df0:	1f22      	subs	r2, r4, #4
  403df2:	f022 0203 	bic.w	r2, r2, #3
  403df6:	3204      	adds	r2, #4
  403df8:	4413      	add	r3, r2
  403dfa:	f004 0403 	and.w	r4, r4, #3
  403dfe:	b12c      	cbz	r4, 403e0c <memset+0x90>
  403e00:	b2c9      	uxtb	r1, r1
  403e02:	441c      	add	r4, r3
  403e04:	f803 1b01 	strb.w	r1, [r3], #1
  403e08:	429c      	cmp	r4, r3
  403e0a:	d1fb      	bne.n	403e04 <memset+0x88>
  403e0c:	bc70      	pop	{r4, r5, r6}
  403e0e:	4770      	bx	lr
  403e10:	4614      	mov	r4, r2
  403e12:	4603      	mov	r3, r0
  403e14:	e7c2      	b.n	403d9c <memset+0x20>
  403e16:	bf00      	nop

00403e18 <sprintf>:
  403e18:	b40e      	push	{r1, r2, r3}
  403e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e1c:	b09c      	sub	sp, #112	; 0x70
  403e1e:	ab21      	add	r3, sp, #132	; 0x84
  403e20:	490f      	ldr	r1, [pc, #60]	; (403e60 <sprintf+0x48>)
  403e22:	f853 2b04 	ldr.w	r2, [r3], #4
  403e26:	9301      	str	r3, [sp, #4]
  403e28:	4605      	mov	r5, r0
  403e2a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403e2e:	6808      	ldr	r0, [r1, #0]
  403e30:	9502      	str	r5, [sp, #8]
  403e32:	f44f 7702 	mov.w	r7, #520	; 0x208
  403e36:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403e3a:	a902      	add	r1, sp, #8
  403e3c:	9506      	str	r5, [sp, #24]
  403e3e:	f8ad 7014 	strh.w	r7, [sp, #20]
  403e42:	9404      	str	r4, [sp, #16]
  403e44:	9407      	str	r4, [sp, #28]
  403e46:	f8ad 6016 	strh.w	r6, [sp, #22]
  403e4a:	f000 f887 	bl	403f5c <_svfprintf_r>
  403e4e:	9b02      	ldr	r3, [sp, #8]
  403e50:	2200      	movs	r2, #0
  403e52:	701a      	strb	r2, [r3, #0]
  403e54:	b01c      	add	sp, #112	; 0x70
  403e56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403e5a:	b003      	add	sp, #12
  403e5c:	4770      	bx	lr
  403e5e:	bf00      	nop
  403e60:	20400024 	.word	0x20400024
	...

00403e80 <strlen>:
  403e80:	f890 f000 	pld	[r0]
  403e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403e88:	f020 0107 	bic.w	r1, r0, #7
  403e8c:	f06f 0c00 	mvn.w	ip, #0
  403e90:	f010 0407 	ands.w	r4, r0, #7
  403e94:	f891 f020 	pld	[r1, #32]
  403e98:	f040 8049 	bne.w	403f2e <strlen+0xae>
  403e9c:	f04f 0400 	mov.w	r4, #0
  403ea0:	f06f 0007 	mvn.w	r0, #7
  403ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403ea8:	f891 f040 	pld	[r1, #64]	; 0x40
  403eac:	f100 0008 	add.w	r0, r0, #8
  403eb0:	fa82 f24c 	uadd8	r2, r2, ip
  403eb4:	faa4 f28c 	sel	r2, r4, ip
  403eb8:	fa83 f34c 	uadd8	r3, r3, ip
  403ebc:	faa2 f38c 	sel	r3, r2, ip
  403ec0:	bb4b      	cbnz	r3, 403f16 <strlen+0x96>
  403ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403ec6:	fa82 f24c 	uadd8	r2, r2, ip
  403eca:	f100 0008 	add.w	r0, r0, #8
  403ece:	faa4 f28c 	sel	r2, r4, ip
  403ed2:	fa83 f34c 	uadd8	r3, r3, ip
  403ed6:	faa2 f38c 	sel	r3, r2, ip
  403eda:	b9e3      	cbnz	r3, 403f16 <strlen+0x96>
  403edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403ee0:	fa82 f24c 	uadd8	r2, r2, ip
  403ee4:	f100 0008 	add.w	r0, r0, #8
  403ee8:	faa4 f28c 	sel	r2, r4, ip
  403eec:	fa83 f34c 	uadd8	r3, r3, ip
  403ef0:	faa2 f38c 	sel	r3, r2, ip
  403ef4:	b97b      	cbnz	r3, 403f16 <strlen+0x96>
  403ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403efa:	f101 0120 	add.w	r1, r1, #32
  403efe:	fa82 f24c 	uadd8	r2, r2, ip
  403f02:	f100 0008 	add.w	r0, r0, #8
  403f06:	faa4 f28c 	sel	r2, r4, ip
  403f0a:	fa83 f34c 	uadd8	r3, r3, ip
  403f0e:	faa2 f38c 	sel	r3, r2, ip
  403f12:	2b00      	cmp	r3, #0
  403f14:	d0c6      	beq.n	403ea4 <strlen+0x24>
  403f16:	2a00      	cmp	r2, #0
  403f18:	bf04      	itt	eq
  403f1a:	3004      	addeq	r0, #4
  403f1c:	461a      	moveq	r2, r3
  403f1e:	ba12      	rev	r2, r2
  403f20:	fab2 f282 	clz	r2, r2
  403f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403f2c:	4770      	bx	lr
  403f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403f32:	f004 0503 	and.w	r5, r4, #3
  403f36:	f1c4 0000 	rsb	r0, r4, #0
  403f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403f3e:	f014 0f04 	tst.w	r4, #4
  403f42:	f891 f040 	pld	[r1, #64]	; 0x40
  403f46:	fa0c f505 	lsl.w	r5, ip, r5
  403f4a:	ea62 0205 	orn	r2, r2, r5
  403f4e:	bf1c      	itt	ne
  403f50:	ea63 0305 	ornne	r3, r3, r5
  403f54:	4662      	movne	r2, ip
  403f56:	f04f 0400 	mov.w	r4, #0
  403f5a:	e7a9      	b.n	403eb0 <strlen+0x30>

00403f5c <_svfprintf_r>:
  403f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f60:	b0c3      	sub	sp, #268	; 0x10c
  403f62:	460c      	mov	r4, r1
  403f64:	910b      	str	r1, [sp, #44]	; 0x2c
  403f66:	4692      	mov	sl, r2
  403f68:	930f      	str	r3, [sp, #60]	; 0x3c
  403f6a:	900c      	str	r0, [sp, #48]	; 0x30
  403f6c:	f002 fa0c 	bl	406388 <_localeconv_r>
  403f70:	6803      	ldr	r3, [r0, #0]
  403f72:	931a      	str	r3, [sp, #104]	; 0x68
  403f74:	4618      	mov	r0, r3
  403f76:	f7ff ff83 	bl	403e80 <strlen>
  403f7a:	89a3      	ldrh	r3, [r4, #12]
  403f7c:	9019      	str	r0, [sp, #100]	; 0x64
  403f7e:	0619      	lsls	r1, r3, #24
  403f80:	d503      	bpl.n	403f8a <_svfprintf_r+0x2e>
  403f82:	6923      	ldr	r3, [r4, #16]
  403f84:	2b00      	cmp	r3, #0
  403f86:	f001 8003 	beq.w	404f90 <_svfprintf_r+0x1034>
  403f8a:	2300      	movs	r3, #0
  403f8c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403f90:	9313      	str	r3, [sp, #76]	; 0x4c
  403f92:	9315      	str	r3, [sp, #84]	; 0x54
  403f94:	9314      	str	r3, [sp, #80]	; 0x50
  403f96:	9327      	str	r3, [sp, #156]	; 0x9c
  403f98:	9326      	str	r3, [sp, #152]	; 0x98
  403f9a:	9318      	str	r3, [sp, #96]	; 0x60
  403f9c:	931b      	str	r3, [sp, #108]	; 0x6c
  403f9e:	9309      	str	r3, [sp, #36]	; 0x24
  403fa0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403fa4:	46c8      	mov	r8, r9
  403fa6:	9316      	str	r3, [sp, #88]	; 0x58
  403fa8:	9317      	str	r3, [sp, #92]	; 0x5c
  403faa:	f89a 3000 	ldrb.w	r3, [sl]
  403fae:	4654      	mov	r4, sl
  403fb0:	b1e3      	cbz	r3, 403fec <_svfprintf_r+0x90>
  403fb2:	2b25      	cmp	r3, #37	; 0x25
  403fb4:	d102      	bne.n	403fbc <_svfprintf_r+0x60>
  403fb6:	e019      	b.n	403fec <_svfprintf_r+0x90>
  403fb8:	2b25      	cmp	r3, #37	; 0x25
  403fba:	d003      	beq.n	403fc4 <_svfprintf_r+0x68>
  403fbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403fc0:	2b00      	cmp	r3, #0
  403fc2:	d1f9      	bne.n	403fb8 <_svfprintf_r+0x5c>
  403fc4:	eba4 050a 	sub.w	r5, r4, sl
  403fc8:	b185      	cbz	r5, 403fec <_svfprintf_r+0x90>
  403fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fcc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403fce:	f8c8 a000 	str.w	sl, [r8]
  403fd2:	3301      	adds	r3, #1
  403fd4:	442a      	add	r2, r5
  403fd6:	2b07      	cmp	r3, #7
  403fd8:	f8c8 5004 	str.w	r5, [r8, #4]
  403fdc:	9227      	str	r2, [sp, #156]	; 0x9c
  403fde:	9326      	str	r3, [sp, #152]	; 0x98
  403fe0:	dc7f      	bgt.n	4040e2 <_svfprintf_r+0x186>
  403fe2:	f108 0808 	add.w	r8, r8, #8
  403fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403fe8:	442b      	add	r3, r5
  403fea:	9309      	str	r3, [sp, #36]	; 0x24
  403fec:	7823      	ldrb	r3, [r4, #0]
  403fee:	2b00      	cmp	r3, #0
  403ff0:	d07f      	beq.n	4040f2 <_svfprintf_r+0x196>
  403ff2:	2300      	movs	r3, #0
  403ff4:	461a      	mov	r2, r3
  403ff6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403ffa:	4619      	mov	r1, r3
  403ffc:	930d      	str	r3, [sp, #52]	; 0x34
  403ffe:	469b      	mov	fp, r3
  404000:	f04f 30ff 	mov.w	r0, #4294967295
  404004:	7863      	ldrb	r3, [r4, #1]
  404006:	900a      	str	r0, [sp, #40]	; 0x28
  404008:	f104 0a01 	add.w	sl, r4, #1
  40400c:	f10a 0a01 	add.w	sl, sl, #1
  404010:	f1a3 0020 	sub.w	r0, r3, #32
  404014:	2858      	cmp	r0, #88	; 0x58
  404016:	f200 83c1 	bhi.w	40479c <_svfprintf_r+0x840>
  40401a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40401e:	0238      	.short	0x0238
  404020:	03bf03bf 	.word	0x03bf03bf
  404024:	03bf0240 	.word	0x03bf0240
  404028:	03bf03bf 	.word	0x03bf03bf
  40402c:	03bf03bf 	.word	0x03bf03bf
  404030:	024503bf 	.word	0x024503bf
  404034:	03bf0203 	.word	0x03bf0203
  404038:	026b005d 	.word	0x026b005d
  40403c:	028603bf 	.word	0x028603bf
  404040:	039d039d 	.word	0x039d039d
  404044:	039d039d 	.word	0x039d039d
  404048:	039d039d 	.word	0x039d039d
  40404c:	039d039d 	.word	0x039d039d
  404050:	03bf039d 	.word	0x03bf039d
  404054:	03bf03bf 	.word	0x03bf03bf
  404058:	03bf03bf 	.word	0x03bf03bf
  40405c:	03bf03bf 	.word	0x03bf03bf
  404060:	03bf03bf 	.word	0x03bf03bf
  404064:	033703bf 	.word	0x033703bf
  404068:	03bf0357 	.word	0x03bf0357
  40406c:	03bf0357 	.word	0x03bf0357
  404070:	03bf03bf 	.word	0x03bf03bf
  404074:	039803bf 	.word	0x039803bf
  404078:	03bf03bf 	.word	0x03bf03bf
  40407c:	03bf03ad 	.word	0x03bf03ad
  404080:	03bf03bf 	.word	0x03bf03bf
  404084:	03bf03bf 	.word	0x03bf03bf
  404088:	03bf0259 	.word	0x03bf0259
  40408c:	031e03bf 	.word	0x031e03bf
  404090:	03bf03bf 	.word	0x03bf03bf
  404094:	03bf03bf 	.word	0x03bf03bf
  404098:	03bf03bf 	.word	0x03bf03bf
  40409c:	03bf03bf 	.word	0x03bf03bf
  4040a0:	03bf03bf 	.word	0x03bf03bf
  4040a4:	02db02c6 	.word	0x02db02c6
  4040a8:	03570357 	.word	0x03570357
  4040ac:	028b0357 	.word	0x028b0357
  4040b0:	03bf02db 	.word	0x03bf02db
  4040b4:	029003bf 	.word	0x029003bf
  4040b8:	029d03bf 	.word	0x029d03bf
  4040bc:	02b401cc 	.word	0x02b401cc
  4040c0:	03bf0208 	.word	0x03bf0208
  4040c4:	03bf01e1 	.word	0x03bf01e1
  4040c8:	03bf007e 	.word	0x03bf007e
  4040cc:	020d03bf 	.word	0x020d03bf
  4040d0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4040d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4040d4:	4240      	negs	r0, r0
  4040d6:	900d      	str	r0, [sp, #52]	; 0x34
  4040d8:	f04b 0b04 	orr.w	fp, fp, #4
  4040dc:	f89a 3000 	ldrb.w	r3, [sl]
  4040e0:	e794      	b.n	40400c <_svfprintf_r+0xb0>
  4040e2:	aa25      	add	r2, sp, #148	; 0x94
  4040e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040e8:	f002 ff7a 	bl	406fe0 <__ssprint_r>
  4040ec:	b940      	cbnz	r0, 404100 <_svfprintf_r+0x1a4>
  4040ee:	46c8      	mov	r8, r9
  4040f0:	e779      	b.n	403fe6 <_svfprintf_r+0x8a>
  4040f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040f4:	b123      	cbz	r3, 404100 <_svfprintf_r+0x1a4>
  4040f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040fa:	aa25      	add	r2, sp, #148	; 0x94
  4040fc:	f002 ff70 	bl	406fe0 <__ssprint_r>
  404100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404102:	899b      	ldrh	r3, [r3, #12]
  404104:	f013 0f40 	tst.w	r3, #64	; 0x40
  404108:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40410a:	bf18      	it	ne
  40410c:	f04f 33ff 	movne.w	r3, #4294967295
  404110:	9309      	str	r3, [sp, #36]	; 0x24
  404112:	9809      	ldr	r0, [sp, #36]	; 0x24
  404114:	b043      	add	sp, #268	; 0x10c
  404116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40411a:	f01b 0f20 	tst.w	fp, #32
  40411e:	9311      	str	r3, [sp, #68]	; 0x44
  404120:	f040 81dd 	bne.w	4044de <_svfprintf_r+0x582>
  404124:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404126:	f01b 0f10 	tst.w	fp, #16
  40412a:	4613      	mov	r3, r2
  40412c:	f040 856e 	bne.w	404c0c <_svfprintf_r+0xcb0>
  404130:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404134:	f000 856a 	beq.w	404c0c <_svfprintf_r+0xcb0>
  404138:	8814      	ldrh	r4, [r2, #0]
  40413a:	3204      	adds	r2, #4
  40413c:	2500      	movs	r5, #0
  40413e:	2301      	movs	r3, #1
  404140:	920f      	str	r2, [sp, #60]	; 0x3c
  404142:	2700      	movs	r7, #0
  404144:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404148:	990a      	ldr	r1, [sp, #40]	; 0x28
  40414a:	1c4a      	adds	r2, r1, #1
  40414c:	f000 8265 	beq.w	40461a <_svfprintf_r+0x6be>
  404150:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404154:	9207      	str	r2, [sp, #28]
  404156:	ea54 0205 	orrs.w	r2, r4, r5
  40415a:	f040 8264 	bne.w	404626 <_svfprintf_r+0x6ca>
  40415e:	2900      	cmp	r1, #0
  404160:	f040 843c 	bne.w	4049dc <_svfprintf_r+0xa80>
  404164:	2b00      	cmp	r3, #0
  404166:	f040 84d7 	bne.w	404b18 <_svfprintf_r+0xbbc>
  40416a:	f01b 0301 	ands.w	r3, fp, #1
  40416e:	930e      	str	r3, [sp, #56]	; 0x38
  404170:	f000 8604 	beq.w	404d7c <_svfprintf_r+0xe20>
  404174:	ae42      	add	r6, sp, #264	; 0x108
  404176:	2330      	movs	r3, #48	; 0x30
  404178:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40417c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40417e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404180:	4293      	cmp	r3, r2
  404182:	bfb8      	it	lt
  404184:	4613      	movlt	r3, r2
  404186:	9308      	str	r3, [sp, #32]
  404188:	2300      	movs	r3, #0
  40418a:	9312      	str	r3, [sp, #72]	; 0x48
  40418c:	b117      	cbz	r7, 404194 <_svfprintf_r+0x238>
  40418e:	9b08      	ldr	r3, [sp, #32]
  404190:	3301      	adds	r3, #1
  404192:	9308      	str	r3, [sp, #32]
  404194:	9b07      	ldr	r3, [sp, #28]
  404196:	f013 0302 	ands.w	r3, r3, #2
  40419a:	9310      	str	r3, [sp, #64]	; 0x40
  40419c:	d002      	beq.n	4041a4 <_svfprintf_r+0x248>
  40419e:	9b08      	ldr	r3, [sp, #32]
  4041a0:	3302      	adds	r3, #2
  4041a2:	9308      	str	r3, [sp, #32]
  4041a4:	9b07      	ldr	r3, [sp, #28]
  4041a6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4041aa:	f040 830e 	bne.w	4047ca <_svfprintf_r+0x86e>
  4041ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4041b0:	9a08      	ldr	r2, [sp, #32]
  4041b2:	eba3 0b02 	sub.w	fp, r3, r2
  4041b6:	f1bb 0f00 	cmp.w	fp, #0
  4041ba:	f340 8306 	ble.w	4047ca <_svfprintf_r+0x86e>
  4041be:	f1bb 0f10 	cmp.w	fp, #16
  4041c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4041c6:	dd29      	ble.n	40421c <_svfprintf_r+0x2c0>
  4041c8:	4643      	mov	r3, r8
  4041ca:	4621      	mov	r1, r4
  4041cc:	46a8      	mov	r8, r5
  4041ce:	2710      	movs	r7, #16
  4041d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4041d4:	e006      	b.n	4041e4 <_svfprintf_r+0x288>
  4041d6:	f1ab 0b10 	sub.w	fp, fp, #16
  4041da:	f1bb 0f10 	cmp.w	fp, #16
  4041de:	f103 0308 	add.w	r3, r3, #8
  4041e2:	dd18      	ble.n	404216 <_svfprintf_r+0x2ba>
  4041e4:	3201      	adds	r2, #1
  4041e6:	48b7      	ldr	r0, [pc, #732]	; (4044c4 <_svfprintf_r+0x568>)
  4041e8:	9226      	str	r2, [sp, #152]	; 0x98
  4041ea:	3110      	adds	r1, #16
  4041ec:	2a07      	cmp	r2, #7
  4041ee:	9127      	str	r1, [sp, #156]	; 0x9c
  4041f0:	e883 0081 	stmia.w	r3, {r0, r7}
  4041f4:	ddef      	ble.n	4041d6 <_svfprintf_r+0x27a>
  4041f6:	aa25      	add	r2, sp, #148	; 0x94
  4041f8:	4629      	mov	r1, r5
  4041fa:	4620      	mov	r0, r4
  4041fc:	f002 fef0 	bl	406fe0 <__ssprint_r>
  404200:	2800      	cmp	r0, #0
  404202:	f47f af7d 	bne.w	404100 <_svfprintf_r+0x1a4>
  404206:	f1ab 0b10 	sub.w	fp, fp, #16
  40420a:	f1bb 0f10 	cmp.w	fp, #16
  40420e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404210:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404212:	464b      	mov	r3, r9
  404214:	dce6      	bgt.n	4041e4 <_svfprintf_r+0x288>
  404216:	4645      	mov	r5, r8
  404218:	460c      	mov	r4, r1
  40421a:	4698      	mov	r8, r3
  40421c:	3201      	adds	r2, #1
  40421e:	4ba9      	ldr	r3, [pc, #676]	; (4044c4 <_svfprintf_r+0x568>)
  404220:	9226      	str	r2, [sp, #152]	; 0x98
  404222:	445c      	add	r4, fp
  404224:	2a07      	cmp	r2, #7
  404226:	9427      	str	r4, [sp, #156]	; 0x9c
  404228:	e888 0808 	stmia.w	r8, {r3, fp}
  40422c:	f300 8498 	bgt.w	404b60 <_svfprintf_r+0xc04>
  404230:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404234:	f108 0808 	add.w	r8, r8, #8
  404238:	b177      	cbz	r7, 404258 <_svfprintf_r+0x2fc>
  40423a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40423c:	3301      	adds	r3, #1
  40423e:	3401      	adds	r4, #1
  404240:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404244:	2201      	movs	r2, #1
  404246:	2b07      	cmp	r3, #7
  404248:	9427      	str	r4, [sp, #156]	; 0x9c
  40424a:	9326      	str	r3, [sp, #152]	; 0x98
  40424c:	e888 0006 	stmia.w	r8, {r1, r2}
  404250:	f300 83db 	bgt.w	404a0a <_svfprintf_r+0xaae>
  404254:	f108 0808 	add.w	r8, r8, #8
  404258:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40425a:	b16b      	cbz	r3, 404278 <_svfprintf_r+0x31c>
  40425c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40425e:	3301      	adds	r3, #1
  404260:	3402      	adds	r4, #2
  404262:	a91e      	add	r1, sp, #120	; 0x78
  404264:	2202      	movs	r2, #2
  404266:	2b07      	cmp	r3, #7
  404268:	9427      	str	r4, [sp, #156]	; 0x9c
  40426a:	9326      	str	r3, [sp, #152]	; 0x98
  40426c:	e888 0006 	stmia.w	r8, {r1, r2}
  404270:	f300 83d6 	bgt.w	404a20 <_svfprintf_r+0xac4>
  404274:	f108 0808 	add.w	r8, r8, #8
  404278:	2d80      	cmp	r5, #128	; 0x80
  40427a:	f000 8315 	beq.w	4048a8 <_svfprintf_r+0x94c>
  40427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404282:	1a9f      	subs	r7, r3, r2
  404284:	2f00      	cmp	r7, #0
  404286:	dd36      	ble.n	4042f6 <_svfprintf_r+0x39a>
  404288:	2f10      	cmp	r7, #16
  40428a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40428c:	4d8e      	ldr	r5, [pc, #568]	; (4044c8 <_svfprintf_r+0x56c>)
  40428e:	dd27      	ble.n	4042e0 <_svfprintf_r+0x384>
  404290:	4642      	mov	r2, r8
  404292:	4621      	mov	r1, r4
  404294:	46b0      	mov	r8, r6
  404296:	f04f 0b10 	mov.w	fp, #16
  40429a:	462e      	mov	r6, r5
  40429c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40429e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4042a0:	e004      	b.n	4042ac <_svfprintf_r+0x350>
  4042a2:	3f10      	subs	r7, #16
  4042a4:	2f10      	cmp	r7, #16
  4042a6:	f102 0208 	add.w	r2, r2, #8
  4042aa:	dd15      	ble.n	4042d8 <_svfprintf_r+0x37c>
  4042ac:	3301      	adds	r3, #1
  4042ae:	3110      	adds	r1, #16
  4042b0:	2b07      	cmp	r3, #7
  4042b2:	9127      	str	r1, [sp, #156]	; 0x9c
  4042b4:	9326      	str	r3, [sp, #152]	; 0x98
  4042b6:	e882 0840 	stmia.w	r2, {r6, fp}
  4042ba:	ddf2      	ble.n	4042a2 <_svfprintf_r+0x346>
  4042bc:	aa25      	add	r2, sp, #148	; 0x94
  4042be:	4629      	mov	r1, r5
  4042c0:	4620      	mov	r0, r4
  4042c2:	f002 fe8d 	bl	406fe0 <__ssprint_r>
  4042c6:	2800      	cmp	r0, #0
  4042c8:	f47f af1a 	bne.w	404100 <_svfprintf_r+0x1a4>
  4042cc:	3f10      	subs	r7, #16
  4042ce:	2f10      	cmp	r7, #16
  4042d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4042d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042d4:	464a      	mov	r2, r9
  4042d6:	dce9      	bgt.n	4042ac <_svfprintf_r+0x350>
  4042d8:	4635      	mov	r5, r6
  4042da:	460c      	mov	r4, r1
  4042dc:	4646      	mov	r6, r8
  4042de:	4690      	mov	r8, r2
  4042e0:	3301      	adds	r3, #1
  4042e2:	443c      	add	r4, r7
  4042e4:	2b07      	cmp	r3, #7
  4042e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4042e8:	9326      	str	r3, [sp, #152]	; 0x98
  4042ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4042ee:	f300 8381 	bgt.w	4049f4 <_svfprintf_r+0xa98>
  4042f2:	f108 0808 	add.w	r8, r8, #8
  4042f6:	9b07      	ldr	r3, [sp, #28]
  4042f8:	05df      	lsls	r7, r3, #23
  4042fa:	f100 8268 	bmi.w	4047ce <_svfprintf_r+0x872>
  4042fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404300:	990e      	ldr	r1, [sp, #56]	; 0x38
  404302:	f8c8 6000 	str.w	r6, [r8]
  404306:	3301      	adds	r3, #1
  404308:	440c      	add	r4, r1
  40430a:	2b07      	cmp	r3, #7
  40430c:	9427      	str	r4, [sp, #156]	; 0x9c
  40430e:	f8c8 1004 	str.w	r1, [r8, #4]
  404312:	9326      	str	r3, [sp, #152]	; 0x98
  404314:	f300 834d 	bgt.w	4049b2 <_svfprintf_r+0xa56>
  404318:	f108 0808 	add.w	r8, r8, #8
  40431c:	9b07      	ldr	r3, [sp, #28]
  40431e:	075b      	lsls	r3, r3, #29
  404320:	d53a      	bpl.n	404398 <_svfprintf_r+0x43c>
  404322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404324:	9a08      	ldr	r2, [sp, #32]
  404326:	1a9d      	subs	r5, r3, r2
  404328:	2d00      	cmp	r5, #0
  40432a:	dd35      	ble.n	404398 <_svfprintf_r+0x43c>
  40432c:	2d10      	cmp	r5, #16
  40432e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404330:	dd20      	ble.n	404374 <_svfprintf_r+0x418>
  404332:	2610      	movs	r6, #16
  404334:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404336:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40433a:	e004      	b.n	404346 <_svfprintf_r+0x3ea>
  40433c:	3d10      	subs	r5, #16
  40433e:	2d10      	cmp	r5, #16
  404340:	f108 0808 	add.w	r8, r8, #8
  404344:	dd16      	ble.n	404374 <_svfprintf_r+0x418>
  404346:	3301      	adds	r3, #1
  404348:	4a5e      	ldr	r2, [pc, #376]	; (4044c4 <_svfprintf_r+0x568>)
  40434a:	9326      	str	r3, [sp, #152]	; 0x98
  40434c:	3410      	adds	r4, #16
  40434e:	2b07      	cmp	r3, #7
  404350:	9427      	str	r4, [sp, #156]	; 0x9c
  404352:	e888 0044 	stmia.w	r8, {r2, r6}
  404356:	ddf1      	ble.n	40433c <_svfprintf_r+0x3e0>
  404358:	aa25      	add	r2, sp, #148	; 0x94
  40435a:	4659      	mov	r1, fp
  40435c:	4638      	mov	r0, r7
  40435e:	f002 fe3f 	bl	406fe0 <__ssprint_r>
  404362:	2800      	cmp	r0, #0
  404364:	f47f aecc 	bne.w	404100 <_svfprintf_r+0x1a4>
  404368:	3d10      	subs	r5, #16
  40436a:	2d10      	cmp	r5, #16
  40436c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40436e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404370:	46c8      	mov	r8, r9
  404372:	dce8      	bgt.n	404346 <_svfprintf_r+0x3ea>
  404374:	3301      	adds	r3, #1
  404376:	4a53      	ldr	r2, [pc, #332]	; (4044c4 <_svfprintf_r+0x568>)
  404378:	9326      	str	r3, [sp, #152]	; 0x98
  40437a:	442c      	add	r4, r5
  40437c:	2b07      	cmp	r3, #7
  40437e:	9427      	str	r4, [sp, #156]	; 0x9c
  404380:	e888 0024 	stmia.w	r8, {r2, r5}
  404384:	dd08      	ble.n	404398 <_svfprintf_r+0x43c>
  404386:	aa25      	add	r2, sp, #148	; 0x94
  404388:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40438a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40438c:	f002 fe28 	bl	406fe0 <__ssprint_r>
  404390:	2800      	cmp	r0, #0
  404392:	f47f aeb5 	bne.w	404100 <_svfprintf_r+0x1a4>
  404396:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404398:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40439a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40439c:	9908      	ldr	r1, [sp, #32]
  40439e:	428a      	cmp	r2, r1
  4043a0:	bfac      	ite	ge
  4043a2:	189b      	addge	r3, r3, r2
  4043a4:	185b      	addlt	r3, r3, r1
  4043a6:	9309      	str	r3, [sp, #36]	; 0x24
  4043a8:	2c00      	cmp	r4, #0
  4043aa:	f040 830d 	bne.w	4049c8 <_svfprintf_r+0xa6c>
  4043ae:	2300      	movs	r3, #0
  4043b0:	9326      	str	r3, [sp, #152]	; 0x98
  4043b2:	46c8      	mov	r8, r9
  4043b4:	e5f9      	b.n	403faa <_svfprintf_r+0x4e>
  4043b6:	9311      	str	r3, [sp, #68]	; 0x44
  4043b8:	f01b 0320 	ands.w	r3, fp, #32
  4043bc:	f040 81e3 	bne.w	404786 <_svfprintf_r+0x82a>
  4043c0:	f01b 0210 	ands.w	r2, fp, #16
  4043c4:	f040 842e 	bne.w	404c24 <_svfprintf_r+0xcc8>
  4043c8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4043cc:	f000 842a 	beq.w	404c24 <_svfprintf_r+0xcc8>
  4043d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4043d2:	4613      	mov	r3, r2
  4043d4:	460a      	mov	r2, r1
  4043d6:	3204      	adds	r2, #4
  4043d8:	880c      	ldrh	r4, [r1, #0]
  4043da:	920f      	str	r2, [sp, #60]	; 0x3c
  4043dc:	2500      	movs	r5, #0
  4043de:	e6b0      	b.n	404142 <_svfprintf_r+0x1e6>
  4043e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043e2:	9311      	str	r3, [sp, #68]	; 0x44
  4043e4:	6816      	ldr	r6, [r2, #0]
  4043e6:	2400      	movs	r4, #0
  4043e8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4043ec:	1d15      	adds	r5, r2, #4
  4043ee:	2e00      	cmp	r6, #0
  4043f0:	f000 86a7 	beq.w	405142 <_svfprintf_r+0x11e6>
  4043f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4043f6:	1c53      	adds	r3, r2, #1
  4043f8:	f000 8609 	beq.w	40500e <_svfprintf_r+0x10b2>
  4043fc:	4621      	mov	r1, r4
  4043fe:	4630      	mov	r0, r6
  404400:	f002 fa86 	bl	406910 <memchr>
  404404:	2800      	cmp	r0, #0
  404406:	f000 86e1 	beq.w	4051cc <_svfprintf_r+0x1270>
  40440a:	1b83      	subs	r3, r0, r6
  40440c:	930e      	str	r3, [sp, #56]	; 0x38
  40440e:	940a      	str	r4, [sp, #40]	; 0x28
  404410:	950f      	str	r5, [sp, #60]	; 0x3c
  404412:	f8cd b01c 	str.w	fp, [sp, #28]
  404416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40441a:	9308      	str	r3, [sp, #32]
  40441c:	9412      	str	r4, [sp, #72]	; 0x48
  40441e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404422:	e6b3      	b.n	40418c <_svfprintf_r+0x230>
  404424:	f89a 3000 	ldrb.w	r3, [sl]
  404428:	2201      	movs	r2, #1
  40442a:	212b      	movs	r1, #43	; 0x2b
  40442c:	e5ee      	b.n	40400c <_svfprintf_r+0xb0>
  40442e:	f04b 0b20 	orr.w	fp, fp, #32
  404432:	f89a 3000 	ldrb.w	r3, [sl]
  404436:	e5e9      	b.n	40400c <_svfprintf_r+0xb0>
  404438:	9311      	str	r3, [sp, #68]	; 0x44
  40443a:	2a00      	cmp	r2, #0
  40443c:	f040 8795 	bne.w	40536a <_svfprintf_r+0x140e>
  404440:	4b22      	ldr	r3, [pc, #136]	; (4044cc <_svfprintf_r+0x570>)
  404442:	9318      	str	r3, [sp, #96]	; 0x60
  404444:	f01b 0f20 	tst.w	fp, #32
  404448:	f040 8111 	bne.w	40466e <_svfprintf_r+0x712>
  40444c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40444e:	f01b 0f10 	tst.w	fp, #16
  404452:	4613      	mov	r3, r2
  404454:	f040 83e1 	bne.w	404c1a <_svfprintf_r+0xcbe>
  404458:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40445c:	f000 83dd 	beq.w	404c1a <_svfprintf_r+0xcbe>
  404460:	3304      	adds	r3, #4
  404462:	8814      	ldrh	r4, [r2, #0]
  404464:	930f      	str	r3, [sp, #60]	; 0x3c
  404466:	2500      	movs	r5, #0
  404468:	f01b 0f01 	tst.w	fp, #1
  40446c:	f000 810c 	beq.w	404688 <_svfprintf_r+0x72c>
  404470:	ea54 0305 	orrs.w	r3, r4, r5
  404474:	f000 8108 	beq.w	404688 <_svfprintf_r+0x72c>
  404478:	2330      	movs	r3, #48	; 0x30
  40447a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40447e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404482:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404486:	f04b 0b02 	orr.w	fp, fp, #2
  40448a:	2302      	movs	r3, #2
  40448c:	e659      	b.n	404142 <_svfprintf_r+0x1e6>
  40448e:	f89a 3000 	ldrb.w	r3, [sl]
  404492:	2900      	cmp	r1, #0
  404494:	f47f adba 	bne.w	40400c <_svfprintf_r+0xb0>
  404498:	2201      	movs	r2, #1
  40449a:	2120      	movs	r1, #32
  40449c:	e5b6      	b.n	40400c <_svfprintf_r+0xb0>
  40449e:	f04b 0b01 	orr.w	fp, fp, #1
  4044a2:	f89a 3000 	ldrb.w	r3, [sl]
  4044a6:	e5b1      	b.n	40400c <_svfprintf_r+0xb0>
  4044a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4044aa:	6823      	ldr	r3, [r4, #0]
  4044ac:	930d      	str	r3, [sp, #52]	; 0x34
  4044ae:	4618      	mov	r0, r3
  4044b0:	2800      	cmp	r0, #0
  4044b2:	4623      	mov	r3, r4
  4044b4:	f103 0304 	add.w	r3, r3, #4
  4044b8:	f6ff ae0a 	blt.w	4040d0 <_svfprintf_r+0x174>
  4044bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4044be:	f89a 3000 	ldrb.w	r3, [sl]
  4044c2:	e5a3      	b.n	40400c <_svfprintf_r+0xb0>
  4044c4:	00408fd0 	.word	0x00408fd0
  4044c8:	00408fe0 	.word	0x00408fe0
  4044cc:	00408fb0 	.word	0x00408fb0
  4044d0:	f04b 0b10 	orr.w	fp, fp, #16
  4044d4:	f01b 0f20 	tst.w	fp, #32
  4044d8:	9311      	str	r3, [sp, #68]	; 0x44
  4044da:	f43f ae23 	beq.w	404124 <_svfprintf_r+0x1c8>
  4044de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4044e0:	3507      	adds	r5, #7
  4044e2:	f025 0307 	bic.w	r3, r5, #7
  4044e6:	f103 0208 	add.w	r2, r3, #8
  4044ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4044ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4044f0:	2301      	movs	r3, #1
  4044f2:	e626      	b.n	404142 <_svfprintf_r+0x1e6>
  4044f4:	f89a 3000 	ldrb.w	r3, [sl]
  4044f8:	2b2a      	cmp	r3, #42	; 0x2a
  4044fa:	f10a 0401 	add.w	r4, sl, #1
  4044fe:	f000 8727 	beq.w	405350 <_svfprintf_r+0x13f4>
  404502:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404506:	2809      	cmp	r0, #9
  404508:	46a2      	mov	sl, r4
  40450a:	f200 86ad 	bhi.w	405268 <_svfprintf_r+0x130c>
  40450e:	2300      	movs	r3, #0
  404510:	461c      	mov	r4, r3
  404512:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404516:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40451a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40451e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404522:	2809      	cmp	r0, #9
  404524:	d9f5      	bls.n	404512 <_svfprintf_r+0x5b6>
  404526:	940a      	str	r4, [sp, #40]	; 0x28
  404528:	e572      	b.n	404010 <_svfprintf_r+0xb4>
  40452a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40452e:	f89a 3000 	ldrb.w	r3, [sl]
  404532:	e56b      	b.n	40400c <_svfprintf_r+0xb0>
  404534:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404538:	f89a 3000 	ldrb.w	r3, [sl]
  40453c:	e566      	b.n	40400c <_svfprintf_r+0xb0>
  40453e:	f89a 3000 	ldrb.w	r3, [sl]
  404542:	2b6c      	cmp	r3, #108	; 0x6c
  404544:	bf03      	ittte	eq
  404546:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40454a:	f04b 0b20 	orreq.w	fp, fp, #32
  40454e:	f10a 0a01 	addeq.w	sl, sl, #1
  404552:	f04b 0b10 	orrne.w	fp, fp, #16
  404556:	e559      	b.n	40400c <_svfprintf_r+0xb0>
  404558:	2a00      	cmp	r2, #0
  40455a:	f040 8711 	bne.w	405380 <_svfprintf_r+0x1424>
  40455e:	f01b 0f20 	tst.w	fp, #32
  404562:	f040 84f9 	bne.w	404f58 <_svfprintf_r+0xffc>
  404566:	f01b 0f10 	tst.w	fp, #16
  40456a:	f040 84ac 	bne.w	404ec6 <_svfprintf_r+0xf6a>
  40456e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404572:	f000 84a8 	beq.w	404ec6 <_svfprintf_r+0xf6a>
  404576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404578:	6813      	ldr	r3, [r2, #0]
  40457a:	3204      	adds	r2, #4
  40457c:	920f      	str	r2, [sp, #60]	; 0x3c
  40457e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404582:	801a      	strh	r2, [r3, #0]
  404584:	e511      	b.n	403faa <_svfprintf_r+0x4e>
  404586:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404588:	4bb3      	ldr	r3, [pc, #716]	; (404858 <_svfprintf_r+0x8fc>)
  40458a:	680c      	ldr	r4, [r1, #0]
  40458c:	9318      	str	r3, [sp, #96]	; 0x60
  40458e:	2230      	movs	r2, #48	; 0x30
  404590:	2378      	movs	r3, #120	; 0x78
  404592:	3104      	adds	r1, #4
  404594:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404598:	9311      	str	r3, [sp, #68]	; 0x44
  40459a:	f04b 0b02 	orr.w	fp, fp, #2
  40459e:	910f      	str	r1, [sp, #60]	; 0x3c
  4045a0:	2500      	movs	r5, #0
  4045a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4045a6:	2302      	movs	r3, #2
  4045a8:	e5cb      	b.n	404142 <_svfprintf_r+0x1e6>
  4045aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4045ac:	9311      	str	r3, [sp, #68]	; 0x44
  4045ae:	680a      	ldr	r2, [r1, #0]
  4045b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4045b4:	2300      	movs	r3, #0
  4045b6:	460a      	mov	r2, r1
  4045b8:	461f      	mov	r7, r3
  4045ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4045be:	3204      	adds	r2, #4
  4045c0:	2301      	movs	r3, #1
  4045c2:	9308      	str	r3, [sp, #32]
  4045c4:	f8cd b01c 	str.w	fp, [sp, #28]
  4045c8:	970a      	str	r7, [sp, #40]	; 0x28
  4045ca:	9712      	str	r7, [sp, #72]	; 0x48
  4045cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4045ce:	930e      	str	r3, [sp, #56]	; 0x38
  4045d0:	ae28      	add	r6, sp, #160	; 0xa0
  4045d2:	e5df      	b.n	404194 <_svfprintf_r+0x238>
  4045d4:	9311      	str	r3, [sp, #68]	; 0x44
  4045d6:	2a00      	cmp	r2, #0
  4045d8:	f040 86ea 	bne.w	4053b0 <_svfprintf_r+0x1454>
  4045dc:	f01b 0f20 	tst.w	fp, #32
  4045e0:	d15d      	bne.n	40469e <_svfprintf_r+0x742>
  4045e2:	f01b 0f10 	tst.w	fp, #16
  4045e6:	f040 8308 	bne.w	404bfa <_svfprintf_r+0xc9e>
  4045ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4045ee:	f000 8304 	beq.w	404bfa <_svfprintf_r+0xc9e>
  4045f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4045f4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4045f8:	3104      	adds	r1, #4
  4045fa:	17e5      	asrs	r5, r4, #31
  4045fc:	4622      	mov	r2, r4
  4045fe:	462b      	mov	r3, r5
  404600:	910f      	str	r1, [sp, #60]	; 0x3c
  404602:	2a00      	cmp	r2, #0
  404604:	f173 0300 	sbcs.w	r3, r3, #0
  404608:	db58      	blt.n	4046bc <_svfprintf_r+0x760>
  40460a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40460c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404610:	1c4a      	adds	r2, r1, #1
  404612:	f04f 0301 	mov.w	r3, #1
  404616:	f47f ad9b 	bne.w	404150 <_svfprintf_r+0x1f4>
  40461a:	ea54 0205 	orrs.w	r2, r4, r5
  40461e:	f000 81df 	beq.w	4049e0 <_svfprintf_r+0xa84>
  404622:	f8cd b01c 	str.w	fp, [sp, #28]
  404626:	2b01      	cmp	r3, #1
  404628:	f000 827b 	beq.w	404b22 <_svfprintf_r+0xbc6>
  40462c:	2b02      	cmp	r3, #2
  40462e:	f040 8206 	bne.w	404a3e <_svfprintf_r+0xae2>
  404632:	9818      	ldr	r0, [sp, #96]	; 0x60
  404634:	464e      	mov	r6, r9
  404636:	0923      	lsrs	r3, r4, #4
  404638:	f004 010f 	and.w	r1, r4, #15
  40463c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404640:	092a      	lsrs	r2, r5, #4
  404642:	461c      	mov	r4, r3
  404644:	4615      	mov	r5, r2
  404646:	5c43      	ldrb	r3, [r0, r1]
  404648:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40464c:	ea54 0305 	orrs.w	r3, r4, r5
  404650:	d1f1      	bne.n	404636 <_svfprintf_r+0x6da>
  404652:	eba9 0306 	sub.w	r3, r9, r6
  404656:	930e      	str	r3, [sp, #56]	; 0x38
  404658:	e590      	b.n	40417c <_svfprintf_r+0x220>
  40465a:	9311      	str	r3, [sp, #68]	; 0x44
  40465c:	2a00      	cmp	r2, #0
  40465e:	f040 86a3 	bne.w	4053a8 <_svfprintf_r+0x144c>
  404662:	4b7e      	ldr	r3, [pc, #504]	; (40485c <_svfprintf_r+0x900>)
  404664:	9318      	str	r3, [sp, #96]	; 0x60
  404666:	f01b 0f20 	tst.w	fp, #32
  40466a:	f43f aeef 	beq.w	40444c <_svfprintf_r+0x4f0>
  40466e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404670:	3507      	adds	r5, #7
  404672:	f025 0307 	bic.w	r3, r5, #7
  404676:	f103 0208 	add.w	r2, r3, #8
  40467a:	f01b 0f01 	tst.w	fp, #1
  40467e:	920f      	str	r2, [sp, #60]	; 0x3c
  404680:	e9d3 4500 	ldrd	r4, r5, [r3]
  404684:	f47f aef4 	bne.w	404470 <_svfprintf_r+0x514>
  404688:	2302      	movs	r3, #2
  40468a:	e55a      	b.n	404142 <_svfprintf_r+0x1e6>
  40468c:	9311      	str	r3, [sp, #68]	; 0x44
  40468e:	2a00      	cmp	r2, #0
  404690:	f040 8686 	bne.w	4053a0 <_svfprintf_r+0x1444>
  404694:	f04b 0b10 	orr.w	fp, fp, #16
  404698:	f01b 0f20 	tst.w	fp, #32
  40469c:	d0a1      	beq.n	4045e2 <_svfprintf_r+0x686>
  40469e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4046a0:	3507      	adds	r5, #7
  4046a2:	f025 0507 	bic.w	r5, r5, #7
  4046a6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4046aa:	2a00      	cmp	r2, #0
  4046ac:	f105 0108 	add.w	r1, r5, #8
  4046b0:	461d      	mov	r5, r3
  4046b2:	f173 0300 	sbcs.w	r3, r3, #0
  4046b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4046b8:	4614      	mov	r4, r2
  4046ba:	daa6      	bge.n	40460a <_svfprintf_r+0x6ae>
  4046bc:	272d      	movs	r7, #45	; 0x2d
  4046be:	4264      	negs	r4, r4
  4046c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4046c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4046c8:	2301      	movs	r3, #1
  4046ca:	e53d      	b.n	404148 <_svfprintf_r+0x1ec>
  4046cc:	9311      	str	r3, [sp, #68]	; 0x44
  4046ce:	2a00      	cmp	r2, #0
  4046d0:	f040 8662 	bne.w	405398 <_svfprintf_r+0x143c>
  4046d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4046d6:	3507      	adds	r5, #7
  4046d8:	f025 0307 	bic.w	r3, r5, #7
  4046dc:	f103 0208 	add.w	r2, r3, #8
  4046e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4046e2:	681a      	ldr	r2, [r3, #0]
  4046e4:	9215      	str	r2, [sp, #84]	; 0x54
  4046e6:	685b      	ldr	r3, [r3, #4]
  4046e8:	9314      	str	r3, [sp, #80]	; 0x50
  4046ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4046ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4046ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4046f2:	4628      	mov	r0, r5
  4046f4:	4621      	mov	r1, r4
  4046f6:	f04f 32ff 	mov.w	r2, #4294967295
  4046fa:	4b59      	ldr	r3, [pc, #356]	; (404860 <_svfprintf_r+0x904>)
  4046fc:	f003 fd36 	bl	40816c <__aeabi_dcmpun>
  404700:	2800      	cmp	r0, #0
  404702:	f040 834a 	bne.w	404d9a <_svfprintf_r+0xe3e>
  404706:	4628      	mov	r0, r5
  404708:	4621      	mov	r1, r4
  40470a:	f04f 32ff 	mov.w	r2, #4294967295
  40470e:	4b54      	ldr	r3, [pc, #336]	; (404860 <_svfprintf_r+0x904>)
  404710:	f003 fd0e 	bl	408130 <__aeabi_dcmple>
  404714:	2800      	cmp	r0, #0
  404716:	f040 8340 	bne.w	404d9a <_svfprintf_r+0xe3e>
  40471a:	a815      	add	r0, sp, #84	; 0x54
  40471c:	c80d      	ldmia	r0, {r0, r2, r3}
  40471e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404720:	f003 fcfc 	bl	40811c <__aeabi_dcmplt>
  404724:	2800      	cmp	r0, #0
  404726:	f040 8530 	bne.w	40518a <_svfprintf_r+0x122e>
  40472a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40472e:	4e4d      	ldr	r6, [pc, #308]	; (404864 <_svfprintf_r+0x908>)
  404730:	4b4d      	ldr	r3, [pc, #308]	; (404868 <_svfprintf_r+0x90c>)
  404732:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404736:	9007      	str	r0, [sp, #28]
  404738:	9811      	ldr	r0, [sp, #68]	; 0x44
  40473a:	2203      	movs	r2, #3
  40473c:	2100      	movs	r1, #0
  40473e:	9208      	str	r2, [sp, #32]
  404740:	910a      	str	r1, [sp, #40]	; 0x28
  404742:	2847      	cmp	r0, #71	; 0x47
  404744:	bfd8      	it	le
  404746:	461e      	movle	r6, r3
  404748:	920e      	str	r2, [sp, #56]	; 0x38
  40474a:	9112      	str	r1, [sp, #72]	; 0x48
  40474c:	e51e      	b.n	40418c <_svfprintf_r+0x230>
  40474e:	f04b 0b08 	orr.w	fp, fp, #8
  404752:	f89a 3000 	ldrb.w	r3, [sl]
  404756:	e459      	b.n	40400c <_svfprintf_r+0xb0>
  404758:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40475c:	2300      	movs	r3, #0
  40475e:	461c      	mov	r4, r3
  404760:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404764:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404768:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40476c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404770:	2809      	cmp	r0, #9
  404772:	d9f5      	bls.n	404760 <_svfprintf_r+0x804>
  404774:	940d      	str	r4, [sp, #52]	; 0x34
  404776:	e44b      	b.n	404010 <_svfprintf_r+0xb4>
  404778:	f04b 0b10 	orr.w	fp, fp, #16
  40477c:	9311      	str	r3, [sp, #68]	; 0x44
  40477e:	f01b 0320 	ands.w	r3, fp, #32
  404782:	f43f ae1d 	beq.w	4043c0 <_svfprintf_r+0x464>
  404786:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404788:	3507      	adds	r5, #7
  40478a:	f025 0307 	bic.w	r3, r5, #7
  40478e:	f103 0208 	add.w	r2, r3, #8
  404792:	e9d3 4500 	ldrd	r4, r5, [r3]
  404796:	920f      	str	r2, [sp, #60]	; 0x3c
  404798:	2300      	movs	r3, #0
  40479a:	e4d2      	b.n	404142 <_svfprintf_r+0x1e6>
  40479c:	9311      	str	r3, [sp, #68]	; 0x44
  40479e:	2a00      	cmp	r2, #0
  4047a0:	f040 85e7 	bne.w	405372 <_svfprintf_r+0x1416>
  4047a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047a6:	2a00      	cmp	r2, #0
  4047a8:	f43f aca3 	beq.w	4040f2 <_svfprintf_r+0x196>
  4047ac:	2300      	movs	r3, #0
  4047ae:	2101      	movs	r1, #1
  4047b0:	461f      	mov	r7, r3
  4047b2:	9108      	str	r1, [sp, #32]
  4047b4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4047b8:	f8cd b01c 	str.w	fp, [sp, #28]
  4047bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4047c0:	930a      	str	r3, [sp, #40]	; 0x28
  4047c2:	9312      	str	r3, [sp, #72]	; 0x48
  4047c4:	910e      	str	r1, [sp, #56]	; 0x38
  4047c6:	ae28      	add	r6, sp, #160	; 0xa0
  4047c8:	e4e4      	b.n	404194 <_svfprintf_r+0x238>
  4047ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047cc:	e534      	b.n	404238 <_svfprintf_r+0x2dc>
  4047ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047d0:	2b65      	cmp	r3, #101	; 0x65
  4047d2:	f340 80a7 	ble.w	404924 <_svfprintf_r+0x9c8>
  4047d6:	a815      	add	r0, sp, #84	; 0x54
  4047d8:	c80d      	ldmia	r0, {r0, r2, r3}
  4047da:	9914      	ldr	r1, [sp, #80]	; 0x50
  4047dc:	f003 fc94 	bl	408108 <__aeabi_dcmpeq>
  4047e0:	2800      	cmp	r0, #0
  4047e2:	f000 8150 	beq.w	404a86 <_svfprintf_r+0xb2a>
  4047e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047e8:	4a20      	ldr	r2, [pc, #128]	; (40486c <_svfprintf_r+0x910>)
  4047ea:	f8c8 2000 	str.w	r2, [r8]
  4047ee:	3301      	adds	r3, #1
  4047f0:	3401      	adds	r4, #1
  4047f2:	2201      	movs	r2, #1
  4047f4:	2b07      	cmp	r3, #7
  4047f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4047f8:	9326      	str	r3, [sp, #152]	; 0x98
  4047fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4047fe:	f300 836a 	bgt.w	404ed6 <_svfprintf_r+0xf7a>
  404802:	f108 0808 	add.w	r8, r8, #8
  404806:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40480a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40480c:	4293      	cmp	r3, r2
  40480e:	db03      	blt.n	404818 <_svfprintf_r+0x8bc>
  404810:	9b07      	ldr	r3, [sp, #28]
  404812:	07dd      	lsls	r5, r3, #31
  404814:	f57f ad82 	bpl.w	40431c <_svfprintf_r+0x3c0>
  404818:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40481a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40481c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40481e:	f8c8 2000 	str.w	r2, [r8]
  404822:	3301      	adds	r3, #1
  404824:	440c      	add	r4, r1
  404826:	2b07      	cmp	r3, #7
  404828:	f8c8 1004 	str.w	r1, [r8, #4]
  40482c:	9427      	str	r4, [sp, #156]	; 0x9c
  40482e:	9326      	str	r3, [sp, #152]	; 0x98
  404830:	f300 839e 	bgt.w	404f70 <_svfprintf_r+0x1014>
  404834:	f108 0808 	add.w	r8, r8, #8
  404838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40483a:	1e5e      	subs	r6, r3, #1
  40483c:	2e00      	cmp	r6, #0
  40483e:	f77f ad6d 	ble.w	40431c <_svfprintf_r+0x3c0>
  404842:	2e10      	cmp	r6, #16
  404844:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404846:	4d0a      	ldr	r5, [pc, #40]	; (404870 <_svfprintf_r+0x914>)
  404848:	f340 81f5 	ble.w	404c36 <_svfprintf_r+0xcda>
  40484c:	4622      	mov	r2, r4
  40484e:	2710      	movs	r7, #16
  404850:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404854:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404856:	e013      	b.n	404880 <_svfprintf_r+0x924>
  404858:	00408fb0 	.word	0x00408fb0
  40485c:	00408f9c 	.word	0x00408f9c
  404860:	7fefffff 	.word	0x7fefffff
  404864:	00408f90 	.word	0x00408f90
  404868:	00408f8c 	.word	0x00408f8c
  40486c:	00408fcc 	.word	0x00408fcc
  404870:	00408fe0 	.word	0x00408fe0
  404874:	f108 0808 	add.w	r8, r8, #8
  404878:	3e10      	subs	r6, #16
  40487a:	2e10      	cmp	r6, #16
  40487c:	f340 81da 	ble.w	404c34 <_svfprintf_r+0xcd8>
  404880:	3301      	adds	r3, #1
  404882:	3210      	adds	r2, #16
  404884:	2b07      	cmp	r3, #7
  404886:	9227      	str	r2, [sp, #156]	; 0x9c
  404888:	9326      	str	r3, [sp, #152]	; 0x98
  40488a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40488e:	ddf1      	ble.n	404874 <_svfprintf_r+0x918>
  404890:	aa25      	add	r2, sp, #148	; 0x94
  404892:	4621      	mov	r1, r4
  404894:	4658      	mov	r0, fp
  404896:	f002 fba3 	bl	406fe0 <__ssprint_r>
  40489a:	2800      	cmp	r0, #0
  40489c:	f47f ac30 	bne.w	404100 <_svfprintf_r+0x1a4>
  4048a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048a4:	46c8      	mov	r8, r9
  4048a6:	e7e7      	b.n	404878 <_svfprintf_r+0x91c>
  4048a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4048aa:	9a08      	ldr	r2, [sp, #32]
  4048ac:	1a9f      	subs	r7, r3, r2
  4048ae:	2f00      	cmp	r7, #0
  4048b0:	f77f ace5 	ble.w	40427e <_svfprintf_r+0x322>
  4048b4:	2f10      	cmp	r7, #16
  4048b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048b8:	4db6      	ldr	r5, [pc, #728]	; (404b94 <_svfprintf_r+0xc38>)
  4048ba:	dd27      	ble.n	40490c <_svfprintf_r+0x9b0>
  4048bc:	4642      	mov	r2, r8
  4048be:	4621      	mov	r1, r4
  4048c0:	46b0      	mov	r8, r6
  4048c2:	f04f 0b10 	mov.w	fp, #16
  4048c6:	462e      	mov	r6, r5
  4048c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4048ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4048cc:	e004      	b.n	4048d8 <_svfprintf_r+0x97c>
  4048ce:	3f10      	subs	r7, #16
  4048d0:	2f10      	cmp	r7, #16
  4048d2:	f102 0208 	add.w	r2, r2, #8
  4048d6:	dd15      	ble.n	404904 <_svfprintf_r+0x9a8>
  4048d8:	3301      	adds	r3, #1
  4048da:	3110      	adds	r1, #16
  4048dc:	2b07      	cmp	r3, #7
  4048de:	9127      	str	r1, [sp, #156]	; 0x9c
  4048e0:	9326      	str	r3, [sp, #152]	; 0x98
  4048e2:	e882 0840 	stmia.w	r2, {r6, fp}
  4048e6:	ddf2      	ble.n	4048ce <_svfprintf_r+0x972>
  4048e8:	aa25      	add	r2, sp, #148	; 0x94
  4048ea:	4629      	mov	r1, r5
  4048ec:	4620      	mov	r0, r4
  4048ee:	f002 fb77 	bl	406fe0 <__ssprint_r>
  4048f2:	2800      	cmp	r0, #0
  4048f4:	f47f ac04 	bne.w	404100 <_svfprintf_r+0x1a4>
  4048f8:	3f10      	subs	r7, #16
  4048fa:	2f10      	cmp	r7, #16
  4048fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4048fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404900:	464a      	mov	r2, r9
  404902:	dce9      	bgt.n	4048d8 <_svfprintf_r+0x97c>
  404904:	4635      	mov	r5, r6
  404906:	460c      	mov	r4, r1
  404908:	4646      	mov	r6, r8
  40490a:	4690      	mov	r8, r2
  40490c:	3301      	adds	r3, #1
  40490e:	443c      	add	r4, r7
  404910:	2b07      	cmp	r3, #7
  404912:	9427      	str	r4, [sp, #156]	; 0x9c
  404914:	9326      	str	r3, [sp, #152]	; 0x98
  404916:	e888 00a0 	stmia.w	r8, {r5, r7}
  40491a:	f300 8232 	bgt.w	404d82 <_svfprintf_r+0xe26>
  40491e:	f108 0808 	add.w	r8, r8, #8
  404922:	e4ac      	b.n	40427e <_svfprintf_r+0x322>
  404924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404926:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404928:	2b01      	cmp	r3, #1
  40492a:	f340 81fe 	ble.w	404d2a <_svfprintf_r+0xdce>
  40492e:	3701      	adds	r7, #1
  404930:	3401      	adds	r4, #1
  404932:	2301      	movs	r3, #1
  404934:	2f07      	cmp	r7, #7
  404936:	9427      	str	r4, [sp, #156]	; 0x9c
  404938:	9726      	str	r7, [sp, #152]	; 0x98
  40493a:	f8c8 6000 	str.w	r6, [r8]
  40493e:	f8c8 3004 	str.w	r3, [r8, #4]
  404942:	f300 8203 	bgt.w	404d4c <_svfprintf_r+0xdf0>
  404946:	f108 0808 	add.w	r8, r8, #8
  40494a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40494c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40494e:	f8c8 3000 	str.w	r3, [r8]
  404952:	3701      	adds	r7, #1
  404954:	4414      	add	r4, r2
  404956:	2f07      	cmp	r7, #7
  404958:	9427      	str	r4, [sp, #156]	; 0x9c
  40495a:	9726      	str	r7, [sp, #152]	; 0x98
  40495c:	f8c8 2004 	str.w	r2, [r8, #4]
  404960:	f300 8200 	bgt.w	404d64 <_svfprintf_r+0xe08>
  404964:	f108 0808 	add.w	r8, r8, #8
  404968:	a815      	add	r0, sp, #84	; 0x54
  40496a:	c80d      	ldmia	r0, {r0, r2, r3}
  40496c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40496e:	f003 fbcb 	bl	408108 <__aeabi_dcmpeq>
  404972:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404974:	2800      	cmp	r0, #0
  404976:	f040 8101 	bne.w	404b7c <_svfprintf_r+0xc20>
  40497a:	3b01      	subs	r3, #1
  40497c:	3701      	adds	r7, #1
  40497e:	3601      	adds	r6, #1
  404980:	441c      	add	r4, r3
  404982:	2f07      	cmp	r7, #7
  404984:	9726      	str	r7, [sp, #152]	; 0x98
  404986:	9427      	str	r4, [sp, #156]	; 0x9c
  404988:	f8c8 6000 	str.w	r6, [r8]
  40498c:	f8c8 3004 	str.w	r3, [r8, #4]
  404990:	f300 8127 	bgt.w	404be2 <_svfprintf_r+0xc86>
  404994:	f108 0808 	add.w	r8, r8, #8
  404998:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40499a:	f8c8 2004 	str.w	r2, [r8, #4]
  40499e:	3701      	adds	r7, #1
  4049a0:	4414      	add	r4, r2
  4049a2:	ab21      	add	r3, sp, #132	; 0x84
  4049a4:	2f07      	cmp	r7, #7
  4049a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4049a8:	9726      	str	r7, [sp, #152]	; 0x98
  4049aa:	f8c8 3000 	str.w	r3, [r8]
  4049ae:	f77f acb3 	ble.w	404318 <_svfprintf_r+0x3bc>
  4049b2:	aa25      	add	r2, sp, #148	; 0x94
  4049b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049b8:	f002 fb12 	bl	406fe0 <__ssprint_r>
  4049bc:	2800      	cmp	r0, #0
  4049be:	f47f ab9f 	bne.w	404100 <_svfprintf_r+0x1a4>
  4049c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049c4:	46c8      	mov	r8, r9
  4049c6:	e4a9      	b.n	40431c <_svfprintf_r+0x3c0>
  4049c8:	aa25      	add	r2, sp, #148	; 0x94
  4049ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049ce:	f002 fb07 	bl	406fe0 <__ssprint_r>
  4049d2:	2800      	cmp	r0, #0
  4049d4:	f43f aceb 	beq.w	4043ae <_svfprintf_r+0x452>
  4049d8:	f7ff bb92 	b.w	404100 <_svfprintf_r+0x1a4>
  4049dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4049e0:	2b01      	cmp	r3, #1
  4049e2:	f000 8134 	beq.w	404c4e <_svfprintf_r+0xcf2>
  4049e6:	2b02      	cmp	r3, #2
  4049e8:	d125      	bne.n	404a36 <_svfprintf_r+0xada>
  4049ea:	f8cd b01c 	str.w	fp, [sp, #28]
  4049ee:	2400      	movs	r4, #0
  4049f0:	2500      	movs	r5, #0
  4049f2:	e61e      	b.n	404632 <_svfprintf_r+0x6d6>
  4049f4:	aa25      	add	r2, sp, #148	; 0x94
  4049f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049fa:	f002 faf1 	bl	406fe0 <__ssprint_r>
  4049fe:	2800      	cmp	r0, #0
  404a00:	f47f ab7e 	bne.w	404100 <_svfprintf_r+0x1a4>
  404a04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a06:	46c8      	mov	r8, r9
  404a08:	e475      	b.n	4042f6 <_svfprintf_r+0x39a>
  404a0a:	aa25      	add	r2, sp, #148	; 0x94
  404a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a10:	f002 fae6 	bl	406fe0 <__ssprint_r>
  404a14:	2800      	cmp	r0, #0
  404a16:	f47f ab73 	bne.w	404100 <_svfprintf_r+0x1a4>
  404a1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a1c:	46c8      	mov	r8, r9
  404a1e:	e41b      	b.n	404258 <_svfprintf_r+0x2fc>
  404a20:	aa25      	add	r2, sp, #148	; 0x94
  404a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a24:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a26:	f002 fadb 	bl	406fe0 <__ssprint_r>
  404a2a:	2800      	cmp	r0, #0
  404a2c:	f47f ab68 	bne.w	404100 <_svfprintf_r+0x1a4>
  404a30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a32:	46c8      	mov	r8, r9
  404a34:	e420      	b.n	404278 <_svfprintf_r+0x31c>
  404a36:	f8cd b01c 	str.w	fp, [sp, #28]
  404a3a:	2400      	movs	r4, #0
  404a3c:	2500      	movs	r5, #0
  404a3e:	4649      	mov	r1, r9
  404a40:	e000      	b.n	404a44 <_svfprintf_r+0xae8>
  404a42:	4631      	mov	r1, r6
  404a44:	08e2      	lsrs	r2, r4, #3
  404a46:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404a4a:	08e8      	lsrs	r0, r5, #3
  404a4c:	f004 0307 	and.w	r3, r4, #7
  404a50:	4605      	mov	r5, r0
  404a52:	4614      	mov	r4, r2
  404a54:	3330      	adds	r3, #48	; 0x30
  404a56:	ea54 0205 	orrs.w	r2, r4, r5
  404a5a:	f801 3c01 	strb.w	r3, [r1, #-1]
  404a5e:	f101 36ff 	add.w	r6, r1, #4294967295
  404a62:	d1ee      	bne.n	404a42 <_svfprintf_r+0xae6>
  404a64:	9a07      	ldr	r2, [sp, #28]
  404a66:	07d2      	lsls	r2, r2, #31
  404a68:	f57f adf3 	bpl.w	404652 <_svfprintf_r+0x6f6>
  404a6c:	2b30      	cmp	r3, #48	; 0x30
  404a6e:	f43f adf0 	beq.w	404652 <_svfprintf_r+0x6f6>
  404a72:	3902      	subs	r1, #2
  404a74:	2330      	movs	r3, #48	; 0x30
  404a76:	f806 3c01 	strb.w	r3, [r6, #-1]
  404a7a:	eba9 0301 	sub.w	r3, r9, r1
  404a7e:	930e      	str	r3, [sp, #56]	; 0x38
  404a80:	460e      	mov	r6, r1
  404a82:	f7ff bb7b 	b.w	40417c <_svfprintf_r+0x220>
  404a86:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404a88:	2900      	cmp	r1, #0
  404a8a:	f340 822e 	ble.w	404eea <_svfprintf_r+0xf8e>
  404a8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404a92:	4293      	cmp	r3, r2
  404a94:	bfa8      	it	ge
  404a96:	4613      	movge	r3, r2
  404a98:	2b00      	cmp	r3, #0
  404a9a:	461f      	mov	r7, r3
  404a9c:	dd0d      	ble.n	404aba <_svfprintf_r+0xb5e>
  404a9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404aa0:	f8c8 6000 	str.w	r6, [r8]
  404aa4:	3301      	adds	r3, #1
  404aa6:	443c      	add	r4, r7
  404aa8:	2b07      	cmp	r3, #7
  404aaa:	9427      	str	r4, [sp, #156]	; 0x9c
  404aac:	f8c8 7004 	str.w	r7, [r8, #4]
  404ab0:	9326      	str	r3, [sp, #152]	; 0x98
  404ab2:	f300 831f 	bgt.w	4050f4 <_svfprintf_r+0x1198>
  404ab6:	f108 0808 	add.w	r8, r8, #8
  404aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404abc:	2f00      	cmp	r7, #0
  404abe:	bfa8      	it	ge
  404ac0:	1bdb      	subge	r3, r3, r7
  404ac2:	2b00      	cmp	r3, #0
  404ac4:	461f      	mov	r7, r3
  404ac6:	f340 80d6 	ble.w	404c76 <_svfprintf_r+0xd1a>
  404aca:	2f10      	cmp	r7, #16
  404acc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ace:	4d31      	ldr	r5, [pc, #196]	; (404b94 <_svfprintf_r+0xc38>)
  404ad0:	f340 81ed 	ble.w	404eae <_svfprintf_r+0xf52>
  404ad4:	4642      	mov	r2, r8
  404ad6:	4621      	mov	r1, r4
  404ad8:	46b0      	mov	r8, r6
  404ada:	f04f 0b10 	mov.w	fp, #16
  404ade:	462e      	mov	r6, r5
  404ae0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404ae2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404ae4:	e004      	b.n	404af0 <_svfprintf_r+0xb94>
  404ae6:	3208      	adds	r2, #8
  404ae8:	3f10      	subs	r7, #16
  404aea:	2f10      	cmp	r7, #16
  404aec:	f340 81db 	ble.w	404ea6 <_svfprintf_r+0xf4a>
  404af0:	3301      	adds	r3, #1
  404af2:	3110      	adds	r1, #16
  404af4:	2b07      	cmp	r3, #7
  404af6:	9127      	str	r1, [sp, #156]	; 0x9c
  404af8:	9326      	str	r3, [sp, #152]	; 0x98
  404afa:	e882 0840 	stmia.w	r2, {r6, fp}
  404afe:	ddf2      	ble.n	404ae6 <_svfprintf_r+0xb8a>
  404b00:	aa25      	add	r2, sp, #148	; 0x94
  404b02:	4629      	mov	r1, r5
  404b04:	4620      	mov	r0, r4
  404b06:	f002 fa6b 	bl	406fe0 <__ssprint_r>
  404b0a:	2800      	cmp	r0, #0
  404b0c:	f47f aaf8 	bne.w	404100 <_svfprintf_r+0x1a4>
  404b10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b14:	464a      	mov	r2, r9
  404b16:	e7e7      	b.n	404ae8 <_svfprintf_r+0xb8c>
  404b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b1a:	930e      	str	r3, [sp, #56]	; 0x38
  404b1c:	464e      	mov	r6, r9
  404b1e:	f7ff bb2d 	b.w	40417c <_svfprintf_r+0x220>
  404b22:	2d00      	cmp	r5, #0
  404b24:	bf08      	it	eq
  404b26:	2c0a      	cmpeq	r4, #10
  404b28:	f0c0 808f 	bcc.w	404c4a <_svfprintf_r+0xcee>
  404b2c:	464e      	mov	r6, r9
  404b2e:	4620      	mov	r0, r4
  404b30:	4629      	mov	r1, r5
  404b32:	220a      	movs	r2, #10
  404b34:	2300      	movs	r3, #0
  404b36:	f003 fb57 	bl	4081e8 <__aeabi_uldivmod>
  404b3a:	3230      	adds	r2, #48	; 0x30
  404b3c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404b40:	4620      	mov	r0, r4
  404b42:	4629      	mov	r1, r5
  404b44:	2300      	movs	r3, #0
  404b46:	220a      	movs	r2, #10
  404b48:	f003 fb4e 	bl	4081e8 <__aeabi_uldivmod>
  404b4c:	4604      	mov	r4, r0
  404b4e:	460d      	mov	r5, r1
  404b50:	ea54 0305 	orrs.w	r3, r4, r5
  404b54:	d1eb      	bne.n	404b2e <_svfprintf_r+0xbd2>
  404b56:	eba9 0306 	sub.w	r3, r9, r6
  404b5a:	930e      	str	r3, [sp, #56]	; 0x38
  404b5c:	f7ff bb0e 	b.w	40417c <_svfprintf_r+0x220>
  404b60:	aa25      	add	r2, sp, #148	; 0x94
  404b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b64:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b66:	f002 fa3b 	bl	406fe0 <__ssprint_r>
  404b6a:	2800      	cmp	r0, #0
  404b6c:	f47f aac8 	bne.w	404100 <_svfprintf_r+0x1a4>
  404b70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404b74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b76:	46c8      	mov	r8, r9
  404b78:	f7ff bb5e 	b.w	404238 <_svfprintf_r+0x2dc>
  404b7c:	1e5e      	subs	r6, r3, #1
  404b7e:	2e00      	cmp	r6, #0
  404b80:	f77f af0a 	ble.w	404998 <_svfprintf_r+0xa3c>
  404b84:	2e10      	cmp	r6, #16
  404b86:	4d03      	ldr	r5, [pc, #12]	; (404b94 <_svfprintf_r+0xc38>)
  404b88:	dd22      	ble.n	404bd0 <_svfprintf_r+0xc74>
  404b8a:	4622      	mov	r2, r4
  404b8c:	f04f 0b10 	mov.w	fp, #16
  404b90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b92:	e006      	b.n	404ba2 <_svfprintf_r+0xc46>
  404b94:	00408fe0 	.word	0x00408fe0
  404b98:	3e10      	subs	r6, #16
  404b9a:	2e10      	cmp	r6, #16
  404b9c:	f108 0808 	add.w	r8, r8, #8
  404ba0:	dd15      	ble.n	404bce <_svfprintf_r+0xc72>
  404ba2:	3701      	adds	r7, #1
  404ba4:	3210      	adds	r2, #16
  404ba6:	2f07      	cmp	r7, #7
  404ba8:	9227      	str	r2, [sp, #156]	; 0x9c
  404baa:	9726      	str	r7, [sp, #152]	; 0x98
  404bac:	e888 0820 	stmia.w	r8, {r5, fp}
  404bb0:	ddf2      	ble.n	404b98 <_svfprintf_r+0xc3c>
  404bb2:	aa25      	add	r2, sp, #148	; 0x94
  404bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bb6:	4620      	mov	r0, r4
  404bb8:	f002 fa12 	bl	406fe0 <__ssprint_r>
  404bbc:	2800      	cmp	r0, #0
  404bbe:	f47f aa9f 	bne.w	404100 <_svfprintf_r+0x1a4>
  404bc2:	3e10      	subs	r6, #16
  404bc4:	2e10      	cmp	r6, #16
  404bc6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404bc8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404bca:	46c8      	mov	r8, r9
  404bcc:	dce9      	bgt.n	404ba2 <_svfprintf_r+0xc46>
  404bce:	4614      	mov	r4, r2
  404bd0:	3701      	adds	r7, #1
  404bd2:	4434      	add	r4, r6
  404bd4:	2f07      	cmp	r7, #7
  404bd6:	9427      	str	r4, [sp, #156]	; 0x9c
  404bd8:	9726      	str	r7, [sp, #152]	; 0x98
  404bda:	e888 0060 	stmia.w	r8, {r5, r6}
  404bde:	f77f aed9 	ble.w	404994 <_svfprintf_r+0xa38>
  404be2:	aa25      	add	r2, sp, #148	; 0x94
  404be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404be6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404be8:	f002 f9fa 	bl	406fe0 <__ssprint_r>
  404bec:	2800      	cmp	r0, #0
  404bee:	f47f aa87 	bne.w	404100 <_svfprintf_r+0x1a4>
  404bf2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bf4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404bf6:	46c8      	mov	r8, r9
  404bf8:	e6ce      	b.n	404998 <_svfprintf_r+0xa3c>
  404bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bfc:	6814      	ldr	r4, [r2, #0]
  404bfe:	4613      	mov	r3, r2
  404c00:	3304      	adds	r3, #4
  404c02:	17e5      	asrs	r5, r4, #31
  404c04:	930f      	str	r3, [sp, #60]	; 0x3c
  404c06:	4622      	mov	r2, r4
  404c08:	462b      	mov	r3, r5
  404c0a:	e4fa      	b.n	404602 <_svfprintf_r+0x6a6>
  404c0c:	3204      	adds	r2, #4
  404c0e:	681c      	ldr	r4, [r3, #0]
  404c10:	920f      	str	r2, [sp, #60]	; 0x3c
  404c12:	2301      	movs	r3, #1
  404c14:	2500      	movs	r5, #0
  404c16:	f7ff ba94 	b.w	404142 <_svfprintf_r+0x1e6>
  404c1a:	681c      	ldr	r4, [r3, #0]
  404c1c:	3304      	adds	r3, #4
  404c1e:	930f      	str	r3, [sp, #60]	; 0x3c
  404c20:	2500      	movs	r5, #0
  404c22:	e421      	b.n	404468 <_svfprintf_r+0x50c>
  404c24:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404c26:	460a      	mov	r2, r1
  404c28:	3204      	adds	r2, #4
  404c2a:	680c      	ldr	r4, [r1, #0]
  404c2c:	920f      	str	r2, [sp, #60]	; 0x3c
  404c2e:	2500      	movs	r5, #0
  404c30:	f7ff ba87 	b.w	404142 <_svfprintf_r+0x1e6>
  404c34:	4614      	mov	r4, r2
  404c36:	3301      	adds	r3, #1
  404c38:	4434      	add	r4, r6
  404c3a:	2b07      	cmp	r3, #7
  404c3c:	9427      	str	r4, [sp, #156]	; 0x9c
  404c3e:	9326      	str	r3, [sp, #152]	; 0x98
  404c40:	e888 0060 	stmia.w	r8, {r5, r6}
  404c44:	f77f ab68 	ble.w	404318 <_svfprintf_r+0x3bc>
  404c48:	e6b3      	b.n	4049b2 <_svfprintf_r+0xa56>
  404c4a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404c4e:	f8cd b01c 	str.w	fp, [sp, #28]
  404c52:	ae42      	add	r6, sp, #264	; 0x108
  404c54:	3430      	adds	r4, #48	; 0x30
  404c56:	2301      	movs	r3, #1
  404c58:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404c5c:	930e      	str	r3, [sp, #56]	; 0x38
  404c5e:	f7ff ba8d 	b.w	40417c <_svfprintf_r+0x220>
  404c62:	aa25      	add	r2, sp, #148	; 0x94
  404c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c66:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c68:	f002 f9ba 	bl	406fe0 <__ssprint_r>
  404c6c:	2800      	cmp	r0, #0
  404c6e:	f47f aa47 	bne.w	404100 <_svfprintf_r+0x1a4>
  404c72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c74:	46c8      	mov	r8, r9
  404c76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c7a:	429a      	cmp	r2, r3
  404c7c:	db44      	blt.n	404d08 <_svfprintf_r+0xdac>
  404c7e:	9b07      	ldr	r3, [sp, #28]
  404c80:	07d9      	lsls	r1, r3, #31
  404c82:	d441      	bmi.n	404d08 <_svfprintf_r+0xdac>
  404c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c86:	9812      	ldr	r0, [sp, #72]	; 0x48
  404c88:	1a9a      	subs	r2, r3, r2
  404c8a:	1a1d      	subs	r5, r3, r0
  404c8c:	4295      	cmp	r5, r2
  404c8e:	bfa8      	it	ge
  404c90:	4615      	movge	r5, r2
  404c92:	2d00      	cmp	r5, #0
  404c94:	dd0e      	ble.n	404cb4 <_svfprintf_r+0xd58>
  404c96:	9926      	ldr	r1, [sp, #152]	; 0x98
  404c98:	f8c8 5004 	str.w	r5, [r8, #4]
  404c9c:	3101      	adds	r1, #1
  404c9e:	4406      	add	r6, r0
  404ca0:	442c      	add	r4, r5
  404ca2:	2907      	cmp	r1, #7
  404ca4:	f8c8 6000 	str.w	r6, [r8]
  404ca8:	9427      	str	r4, [sp, #156]	; 0x9c
  404caa:	9126      	str	r1, [sp, #152]	; 0x98
  404cac:	f300 823b 	bgt.w	405126 <_svfprintf_r+0x11ca>
  404cb0:	f108 0808 	add.w	r8, r8, #8
  404cb4:	2d00      	cmp	r5, #0
  404cb6:	bfac      	ite	ge
  404cb8:	1b56      	subge	r6, r2, r5
  404cba:	4616      	movlt	r6, r2
  404cbc:	2e00      	cmp	r6, #0
  404cbe:	f77f ab2d 	ble.w	40431c <_svfprintf_r+0x3c0>
  404cc2:	2e10      	cmp	r6, #16
  404cc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cc6:	4db0      	ldr	r5, [pc, #704]	; (404f88 <_svfprintf_r+0x102c>)
  404cc8:	ddb5      	ble.n	404c36 <_svfprintf_r+0xcda>
  404cca:	4622      	mov	r2, r4
  404ccc:	2710      	movs	r7, #16
  404cce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404cd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404cd4:	e004      	b.n	404ce0 <_svfprintf_r+0xd84>
  404cd6:	f108 0808 	add.w	r8, r8, #8
  404cda:	3e10      	subs	r6, #16
  404cdc:	2e10      	cmp	r6, #16
  404cde:	dda9      	ble.n	404c34 <_svfprintf_r+0xcd8>
  404ce0:	3301      	adds	r3, #1
  404ce2:	3210      	adds	r2, #16
  404ce4:	2b07      	cmp	r3, #7
  404ce6:	9227      	str	r2, [sp, #156]	; 0x9c
  404ce8:	9326      	str	r3, [sp, #152]	; 0x98
  404cea:	e888 00a0 	stmia.w	r8, {r5, r7}
  404cee:	ddf2      	ble.n	404cd6 <_svfprintf_r+0xd7a>
  404cf0:	aa25      	add	r2, sp, #148	; 0x94
  404cf2:	4621      	mov	r1, r4
  404cf4:	4658      	mov	r0, fp
  404cf6:	f002 f973 	bl	406fe0 <__ssprint_r>
  404cfa:	2800      	cmp	r0, #0
  404cfc:	f47f aa00 	bne.w	404100 <_svfprintf_r+0x1a4>
  404d00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d04:	46c8      	mov	r8, r9
  404d06:	e7e8      	b.n	404cda <_svfprintf_r+0xd7e>
  404d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d0a:	9819      	ldr	r0, [sp, #100]	; 0x64
  404d0c:	991a      	ldr	r1, [sp, #104]	; 0x68
  404d0e:	f8c8 1000 	str.w	r1, [r8]
  404d12:	3301      	adds	r3, #1
  404d14:	4404      	add	r4, r0
  404d16:	2b07      	cmp	r3, #7
  404d18:	9427      	str	r4, [sp, #156]	; 0x9c
  404d1a:	f8c8 0004 	str.w	r0, [r8, #4]
  404d1e:	9326      	str	r3, [sp, #152]	; 0x98
  404d20:	f300 81f5 	bgt.w	40510e <_svfprintf_r+0x11b2>
  404d24:	f108 0808 	add.w	r8, r8, #8
  404d28:	e7ac      	b.n	404c84 <_svfprintf_r+0xd28>
  404d2a:	9b07      	ldr	r3, [sp, #28]
  404d2c:	07da      	lsls	r2, r3, #31
  404d2e:	f53f adfe 	bmi.w	40492e <_svfprintf_r+0x9d2>
  404d32:	3701      	adds	r7, #1
  404d34:	3401      	adds	r4, #1
  404d36:	2301      	movs	r3, #1
  404d38:	2f07      	cmp	r7, #7
  404d3a:	9427      	str	r4, [sp, #156]	; 0x9c
  404d3c:	9726      	str	r7, [sp, #152]	; 0x98
  404d3e:	f8c8 6000 	str.w	r6, [r8]
  404d42:	f8c8 3004 	str.w	r3, [r8, #4]
  404d46:	f77f ae25 	ble.w	404994 <_svfprintf_r+0xa38>
  404d4a:	e74a      	b.n	404be2 <_svfprintf_r+0xc86>
  404d4c:	aa25      	add	r2, sp, #148	; 0x94
  404d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d50:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d52:	f002 f945 	bl	406fe0 <__ssprint_r>
  404d56:	2800      	cmp	r0, #0
  404d58:	f47f a9d2 	bne.w	404100 <_svfprintf_r+0x1a4>
  404d5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d5e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404d60:	46c8      	mov	r8, r9
  404d62:	e5f2      	b.n	40494a <_svfprintf_r+0x9ee>
  404d64:	aa25      	add	r2, sp, #148	; 0x94
  404d66:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d68:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d6a:	f002 f939 	bl	406fe0 <__ssprint_r>
  404d6e:	2800      	cmp	r0, #0
  404d70:	f47f a9c6 	bne.w	404100 <_svfprintf_r+0x1a4>
  404d74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d76:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404d78:	46c8      	mov	r8, r9
  404d7a:	e5f5      	b.n	404968 <_svfprintf_r+0xa0c>
  404d7c:	464e      	mov	r6, r9
  404d7e:	f7ff b9fd 	b.w	40417c <_svfprintf_r+0x220>
  404d82:	aa25      	add	r2, sp, #148	; 0x94
  404d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d86:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d88:	f002 f92a 	bl	406fe0 <__ssprint_r>
  404d8c:	2800      	cmp	r0, #0
  404d8e:	f47f a9b7 	bne.w	404100 <_svfprintf_r+0x1a4>
  404d92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d94:	46c8      	mov	r8, r9
  404d96:	f7ff ba72 	b.w	40427e <_svfprintf_r+0x322>
  404d9a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404d9c:	4622      	mov	r2, r4
  404d9e:	4620      	mov	r0, r4
  404da0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404da2:	4623      	mov	r3, r4
  404da4:	4621      	mov	r1, r4
  404da6:	f003 f9e1 	bl	40816c <__aeabi_dcmpun>
  404daa:	2800      	cmp	r0, #0
  404dac:	f040 8286 	bne.w	4052bc <_svfprintf_r+0x1360>
  404db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404db2:	3301      	adds	r3, #1
  404db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404db6:	f023 0320 	bic.w	r3, r3, #32
  404dba:	930e      	str	r3, [sp, #56]	; 0x38
  404dbc:	f000 81e2 	beq.w	405184 <_svfprintf_r+0x1228>
  404dc0:	2b47      	cmp	r3, #71	; 0x47
  404dc2:	f000 811e 	beq.w	405002 <_svfprintf_r+0x10a6>
  404dc6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404dca:	9307      	str	r3, [sp, #28]
  404dcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404dce:	1e1f      	subs	r7, r3, #0
  404dd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404dd2:	9308      	str	r3, [sp, #32]
  404dd4:	bfbb      	ittet	lt
  404dd6:	463b      	movlt	r3, r7
  404dd8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404ddc:	2300      	movge	r3, #0
  404dde:	232d      	movlt	r3, #45	; 0x2d
  404de0:	9310      	str	r3, [sp, #64]	; 0x40
  404de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404de4:	2b66      	cmp	r3, #102	; 0x66
  404de6:	f000 81bb 	beq.w	405160 <_svfprintf_r+0x1204>
  404dea:	2b46      	cmp	r3, #70	; 0x46
  404dec:	f000 80df 	beq.w	404fae <_svfprintf_r+0x1052>
  404df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404df2:	9a08      	ldr	r2, [sp, #32]
  404df4:	2b45      	cmp	r3, #69	; 0x45
  404df6:	bf0c      	ite	eq
  404df8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404dfa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404dfc:	a823      	add	r0, sp, #140	; 0x8c
  404dfe:	a920      	add	r1, sp, #128	; 0x80
  404e00:	bf08      	it	eq
  404e02:	1c5d      	addeq	r5, r3, #1
  404e04:	9004      	str	r0, [sp, #16]
  404e06:	9103      	str	r1, [sp, #12]
  404e08:	a81f      	add	r0, sp, #124	; 0x7c
  404e0a:	2102      	movs	r1, #2
  404e0c:	463b      	mov	r3, r7
  404e0e:	9002      	str	r0, [sp, #8]
  404e10:	9501      	str	r5, [sp, #4]
  404e12:	9100      	str	r1, [sp, #0]
  404e14:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e16:	f000 fb73 	bl	405500 <_dtoa_r>
  404e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e1c:	2b67      	cmp	r3, #103	; 0x67
  404e1e:	4606      	mov	r6, r0
  404e20:	f040 81e0 	bne.w	4051e4 <_svfprintf_r+0x1288>
  404e24:	f01b 0f01 	tst.w	fp, #1
  404e28:	f000 8246 	beq.w	4052b8 <_svfprintf_r+0x135c>
  404e2c:	1974      	adds	r4, r6, r5
  404e2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404e30:	9808      	ldr	r0, [sp, #32]
  404e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e34:	4639      	mov	r1, r7
  404e36:	f003 f967 	bl	408108 <__aeabi_dcmpeq>
  404e3a:	2800      	cmp	r0, #0
  404e3c:	f040 8165 	bne.w	40510a <_svfprintf_r+0x11ae>
  404e40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e42:	42a3      	cmp	r3, r4
  404e44:	d206      	bcs.n	404e54 <_svfprintf_r+0xef8>
  404e46:	2130      	movs	r1, #48	; 0x30
  404e48:	1c5a      	adds	r2, r3, #1
  404e4a:	9223      	str	r2, [sp, #140]	; 0x8c
  404e4c:	7019      	strb	r1, [r3, #0]
  404e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e50:	429c      	cmp	r4, r3
  404e52:	d8f9      	bhi.n	404e48 <_svfprintf_r+0xeec>
  404e54:	1b9b      	subs	r3, r3, r6
  404e56:	9313      	str	r3, [sp, #76]	; 0x4c
  404e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e5a:	2b47      	cmp	r3, #71	; 0x47
  404e5c:	f000 80e9 	beq.w	405032 <_svfprintf_r+0x10d6>
  404e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e62:	2b65      	cmp	r3, #101	; 0x65
  404e64:	f340 81cd 	ble.w	405202 <_svfprintf_r+0x12a6>
  404e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e6a:	2b66      	cmp	r3, #102	; 0x66
  404e6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404e6e:	9312      	str	r3, [sp, #72]	; 0x48
  404e70:	f000 819e 	beq.w	4051b0 <_svfprintf_r+0x1254>
  404e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404e78:	4619      	mov	r1, r3
  404e7a:	4291      	cmp	r1, r2
  404e7c:	f300 818a 	bgt.w	405194 <_svfprintf_r+0x1238>
  404e80:	f01b 0f01 	tst.w	fp, #1
  404e84:	f040 8213 	bne.w	4052ae <_svfprintf_r+0x1352>
  404e88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404e8c:	9308      	str	r3, [sp, #32]
  404e8e:	2367      	movs	r3, #103	; 0x67
  404e90:	920e      	str	r2, [sp, #56]	; 0x38
  404e92:	9311      	str	r3, [sp, #68]	; 0x44
  404e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404e96:	2b00      	cmp	r3, #0
  404e98:	f040 80c4 	bne.w	405024 <_svfprintf_r+0x10c8>
  404e9c:	930a      	str	r3, [sp, #40]	; 0x28
  404e9e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404ea2:	f7ff b973 	b.w	40418c <_svfprintf_r+0x230>
  404ea6:	4635      	mov	r5, r6
  404ea8:	460c      	mov	r4, r1
  404eaa:	4646      	mov	r6, r8
  404eac:	4690      	mov	r8, r2
  404eae:	3301      	adds	r3, #1
  404eb0:	443c      	add	r4, r7
  404eb2:	2b07      	cmp	r3, #7
  404eb4:	9427      	str	r4, [sp, #156]	; 0x9c
  404eb6:	9326      	str	r3, [sp, #152]	; 0x98
  404eb8:	e888 00a0 	stmia.w	r8, {r5, r7}
  404ebc:	f73f aed1 	bgt.w	404c62 <_svfprintf_r+0xd06>
  404ec0:	f108 0808 	add.w	r8, r8, #8
  404ec4:	e6d7      	b.n	404c76 <_svfprintf_r+0xd1a>
  404ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ec8:	6813      	ldr	r3, [r2, #0]
  404eca:	3204      	adds	r2, #4
  404ecc:	920f      	str	r2, [sp, #60]	; 0x3c
  404ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404ed0:	601a      	str	r2, [r3, #0]
  404ed2:	f7ff b86a 	b.w	403faa <_svfprintf_r+0x4e>
  404ed6:	aa25      	add	r2, sp, #148	; 0x94
  404ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404eda:	980c      	ldr	r0, [sp, #48]	; 0x30
  404edc:	f002 f880 	bl	406fe0 <__ssprint_r>
  404ee0:	2800      	cmp	r0, #0
  404ee2:	f47f a90d 	bne.w	404100 <_svfprintf_r+0x1a4>
  404ee6:	46c8      	mov	r8, r9
  404ee8:	e48d      	b.n	404806 <_svfprintf_r+0x8aa>
  404eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404eec:	4a27      	ldr	r2, [pc, #156]	; (404f8c <_svfprintf_r+0x1030>)
  404eee:	f8c8 2000 	str.w	r2, [r8]
  404ef2:	3301      	adds	r3, #1
  404ef4:	3401      	adds	r4, #1
  404ef6:	2201      	movs	r2, #1
  404ef8:	2b07      	cmp	r3, #7
  404efa:	9427      	str	r4, [sp, #156]	; 0x9c
  404efc:	9326      	str	r3, [sp, #152]	; 0x98
  404efe:	f8c8 2004 	str.w	r2, [r8, #4]
  404f02:	dc72      	bgt.n	404fea <_svfprintf_r+0x108e>
  404f04:	f108 0808 	add.w	r8, r8, #8
  404f08:	b929      	cbnz	r1, 404f16 <_svfprintf_r+0xfba>
  404f0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f0c:	b91b      	cbnz	r3, 404f16 <_svfprintf_r+0xfba>
  404f0e:	9b07      	ldr	r3, [sp, #28]
  404f10:	07d8      	lsls	r0, r3, #31
  404f12:	f57f aa03 	bpl.w	40431c <_svfprintf_r+0x3c0>
  404f16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f18:	9819      	ldr	r0, [sp, #100]	; 0x64
  404f1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404f1c:	f8c8 2000 	str.w	r2, [r8]
  404f20:	3301      	adds	r3, #1
  404f22:	4602      	mov	r2, r0
  404f24:	4422      	add	r2, r4
  404f26:	2b07      	cmp	r3, #7
  404f28:	9227      	str	r2, [sp, #156]	; 0x9c
  404f2a:	f8c8 0004 	str.w	r0, [r8, #4]
  404f2e:	9326      	str	r3, [sp, #152]	; 0x98
  404f30:	f300 818d 	bgt.w	40524e <_svfprintf_r+0x12f2>
  404f34:	f108 0808 	add.w	r8, r8, #8
  404f38:	2900      	cmp	r1, #0
  404f3a:	f2c0 8165 	blt.w	405208 <_svfprintf_r+0x12ac>
  404f3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404f40:	f8c8 6000 	str.w	r6, [r8]
  404f44:	3301      	adds	r3, #1
  404f46:	188c      	adds	r4, r1, r2
  404f48:	2b07      	cmp	r3, #7
  404f4a:	9427      	str	r4, [sp, #156]	; 0x9c
  404f4c:	9326      	str	r3, [sp, #152]	; 0x98
  404f4e:	f8c8 1004 	str.w	r1, [r8, #4]
  404f52:	f77f a9e1 	ble.w	404318 <_svfprintf_r+0x3bc>
  404f56:	e52c      	b.n	4049b2 <_svfprintf_r+0xa56>
  404f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f5c:	6813      	ldr	r3, [r2, #0]
  404f5e:	17cd      	asrs	r5, r1, #31
  404f60:	4608      	mov	r0, r1
  404f62:	3204      	adds	r2, #4
  404f64:	4629      	mov	r1, r5
  404f66:	920f      	str	r2, [sp, #60]	; 0x3c
  404f68:	e9c3 0100 	strd	r0, r1, [r3]
  404f6c:	f7ff b81d 	b.w	403faa <_svfprintf_r+0x4e>
  404f70:	aa25      	add	r2, sp, #148	; 0x94
  404f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f74:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f76:	f002 f833 	bl	406fe0 <__ssprint_r>
  404f7a:	2800      	cmp	r0, #0
  404f7c:	f47f a8c0 	bne.w	404100 <_svfprintf_r+0x1a4>
  404f80:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f82:	46c8      	mov	r8, r9
  404f84:	e458      	b.n	404838 <_svfprintf_r+0x8dc>
  404f86:	bf00      	nop
  404f88:	00408fe0 	.word	0x00408fe0
  404f8c:	00408fcc 	.word	0x00408fcc
  404f90:	2140      	movs	r1, #64	; 0x40
  404f92:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f94:	f001 fa0a 	bl	4063ac <_malloc_r>
  404f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f9a:	6010      	str	r0, [r2, #0]
  404f9c:	6110      	str	r0, [r2, #16]
  404f9e:	2800      	cmp	r0, #0
  404fa0:	f000 81f2 	beq.w	405388 <_svfprintf_r+0x142c>
  404fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404fa6:	2340      	movs	r3, #64	; 0x40
  404fa8:	6153      	str	r3, [r2, #20]
  404faa:	f7fe bfee 	b.w	403f8a <_svfprintf_r+0x2e>
  404fae:	a823      	add	r0, sp, #140	; 0x8c
  404fb0:	a920      	add	r1, sp, #128	; 0x80
  404fb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404fb4:	9004      	str	r0, [sp, #16]
  404fb6:	9103      	str	r1, [sp, #12]
  404fb8:	a81f      	add	r0, sp, #124	; 0x7c
  404fba:	2103      	movs	r1, #3
  404fbc:	9002      	str	r0, [sp, #8]
  404fbe:	9a08      	ldr	r2, [sp, #32]
  404fc0:	9401      	str	r4, [sp, #4]
  404fc2:	463b      	mov	r3, r7
  404fc4:	9100      	str	r1, [sp, #0]
  404fc6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fc8:	f000 fa9a 	bl	405500 <_dtoa_r>
  404fcc:	4625      	mov	r5, r4
  404fce:	4606      	mov	r6, r0
  404fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fd2:	2b46      	cmp	r3, #70	; 0x46
  404fd4:	eb06 0405 	add.w	r4, r6, r5
  404fd8:	f47f af29 	bne.w	404e2e <_svfprintf_r+0xed2>
  404fdc:	7833      	ldrb	r3, [r6, #0]
  404fde:	2b30      	cmp	r3, #48	; 0x30
  404fe0:	f000 8178 	beq.w	4052d4 <_svfprintf_r+0x1378>
  404fe4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404fe6:	442c      	add	r4, r5
  404fe8:	e721      	b.n	404e2e <_svfprintf_r+0xed2>
  404fea:	aa25      	add	r2, sp, #148	; 0x94
  404fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fee:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ff0:	f001 fff6 	bl	406fe0 <__ssprint_r>
  404ff4:	2800      	cmp	r0, #0
  404ff6:	f47f a883 	bne.w	404100 <_svfprintf_r+0x1a4>
  404ffa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404ffc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ffe:	46c8      	mov	r8, r9
  405000:	e782      	b.n	404f08 <_svfprintf_r+0xfac>
  405002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405004:	2b00      	cmp	r3, #0
  405006:	bf08      	it	eq
  405008:	2301      	moveq	r3, #1
  40500a:	930a      	str	r3, [sp, #40]	; 0x28
  40500c:	e6db      	b.n	404dc6 <_svfprintf_r+0xe6a>
  40500e:	4630      	mov	r0, r6
  405010:	940a      	str	r4, [sp, #40]	; 0x28
  405012:	f7fe ff35 	bl	403e80 <strlen>
  405016:	950f      	str	r5, [sp, #60]	; 0x3c
  405018:	900e      	str	r0, [sp, #56]	; 0x38
  40501a:	f8cd b01c 	str.w	fp, [sp, #28]
  40501e:	4603      	mov	r3, r0
  405020:	f7ff b9f9 	b.w	404416 <_svfprintf_r+0x4ba>
  405024:	272d      	movs	r7, #45	; 0x2d
  405026:	2300      	movs	r3, #0
  405028:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40502c:	930a      	str	r3, [sp, #40]	; 0x28
  40502e:	f7ff b8ae 	b.w	40418e <_svfprintf_r+0x232>
  405032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405034:	9312      	str	r3, [sp, #72]	; 0x48
  405036:	461a      	mov	r2, r3
  405038:	3303      	adds	r3, #3
  40503a:	db04      	blt.n	405046 <_svfprintf_r+0x10ea>
  40503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40503e:	4619      	mov	r1, r3
  405040:	4291      	cmp	r1, r2
  405042:	f6bf af17 	bge.w	404e74 <_svfprintf_r+0xf18>
  405046:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405048:	3b02      	subs	r3, #2
  40504a:	9311      	str	r3, [sp, #68]	; 0x44
  40504c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405050:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405054:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405056:	3b01      	subs	r3, #1
  405058:	2b00      	cmp	r3, #0
  40505a:	931f      	str	r3, [sp, #124]	; 0x7c
  40505c:	bfbd      	ittte	lt
  40505e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405060:	f1c3 0301 	rsblt	r3, r3, #1
  405064:	222d      	movlt	r2, #45	; 0x2d
  405066:	222b      	movge	r2, #43	; 0x2b
  405068:	2b09      	cmp	r3, #9
  40506a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40506e:	f340 8116 	ble.w	40529e <_svfprintf_r+0x1342>
  405072:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405076:	4620      	mov	r0, r4
  405078:	4dab      	ldr	r5, [pc, #684]	; (405328 <_svfprintf_r+0x13cc>)
  40507a:	e000      	b.n	40507e <_svfprintf_r+0x1122>
  40507c:	4610      	mov	r0, r2
  40507e:	fb85 1203 	smull	r1, r2, r5, r3
  405082:	17d9      	asrs	r1, r3, #31
  405084:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405088:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40508c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405090:	3230      	adds	r2, #48	; 0x30
  405092:	2909      	cmp	r1, #9
  405094:	f800 2c01 	strb.w	r2, [r0, #-1]
  405098:	460b      	mov	r3, r1
  40509a:	f100 32ff 	add.w	r2, r0, #4294967295
  40509e:	dced      	bgt.n	40507c <_svfprintf_r+0x1120>
  4050a0:	3330      	adds	r3, #48	; 0x30
  4050a2:	3802      	subs	r0, #2
  4050a4:	b2d9      	uxtb	r1, r3
  4050a6:	4284      	cmp	r4, r0
  4050a8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4050ac:	f240 8165 	bls.w	40537a <_svfprintf_r+0x141e>
  4050b0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4050b4:	4613      	mov	r3, r2
  4050b6:	e001      	b.n	4050bc <_svfprintf_r+0x1160>
  4050b8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4050bc:	f800 1b01 	strb.w	r1, [r0], #1
  4050c0:	42a3      	cmp	r3, r4
  4050c2:	d1f9      	bne.n	4050b8 <_svfprintf_r+0x115c>
  4050c4:	3301      	adds	r3, #1
  4050c6:	1a9b      	subs	r3, r3, r2
  4050c8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4050cc:	4413      	add	r3, r2
  4050ce:	aa21      	add	r2, sp, #132	; 0x84
  4050d0:	1a9b      	subs	r3, r3, r2
  4050d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4050d4:	931b      	str	r3, [sp, #108]	; 0x6c
  4050d6:	2a01      	cmp	r2, #1
  4050d8:	4413      	add	r3, r2
  4050da:	930e      	str	r3, [sp, #56]	; 0x38
  4050dc:	f340 8119 	ble.w	405312 <_svfprintf_r+0x13b6>
  4050e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4050e4:	4413      	add	r3, r2
  4050e6:	930e      	str	r3, [sp, #56]	; 0x38
  4050e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4050ec:	9308      	str	r3, [sp, #32]
  4050ee:	2300      	movs	r3, #0
  4050f0:	9312      	str	r3, [sp, #72]	; 0x48
  4050f2:	e6cf      	b.n	404e94 <_svfprintf_r+0xf38>
  4050f4:	aa25      	add	r2, sp, #148	; 0x94
  4050f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050fa:	f001 ff71 	bl	406fe0 <__ssprint_r>
  4050fe:	2800      	cmp	r0, #0
  405100:	f47e affe 	bne.w	404100 <_svfprintf_r+0x1a4>
  405104:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405106:	46c8      	mov	r8, r9
  405108:	e4d7      	b.n	404aba <_svfprintf_r+0xb5e>
  40510a:	4623      	mov	r3, r4
  40510c:	e6a2      	b.n	404e54 <_svfprintf_r+0xef8>
  40510e:	aa25      	add	r2, sp, #148	; 0x94
  405110:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405112:	980c      	ldr	r0, [sp, #48]	; 0x30
  405114:	f001 ff64 	bl	406fe0 <__ssprint_r>
  405118:	2800      	cmp	r0, #0
  40511a:	f47e aff1 	bne.w	404100 <_svfprintf_r+0x1a4>
  40511e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405120:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405122:	46c8      	mov	r8, r9
  405124:	e5ae      	b.n	404c84 <_svfprintf_r+0xd28>
  405126:	aa25      	add	r2, sp, #148	; 0x94
  405128:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40512a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40512c:	f001 ff58 	bl	406fe0 <__ssprint_r>
  405130:	2800      	cmp	r0, #0
  405132:	f47e afe5 	bne.w	404100 <_svfprintf_r+0x1a4>
  405136:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405138:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40513a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40513c:	1a9a      	subs	r2, r3, r2
  40513e:	46c8      	mov	r8, r9
  405140:	e5b8      	b.n	404cb4 <_svfprintf_r+0xd58>
  405142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405144:	9612      	str	r6, [sp, #72]	; 0x48
  405146:	2b06      	cmp	r3, #6
  405148:	bf28      	it	cs
  40514a:	2306      	movcs	r3, #6
  40514c:	960a      	str	r6, [sp, #40]	; 0x28
  40514e:	4637      	mov	r7, r6
  405150:	9308      	str	r3, [sp, #32]
  405152:	950f      	str	r5, [sp, #60]	; 0x3c
  405154:	f8cd b01c 	str.w	fp, [sp, #28]
  405158:	930e      	str	r3, [sp, #56]	; 0x38
  40515a:	4e74      	ldr	r6, [pc, #464]	; (40532c <_svfprintf_r+0x13d0>)
  40515c:	f7ff b816 	b.w	40418c <_svfprintf_r+0x230>
  405160:	a823      	add	r0, sp, #140	; 0x8c
  405162:	a920      	add	r1, sp, #128	; 0x80
  405164:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405166:	9004      	str	r0, [sp, #16]
  405168:	9103      	str	r1, [sp, #12]
  40516a:	a81f      	add	r0, sp, #124	; 0x7c
  40516c:	2103      	movs	r1, #3
  40516e:	9002      	str	r0, [sp, #8]
  405170:	9a08      	ldr	r2, [sp, #32]
  405172:	9501      	str	r5, [sp, #4]
  405174:	463b      	mov	r3, r7
  405176:	9100      	str	r1, [sp, #0]
  405178:	980c      	ldr	r0, [sp, #48]	; 0x30
  40517a:	f000 f9c1 	bl	405500 <_dtoa_r>
  40517e:	4606      	mov	r6, r0
  405180:	1944      	adds	r4, r0, r5
  405182:	e72b      	b.n	404fdc <_svfprintf_r+0x1080>
  405184:	2306      	movs	r3, #6
  405186:	930a      	str	r3, [sp, #40]	; 0x28
  405188:	e61d      	b.n	404dc6 <_svfprintf_r+0xe6a>
  40518a:	272d      	movs	r7, #45	; 0x2d
  40518c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405190:	f7ff bacd 	b.w	40472e <_svfprintf_r+0x7d2>
  405194:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405198:	4413      	add	r3, r2
  40519a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40519c:	930e      	str	r3, [sp, #56]	; 0x38
  40519e:	2a00      	cmp	r2, #0
  4051a0:	f340 80b0 	ble.w	405304 <_svfprintf_r+0x13a8>
  4051a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4051a8:	9308      	str	r3, [sp, #32]
  4051aa:	2367      	movs	r3, #103	; 0x67
  4051ac:	9311      	str	r3, [sp, #68]	; 0x44
  4051ae:	e671      	b.n	404e94 <_svfprintf_r+0xf38>
  4051b0:	2b00      	cmp	r3, #0
  4051b2:	f340 80c3 	ble.w	40533c <_svfprintf_r+0x13e0>
  4051b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051b8:	2a00      	cmp	r2, #0
  4051ba:	f040 8099 	bne.w	4052f0 <_svfprintf_r+0x1394>
  4051be:	f01b 0f01 	tst.w	fp, #1
  4051c2:	f040 8095 	bne.w	4052f0 <_svfprintf_r+0x1394>
  4051c6:	9308      	str	r3, [sp, #32]
  4051c8:	930e      	str	r3, [sp, #56]	; 0x38
  4051ca:	e663      	b.n	404e94 <_svfprintf_r+0xf38>
  4051cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051ce:	9308      	str	r3, [sp, #32]
  4051d0:	930e      	str	r3, [sp, #56]	; 0x38
  4051d2:	900a      	str	r0, [sp, #40]	; 0x28
  4051d4:	950f      	str	r5, [sp, #60]	; 0x3c
  4051d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4051da:	9012      	str	r0, [sp, #72]	; 0x48
  4051dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4051e0:	f7fe bfd4 	b.w	40418c <_svfprintf_r+0x230>
  4051e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051e6:	2b47      	cmp	r3, #71	; 0x47
  4051e8:	f47f ae20 	bne.w	404e2c <_svfprintf_r+0xed0>
  4051ec:	f01b 0f01 	tst.w	fp, #1
  4051f0:	f47f aeee 	bne.w	404fd0 <_svfprintf_r+0x1074>
  4051f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4051f6:	1b9b      	subs	r3, r3, r6
  4051f8:	9313      	str	r3, [sp, #76]	; 0x4c
  4051fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4051fc:	2b47      	cmp	r3, #71	; 0x47
  4051fe:	f43f af18 	beq.w	405032 <_svfprintf_r+0x10d6>
  405202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405204:	9312      	str	r3, [sp, #72]	; 0x48
  405206:	e721      	b.n	40504c <_svfprintf_r+0x10f0>
  405208:	424f      	negs	r7, r1
  40520a:	3110      	adds	r1, #16
  40520c:	4d48      	ldr	r5, [pc, #288]	; (405330 <_svfprintf_r+0x13d4>)
  40520e:	da2f      	bge.n	405270 <_svfprintf_r+0x1314>
  405210:	2410      	movs	r4, #16
  405212:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405216:	e004      	b.n	405222 <_svfprintf_r+0x12c6>
  405218:	f108 0808 	add.w	r8, r8, #8
  40521c:	3f10      	subs	r7, #16
  40521e:	2f10      	cmp	r7, #16
  405220:	dd26      	ble.n	405270 <_svfprintf_r+0x1314>
  405222:	3301      	adds	r3, #1
  405224:	3210      	adds	r2, #16
  405226:	2b07      	cmp	r3, #7
  405228:	9227      	str	r2, [sp, #156]	; 0x9c
  40522a:	9326      	str	r3, [sp, #152]	; 0x98
  40522c:	f8c8 5000 	str.w	r5, [r8]
  405230:	f8c8 4004 	str.w	r4, [r8, #4]
  405234:	ddf0      	ble.n	405218 <_svfprintf_r+0x12bc>
  405236:	aa25      	add	r2, sp, #148	; 0x94
  405238:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40523a:	4658      	mov	r0, fp
  40523c:	f001 fed0 	bl	406fe0 <__ssprint_r>
  405240:	2800      	cmp	r0, #0
  405242:	f47e af5d 	bne.w	404100 <_svfprintf_r+0x1a4>
  405246:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405248:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40524a:	46c8      	mov	r8, r9
  40524c:	e7e6      	b.n	40521c <_svfprintf_r+0x12c0>
  40524e:	aa25      	add	r2, sp, #148	; 0x94
  405250:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405252:	980c      	ldr	r0, [sp, #48]	; 0x30
  405254:	f001 fec4 	bl	406fe0 <__ssprint_r>
  405258:	2800      	cmp	r0, #0
  40525a:	f47e af51 	bne.w	404100 <_svfprintf_r+0x1a4>
  40525e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405260:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405262:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405264:	46c8      	mov	r8, r9
  405266:	e667      	b.n	404f38 <_svfprintf_r+0xfdc>
  405268:	2000      	movs	r0, #0
  40526a:	900a      	str	r0, [sp, #40]	; 0x28
  40526c:	f7fe bed0 	b.w	404010 <_svfprintf_r+0xb4>
  405270:	3301      	adds	r3, #1
  405272:	443a      	add	r2, r7
  405274:	2b07      	cmp	r3, #7
  405276:	e888 00a0 	stmia.w	r8, {r5, r7}
  40527a:	9227      	str	r2, [sp, #156]	; 0x9c
  40527c:	9326      	str	r3, [sp, #152]	; 0x98
  40527e:	f108 0808 	add.w	r8, r8, #8
  405282:	f77f ae5c 	ble.w	404f3e <_svfprintf_r+0xfe2>
  405286:	aa25      	add	r2, sp, #148	; 0x94
  405288:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40528a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40528c:	f001 fea8 	bl	406fe0 <__ssprint_r>
  405290:	2800      	cmp	r0, #0
  405292:	f47e af35 	bne.w	404100 <_svfprintf_r+0x1a4>
  405296:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405298:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40529a:	46c8      	mov	r8, r9
  40529c:	e64f      	b.n	404f3e <_svfprintf_r+0xfe2>
  40529e:	3330      	adds	r3, #48	; 0x30
  4052a0:	2230      	movs	r2, #48	; 0x30
  4052a2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4052a6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4052aa:	ab22      	add	r3, sp, #136	; 0x88
  4052ac:	e70f      	b.n	4050ce <_svfprintf_r+0x1172>
  4052ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4052b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4052b2:	4413      	add	r3, r2
  4052b4:	930e      	str	r3, [sp, #56]	; 0x38
  4052b6:	e775      	b.n	4051a4 <_svfprintf_r+0x1248>
  4052b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4052ba:	e5cb      	b.n	404e54 <_svfprintf_r+0xef8>
  4052bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4052be:	4e1d      	ldr	r6, [pc, #116]	; (405334 <_svfprintf_r+0x13d8>)
  4052c0:	2b00      	cmp	r3, #0
  4052c2:	bfb6      	itet	lt
  4052c4:	272d      	movlt	r7, #45	; 0x2d
  4052c6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4052ca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4052ce:	4b1a      	ldr	r3, [pc, #104]	; (405338 <_svfprintf_r+0x13dc>)
  4052d0:	f7ff ba2f 	b.w	404732 <_svfprintf_r+0x7d6>
  4052d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4052d6:	9808      	ldr	r0, [sp, #32]
  4052d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4052da:	4639      	mov	r1, r7
  4052dc:	f002 ff14 	bl	408108 <__aeabi_dcmpeq>
  4052e0:	2800      	cmp	r0, #0
  4052e2:	f47f ae7f 	bne.w	404fe4 <_svfprintf_r+0x1088>
  4052e6:	f1c5 0501 	rsb	r5, r5, #1
  4052ea:	951f      	str	r5, [sp, #124]	; 0x7c
  4052ec:	442c      	add	r4, r5
  4052ee:	e59e      	b.n	404e2e <_svfprintf_r+0xed2>
  4052f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4052f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4052f4:	4413      	add	r3, r2
  4052f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052f8:	441a      	add	r2, r3
  4052fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4052fe:	920e      	str	r2, [sp, #56]	; 0x38
  405300:	9308      	str	r3, [sp, #32]
  405302:	e5c7      	b.n	404e94 <_svfprintf_r+0xf38>
  405304:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405308:	f1c3 0301 	rsb	r3, r3, #1
  40530c:	441a      	add	r2, r3
  40530e:	4613      	mov	r3, r2
  405310:	e7d0      	b.n	4052b4 <_svfprintf_r+0x1358>
  405312:	f01b 0301 	ands.w	r3, fp, #1
  405316:	9312      	str	r3, [sp, #72]	; 0x48
  405318:	f47f aee2 	bne.w	4050e0 <_svfprintf_r+0x1184>
  40531c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40531e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405322:	9308      	str	r3, [sp, #32]
  405324:	e5b6      	b.n	404e94 <_svfprintf_r+0xf38>
  405326:	bf00      	nop
  405328:	66666667 	.word	0x66666667
  40532c:	00408fc4 	.word	0x00408fc4
  405330:	00408fe0 	.word	0x00408fe0
  405334:	00408f98 	.word	0x00408f98
  405338:	00408f94 	.word	0x00408f94
  40533c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40533e:	b913      	cbnz	r3, 405346 <_svfprintf_r+0x13ea>
  405340:	f01b 0f01 	tst.w	fp, #1
  405344:	d002      	beq.n	40534c <_svfprintf_r+0x13f0>
  405346:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405348:	3301      	adds	r3, #1
  40534a:	e7d4      	b.n	4052f6 <_svfprintf_r+0x139a>
  40534c:	2301      	movs	r3, #1
  40534e:	e73a      	b.n	4051c6 <_svfprintf_r+0x126a>
  405350:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405352:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405356:	6828      	ldr	r0, [r5, #0]
  405358:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40535c:	900a      	str	r0, [sp, #40]	; 0x28
  40535e:	4628      	mov	r0, r5
  405360:	3004      	adds	r0, #4
  405362:	46a2      	mov	sl, r4
  405364:	900f      	str	r0, [sp, #60]	; 0x3c
  405366:	f7fe be51 	b.w	40400c <_svfprintf_r+0xb0>
  40536a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40536e:	f7ff b867 	b.w	404440 <_svfprintf_r+0x4e4>
  405372:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405376:	f7ff ba15 	b.w	4047a4 <_svfprintf_r+0x848>
  40537a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40537e:	e6a6      	b.n	4050ce <_svfprintf_r+0x1172>
  405380:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405384:	f7ff b8eb 	b.w	40455e <_svfprintf_r+0x602>
  405388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40538a:	230c      	movs	r3, #12
  40538c:	6013      	str	r3, [r2, #0]
  40538e:	f04f 33ff 	mov.w	r3, #4294967295
  405392:	9309      	str	r3, [sp, #36]	; 0x24
  405394:	f7fe bebd 	b.w	404112 <_svfprintf_r+0x1b6>
  405398:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40539c:	f7ff b99a 	b.w	4046d4 <_svfprintf_r+0x778>
  4053a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4053a4:	f7ff b976 	b.w	404694 <_svfprintf_r+0x738>
  4053a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4053ac:	f7ff b959 	b.w	404662 <_svfprintf_r+0x706>
  4053b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4053b4:	f7ff b912 	b.w	4045dc <_svfprintf_r+0x680>

004053b8 <register_fini>:
  4053b8:	4b02      	ldr	r3, [pc, #8]	; (4053c4 <register_fini+0xc>)
  4053ba:	b113      	cbz	r3, 4053c2 <register_fini+0xa>
  4053bc:	4802      	ldr	r0, [pc, #8]	; (4053c8 <register_fini+0x10>)
  4053be:	f000 b805 	b.w	4053cc <atexit>
  4053c2:	4770      	bx	lr
  4053c4:	00000000 	.word	0x00000000
  4053c8:	00406355 	.word	0x00406355

004053cc <atexit>:
  4053cc:	2300      	movs	r3, #0
  4053ce:	4601      	mov	r1, r0
  4053d0:	461a      	mov	r2, r3
  4053d2:	4618      	mov	r0, r3
  4053d4:	f001 be82 	b.w	4070dc <__register_exitproc>

004053d8 <quorem>:
  4053d8:	6902      	ldr	r2, [r0, #16]
  4053da:	690b      	ldr	r3, [r1, #16]
  4053dc:	4293      	cmp	r3, r2
  4053de:	f300 808d 	bgt.w	4054fc <quorem+0x124>
  4053e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053e6:	f103 38ff 	add.w	r8, r3, #4294967295
  4053ea:	f101 0714 	add.w	r7, r1, #20
  4053ee:	f100 0b14 	add.w	fp, r0, #20
  4053f2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4053f6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4053fa:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4053fe:	b083      	sub	sp, #12
  405400:	3201      	adds	r2, #1
  405402:	fbb3 f9f2 	udiv	r9, r3, r2
  405406:	eb0b 0304 	add.w	r3, fp, r4
  40540a:	9400      	str	r4, [sp, #0]
  40540c:	eb07 0a04 	add.w	sl, r7, r4
  405410:	9301      	str	r3, [sp, #4]
  405412:	f1b9 0f00 	cmp.w	r9, #0
  405416:	d039      	beq.n	40548c <quorem+0xb4>
  405418:	2500      	movs	r5, #0
  40541a:	462e      	mov	r6, r5
  40541c:	46bc      	mov	ip, r7
  40541e:	46de      	mov	lr, fp
  405420:	f85c 4b04 	ldr.w	r4, [ip], #4
  405424:	f8de 3000 	ldr.w	r3, [lr]
  405428:	b2a2      	uxth	r2, r4
  40542a:	fb09 5502 	mla	r5, r9, r2, r5
  40542e:	0c22      	lsrs	r2, r4, #16
  405430:	0c2c      	lsrs	r4, r5, #16
  405432:	fb09 4202 	mla	r2, r9, r2, r4
  405436:	b2ad      	uxth	r5, r5
  405438:	1b75      	subs	r5, r6, r5
  40543a:	b296      	uxth	r6, r2
  40543c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405440:	fa15 f383 	uxtah	r3, r5, r3
  405444:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405448:	b29b      	uxth	r3, r3
  40544a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40544e:	45e2      	cmp	sl, ip
  405450:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405454:	f84e 3b04 	str.w	r3, [lr], #4
  405458:	ea4f 4626 	mov.w	r6, r6, asr #16
  40545c:	d2e0      	bcs.n	405420 <quorem+0x48>
  40545e:	9b00      	ldr	r3, [sp, #0]
  405460:	f85b 3003 	ldr.w	r3, [fp, r3]
  405464:	b993      	cbnz	r3, 40548c <quorem+0xb4>
  405466:	9c01      	ldr	r4, [sp, #4]
  405468:	1f23      	subs	r3, r4, #4
  40546a:	459b      	cmp	fp, r3
  40546c:	d20c      	bcs.n	405488 <quorem+0xb0>
  40546e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405472:	b94b      	cbnz	r3, 405488 <quorem+0xb0>
  405474:	f1a4 0308 	sub.w	r3, r4, #8
  405478:	e002      	b.n	405480 <quorem+0xa8>
  40547a:	681a      	ldr	r2, [r3, #0]
  40547c:	3b04      	subs	r3, #4
  40547e:	b91a      	cbnz	r2, 405488 <quorem+0xb0>
  405480:	459b      	cmp	fp, r3
  405482:	f108 38ff 	add.w	r8, r8, #4294967295
  405486:	d3f8      	bcc.n	40547a <quorem+0xa2>
  405488:	f8c0 8010 	str.w	r8, [r0, #16]
  40548c:	4604      	mov	r4, r0
  40548e:	f001 fc99 	bl	406dc4 <__mcmp>
  405492:	2800      	cmp	r0, #0
  405494:	db2e      	blt.n	4054f4 <quorem+0x11c>
  405496:	f109 0901 	add.w	r9, r9, #1
  40549a:	465d      	mov	r5, fp
  40549c:	2300      	movs	r3, #0
  40549e:	f857 1b04 	ldr.w	r1, [r7], #4
  4054a2:	6828      	ldr	r0, [r5, #0]
  4054a4:	b28a      	uxth	r2, r1
  4054a6:	1a9a      	subs	r2, r3, r2
  4054a8:	0c0b      	lsrs	r3, r1, #16
  4054aa:	fa12 f280 	uxtah	r2, r2, r0
  4054ae:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4054b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4054b6:	b292      	uxth	r2, r2
  4054b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4054bc:	45ba      	cmp	sl, r7
  4054be:	f845 2b04 	str.w	r2, [r5], #4
  4054c2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4054c6:	d2ea      	bcs.n	40549e <quorem+0xc6>
  4054c8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4054cc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4054d0:	b982      	cbnz	r2, 4054f4 <quorem+0x11c>
  4054d2:	1f1a      	subs	r2, r3, #4
  4054d4:	4593      	cmp	fp, r2
  4054d6:	d20b      	bcs.n	4054f0 <quorem+0x118>
  4054d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4054dc:	b942      	cbnz	r2, 4054f0 <quorem+0x118>
  4054de:	3b08      	subs	r3, #8
  4054e0:	e002      	b.n	4054e8 <quorem+0x110>
  4054e2:	681a      	ldr	r2, [r3, #0]
  4054e4:	3b04      	subs	r3, #4
  4054e6:	b91a      	cbnz	r2, 4054f0 <quorem+0x118>
  4054e8:	459b      	cmp	fp, r3
  4054ea:	f108 38ff 	add.w	r8, r8, #4294967295
  4054ee:	d3f8      	bcc.n	4054e2 <quorem+0x10a>
  4054f0:	f8c4 8010 	str.w	r8, [r4, #16]
  4054f4:	4648      	mov	r0, r9
  4054f6:	b003      	add	sp, #12
  4054f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054fc:	2000      	movs	r0, #0
  4054fe:	4770      	bx	lr

00405500 <_dtoa_r>:
  405500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405504:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405506:	b09b      	sub	sp, #108	; 0x6c
  405508:	4604      	mov	r4, r0
  40550a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40550c:	4692      	mov	sl, r2
  40550e:	469b      	mov	fp, r3
  405510:	b141      	cbz	r1, 405524 <_dtoa_r+0x24>
  405512:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405514:	604a      	str	r2, [r1, #4]
  405516:	2301      	movs	r3, #1
  405518:	4093      	lsls	r3, r2
  40551a:	608b      	str	r3, [r1, #8]
  40551c:	f001 fa7a 	bl	406a14 <_Bfree>
  405520:	2300      	movs	r3, #0
  405522:	6423      	str	r3, [r4, #64]	; 0x40
  405524:	f1bb 0f00 	cmp.w	fp, #0
  405528:	465d      	mov	r5, fp
  40552a:	db35      	blt.n	405598 <_dtoa_r+0x98>
  40552c:	2300      	movs	r3, #0
  40552e:	6033      	str	r3, [r6, #0]
  405530:	4b9d      	ldr	r3, [pc, #628]	; (4057a8 <_dtoa_r+0x2a8>)
  405532:	43ab      	bics	r3, r5
  405534:	d015      	beq.n	405562 <_dtoa_r+0x62>
  405536:	4650      	mov	r0, sl
  405538:	4659      	mov	r1, fp
  40553a:	2200      	movs	r2, #0
  40553c:	2300      	movs	r3, #0
  40553e:	f002 fde3 	bl	408108 <__aeabi_dcmpeq>
  405542:	4680      	mov	r8, r0
  405544:	2800      	cmp	r0, #0
  405546:	d02d      	beq.n	4055a4 <_dtoa_r+0xa4>
  405548:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40554a:	2301      	movs	r3, #1
  40554c:	6013      	str	r3, [r2, #0]
  40554e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405550:	2b00      	cmp	r3, #0
  405552:	f000 80bd 	beq.w	4056d0 <_dtoa_r+0x1d0>
  405556:	4895      	ldr	r0, [pc, #596]	; (4057ac <_dtoa_r+0x2ac>)
  405558:	6018      	str	r0, [r3, #0]
  40555a:	3801      	subs	r0, #1
  40555c:	b01b      	add	sp, #108	; 0x6c
  40555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405562:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405564:	f242 730f 	movw	r3, #9999	; 0x270f
  405568:	6013      	str	r3, [r2, #0]
  40556a:	f1ba 0f00 	cmp.w	sl, #0
  40556e:	d10d      	bne.n	40558c <_dtoa_r+0x8c>
  405570:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405574:	b955      	cbnz	r5, 40558c <_dtoa_r+0x8c>
  405576:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405578:	488d      	ldr	r0, [pc, #564]	; (4057b0 <_dtoa_r+0x2b0>)
  40557a:	2b00      	cmp	r3, #0
  40557c:	d0ee      	beq.n	40555c <_dtoa_r+0x5c>
  40557e:	f100 0308 	add.w	r3, r0, #8
  405582:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405584:	6013      	str	r3, [r2, #0]
  405586:	b01b      	add	sp, #108	; 0x6c
  405588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40558c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40558e:	4889      	ldr	r0, [pc, #548]	; (4057b4 <_dtoa_r+0x2b4>)
  405590:	2b00      	cmp	r3, #0
  405592:	d0e3      	beq.n	40555c <_dtoa_r+0x5c>
  405594:	1cc3      	adds	r3, r0, #3
  405596:	e7f4      	b.n	405582 <_dtoa_r+0x82>
  405598:	2301      	movs	r3, #1
  40559a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40559e:	6033      	str	r3, [r6, #0]
  4055a0:	46ab      	mov	fp, r5
  4055a2:	e7c5      	b.n	405530 <_dtoa_r+0x30>
  4055a4:	aa18      	add	r2, sp, #96	; 0x60
  4055a6:	ab19      	add	r3, sp, #100	; 0x64
  4055a8:	9201      	str	r2, [sp, #4]
  4055aa:	9300      	str	r3, [sp, #0]
  4055ac:	4652      	mov	r2, sl
  4055ae:	465b      	mov	r3, fp
  4055b0:	4620      	mov	r0, r4
  4055b2:	f001 fca7 	bl	406f04 <__d2b>
  4055b6:	0d2b      	lsrs	r3, r5, #20
  4055b8:	4681      	mov	r9, r0
  4055ba:	d071      	beq.n	4056a0 <_dtoa_r+0x1a0>
  4055bc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4055c0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4055c4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4055c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4055ca:	4650      	mov	r0, sl
  4055cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4055d0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4055d4:	2200      	movs	r2, #0
  4055d6:	4b78      	ldr	r3, [pc, #480]	; (4057b8 <_dtoa_r+0x2b8>)
  4055d8:	f002 f97a 	bl	4078d0 <__aeabi_dsub>
  4055dc:	a36c      	add	r3, pc, #432	; (adr r3, 405790 <_dtoa_r+0x290>)
  4055de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055e2:	f002 fb29 	bl	407c38 <__aeabi_dmul>
  4055e6:	a36c      	add	r3, pc, #432	; (adr r3, 405798 <_dtoa_r+0x298>)
  4055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055ec:	f002 f972 	bl	4078d4 <__adddf3>
  4055f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4055f4:	4630      	mov	r0, r6
  4055f6:	f002 fab9 	bl	407b6c <__aeabi_i2d>
  4055fa:	a369      	add	r3, pc, #420	; (adr r3, 4057a0 <_dtoa_r+0x2a0>)
  4055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405600:	f002 fb1a 	bl	407c38 <__aeabi_dmul>
  405604:	4602      	mov	r2, r0
  405606:	460b      	mov	r3, r1
  405608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40560c:	f002 f962 	bl	4078d4 <__adddf3>
  405610:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405614:	f002 fdc0 	bl	408198 <__aeabi_d2iz>
  405618:	2200      	movs	r2, #0
  40561a:	9002      	str	r0, [sp, #8]
  40561c:	2300      	movs	r3, #0
  40561e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405622:	f002 fd7b 	bl	40811c <__aeabi_dcmplt>
  405626:	2800      	cmp	r0, #0
  405628:	f040 8173 	bne.w	405912 <_dtoa_r+0x412>
  40562c:	9d02      	ldr	r5, [sp, #8]
  40562e:	2d16      	cmp	r5, #22
  405630:	f200 815d 	bhi.w	4058ee <_dtoa_r+0x3ee>
  405634:	4b61      	ldr	r3, [pc, #388]	; (4057bc <_dtoa_r+0x2bc>)
  405636:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40563a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40563e:	4652      	mov	r2, sl
  405640:	465b      	mov	r3, fp
  405642:	f002 fd89 	bl	408158 <__aeabi_dcmpgt>
  405646:	2800      	cmp	r0, #0
  405648:	f000 81c5 	beq.w	4059d6 <_dtoa_r+0x4d6>
  40564c:	1e6b      	subs	r3, r5, #1
  40564e:	9302      	str	r3, [sp, #8]
  405650:	2300      	movs	r3, #0
  405652:	930e      	str	r3, [sp, #56]	; 0x38
  405654:	1bbf      	subs	r7, r7, r6
  405656:	1e7b      	subs	r3, r7, #1
  405658:	9306      	str	r3, [sp, #24]
  40565a:	f100 8154 	bmi.w	405906 <_dtoa_r+0x406>
  40565e:	2300      	movs	r3, #0
  405660:	9308      	str	r3, [sp, #32]
  405662:	9b02      	ldr	r3, [sp, #8]
  405664:	2b00      	cmp	r3, #0
  405666:	f2c0 8145 	blt.w	4058f4 <_dtoa_r+0x3f4>
  40566a:	9a06      	ldr	r2, [sp, #24]
  40566c:	930d      	str	r3, [sp, #52]	; 0x34
  40566e:	4611      	mov	r1, r2
  405670:	4419      	add	r1, r3
  405672:	2300      	movs	r3, #0
  405674:	9106      	str	r1, [sp, #24]
  405676:	930c      	str	r3, [sp, #48]	; 0x30
  405678:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40567a:	2b09      	cmp	r3, #9
  40567c:	d82a      	bhi.n	4056d4 <_dtoa_r+0x1d4>
  40567e:	2b05      	cmp	r3, #5
  405680:	f340 865b 	ble.w	40633a <_dtoa_r+0xe3a>
  405684:	3b04      	subs	r3, #4
  405686:	9324      	str	r3, [sp, #144]	; 0x90
  405688:	2500      	movs	r5, #0
  40568a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40568c:	3b02      	subs	r3, #2
  40568e:	2b03      	cmp	r3, #3
  405690:	f200 8642 	bhi.w	406318 <_dtoa_r+0xe18>
  405694:	e8df f013 	tbh	[pc, r3, lsl #1]
  405698:	02c903d4 	.word	0x02c903d4
  40569c:	046103df 	.word	0x046103df
  4056a0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4056a2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4056a4:	443e      	add	r6, r7
  4056a6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4056aa:	2b20      	cmp	r3, #32
  4056ac:	f340 818e 	ble.w	4059cc <_dtoa_r+0x4cc>
  4056b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4056b4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4056b8:	409d      	lsls	r5, r3
  4056ba:	fa2a f000 	lsr.w	r0, sl, r0
  4056be:	4328      	orrs	r0, r5
  4056c0:	f002 fa44 	bl	407b4c <__aeabi_ui2d>
  4056c4:	2301      	movs	r3, #1
  4056c6:	3e01      	subs	r6, #1
  4056c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4056cc:	9314      	str	r3, [sp, #80]	; 0x50
  4056ce:	e781      	b.n	4055d4 <_dtoa_r+0xd4>
  4056d0:	483b      	ldr	r0, [pc, #236]	; (4057c0 <_dtoa_r+0x2c0>)
  4056d2:	e743      	b.n	40555c <_dtoa_r+0x5c>
  4056d4:	2100      	movs	r1, #0
  4056d6:	6461      	str	r1, [r4, #68]	; 0x44
  4056d8:	4620      	mov	r0, r4
  4056da:	9125      	str	r1, [sp, #148]	; 0x94
  4056dc:	f001 f974 	bl	4069c8 <_Balloc>
  4056e0:	f04f 33ff 	mov.w	r3, #4294967295
  4056e4:	930a      	str	r3, [sp, #40]	; 0x28
  4056e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4056ea:	2301      	movs	r3, #1
  4056ec:	9004      	str	r0, [sp, #16]
  4056ee:	6420      	str	r0, [r4, #64]	; 0x40
  4056f0:	9224      	str	r2, [sp, #144]	; 0x90
  4056f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4056f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4056f6:	2b00      	cmp	r3, #0
  4056f8:	f2c0 80d9 	blt.w	4058ae <_dtoa_r+0x3ae>
  4056fc:	9a02      	ldr	r2, [sp, #8]
  4056fe:	2a0e      	cmp	r2, #14
  405700:	f300 80d5 	bgt.w	4058ae <_dtoa_r+0x3ae>
  405704:	4b2d      	ldr	r3, [pc, #180]	; (4057bc <_dtoa_r+0x2bc>)
  405706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40570a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40570e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405712:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405714:	2b00      	cmp	r3, #0
  405716:	f2c0 83ba 	blt.w	405e8e <_dtoa_r+0x98e>
  40571a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40571e:	4650      	mov	r0, sl
  405720:	462a      	mov	r2, r5
  405722:	4633      	mov	r3, r6
  405724:	4659      	mov	r1, fp
  405726:	f002 fbb1 	bl	407e8c <__aeabi_ddiv>
  40572a:	f002 fd35 	bl	408198 <__aeabi_d2iz>
  40572e:	4680      	mov	r8, r0
  405730:	f002 fa1c 	bl	407b6c <__aeabi_i2d>
  405734:	462a      	mov	r2, r5
  405736:	4633      	mov	r3, r6
  405738:	f002 fa7e 	bl	407c38 <__aeabi_dmul>
  40573c:	460b      	mov	r3, r1
  40573e:	4602      	mov	r2, r0
  405740:	4659      	mov	r1, fp
  405742:	4650      	mov	r0, sl
  405744:	f002 f8c4 	bl	4078d0 <__aeabi_dsub>
  405748:	9d04      	ldr	r5, [sp, #16]
  40574a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40574e:	702b      	strb	r3, [r5, #0]
  405750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405752:	2b01      	cmp	r3, #1
  405754:	4606      	mov	r6, r0
  405756:	460f      	mov	r7, r1
  405758:	f105 0501 	add.w	r5, r5, #1
  40575c:	d068      	beq.n	405830 <_dtoa_r+0x330>
  40575e:	2200      	movs	r2, #0
  405760:	4b18      	ldr	r3, [pc, #96]	; (4057c4 <_dtoa_r+0x2c4>)
  405762:	f002 fa69 	bl	407c38 <__aeabi_dmul>
  405766:	2200      	movs	r2, #0
  405768:	2300      	movs	r3, #0
  40576a:	4606      	mov	r6, r0
  40576c:	460f      	mov	r7, r1
  40576e:	f002 fccb 	bl	408108 <__aeabi_dcmpeq>
  405772:	2800      	cmp	r0, #0
  405774:	f040 8088 	bne.w	405888 <_dtoa_r+0x388>
  405778:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40577c:	f04f 0a00 	mov.w	sl, #0
  405780:	f8df b040 	ldr.w	fp, [pc, #64]	; 4057c4 <_dtoa_r+0x2c4>
  405784:	940c      	str	r4, [sp, #48]	; 0x30
  405786:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40578a:	e028      	b.n	4057de <_dtoa_r+0x2de>
  40578c:	f3af 8000 	nop.w
  405790:	636f4361 	.word	0x636f4361
  405794:	3fd287a7 	.word	0x3fd287a7
  405798:	8b60c8b3 	.word	0x8b60c8b3
  40579c:	3fc68a28 	.word	0x3fc68a28
  4057a0:	509f79fb 	.word	0x509f79fb
  4057a4:	3fd34413 	.word	0x3fd34413
  4057a8:	7ff00000 	.word	0x7ff00000
  4057ac:	00408fcd 	.word	0x00408fcd
  4057b0:	00408ff0 	.word	0x00408ff0
  4057b4:	00408ffc 	.word	0x00408ffc
  4057b8:	3ff80000 	.word	0x3ff80000
  4057bc:	00409028 	.word	0x00409028
  4057c0:	00408fcc 	.word	0x00408fcc
  4057c4:	40240000 	.word	0x40240000
  4057c8:	f002 fa36 	bl	407c38 <__aeabi_dmul>
  4057cc:	2200      	movs	r2, #0
  4057ce:	2300      	movs	r3, #0
  4057d0:	4606      	mov	r6, r0
  4057d2:	460f      	mov	r7, r1
  4057d4:	f002 fc98 	bl	408108 <__aeabi_dcmpeq>
  4057d8:	2800      	cmp	r0, #0
  4057da:	f040 83c1 	bne.w	405f60 <_dtoa_r+0xa60>
  4057de:	4642      	mov	r2, r8
  4057e0:	464b      	mov	r3, r9
  4057e2:	4630      	mov	r0, r6
  4057e4:	4639      	mov	r1, r7
  4057e6:	f002 fb51 	bl	407e8c <__aeabi_ddiv>
  4057ea:	f002 fcd5 	bl	408198 <__aeabi_d2iz>
  4057ee:	4604      	mov	r4, r0
  4057f0:	f002 f9bc 	bl	407b6c <__aeabi_i2d>
  4057f4:	4642      	mov	r2, r8
  4057f6:	464b      	mov	r3, r9
  4057f8:	f002 fa1e 	bl	407c38 <__aeabi_dmul>
  4057fc:	4602      	mov	r2, r0
  4057fe:	460b      	mov	r3, r1
  405800:	4630      	mov	r0, r6
  405802:	4639      	mov	r1, r7
  405804:	f002 f864 	bl	4078d0 <__aeabi_dsub>
  405808:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40580c:	9e04      	ldr	r6, [sp, #16]
  40580e:	f805 eb01 	strb.w	lr, [r5], #1
  405812:	eba5 0e06 	sub.w	lr, r5, r6
  405816:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405818:	45b6      	cmp	lr, r6
  40581a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40581e:	4652      	mov	r2, sl
  405820:	465b      	mov	r3, fp
  405822:	d1d1      	bne.n	4057c8 <_dtoa_r+0x2c8>
  405824:	46a0      	mov	r8, r4
  405826:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40582a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40582c:	4606      	mov	r6, r0
  40582e:	460f      	mov	r7, r1
  405830:	4632      	mov	r2, r6
  405832:	463b      	mov	r3, r7
  405834:	4630      	mov	r0, r6
  405836:	4639      	mov	r1, r7
  405838:	f002 f84c 	bl	4078d4 <__adddf3>
  40583c:	4606      	mov	r6, r0
  40583e:	460f      	mov	r7, r1
  405840:	4602      	mov	r2, r0
  405842:	460b      	mov	r3, r1
  405844:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405848:	f002 fc68 	bl	40811c <__aeabi_dcmplt>
  40584c:	b948      	cbnz	r0, 405862 <_dtoa_r+0x362>
  40584e:	4632      	mov	r2, r6
  405850:	463b      	mov	r3, r7
  405852:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405856:	f002 fc57 	bl	408108 <__aeabi_dcmpeq>
  40585a:	b1a8      	cbz	r0, 405888 <_dtoa_r+0x388>
  40585c:	f018 0f01 	tst.w	r8, #1
  405860:	d012      	beq.n	405888 <_dtoa_r+0x388>
  405862:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405866:	9a04      	ldr	r2, [sp, #16]
  405868:	1e6b      	subs	r3, r5, #1
  40586a:	e004      	b.n	405876 <_dtoa_r+0x376>
  40586c:	429a      	cmp	r2, r3
  40586e:	f000 8401 	beq.w	406074 <_dtoa_r+0xb74>
  405872:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405876:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40587a:	f103 0501 	add.w	r5, r3, #1
  40587e:	d0f5      	beq.n	40586c <_dtoa_r+0x36c>
  405880:	f108 0801 	add.w	r8, r8, #1
  405884:	f883 8000 	strb.w	r8, [r3]
  405888:	4649      	mov	r1, r9
  40588a:	4620      	mov	r0, r4
  40588c:	f001 f8c2 	bl	406a14 <_Bfree>
  405890:	2200      	movs	r2, #0
  405892:	9b02      	ldr	r3, [sp, #8]
  405894:	702a      	strb	r2, [r5, #0]
  405896:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405898:	3301      	adds	r3, #1
  40589a:	6013      	str	r3, [r2, #0]
  40589c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40589e:	2b00      	cmp	r3, #0
  4058a0:	f000 839e 	beq.w	405fe0 <_dtoa_r+0xae0>
  4058a4:	9804      	ldr	r0, [sp, #16]
  4058a6:	601d      	str	r5, [r3, #0]
  4058a8:	b01b      	add	sp, #108	; 0x6c
  4058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4058b0:	2a00      	cmp	r2, #0
  4058b2:	d03e      	beq.n	405932 <_dtoa_r+0x432>
  4058b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4058b6:	2a01      	cmp	r2, #1
  4058b8:	f340 8311 	ble.w	405ede <_dtoa_r+0x9de>
  4058bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4058c0:	1e5f      	subs	r7, r3, #1
  4058c2:	42ba      	cmp	r2, r7
  4058c4:	f2c0 838f 	blt.w	405fe6 <_dtoa_r+0xae6>
  4058c8:	1bd7      	subs	r7, r2, r7
  4058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058cc:	2b00      	cmp	r3, #0
  4058ce:	f2c0 848b 	blt.w	4061e8 <_dtoa_r+0xce8>
  4058d2:	9d08      	ldr	r5, [sp, #32]
  4058d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058d6:	9a08      	ldr	r2, [sp, #32]
  4058d8:	441a      	add	r2, r3
  4058da:	9208      	str	r2, [sp, #32]
  4058dc:	9a06      	ldr	r2, [sp, #24]
  4058de:	2101      	movs	r1, #1
  4058e0:	441a      	add	r2, r3
  4058e2:	4620      	mov	r0, r4
  4058e4:	9206      	str	r2, [sp, #24]
  4058e6:	f001 f92f 	bl	406b48 <__i2b>
  4058ea:	4606      	mov	r6, r0
  4058ec:	e024      	b.n	405938 <_dtoa_r+0x438>
  4058ee:	2301      	movs	r3, #1
  4058f0:	930e      	str	r3, [sp, #56]	; 0x38
  4058f2:	e6af      	b.n	405654 <_dtoa_r+0x154>
  4058f4:	9a08      	ldr	r2, [sp, #32]
  4058f6:	9b02      	ldr	r3, [sp, #8]
  4058f8:	1ad2      	subs	r2, r2, r3
  4058fa:	425b      	negs	r3, r3
  4058fc:	930c      	str	r3, [sp, #48]	; 0x30
  4058fe:	2300      	movs	r3, #0
  405900:	9208      	str	r2, [sp, #32]
  405902:	930d      	str	r3, [sp, #52]	; 0x34
  405904:	e6b8      	b.n	405678 <_dtoa_r+0x178>
  405906:	f1c7 0301 	rsb	r3, r7, #1
  40590a:	9308      	str	r3, [sp, #32]
  40590c:	2300      	movs	r3, #0
  40590e:	9306      	str	r3, [sp, #24]
  405910:	e6a7      	b.n	405662 <_dtoa_r+0x162>
  405912:	9d02      	ldr	r5, [sp, #8]
  405914:	4628      	mov	r0, r5
  405916:	f002 f929 	bl	407b6c <__aeabi_i2d>
  40591a:	4602      	mov	r2, r0
  40591c:	460b      	mov	r3, r1
  40591e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405922:	f002 fbf1 	bl	408108 <__aeabi_dcmpeq>
  405926:	2800      	cmp	r0, #0
  405928:	f47f ae80 	bne.w	40562c <_dtoa_r+0x12c>
  40592c:	1e6b      	subs	r3, r5, #1
  40592e:	9302      	str	r3, [sp, #8]
  405930:	e67c      	b.n	40562c <_dtoa_r+0x12c>
  405932:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405934:	9d08      	ldr	r5, [sp, #32]
  405936:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405938:	2d00      	cmp	r5, #0
  40593a:	dd0c      	ble.n	405956 <_dtoa_r+0x456>
  40593c:	9906      	ldr	r1, [sp, #24]
  40593e:	2900      	cmp	r1, #0
  405940:	460b      	mov	r3, r1
  405942:	dd08      	ble.n	405956 <_dtoa_r+0x456>
  405944:	42a9      	cmp	r1, r5
  405946:	9a08      	ldr	r2, [sp, #32]
  405948:	bfa8      	it	ge
  40594a:	462b      	movge	r3, r5
  40594c:	1ad2      	subs	r2, r2, r3
  40594e:	1aed      	subs	r5, r5, r3
  405950:	1acb      	subs	r3, r1, r3
  405952:	9208      	str	r2, [sp, #32]
  405954:	9306      	str	r3, [sp, #24]
  405956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405958:	b1d3      	cbz	r3, 405990 <_dtoa_r+0x490>
  40595a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40595c:	2b00      	cmp	r3, #0
  40595e:	f000 82b7 	beq.w	405ed0 <_dtoa_r+0x9d0>
  405962:	2f00      	cmp	r7, #0
  405964:	dd10      	ble.n	405988 <_dtoa_r+0x488>
  405966:	4631      	mov	r1, r6
  405968:	463a      	mov	r2, r7
  40596a:	4620      	mov	r0, r4
  40596c:	f001 f988 	bl	406c80 <__pow5mult>
  405970:	464a      	mov	r2, r9
  405972:	4601      	mov	r1, r0
  405974:	4606      	mov	r6, r0
  405976:	4620      	mov	r0, r4
  405978:	f001 f8f0 	bl	406b5c <__multiply>
  40597c:	4649      	mov	r1, r9
  40597e:	4680      	mov	r8, r0
  405980:	4620      	mov	r0, r4
  405982:	f001 f847 	bl	406a14 <_Bfree>
  405986:	46c1      	mov	r9, r8
  405988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40598a:	1bda      	subs	r2, r3, r7
  40598c:	f040 82a1 	bne.w	405ed2 <_dtoa_r+0x9d2>
  405990:	2101      	movs	r1, #1
  405992:	4620      	mov	r0, r4
  405994:	f001 f8d8 	bl	406b48 <__i2b>
  405998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40599a:	2b00      	cmp	r3, #0
  40599c:	4680      	mov	r8, r0
  40599e:	dd1c      	ble.n	4059da <_dtoa_r+0x4da>
  4059a0:	4601      	mov	r1, r0
  4059a2:	461a      	mov	r2, r3
  4059a4:	4620      	mov	r0, r4
  4059a6:	f001 f96b 	bl	406c80 <__pow5mult>
  4059aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059ac:	2b01      	cmp	r3, #1
  4059ae:	4680      	mov	r8, r0
  4059b0:	f340 8254 	ble.w	405e5c <_dtoa_r+0x95c>
  4059b4:	2300      	movs	r3, #0
  4059b6:	930c      	str	r3, [sp, #48]	; 0x30
  4059b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4059bc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4059c0:	6918      	ldr	r0, [r3, #16]
  4059c2:	f001 f871 	bl	406aa8 <__hi0bits>
  4059c6:	f1c0 0020 	rsb	r0, r0, #32
  4059ca:	e010      	b.n	4059ee <_dtoa_r+0x4ee>
  4059cc:	f1c3 0520 	rsb	r5, r3, #32
  4059d0:	fa0a f005 	lsl.w	r0, sl, r5
  4059d4:	e674      	b.n	4056c0 <_dtoa_r+0x1c0>
  4059d6:	900e      	str	r0, [sp, #56]	; 0x38
  4059d8:	e63c      	b.n	405654 <_dtoa_r+0x154>
  4059da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059dc:	2b01      	cmp	r3, #1
  4059de:	f340 8287 	ble.w	405ef0 <_dtoa_r+0x9f0>
  4059e2:	2300      	movs	r3, #0
  4059e4:	930c      	str	r3, [sp, #48]	; 0x30
  4059e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059e8:	2001      	movs	r0, #1
  4059ea:	2b00      	cmp	r3, #0
  4059ec:	d1e4      	bne.n	4059b8 <_dtoa_r+0x4b8>
  4059ee:	9a06      	ldr	r2, [sp, #24]
  4059f0:	4410      	add	r0, r2
  4059f2:	f010 001f 	ands.w	r0, r0, #31
  4059f6:	f000 80a1 	beq.w	405b3c <_dtoa_r+0x63c>
  4059fa:	f1c0 0320 	rsb	r3, r0, #32
  4059fe:	2b04      	cmp	r3, #4
  405a00:	f340 849e 	ble.w	406340 <_dtoa_r+0xe40>
  405a04:	9b08      	ldr	r3, [sp, #32]
  405a06:	f1c0 001c 	rsb	r0, r0, #28
  405a0a:	4403      	add	r3, r0
  405a0c:	9308      	str	r3, [sp, #32]
  405a0e:	4613      	mov	r3, r2
  405a10:	4403      	add	r3, r0
  405a12:	4405      	add	r5, r0
  405a14:	9306      	str	r3, [sp, #24]
  405a16:	9b08      	ldr	r3, [sp, #32]
  405a18:	2b00      	cmp	r3, #0
  405a1a:	dd05      	ble.n	405a28 <_dtoa_r+0x528>
  405a1c:	4649      	mov	r1, r9
  405a1e:	461a      	mov	r2, r3
  405a20:	4620      	mov	r0, r4
  405a22:	f001 f97d 	bl	406d20 <__lshift>
  405a26:	4681      	mov	r9, r0
  405a28:	9b06      	ldr	r3, [sp, #24]
  405a2a:	2b00      	cmp	r3, #0
  405a2c:	dd05      	ble.n	405a3a <_dtoa_r+0x53a>
  405a2e:	4641      	mov	r1, r8
  405a30:	461a      	mov	r2, r3
  405a32:	4620      	mov	r0, r4
  405a34:	f001 f974 	bl	406d20 <__lshift>
  405a38:	4680      	mov	r8, r0
  405a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a3c:	2b00      	cmp	r3, #0
  405a3e:	f040 8086 	bne.w	405b4e <_dtoa_r+0x64e>
  405a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a44:	2b00      	cmp	r3, #0
  405a46:	f340 8266 	ble.w	405f16 <_dtoa_r+0xa16>
  405a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a4c:	2b00      	cmp	r3, #0
  405a4e:	f000 8098 	beq.w	405b82 <_dtoa_r+0x682>
  405a52:	2d00      	cmp	r5, #0
  405a54:	dd05      	ble.n	405a62 <_dtoa_r+0x562>
  405a56:	4631      	mov	r1, r6
  405a58:	462a      	mov	r2, r5
  405a5a:	4620      	mov	r0, r4
  405a5c:	f001 f960 	bl	406d20 <__lshift>
  405a60:	4606      	mov	r6, r0
  405a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a64:	2b00      	cmp	r3, #0
  405a66:	f040 8337 	bne.w	4060d8 <_dtoa_r+0xbd8>
  405a6a:	9606      	str	r6, [sp, #24]
  405a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a6e:	9a04      	ldr	r2, [sp, #16]
  405a70:	f8dd b018 	ldr.w	fp, [sp, #24]
  405a74:	3b01      	subs	r3, #1
  405a76:	18d3      	adds	r3, r2, r3
  405a78:	930b      	str	r3, [sp, #44]	; 0x2c
  405a7a:	f00a 0301 	and.w	r3, sl, #1
  405a7e:	930c      	str	r3, [sp, #48]	; 0x30
  405a80:	4617      	mov	r7, r2
  405a82:	46c2      	mov	sl, r8
  405a84:	4651      	mov	r1, sl
  405a86:	4648      	mov	r0, r9
  405a88:	f7ff fca6 	bl	4053d8 <quorem>
  405a8c:	4631      	mov	r1, r6
  405a8e:	4605      	mov	r5, r0
  405a90:	4648      	mov	r0, r9
  405a92:	f001 f997 	bl	406dc4 <__mcmp>
  405a96:	465a      	mov	r2, fp
  405a98:	900a      	str	r0, [sp, #40]	; 0x28
  405a9a:	4651      	mov	r1, sl
  405a9c:	4620      	mov	r0, r4
  405a9e:	f001 f9ad 	bl	406dfc <__mdiff>
  405aa2:	68c2      	ldr	r2, [r0, #12]
  405aa4:	4680      	mov	r8, r0
  405aa6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405aaa:	2a00      	cmp	r2, #0
  405aac:	f040 822b 	bne.w	405f06 <_dtoa_r+0xa06>
  405ab0:	4601      	mov	r1, r0
  405ab2:	4648      	mov	r0, r9
  405ab4:	9308      	str	r3, [sp, #32]
  405ab6:	f001 f985 	bl	406dc4 <__mcmp>
  405aba:	4641      	mov	r1, r8
  405abc:	9006      	str	r0, [sp, #24]
  405abe:	4620      	mov	r0, r4
  405ac0:	f000 ffa8 	bl	406a14 <_Bfree>
  405ac4:	9a06      	ldr	r2, [sp, #24]
  405ac6:	9b08      	ldr	r3, [sp, #32]
  405ac8:	b932      	cbnz	r2, 405ad8 <_dtoa_r+0x5d8>
  405aca:	9924      	ldr	r1, [sp, #144]	; 0x90
  405acc:	b921      	cbnz	r1, 405ad8 <_dtoa_r+0x5d8>
  405ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405ad0:	2a00      	cmp	r2, #0
  405ad2:	f000 83ef 	beq.w	4062b4 <_dtoa_r+0xdb4>
  405ad6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
  405ada:	2900      	cmp	r1, #0
  405adc:	f2c0 829f 	blt.w	40601e <_dtoa_r+0xb1e>
  405ae0:	d105      	bne.n	405aee <_dtoa_r+0x5ee>
  405ae2:	9924      	ldr	r1, [sp, #144]	; 0x90
  405ae4:	b919      	cbnz	r1, 405aee <_dtoa_r+0x5ee>
  405ae6:	990c      	ldr	r1, [sp, #48]	; 0x30
  405ae8:	2900      	cmp	r1, #0
  405aea:	f000 8298 	beq.w	40601e <_dtoa_r+0xb1e>
  405aee:	2a00      	cmp	r2, #0
  405af0:	f300 8306 	bgt.w	406100 <_dtoa_r+0xc00>
  405af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405af6:	703b      	strb	r3, [r7, #0]
  405af8:	f107 0801 	add.w	r8, r7, #1
  405afc:	4297      	cmp	r7, r2
  405afe:	4645      	mov	r5, r8
  405b00:	f000 830c 	beq.w	40611c <_dtoa_r+0xc1c>
  405b04:	4649      	mov	r1, r9
  405b06:	2300      	movs	r3, #0
  405b08:	220a      	movs	r2, #10
  405b0a:	4620      	mov	r0, r4
  405b0c:	f000 ff8c 	bl	406a28 <__multadd>
  405b10:	455e      	cmp	r6, fp
  405b12:	4681      	mov	r9, r0
  405b14:	4631      	mov	r1, r6
  405b16:	f04f 0300 	mov.w	r3, #0
  405b1a:	f04f 020a 	mov.w	r2, #10
  405b1e:	4620      	mov	r0, r4
  405b20:	f000 81eb 	beq.w	405efa <_dtoa_r+0x9fa>
  405b24:	f000 ff80 	bl	406a28 <__multadd>
  405b28:	4659      	mov	r1, fp
  405b2a:	4606      	mov	r6, r0
  405b2c:	2300      	movs	r3, #0
  405b2e:	220a      	movs	r2, #10
  405b30:	4620      	mov	r0, r4
  405b32:	f000 ff79 	bl	406a28 <__multadd>
  405b36:	4647      	mov	r7, r8
  405b38:	4683      	mov	fp, r0
  405b3a:	e7a3      	b.n	405a84 <_dtoa_r+0x584>
  405b3c:	201c      	movs	r0, #28
  405b3e:	9b08      	ldr	r3, [sp, #32]
  405b40:	4403      	add	r3, r0
  405b42:	9308      	str	r3, [sp, #32]
  405b44:	9b06      	ldr	r3, [sp, #24]
  405b46:	4403      	add	r3, r0
  405b48:	4405      	add	r5, r0
  405b4a:	9306      	str	r3, [sp, #24]
  405b4c:	e763      	b.n	405a16 <_dtoa_r+0x516>
  405b4e:	4641      	mov	r1, r8
  405b50:	4648      	mov	r0, r9
  405b52:	f001 f937 	bl	406dc4 <__mcmp>
  405b56:	2800      	cmp	r0, #0
  405b58:	f6bf af73 	bge.w	405a42 <_dtoa_r+0x542>
  405b5c:	9f02      	ldr	r7, [sp, #8]
  405b5e:	4649      	mov	r1, r9
  405b60:	2300      	movs	r3, #0
  405b62:	220a      	movs	r2, #10
  405b64:	4620      	mov	r0, r4
  405b66:	3f01      	subs	r7, #1
  405b68:	9702      	str	r7, [sp, #8]
  405b6a:	f000 ff5d 	bl	406a28 <__multadd>
  405b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b70:	4681      	mov	r9, r0
  405b72:	2b00      	cmp	r3, #0
  405b74:	f040 83b6 	bne.w	4062e4 <_dtoa_r+0xde4>
  405b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405b7a:	2b00      	cmp	r3, #0
  405b7c:	f340 83bf 	ble.w	4062fe <_dtoa_r+0xdfe>
  405b80:	930a      	str	r3, [sp, #40]	; 0x28
  405b82:	f8dd b010 	ldr.w	fp, [sp, #16]
  405b86:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405b88:	465d      	mov	r5, fp
  405b8a:	e002      	b.n	405b92 <_dtoa_r+0x692>
  405b8c:	f000 ff4c 	bl	406a28 <__multadd>
  405b90:	4681      	mov	r9, r0
  405b92:	4641      	mov	r1, r8
  405b94:	4648      	mov	r0, r9
  405b96:	f7ff fc1f 	bl	4053d8 <quorem>
  405b9a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405b9e:	f805 ab01 	strb.w	sl, [r5], #1
  405ba2:	eba5 030b 	sub.w	r3, r5, fp
  405ba6:	42bb      	cmp	r3, r7
  405ba8:	f04f 020a 	mov.w	r2, #10
  405bac:	f04f 0300 	mov.w	r3, #0
  405bb0:	4649      	mov	r1, r9
  405bb2:	4620      	mov	r0, r4
  405bb4:	dbea      	blt.n	405b8c <_dtoa_r+0x68c>
  405bb6:	9b04      	ldr	r3, [sp, #16]
  405bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405bba:	2a01      	cmp	r2, #1
  405bbc:	bfac      	ite	ge
  405bbe:	189b      	addge	r3, r3, r2
  405bc0:	3301      	addlt	r3, #1
  405bc2:	461d      	mov	r5, r3
  405bc4:	f04f 0b00 	mov.w	fp, #0
  405bc8:	4649      	mov	r1, r9
  405bca:	2201      	movs	r2, #1
  405bcc:	4620      	mov	r0, r4
  405bce:	f001 f8a7 	bl	406d20 <__lshift>
  405bd2:	4641      	mov	r1, r8
  405bd4:	4681      	mov	r9, r0
  405bd6:	f001 f8f5 	bl	406dc4 <__mcmp>
  405bda:	2800      	cmp	r0, #0
  405bdc:	f340 823d 	ble.w	40605a <_dtoa_r+0xb5a>
  405be0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405be4:	9904      	ldr	r1, [sp, #16]
  405be6:	1e6b      	subs	r3, r5, #1
  405be8:	e004      	b.n	405bf4 <_dtoa_r+0x6f4>
  405bea:	428b      	cmp	r3, r1
  405bec:	f000 81ae 	beq.w	405f4c <_dtoa_r+0xa4c>
  405bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405bf4:	2a39      	cmp	r2, #57	; 0x39
  405bf6:	f103 0501 	add.w	r5, r3, #1
  405bfa:	d0f6      	beq.n	405bea <_dtoa_r+0x6ea>
  405bfc:	3201      	adds	r2, #1
  405bfe:	701a      	strb	r2, [r3, #0]
  405c00:	4641      	mov	r1, r8
  405c02:	4620      	mov	r0, r4
  405c04:	f000 ff06 	bl	406a14 <_Bfree>
  405c08:	2e00      	cmp	r6, #0
  405c0a:	f43f ae3d 	beq.w	405888 <_dtoa_r+0x388>
  405c0e:	f1bb 0f00 	cmp.w	fp, #0
  405c12:	d005      	beq.n	405c20 <_dtoa_r+0x720>
  405c14:	45b3      	cmp	fp, r6
  405c16:	d003      	beq.n	405c20 <_dtoa_r+0x720>
  405c18:	4659      	mov	r1, fp
  405c1a:	4620      	mov	r0, r4
  405c1c:	f000 fefa 	bl	406a14 <_Bfree>
  405c20:	4631      	mov	r1, r6
  405c22:	4620      	mov	r0, r4
  405c24:	f000 fef6 	bl	406a14 <_Bfree>
  405c28:	e62e      	b.n	405888 <_dtoa_r+0x388>
  405c2a:	2300      	movs	r3, #0
  405c2c:	930b      	str	r3, [sp, #44]	; 0x2c
  405c2e:	9b02      	ldr	r3, [sp, #8]
  405c30:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405c32:	4413      	add	r3, r2
  405c34:	930f      	str	r3, [sp, #60]	; 0x3c
  405c36:	3301      	adds	r3, #1
  405c38:	2b01      	cmp	r3, #1
  405c3a:	461f      	mov	r7, r3
  405c3c:	461e      	mov	r6, r3
  405c3e:	930a      	str	r3, [sp, #40]	; 0x28
  405c40:	bfb8      	it	lt
  405c42:	2701      	movlt	r7, #1
  405c44:	2100      	movs	r1, #0
  405c46:	2f17      	cmp	r7, #23
  405c48:	6461      	str	r1, [r4, #68]	; 0x44
  405c4a:	d90a      	bls.n	405c62 <_dtoa_r+0x762>
  405c4c:	2201      	movs	r2, #1
  405c4e:	2304      	movs	r3, #4
  405c50:	005b      	lsls	r3, r3, #1
  405c52:	f103 0014 	add.w	r0, r3, #20
  405c56:	4287      	cmp	r7, r0
  405c58:	4611      	mov	r1, r2
  405c5a:	f102 0201 	add.w	r2, r2, #1
  405c5e:	d2f7      	bcs.n	405c50 <_dtoa_r+0x750>
  405c60:	6461      	str	r1, [r4, #68]	; 0x44
  405c62:	4620      	mov	r0, r4
  405c64:	f000 feb0 	bl	4069c8 <_Balloc>
  405c68:	2e0e      	cmp	r6, #14
  405c6a:	9004      	str	r0, [sp, #16]
  405c6c:	6420      	str	r0, [r4, #64]	; 0x40
  405c6e:	f63f ad41 	bhi.w	4056f4 <_dtoa_r+0x1f4>
  405c72:	2d00      	cmp	r5, #0
  405c74:	f43f ad3e 	beq.w	4056f4 <_dtoa_r+0x1f4>
  405c78:	9902      	ldr	r1, [sp, #8]
  405c7a:	2900      	cmp	r1, #0
  405c7c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405c80:	f340 8202 	ble.w	406088 <_dtoa_r+0xb88>
  405c84:	4bb8      	ldr	r3, [pc, #736]	; (405f68 <_dtoa_r+0xa68>)
  405c86:	f001 020f 	and.w	r2, r1, #15
  405c8a:	110d      	asrs	r5, r1, #4
  405c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405c90:	06e9      	lsls	r1, r5, #27
  405c92:	e9d3 6700 	ldrd	r6, r7, [r3]
  405c96:	f140 81ae 	bpl.w	405ff6 <_dtoa_r+0xaf6>
  405c9a:	4bb4      	ldr	r3, [pc, #720]	; (405f6c <_dtoa_r+0xa6c>)
  405c9c:	4650      	mov	r0, sl
  405c9e:	4659      	mov	r1, fp
  405ca0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405ca4:	f002 f8f2 	bl	407e8c <__aeabi_ddiv>
  405ca8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405cac:	f005 050f 	and.w	r5, r5, #15
  405cb0:	f04f 0a03 	mov.w	sl, #3
  405cb4:	b18d      	cbz	r5, 405cda <_dtoa_r+0x7da>
  405cb6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405f6c <_dtoa_r+0xa6c>
  405cba:	07ea      	lsls	r2, r5, #31
  405cbc:	d509      	bpl.n	405cd2 <_dtoa_r+0x7d2>
  405cbe:	4630      	mov	r0, r6
  405cc0:	4639      	mov	r1, r7
  405cc2:	e9d8 2300 	ldrd	r2, r3, [r8]
  405cc6:	f001 ffb7 	bl	407c38 <__aeabi_dmul>
  405cca:	f10a 0a01 	add.w	sl, sl, #1
  405cce:	4606      	mov	r6, r0
  405cd0:	460f      	mov	r7, r1
  405cd2:	106d      	asrs	r5, r5, #1
  405cd4:	f108 0808 	add.w	r8, r8, #8
  405cd8:	d1ef      	bne.n	405cba <_dtoa_r+0x7ba>
  405cda:	463b      	mov	r3, r7
  405cdc:	4632      	mov	r2, r6
  405cde:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405ce2:	f002 f8d3 	bl	407e8c <__aeabi_ddiv>
  405ce6:	4607      	mov	r7, r0
  405ce8:	4688      	mov	r8, r1
  405cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cec:	b143      	cbz	r3, 405d00 <_dtoa_r+0x800>
  405cee:	2200      	movs	r2, #0
  405cf0:	4b9f      	ldr	r3, [pc, #636]	; (405f70 <_dtoa_r+0xa70>)
  405cf2:	4638      	mov	r0, r7
  405cf4:	4641      	mov	r1, r8
  405cf6:	f002 fa11 	bl	40811c <__aeabi_dcmplt>
  405cfa:	2800      	cmp	r0, #0
  405cfc:	f040 8286 	bne.w	40620c <_dtoa_r+0xd0c>
  405d00:	4650      	mov	r0, sl
  405d02:	f001 ff33 	bl	407b6c <__aeabi_i2d>
  405d06:	463a      	mov	r2, r7
  405d08:	4643      	mov	r3, r8
  405d0a:	f001 ff95 	bl	407c38 <__aeabi_dmul>
  405d0e:	4b99      	ldr	r3, [pc, #612]	; (405f74 <_dtoa_r+0xa74>)
  405d10:	2200      	movs	r2, #0
  405d12:	f001 fddf 	bl	4078d4 <__adddf3>
  405d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d18:	4605      	mov	r5, r0
  405d1a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405d1e:	2b00      	cmp	r3, #0
  405d20:	f000 813e 	beq.w	405fa0 <_dtoa_r+0xaa0>
  405d24:	9b02      	ldr	r3, [sp, #8]
  405d26:	9315      	str	r3, [sp, #84]	; 0x54
  405d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d2a:	9312      	str	r3, [sp, #72]	; 0x48
  405d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405d2e:	2b00      	cmp	r3, #0
  405d30:	f000 81fa 	beq.w	406128 <_dtoa_r+0xc28>
  405d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d36:	4b8c      	ldr	r3, [pc, #560]	; (405f68 <_dtoa_r+0xa68>)
  405d38:	498f      	ldr	r1, [pc, #572]	; (405f78 <_dtoa_r+0xa78>)
  405d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405d3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405d42:	2000      	movs	r0, #0
  405d44:	f002 f8a2 	bl	407e8c <__aeabi_ddiv>
  405d48:	462a      	mov	r2, r5
  405d4a:	4633      	mov	r3, r6
  405d4c:	f001 fdc0 	bl	4078d0 <__aeabi_dsub>
  405d50:	4682      	mov	sl, r0
  405d52:	468b      	mov	fp, r1
  405d54:	4638      	mov	r0, r7
  405d56:	4641      	mov	r1, r8
  405d58:	f002 fa1e 	bl	408198 <__aeabi_d2iz>
  405d5c:	4605      	mov	r5, r0
  405d5e:	f001 ff05 	bl	407b6c <__aeabi_i2d>
  405d62:	4602      	mov	r2, r0
  405d64:	460b      	mov	r3, r1
  405d66:	4638      	mov	r0, r7
  405d68:	4641      	mov	r1, r8
  405d6a:	f001 fdb1 	bl	4078d0 <__aeabi_dsub>
  405d6e:	3530      	adds	r5, #48	; 0x30
  405d70:	fa5f f885 	uxtb.w	r8, r5
  405d74:	9d04      	ldr	r5, [sp, #16]
  405d76:	4606      	mov	r6, r0
  405d78:	460f      	mov	r7, r1
  405d7a:	f885 8000 	strb.w	r8, [r5]
  405d7e:	4602      	mov	r2, r0
  405d80:	460b      	mov	r3, r1
  405d82:	4650      	mov	r0, sl
  405d84:	4659      	mov	r1, fp
  405d86:	3501      	adds	r5, #1
  405d88:	f002 f9e6 	bl	408158 <__aeabi_dcmpgt>
  405d8c:	2800      	cmp	r0, #0
  405d8e:	d154      	bne.n	405e3a <_dtoa_r+0x93a>
  405d90:	4632      	mov	r2, r6
  405d92:	463b      	mov	r3, r7
  405d94:	2000      	movs	r0, #0
  405d96:	4976      	ldr	r1, [pc, #472]	; (405f70 <_dtoa_r+0xa70>)
  405d98:	f001 fd9a 	bl	4078d0 <__aeabi_dsub>
  405d9c:	4602      	mov	r2, r0
  405d9e:	460b      	mov	r3, r1
  405da0:	4650      	mov	r0, sl
  405da2:	4659      	mov	r1, fp
  405da4:	f002 f9d8 	bl	408158 <__aeabi_dcmpgt>
  405da8:	2800      	cmp	r0, #0
  405daa:	f040 8270 	bne.w	40628e <_dtoa_r+0xd8e>
  405dae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405db0:	2a01      	cmp	r2, #1
  405db2:	f000 8111 	beq.w	405fd8 <_dtoa_r+0xad8>
  405db6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405db8:	9a04      	ldr	r2, [sp, #16]
  405dba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405dbe:	4413      	add	r3, r2
  405dc0:	4699      	mov	r9, r3
  405dc2:	e00d      	b.n	405de0 <_dtoa_r+0x8e0>
  405dc4:	2000      	movs	r0, #0
  405dc6:	496a      	ldr	r1, [pc, #424]	; (405f70 <_dtoa_r+0xa70>)
  405dc8:	f001 fd82 	bl	4078d0 <__aeabi_dsub>
  405dcc:	4652      	mov	r2, sl
  405dce:	465b      	mov	r3, fp
  405dd0:	f002 f9a4 	bl	40811c <__aeabi_dcmplt>
  405dd4:	2800      	cmp	r0, #0
  405dd6:	f040 8258 	bne.w	40628a <_dtoa_r+0xd8a>
  405dda:	454d      	cmp	r5, r9
  405ddc:	f000 80fa 	beq.w	405fd4 <_dtoa_r+0xad4>
  405de0:	4650      	mov	r0, sl
  405de2:	4659      	mov	r1, fp
  405de4:	2200      	movs	r2, #0
  405de6:	4b65      	ldr	r3, [pc, #404]	; (405f7c <_dtoa_r+0xa7c>)
  405de8:	f001 ff26 	bl	407c38 <__aeabi_dmul>
  405dec:	2200      	movs	r2, #0
  405dee:	4b63      	ldr	r3, [pc, #396]	; (405f7c <_dtoa_r+0xa7c>)
  405df0:	4682      	mov	sl, r0
  405df2:	468b      	mov	fp, r1
  405df4:	4630      	mov	r0, r6
  405df6:	4639      	mov	r1, r7
  405df8:	f001 ff1e 	bl	407c38 <__aeabi_dmul>
  405dfc:	460f      	mov	r7, r1
  405dfe:	4606      	mov	r6, r0
  405e00:	f002 f9ca 	bl	408198 <__aeabi_d2iz>
  405e04:	4680      	mov	r8, r0
  405e06:	f001 feb1 	bl	407b6c <__aeabi_i2d>
  405e0a:	4602      	mov	r2, r0
  405e0c:	460b      	mov	r3, r1
  405e0e:	4630      	mov	r0, r6
  405e10:	4639      	mov	r1, r7
  405e12:	f001 fd5d 	bl	4078d0 <__aeabi_dsub>
  405e16:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405e1a:	fa5f f888 	uxtb.w	r8, r8
  405e1e:	4652      	mov	r2, sl
  405e20:	465b      	mov	r3, fp
  405e22:	f805 8b01 	strb.w	r8, [r5], #1
  405e26:	4606      	mov	r6, r0
  405e28:	460f      	mov	r7, r1
  405e2a:	f002 f977 	bl	40811c <__aeabi_dcmplt>
  405e2e:	4632      	mov	r2, r6
  405e30:	463b      	mov	r3, r7
  405e32:	2800      	cmp	r0, #0
  405e34:	d0c6      	beq.n	405dc4 <_dtoa_r+0x8c4>
  405e36:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405e3c:	9302      	str	r3, [sp, #8]
  405e3e:	e523      	b.n	405888 <_dtoa_r+0x388>
  405e40:	2300      	movs	r3, #0
  405e42:	930b      	str	r3, [sp, #44]	; 0x2c
  405e44:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e46:	2b00      	cmp	r3, #0
  405e48:	f340 80dc 	ble.w	406004 <_dtoa_r+0xb04>
  405e4c:	461f      	mov	r7, r3
  405e4e:	461e      	mov	r6, r3
  405e50:	930f      	str	r3, [sp, #60]	; 0x3c
  405e52:	930a      	str	r3, [sp, #40]	; 0x28
  405e54:	e6f6      	b.n	405c44 <_dtoa_r+0x744>
  405e56:	2301      	movs	r3, #1
  405e58:	930b      	str	r3, [sp, #44]	; 0x2c
  405e5a:	e7f3      	b.n	405e44 <_dtoa_r+0x944>
  405e5c:	f1ba 0f00 	cmp.w	sl, #0
  405e60:	f47f ada8 	bne.w	4059b4 <_dtoa_r+0x4b4>
  405e64:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405e68:	2b00      	cmp	r3, #0
  405e6a:	f47f adba 	bne.w	4059e2 <_dtoa_r+0x4e2>
  405e6e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405e72:	0d3f      	lsrs	r7, r7, #20
  405e74:	053f      	lsls	r7, r7, #20
  405e76:	2f00      	cmp	r7, #0
  405e78:	f000 820d 	beq.w	406296 <_dtoa_r+0xd96>
  405e7c:	9b08      	ldr	r3, [sp, #32]
  405e7e:	3301      	adds	r3, #1
  405e80:	9308      	str	r3, [sp, #32]
  405e82:	9b06      	ldr	r3, [sp, #24]
  405e84:	3301      	adds	r3, #1
  405e86:	9306      	str	r3, [sp, #24]
  405e88:	2301      	movs	r3, #1
  405e8a:	930c      	str	r3, [sp, #48]	; 0x30
  405e8c:	e5ab      	b.n	4059e6 <_dtoa_r+0x4e6>
  405e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e90:	2b00      	cmp	r3, #0
  405e92:	f73f ac42 	bgt.w	40571a <_dtoa_r+0x21a>
  405e96:	f040 8221 	bne.w	4062dc <_dtoa_r+0xddc>
  405e9a:	2200      	movs	r2, #0
  405e9c:	4b38      	ldr	r3, [pc, #224]	; (405f80 <_dtoa_r+0xa80>)
  405e9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405ea2:	f001 fec9 	bl	407c38 <__aeabi_dmul>
  405ea6:	4652      	mov	r2, sl
  405ea8:	465b      	mov	r3, fp
  405eaa:	f002 f94b 	bl	408144 <__aeabi_dcmpge>
  405eae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405eb2:	4646      	mov	r6, r8
  405eb4:	2800      	cmp	r0, #0
  405eb6:	d041      	beq.n	405f3c <_dtoa_r+0xa3c>
  405eb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405eba:	9d04      	ldr	r5, [sp, #16]
  405ebc:	43db      	mvns	r3, r3
  405ebe:	9302      	str	r3, [sp, #8]
  405ec0:	4641      	mov	r1, r8
  405ec2:	4620      	mov	r0, r4
  405ec4:	f000 fda6 	bl	406a14 <_Bfree>
  405ec8:	2e00      	cmp	r6, #0
  405eca:	f43f acdd 	beq.w	405888 <_dtoa_r+0x388>
  405ece:	e6a7      	b.n	405c20 <_dtoa_r+0x720>
  405ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405ed2:	4649      	mov	r1, r9
  405ed4:	4620      	mov	r0, r4
  405ed6:	f000 fed3 	bl	406c80 <__pow5mult>
  405eda:	4681      	mov	r9, r0
  405edc:	e558      	b.n	405990 <_dtoa_r+0x490>
  405ede:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405ee0:	2a00      	cmp	r2, #0
  405ee2:	f000 8187 	beq.w	4061f4 <_dtoa_r+0xcf4>
  405ee6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405eea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405eec:	9d08      	ldr	r5, [sp, #32]
  405eee:	e4f2      	b.n	4058d6 <_dtoa_r+0x3d6>
  405ef0:	f1ba 0f00 	cmp.w	sl, #0
  405ef4:	f47f ad75 	bne.w	4059e2 <_dtoa_r+0x4e2>
  405ef8:	e7b4      	b.n	405e64 <_dtoa_r+0x964>
  405efa:	f000 fd95 	bl	406a28 <__multadd>
  405efe:	4647      	mov	r7, r8
  405f00:	4606      	mov	r6, r0
  405f02:	4683      	mov	fp, r0
  405f04:	e5be      	b.n	405a84 <_dtoa_r+0x584>
  405f06:	4601      	mov	r1, r0
  405f08:	4620      	mov	r0, r4
  405f0a:	9306      	str	r3, [sp, #24]
  405f0c:	f000 fd82 	bl	406a14 <_Bfree>
  405f10:	2201      	movs	r2, #1
  405f12:	9b06      	ldr	r3, [sp, #24]
  405f14:	e5e0      	b.n	405ad8 <_dtoa_r+0x5d8>
  405f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f18:	2b02      	cmp	r3, #2
  405f1a:	f77f ad96 	ble.w	405a4a <_dtoa_r+0x54a>
  405f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f20:	2b00      	cmp	r3, #0
  405f22:	d1c9      	bne.n	405eb8 <_dtoa_r+0x9b8>
  405f24:	4641      	mov	r1, r8
  405f26:	2205      	movs	r2, #5
  405f28:	4620      	mov	r0, r4
  405f2a:	f000 fd7d 	bl	406a28 <__multadd>
  405f2e:	4601      	mov	r1, r0
  405f30:	4680      	mov	r8, r0
  405f32:	4648      	mov	r0, r9
  405f34:	f000 ff46 	bl	406dc4 <__mcmp>
  405f38:	2800      	cmp	r0, #0
  405f3a:	ddbd      	ble.n	405eb8 <_dtoa_r+0x9b8>
  405f3c:	9a02      	ldr	r2, [sp, #8]
  405f3e:	9904      	ldr	r1, [sp, #16]
  405f40:	2331      	movs	r3, #49	; 0x31
  405f42:	3201      	adds	r2, #1
  405f44:	9202      	str	r2, [sp, #8]
  405f46:	700b      	strb	r3, [r1, #0]
  405f48:	1c4d      	adds	r5, r1, #1
  405f4a:	e7b9      	b.n	405ec0 <_dtoa_r+0x9c0>
  405f4c:	9a02      	ldr	r2, [sp, #8]
  405f4e:	3201      	adds	r2, #1
  405f50:	9202      	str	r2, [sp, #8]
  405f52:	9a04      	ldr	r2, [sp, #16]
  405f54:	2331      	movs	r3, #49	; 0x31
  405f56:	7013      	strb	r3, [r2, #0]
  405f58:	e652      	b.n	405c00 <_dtoa_r+0x700>
  405f5a:	2301      	movs	r3, #1
  405f5c:	930b      	str	r3, [sp, #44]	; 0x2c
  405f5e:	e666      	b.n	405c2e <_dtoa_r+0x72e>
  405f60:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405f64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405f66:	e48f      	b.n	405888 <_dtoa_r+0x388>
  405f68:	00409028 	.word	0x00409028
  405f6c:	00409000 	.word	0x00409000
  405f70:	3ff00000 	.word	0x3ff00000
  405f74:	401c0000 	.word	0x401c0000
  405f78:	3fe00000 	.word	0x3fe00000
  405f7c:	40240000 	.word	0x40240000
  405f80:	40140000 	.word	0x40140000
  405f84:	4650      	mov	r0, sl
  405f86:	f001 fdf1 	bl	407b6c <__aeabi_i2d>
  405f8a:	463a      	mov	r2, r7
  405f8c:	4643      	mov	r3, r8
  405f8e:	f001 fe53 	bl	407c38 <__aeabi_dmul>
  405f92:	2200      	movs	r2, #0
  405f94:	4bc1      	ldr	r3, [pc, #772]	; (40629c <_dtoa_r+0xd9c>)
  405f96:	f001 fc9d 	bl	4078d4 <__adddf3>
  405f9a:	4605      	mov	r5, r0
  405f9c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405fa0:	4641      	mov	r1, r8
  405fa2:	2200      	movs	r2, #0
  405fa4:	4bbe      	ldr	r3, [pc, #760]	; (4062a0 <_dtoa_r+0xda0>)
  405fa6:	4638      	mov	r0, r7
  405fa8:	f001 fc92 	bl	4078d0 <__aeabi_dsub>
  405fac:	462a      	mov	r2, r5
  405fae:	4633      	mov	r3, r6
  405fb0:	4682      	mov	sl, r0
  405fb2:	468b      	mov	fp, r1
  405fb4:	f002 f8d0 	bl	408158 <__aeabi_dcmpgt>
  405fb8:	4680      	mov	r8, r0
  405fba:	2800      	cmp	r0, #0
  405fbc:	f040 8110 	bne.w	4061e0 <_dtoa_r+0xce0>
  405fc0:	462a      	mov	r2, r5
  405fc2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405fc6:	4650      	mov	r0, sl
  405fc8:	4659      	mov	r1, fp
  405fca:	f002 f8a7 	bl	40811c <__aeabi_dcmplt>
  405fce:	b118      	cbz	r0, 405fd8 <_dtoa_r+0xad8>
  405fd0:	4646      	mov	r6, r8
  405fd2:	e771      	b.n	405eb8 <_dtoa_r+0x9b8>
  405fd4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405fd8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405fdc:	f7ff bb8a 	b.w	4056f4 <_dtoa_r+0x1f4>
  405fe0:	9804      	ldr	r0, [sp, #16]
  405fe2:	f7ff babb 	b.w	40555c <_dtoa_r+0x5c>
  405fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405fea:	970c      	str	r7, [sp, #48]	; 0x30
  405fec:	1afb      	subs	r3, r7, r3
  405fee:	441a      	add	r2, r3
  405ff0:	920d      	str	r2, [sp, #52]	; 0x34
  405ff2:	2700      	movs	r7, #0
  405ff4:	e469      	b.n	4058ca <_dtoa_r+0x3ca>
  405ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405ffa:	f04f 0a02 	mov.w	sl, #2
  405ffe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406002:	e657      	b.n	405cb4 <_dtoa_r+0x7b4>
  406004:	2100      	movs	r1, #0
  406006:	2301      	movs	r3, #1
  406008:	6461      	str	r1, [r4, #68]	; 0x44
  40600a:	4620      	mov	r0, r4
  40600c:	9325      	str	r3, [sp, #148]	; 0x94
  40600e:	f000 fcdb 	bl	4069c8 <_Balloc>
  406012:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406014:	9004      	str	r0, [sp, #16]
  406016:	6420      	str	r0, [r4, #64]	; 0x40
  406018:	930a      	str	r3, [sp, #40]	; 0x28
  40601a:	930f      	str	r3, [sp, #60]	; 0x3c
  40601c:	e629      	b.n	405c72 <_dtoa_r+0x772>
  40601e:	2a00      	cmp	r2, #0
  406020:	46d0      	mov	r8, sl
  406022:	f8cd b018 	str.w	fp, [sp, #24]
  406026:	469a      	mov	sl, r3
  406028:	dd11      	ble.n	40604e <_dtoa_r+0xb4e>
  40602a:	4649      	mov	r1, r9
  40602c:	2201      	movs	r2, #1
  40602e:	4620      	mov	r0, r4
  406030:	f000 fe76 	bl	406d20 <__lshift>
  406034:	4641      	mov	r1, r8
  406036:	4681      	mov	r9, r0
  406038:	f000 fec4 	bl	406dc4 <__mcmp>
  40603c:	2800      	cmp	r0, #0
  40603e:	f340 8146 	ble.w	4062ce <_dtoa_r+0xdce>
  406042:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406046:	f000 8106 	beq.w	406256 <_dtoa_r+0xd56>
  40604a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40604e:	46b3      	mov	fp, r6
  406050:	f887 a000 	strb.w	sl, [r7]
  406054:	1c7d      	adds	r5, r7, #1
  406056:	9e06      	ldr	r6, [sp, #24]
  406058:	e5d2      	b.n	405c00 <_dtoa_r+0x700>
  40605a:	d104      	bne.n	406066 <_dtoa_r+0xb66>
  40605c:	f01a 0f01 	tst.w	sl, #1
  406060:	d001      	beq.n	406066 <_dtoa_r+0xb66>
  406062:	e5bd      	b.n	405be0 <_dtoa_r+0x6e0>
  406064:	4615      	mov	r5, r2
  406066:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40606a:	2b30      	cmp	r3, #48	; 0x30
  40606c:	f105 32ff 	add.w	r2, r5, #4294967295
  406070:	d0f8      	beq.n	406064 <_dtoa_r+0xb64>
  406072:	e5c5      	b.n	405c00 <_dtoa_r+0x700>
  406074:	9904      	ldr	r1, [sp, #16]
  406076:	2230      	movs	r2, #48	; 0x30
  406078:	700a      	strb	r2, [r1, #0]
  40607a:	9a02      	ldr	r2, [sp, #8]
  40607c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406080:	3201      	adds	r2, #1
  406082:	9202      	str	r2, [sp, #8]
  406084:	f7ff bbfc 	b.w	405880 <_dtoa_r+0x380>
  406088:	f000 80bb 	beq.w	406202 <_dtoa_r+0xd02>
  40608c:	9b02      	ldr	r3, [sp, #8]
  40608e:	425d      	negs	r5, r3
  406090:	4b84      	ldr	r3, [pc, #528]	; (4062a4 <_dtoa_r+0xda4>)
  406092:	f005 020f 	and.w	r2, r5, #15
  406096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40609a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40609e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4060a2:	f001 fdc9 	bl	407c38 <__aeabi_dmul>
  4060a6:	112d      	asrs	r5, r5, #4
  4060a8:	4607      	mov	r7, r0
  4060aa:	4688      	mov	r8, r1
  4060ac:	f000 812c 	beq.w	406308 <_dtoa_r+0xe08>
  4060b0:	4e7d      	ldr	r6, [pc, #500]	; (4062a8 <_dtoa_r+0xda8>)
  4060b2:	f04f 0a02 	mov.w	sl, #2
  4060b6:	07eb      	lsls	r3, r5, #31
  4060b8:	d509      	bpl.n	4060ce <_dtoa_r+0xbce>
  4060ba:	4638      	mov	r0, r7
  4060bc:	4641      	mov	r1, r8
  4060be:	e9d6 2300 	ldrd	r2, r3, [r6]
  4060c2:	f001 fdb9 	bl	407c38 <__aeabi_dmul>
  4060c6:	f10a 0a01 	add.w	sl, sl, #1
  4060ca:	4607      	mov	r7, r0
  4060cc:	4688      	mov	r8, r1
  4060ce:	106d      	asrs	r5, r5, #1
  4060d0:	f106 0608 	add.w	r6, r6, #8
  4060d4:	d1ef      	bne.n	4060b6 <_dtoa_r+0xbb6>
  4060d6:	e608      	b.n	405cea <_dtoa_r+0x7ea>
  4060d8:	6871      	ldr	r1, [r6, #4]
  4060da:	4620      	mov	r0, r4
  4060dc:	f000 fc74 	bl	4069c8 <_Balloc>
  4060e0:	6933      	ldr	r3, [r6, #16]
  4060e2:	3302      	adds	r3, #2
  4060e4:	009a      	lsls	r2, r3, #2
  4060e6:	4605      	mov	r5, r0
  4060e8:	f106 010c 	add.w	r1, r6, #12
  4060ec:	300c      	adds	r0, #12
  4060ee:	f7fd fdab 	bl	403c48 <memcpy>
  4060f2:	4629      	mov	r1, r5
  4060f4:	2201      	movs	r2, #1
  4060f6:	4620      	mov	r0, r4
  4060f8:	f000 fe12 	bl	406d20 <__lshift>
  4060fc:	9006      	str	r0, [sp, #24]
  4060fe:	e4b5      	b.n	405a6c <_dtoa_r+0x56c>
  406100:	2b39      	cmp	r3, #57	; 0x39
  406102:	f8cd b018 	str.w	fp, [sp, #24]
  406106:	46d0      	mov	r8, sl
  406108:	f000 80a5 	beq.w	406256 <_dtoa_r+0xd56>
  40610c:	f103 0a01 	add.w	sl, r3, #1
  406110:	46b3      	mov	fp, r6
  406112:	f887 a000 	strb.w	sl, [r7]
  406116:	1c7d      	adds	r5, r7, #1
  406118:	9e06      	ldr	r6, [sp, #24]
  40611a:	e571      	b.n	405c00 <_dtoa_r+0x700>
  40611c:	465a      	mov	r2, fp
  40611e:	46d0      	mov	r8, sl
  406120:	46b3      	mov	fp, r6
  406122:	469a      	mov	sl, r3
  406124:	4616      	mov	r6, r2
  406126:	e54f      	b.n	405bc8 <_dtoa_r+0x6c8>
  406128:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40612a:	495e      	ldr	r1, [pc, #376]	; (4062a4 <_dtoa_r+0xda4>)
  40612c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406130:	462a      	mov	r2, r5
  406132:	4633      	mov	r3, r6
  406134:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406138:	f001 fd7e 	bl	407c38 <__aeabi_dmul>
  40613c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406140:	4638      	mov	r0, r7
  406142:	4641      	mov	r1, r8
  406144:	f002 f828 	bl	408198 <__aeabi_d2iz>
  406148:	4605      	mov	r5, r0
  40614a:	f001 fd0f 	bl	407b6c <__aeabi_i2d>
  40614e:	460b      	mov	r3, r1
  406150:	4602      	mov	r2, r0
  406152:	4641      	mov	r1, r8
  406154:	4638      	mov	r0, r7
  406156:	f001 fbbb 	bl	4078d0 <__aeabi_dsub>
  40615a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40615c:	460f      	mov	r7, r1
  40615e:	9904      	ldr	r1, [sp, #16]
  406160:	3530      	adds	r5, #48	; 0x30
  406162:	2b01      	cmp	r3, #1
  406164:	700d      	strb	r5, [r1, #0]
  406166:	4606      	mov	r6, r0
  406168:	f101 0501 	add.w	r5, r1, #1
  40616c:	d026      	beq.n	4061bc <_dtoa_r+0xcbc>
  40616e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406170:	9a04      	ldr	r2, [sp, #16]
  406172:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4062b0 <_dtoa_r+0xdb0>
  406176:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40617a:	4413      	add	r3, r2
  40617c:	f04f 0a00 	mov.w	sl, #0
  406180:	4699      	mov	r9, r3
  406182:	4652      	mov	r2, sl
  406184:	465b      	mov	r3, fp
  406186:	4630      	mov	r0, r6
  406188:	4639      	mov	r1, r7
  40618a:	f001 fd55 	bl	407c38 <__aeabi_dmul>
  40618e:	460f      	mov	r7, r1
  406190:	4606      	mov	r6, r0
  406192:	f002 f801 	bl	408198 <__aeabi_d2iz>
  406196:	4680      	mov	r8, r0
  406198:	f001 fce8 	bl	407b6c <__aeabi_i2d>
  40619c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4061a0:	4602      	mov	r2, r0
  4061a2:	460b      	mov	r3, r1
  4061a4:	4630      	mov	r0, r6
  4061a6:	4639      	mov	r1, r7
  4061a8:	f001 fb92 	bl	4078d0 <__aeabi_dsub>
  4061ac:	f805 8b01 	strb.w	r8, [r5], #1
  4061b0:	454d      	cmp	r5, r9
  4061b2:	4606      	mov	r6, r0
  4061b4:	460f      	mov	r7, r1
  4061b6:	d1e4      	bne.n	406182 <_dtoa_r+0xc82>
  4061b8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4061bc:	4b3b      	ldr	r3, [pc, #236]	; (4062ac <_dtoa_r+0xdac>)
  4061be:	2200      	movs	r2, #0
  4061c0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4061c4:	f001 fb86 	bl	4078d4 <__adddf3>
  4061c8:	4632      	mov	r2, r6
  4061ca:	463b      	mov	r3, r7
  4061cc:	f001 ffa6 	bl	40811c <__aeabi_dcmplt>
  4061d0:	2800      	cmp	r0, #0
  4061d2:	d046      	beq.n	406262 <_dtoa_r+0xd62>
  4061d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4061d6:	9302      	str	r3, [sp, #8]
  4061d8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4061dc:	f7ff bb43 	b.w	405866 <_dtoa_r+0x366>
  4061e0:	f04f 0800 	mov.w	r8, #0
  4061e4:	4646      	mov	r6, r8
  4061e6:	e6a9      	b.n	405f3c <_dtoa_r+0xa3c>
  4061e8:	9b08      	ldr	r3, [sp, #32]
  4061ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061ec:	1a9d      	subs	r5, r3, r2
  4061ee:	2300      	movs	r3, #0
  4061f0:	f7ff bb71 	b.w	4058d6 <_dtoa_r+0x3d6>
  4061f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4061f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4061f8:	9d08      	ldr	r5, [sp, #32]
  4061fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4061fe:	f7ff bb6a 	b.w	4058d6 <_dtoa_r+0x3d6>
  406202:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406206:	f04f 0a02 	mov.w	sl, #2
  40620a:	e56e      	b.n	405cea <_dtoa_r+0x7ea>
  40620c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40620e:	2b00      	cmp	r3, #0
  406210:	f43f aeb8 	beq.w	405f84 <_dtoa_r+0xa84>
  406214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406216:	2b00      	cmp	r3, #0
  406218:	f77f aede 	ble.w	405fd8 <_dtoa_r+0xad8>
  40621c:	2200      	movs	r2, #0
  40621e:	4b24      	ldr	r3, [pc, #144]	; (4062b0 <_dtoa_r+0xdb0>)
  406220:	4638      	mov	r0, r7
  406222:	4641      	mov	r1, r8
  406224:	f001 fd08 	bl	407c38 <__aeabi_dmul>
  406228:	4607      	mov	r7, r0
  40622a:	4688      	mov	r8, r1
  40622c:	f10a 0001 	add.w	r0, sl, #1
  406230:	f001 fc9c 	bl	407b6c <__aeabi_i2d>
  406234:	463a      	mov	r2, r7
  406236:	4643      	mov	r3, r8
  406238:	f001 fcfe 	bl	407c38 <__aeabi_dmul>
  40623c:	2200      	movs	r2, #0
  40623e:	4b17      	ldr	r3, [pc, #92]	; (40629c <_dtoa_r+0xd9c>)
  406240:	f001 fb48 	bl	4078d4 <__adddf3>
  406244:	9a02      	ldr	r2, [sp, #8]
  406246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406248:	9312      	str	r3, [sp, #72]	; 0x48
  40624a:	3a01      	subs	r2, #1
  40624c:	4605      	mov	r5, r0
  40624e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406252:	9215      	str	r2, [sp, #84]	; 0x54
  406254:	e56a      	b.n	405d2c <_dtoa_r+0x82c>
  406256:	2239      	movs	r2, #57	; 0x39
  406258:	46b3      	mov	fp, r6
  40625a:	703a      	strb	r2, [r7, #0]
  40625c:	9e06      	ldr	r6, [sp, #24]
  40625e:	1c7d      	adds	r5, r7, #1
  406260:	e4c0      	b.n	405be4 <_dtoa_r+0x6e4>
  406262:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406266:	2000      	movs	r0, #0
  406268:	4910      	ldr	r1, [pc, #64]	; (4062ac <_dtoa_r+0xdac>)
  40626a:	f001 fb31 	bl	4078d0 <__aeabi_dsub>
  40626e:	4632      	mov	r2, r6
  406270:	463b      	mov	r3, r7
  406272:	f001 ff71 	bl	408158 <__aeabi_dcmpgt>
  406276:	b908      	cbnz	r0, 40627c <_dtoa_r+0xd7c>
  406278:	e6ae      	b.n	405fd8 <_dtoa_r+0xad8>
  40627a:	4615      	mov	r5, r2
  40627c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406280:	2b30      	cmp	r3, #48	; 0x30
  406282:	f105 32ff 	add.w	r2, r5, #4294967295
  406286:	d0f8      	beq.n	40627a <_dtoa_r+0xd7a>
  406288:	e5d7      	b.n	405e3a <_dtoa_r+0x93a>
  40628a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40628e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406290:	9302      	str	r3, [sp, #8]
  406292:	f7ff bae8 	b.w	405866 <_dtoa_r+0x366>
  406296:	970c      	str	r7, [sp, #48]	; 0x30
  406298:	f7ff bba5 	b.w	4059e6 <_dtoa_r+0x4e6>
  40629c:	401c0000 	.word	0x401c0000
  4062a0:	40140000 	.word	0x40140000
  4062a4:	00409028 	.word	0x00409028
  4062a8:	00409000 	.word	0x00409000
  4062ac:	3fe00000 	.word	0x3fe00000
  4062b0:	40240000 	.word	0x40240000
  4062b4:	2b39      	cmp	r3, #57	; 0x39
  4062b6:	f8cd b018 	str.w	fp, [sp, #24]
  4062ba:	46d0      	mov	r8, sl
  4062bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4062c0:	469a      	mov	sl, r3
  4062c2:	d0c8      	beq.n	406256 <_dtoa_r+0xd56>
  4062c4:	f1bb 0f00 	cmp.w	fp, #0
  4062c8:	f73f aebf 	bgt.w	40604a <_dtoa_r+0xb4a>
  4062cc:	e6bf      	b.n	40604e <_dtoa_r+0xb4e>
  4062ce:	f47f aebe 	bne.w	40604e <_dtoa_r+0xb4e>
  4062d2:	f01a 0f01 	tst.w	sl, #1
  4062d6:	f43f aeba 	beq.w	40604e <_dtoa_r+0xb4e>
  4062da:	e6b2      	b.n	406042 <_dtoa_r+0xb42>
  4062dc:	f04f 0800 	mov.w	r8, #0
  4062e0:	4646      	mov	r6, r8
  4062e2:	e5e9      	b.n	405eb8 <_dtoa_r+0x9b8>
  4062e4:	4631      	mov	r1, r6
  4062e6:	2300      	movs	r3, #0
  4062e8:	220a      	movs	r2, #10
  4062ea:	4620      	mov	r0, r4
  4062ec:	f000 fb9c 	bl	406a28 <__multadd>
  4062f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062f2:	2b00      	cmp	r3, #0
  4062f4:	4606      	mov	r6, r0
  4062f6:	dd0a      	ble.n	40630e <_dtoa_r+0xe0e>
  4062f8:	930a      	str	r3, [sp, #40]	; 0x28
  4062fa:	f7ff bbaa 	b.w	405a52 <_dtoa_r+0x552>
  4062fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406300:	2b02      	cmp	r3, #2
  406302:	dc23      	bgt.n	40634c <_dtoa_r+0xe4c>
  406304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406306:	e43b      	b.n	405b80 <_dtoa_r+0x680>
  406308:	f04f 0a02 	mov.w	sl, #2
  40630c:	e4ed      	b.n	405cea <_dtoa_r+0x7ea>
  40630e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406310:	2b02      	cmp	r3, #2
  406312:	dc1b      	bgt.n	40634c <_dtoa_r+0xe4c>
  406314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406316:	e7ef      	b.n	4062f8 <_dtoa_r+0xdf8>
  406318:	2500      	movs	r5, #0
  40631a:	6465      	str	r5, [r4, #68]	; 0x44
  40631c:	4629      	mov	r1, r5
  40631e:	4620      	mov	r0, r4
  406320:	f000 fb52 	bl	4069c8 <_Balloc>
  406324:	f04f 33ff 	mov.w	r3, #4294967295
  406328:	930a      	str	r3, [sp, #40]	; 0x28
  40632a:	930f      	str	r3, [sp, #60]	; 0x3c
  40632c:	2301      	movs	r3, #1
  40632e:	9004      	str	r0, [sp, #16]
  406330:	9525      	str	r5, [sp, #148]	; 0x94
  406332:	6420      	str	r0, [r4, #64]	; 0x40
  406334:	930b      	str	r3, [sp, #44]	; 0x2c
  406336:	f7ff b9dd 	b.w	4056f4 <_dtoa_r+0x1f4>
  40633a:	2501      	movs	r5, #1
  40633c:	f7ff b9a5 	b.w	40568a <_dtoa_r+0x18a>
  406340:	f43f ab69 	beq.w	405a16 <_dtoa_r+0x516>
  406344:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406348:	f7ff bbf9 	b.w	405b3e <_dtoa_r+0x63e>
  40634c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40634e:	930a      	str	r3, [sp, #40]	; 0x28
  406350:	e5e5      	b.n	405f1e <_dtoa_r+0xa1e>
  406352:	bf00      	nop

00406354 <__libc_fini_array>:
  406354:	b538      	push	{r3, r4, r5, lr}
  406356:	4c0a      	ldr	r4, [pc, #40]	; (406380 <__libc_fini_array+0x2c>)
  406358:	4d0a      	ldr	r5, [pc, #40]	; (406384 <__libc_fini_array+0x30>)
  40635a:	1b64      	subs	r4, r4, r5
  40635c:	10a4      	asrs	r4, r4, #2
  40635e:	d00a      	beq.n	406376 <__libc_fini_array+0x22>
  406360:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406364:	3b01      	subs	r3, #1
  406366:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40636a:	3c01      	subs	r4, #1
  40636c:	f855 3904 	ldr.w	r3, [r5], #-4
  406370:	4798      	blx	r3
  406372:	2c00      	cmp	r4, #0
  406374:	d1f9      	bne.n	40636a <__libc_fini_array+0x16>
  406376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40637a:	f002 bf53 	b.w	409224 <_fini>
  40637e:	bf00      	nop
  406380:	00409234 	.word	0x00409234
  406384:	00409230 	.word	0x00409230

00406388 <_localeconv_r>:
  406388:	4a04      	ldr	r2, [pc, #16]	; (40639c <_localeconv_r+0x14>)
  40638a:	4b05      	ldr	r3, [pc, #20]	; (4063a0 <_localeconv_r+0x18>)
  40638c:	6812      	ldr	r2, [r2, #0]
  40638e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406390:	2800      	cmp	r0, #0
  406392:	bf08      	it	eq
  406394:	4618      	moveq	r0, r3
  406396:	30f0      	adds	r0, #240	; 0xf0
  406398:	4770      	bx	lr
  40639a:	bf00      	nop
  40639c:	20400024 	.word	0x20400024
  4063a0:	20400864 	.word	0x20400864

004063a4 <__retarget_lock_acquire_recursive>:
  4063a4:	4770      	bx	lr
  4063a6:	bf00      	nop

004063a8 <__retarget_lock_release_recursive>:
  4063a8:	4770      	bx	lr
  4063aa:	bf00      	nop

004063ac <_malloc_r>:
  4063ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063b0:	f101 060b 	add.w	r6, r1, #11
  4063b4:	2e16      	cmp	r6, #22
  4063b6:	b083      	sub	sp, #12
  4063b8:	4605      	mov	r5, r0
  4063ba:	f240 809e 	bls.w	4064fa <_malloc_r+0x14e>
  4063be:	f036 0607 	bics.w	r6, r6, #7
  4063c2:	f100 80bd 	bmi.w	406540 <_malloc_r+0x194>
  4063c6:	42b1      	cmp	r1, r6
  4063c8:	f200 80ba 	bhi.w	406540 <_malloc_r+0x194>
  4063cc:	f000 faf0 	bl	4069b0 <__malloc_lock>
  4063d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4063d4:	f0c0 8293 	bcc.w	4068fe <_malloc_r+0x552>
  4063d8:	0a73      	lsrs	r3, r6, #9
  4063da:	f000 80b8 	beq.w	40654e <_malloc_r+0x1a2>
  4063de:	2b04      	cmp	r3, #4
  4063e0:	f200 8179 	bhi.w	4066d6 <_malloc_r+0x32a>
  4063e4:	09b3      	lsrs	r3, r6, #6
  4063e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4063ea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4063ee:	00c3      	lsls	r3, r0, #3
  4063f0:	4fbf      	ldr	r7, [pc, #764]	; (4066f0 <_malloc_r+0x344>)
  4063f2:	443b      	add	r3, r7
  4063f4:	f1a3 0108 	sub.w	r1, r3, #8
  4063f8:	685c      	ldr	r4, [r3, #4]
  4063fa:	42a1      	cmp	r1, r4
  4063fc:	d106      	bne.n	40640c <_malloc_r+0x60>
  4063fe:	e00c      	b.n	40641a <_malloc_r+0x6e>
  406400:	2a00      	cmp	r2, #0
  406402:	f280 80aa 	bge.w	40655a <_malloc_r+0x1ae>
  406406:	68e4      	ldr	r4, [r4, #12]
  406408:	42a1      	cmp	r1, r4
  40640a:	d006      	beq.n	40641a <_malloc_r+0x6e>
  40640c:	6863      	ldr	r3, [r4, #4]
  40640e:	f023 0303 	bic.w	r3, r3, #3
  406412:	1b9a      	subs	r2, r3, r6
  406414:	2a0f      	cmp	r2, #15
  406416:	ddf3      	ble.n	406400 <_malloc_r+0x54>
  406418:	4670      	mov	r0, lr
  40641a:	693c      	ldr	r4, [r7, #16]
  40641c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406704 <_malloc_r+0x358>
  406420:	4574      	cmp	r4, lr
  406422:	f000 81ab 	beq.w	40677c <_malloc_r+0x3d0>
  406426:	6863      	ldr	r3, [r4, #4]
  406428:	f023 0303 	bic.w	r3, r3, #3
  40642c:	1b9a      	subs	r2, r3, r6
  40642e:	2a0f      	cmp	r2, #15
  406430:	f300 8190 	bgt.w	406754 <_malloc_r+0x3a8>
  406434:	2a00      	cmp	r2, #0
  406436:	f8c7 e014 	str.w	lr, [r7, #20]
  40643a:	f8c7 e010 	str.w	lr, [r7, #16]
  40643e:	f280 809d 	bge.w	40657c <_malloc_r+0x1d0>
  406442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406446:	f080 8161 	bcs.w	40670c <_malloc_r+0x360>
  40644a:	08db      	lsrs	r3, r3, #3
  40644c:	f103 0c01 	add.w	ip, r3, #1
  406450:	1099      	asrs	r1, r3, #2
  406452:	687a      	ldr	r2, [r7, #4]
  406454:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406458:	f8c4 8008 	str.w	r8, [r4, #8]
  40645c:	2301      	movs	r3, #1
  40645e:	408b      	lsls	r3, r1
  406460:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406464:	4313      	orrs	r3, r2
  406466:	3908      	subs	r1, #8
  406468:	60e1      	str	r1, [r4, #12]
  40646a:	607b      	str	r3, [r7, #4]
  40646c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406470:	f8c8 400c 	str.w	r4, [r8, #12]
  406474:	1082      	asrs	r2, r0, #2
  406476:	2401      	movs	r4, #1
  406478:	4094      	lsls	r4, r2
  40647a:	429c      	cmp	r4, r3
  40647c:	f200 808b 	bhi.w	406596 <_malloc_r+0x1ea>
  406480:	421c      	tst	r4, r3
  406482:	d106      	bne.n	406492 <_malloc_r+0xe6>
  406484:	f020 0003 	bic.w	r0, r0, #3
  406488:	0064      	lsls	r4, r4, #1
  40648a:	421c      	tst	r4, r3
  40648c:	f100 0004 	add.w	r0, r0, #4
  406490:	d0fa      	beq.n	406488 <_malloc_r+0xdc>
  406492:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406496:	46cc      	mov	ip, r9
  406498:	4680      	mov	r8, r0
  40649a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40649e:	459c      	cmp	ip, r3
  4064a0:	d107      	bne.n	4064b2 <_malloc_r+0x106>
  4064a2:	e16d      	b.n	406780 <_malloc_r+0x3d4>
  4064a4:	2a00      	cmp	r2, #0
  4064a6:	f280 817b 	bge.w	4067a0 <_malloc_r+0x3f4>
  4064aa:	68db      	ldr	r3, [r3, #12]
  4064ac:	459c      	cmp	ip, r3
  4064ae:	f000 8167 	beq.w	406780 <_malloc_r+0x3d4>
  4064b2:	6859      	ldr	r1, [r3, #4]
  4064b4:	f021 0103 	bic.w	r1, r1, #3
  4064b8:	1b8a      	subs	r2, r1, r6
  4064ba:	2a0f      	cmp	r2, #15
  4064bc:	ddf2      	ble.n	4064a4 <_malloc_r+0xf8>
  4064be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4064c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4064c6:	9300      	str	r3, [sp, #0]
  4064c8:	199c      	adds	r4, r3, r6
  4064ca:	4628      	mov	r0, r5
  4064cc:	f046 0601 	orr.w	r6, r6, #1
  4064d0:	f042 0501 	orr.w	r5, r2, #1
  4064d4:	605e      	str	r6, [r3, #4]
  4064d6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4064da:	f8cc 8008 	str.w	r8, [ip, #8]
  4064de:	617c      	str	r4, [r7, #20]
  4064e0:	613c      	str	r4, [r7, #16]
  4064e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4064e6:	f8c4 e008 	str.w	lr, [r4, #8]
  4064ea:	6065      	str	r5, [r4, #4]
  4064ec:	505a      	str	r2, [r3, r1]
  4064ee:	f000 fa65 	bl	4069bc <__malloc_unlock>
  4064f2:	9b00      	ldr	r3, [sp, #0]
  4064f4:	f103 0408 	add.w	r4, r3, #8
  4064f8:	e01e      	b.n	406538 <_malloc_r+0x18c>
  4064fa:	2910      	cmp	r1, #16
  4064fc:	d820      	bhi.n	406540 <_malloc_r+0x194>
  4064fe:	f000 fa57 	bl	4069b0 <__malloc_lock>
  406502:	2610      	movs	r6, #16
  406504:	2318      	movs	r3, #24
  406506:	2002      	movs	r0, #2
  406508:	4f79      	ldr	r7, [pc, #484]	; (4066f0 <_malloc_r+0x344>)
  40650a:	443b      	add	r3, r7
  40650c:	f1a3 0208 	sub.w	r2, r3, #8
  406510:	685c      	ldr	r4, [r3, #4]
  406512:	4294      	cmp	r4, r2
  406514:	f000 813d 	beq.w	406792 <_malloc_r+0x3e6>
  406518:	6863      	ldr	r3, [r4, #4]
  40651a:	68e1      	ldr	r1, [r4, #12]
  40651c:	68a6      	ldr	r6, [r4, #8]
  40651e:	f023 0303 	bic.w	r3, r3, #3
  406522:	4423      	add	r3, r4
  406524:	4628      	mov	r0, r5
  406526:	685a      	ldr	r2, [r3, #4]
  406528:	60f1      	str	r1, [r6, #12]
  40652a:	f042 0201 	orr.w	r2, r2, #1
  40652e:	608e      	str	r6, [r1, #8]
  406530:	605a      	str	r2, [r3, #4]
  406532:	f000 fa43 	bl	4069bc <__malloc_unlock>
  406536:	3408      	adds	r4, #8
  406538:	4620      	mov	r0, r4
  40653a:	b003      	add	sp, #12
  40653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406540:	2400      	movs	r4, #0
  406542:	230c      	movs	r3, #12
  406544:	4620      	mov	r0, r4
  406546:	602b      	str	r3, [r5, #0]
  406548:	b003      	add	sp, #12
  40654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40654e:	2040      	movs	r0, #64	; 0x40
  406550:	f44f 7300 	mov.w	r3, #512	; 0x200
  406554:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406558:	e74a      	b.n	4063f0 <_malloc_r+0x44>
  40655a:	4423      	add	r3, r4
  40655c:	68e1      	ldr	r1, [r4, #12]
  40655e:	685a      	ldr	r2, [r3, #4]
  406560:	68a6      	ldr	r6, [r4, #8]
  406562:	f042 0201 	orr.w	r2, r2, #1
  406566:	60f1      	str	r1, [r6, #12]
  406568:	4628      	mov	r0, r5
  40656a:	608e      	str	r6, [r1, #8]
  40656c:	605a      	str	r2, [r3, #4]
  40656e:	f000 fa25 	bl	4069bc <__malloc_unlock>
  406572:	3408      	adds	r4, #8
  406574:	4620      	mov	r0, r4
  406576:	b003      	add	sp, #12
  406578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40657c:	4423      	add	r3, r4
  40657e:	4628      	mov	r0, r5
  406580:	685a      	ldr	r2, [r3, #4]
  406582:	f042 0201 	orr.w	r2, r2, #1
  406586:	605a      	str	r2, [r3, #4]
  406588:	f000 fa18 	bl	4069bc <__malloc_unlock>
  40658c:	3408      	adds	r4, #8
  40658e:	4620      	mov	r0, r4
  406590:	b003      	add	sp, #12
  406592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406596:	68bc      	ldr	r4, [r7, #8]
  406598:	6863      	ldr	r3, [r4, #4]
  40659a:	f023 0803 	bic.w	r8, r3, #3
  40659e:	45b0      	cmp	r8, r6
  4065a0:	d304      	bcc.n	4065ac <_malloc_r+0x200>
  4065a2:	eba8 0306 	sub.w	r3, r8, r6
  4065a6:	2b0f      	cmp	r3, #15
  4065a8:	f300 8085 	bgt.w	4066b6 <_malloc_r+0x30a>
  4065ac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406708 <_malloc_r+0x35c>
  4065b0:	4b50      	ldr	r3, [pc, #320]	; (4066f4 <_malloc_r+0x348>)
  4065b2:	f8d9 2000 	ldr.w	r2, [r9]
  4065b6:	681b      	ldr	r3, [r3, #0]
  4065b8:	3201      	adds	r2, #1
  4065ba:	4433      	add	r3, r6
  4065bc:	eb04 0a08 	add.w	sl, r4, r8
  4065c0:	f000 8155 	beq.w	40686e <_malloc_r+0x4c2>
  4065c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4065c8:	330f      	adds	r3, #15
  4065ca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4065ce:	f02b 0b0f 	bic.w	fp, fp, #15
  4065d2:	4659      	mov	r1, fp
  4065d4:	4628      	mov	r0, r5
  4065d6:	f000 fcf1 	bl	406fbc <_sbrk_r>
  4065da:	1c41      	adds	r1, r0, #1
  4065dc:	4602      	mov	r2, r0
  4065de:	f000 80fc 	beq.w	4067da <_malloc_r+0x42e>
  4065e2:	4582      	cmp	sl, r0
  4065e4:	f200 80f7 	bhi.w	4067d6 <_malloc_r+0x42a>
  4065e8:	4b43      	ldr	r3, [pc, #268]	; (4066f8 <_malloc_r+0x34c>)
  4065ea:	6819      	ldr	r1, [r3, #0]
  4065ec:	4459      	add	r1, fp
  4065ee:	6019      	str	r1, [r3, #0]
  4065f0:	f000 814d 	beq.w	40688e <_malloc_r+0x4e2>
  4065f4:	f8d9 0000 	ldr.w	r0, [r9]
  4065f8:	3001      	adds	r0, #1
  4065fa:	bf1b      	ittet	ne
  4065fc:	eba2 0a0a 	subne.w	sl, r2, sl
  406600:	4451      	addne	r1, sl
  406602:	f8c9 2000 	streq.w	r2, [r9]
  406606:	6019      	strne	r1, [r3, #0]
  406608:	f012 0107 	ands.w	r1, r2, #7
  40660c:	f000 8115 	beq.w	40683a <_malloc_r+0x48e>
  406610:	f1c1 0008 	rsb	r0, r1, #8
  406614:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406618:	4402      	add	r2, r0
  40661a:	3108      	adds	r1, #8
  40661c:	eb02 090b 	add.w	r9, r2, fp
  406620:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406624:	eba1 0909 	sub.w	r9, r1, r9
  406628:	4649      	mov	r1, r9
  40662a:	4628      	mov	r0, r5
  40662c:	9301      	str	r3, [sp, #4]
  40662e:	9200      	str	r2, [sp, #0]
  406630:	f000 fcc4 	bl	406fbc <_sbrk_r>
  406634:	1c43      	adds	r3, r0, #1
  406636:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40663a:	f000 8143 	beq.w	4068c4 <_malloc_r+0x518>
  40663e:	1a80      	subs	r0, r0, r2
  406640:	4448      	add	r0, r9
  406642:	f040 0001 	orr.w	r0, r0, #1
  406646:	6819      	ldr	r1, [r3, #0]
  406648:	60ba      	str	r2, [r7, #8]
  40664a:	4449      	add	r1, r9
  40664c:	42bc      	cmp	r4, r7
  40664e:	6050      	str	r0, [r2, #4]
  406650:	6019      	str	r1, [r3, #0]
  406652:	d017      	beq.n	406684 <_malloc_r+0x2d8>
  406654:	f1b8 0f0f 	cmp.w	r8, #15
  406658:	f240 80fb 	bls.w	406852 <_malloc_r+0x4a6>
  40665c:	6860      	ldr	r0, [r4, #4]
  40665e:	f1a8 020c 	sub.w	r2, r8, #12
  406662:	f022 0207 	bic.w	r2, r2, #7
  406666:	eb04 0e02 	add.w	lr, r4, r2
  40666a:	f000 0001 	and.w	r0, r0, #1
  40666e:	f04f 0c05 	mov.w	ip, #5
  406672:	4310      	orrs	r0, r2
  406674:	2a0f      	cmp	r2, #15
  406676:	6060      	str	r0, [r4, #4]
  406678:	f8ce c004 	str.w	ip, [lr, #4]
  40667c:	f8ce c008 	str.w	ip, [lr, #8]
  406680:	f200 8117 	bhi.w	4068b2 <_malloc_r+0x506>
  406684:	4b1d      	ldr	r3, [pc, #116]	; (4066fc <_malloc_r+0x350>)
  406686:	68bc      	ldr	r4, [r7, #8]
  406688:	681a      	ldr	r2, [r3, #0]
  40668a:	4291      	cmp	r1, r2
  40668c:	bf88      	it	hi
  40668e:	6019      	strhi	r1, [r3, #0]
  406690:	4b1b      	ldr	r3, [pc, #108]	; (406700 <_malloc_r+0x354>)
  406692:	681a      	ldr	r2, [r3, #0]
  406694:	4291      	cmp	r1, r2
  406696:	6862      	ldr	r2, [r4, #4]
  406698:	bf88      	it	hi
  40669a:	6019      	strhi	r1, [r3, #0]
  40669c:	f022 0203 	bic.w	r2, r2, #3
  4066a0:	4296      	cmp	r6, r2
  4066a2:	eba2 0306 	sub.w	r3, r2, r6
  4066a6:	d801      	bhi.n	4066ac <_malloc_r+0x300>
  4066a8:	2b0f      	cmp	r3, #15
  4066aa:	dc04      	bgt.n	4066b6 <_malloc_r+0x30a>
  4066ac:	4628      	mov	r0, r5
  4066ae:	f000 f985 	bl	4069bc <__malloc_unlock>
  4066b2:	2400      	movs	r4, #0
  4066b4:	e740      	b.n	406538 <_malloc_r+0x18c>
  4066b6:	19a2      	adds	r2, r4, r6
  4066b8:	f043 0301 	orr.w	r3, r3, #1
  4066bc:	f046 0601 	orr.w	r6, r6, #1
  4066c0:	6066      	str	r6, [r4, #4]
  4066c2:	4628      	mov	r0, r5
  4066c4:	60ba      	str	r2, [r7, #8]
  4066c6:	6053      	str	r3, [r2, #4]
  4066c8:	f000 f978 	bl	4069bc <__malloc_unlock>
  4066cc:	3408      	adds	r4, #8
  4066ce:	4620      	mov	r0, r4
  4066d0:	b003      	add	sp, #12
  4066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066d6:	2b14      	cmp	r3, #20
  4066d8:	d971      	bls.n	4067be <_malloc_r+0x412>
  4066da:	2b54      	cmp	r3, #84	; 0x54
  4066dc:	f200 80a3 	bhi.w	406826 <_malloc_r+0x47a>
  4066e0:	0b33      	lsrs	r3, r6, #12
  4066e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4066e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4066ea:	00c3      	lsls	r3, r0, #3
  4066ec:	e680      	b.n	4063f0 <_malloc_r+0x44>
  4066ee:	bf00      	nop
  4066f0:	20400454 	.word	0x20400454
  4066f4:	2040c5ec 	.word	0x2040c5ec
  4066f8:	2040c5bc 	.word	0x2040c5bc
  4066fc:	2040c5e4 	.word	0x2040c5e4
  406700:	2040c5e8 	.word	0x2040c5e8
  406704:	2040045c 	.word	0x2040045c
  406708:	2040085c 	.word	0x2040085c
  40670c:	0a5a      	lsrs	r2, r3, #9
  40670e:	2a04      	cmp	r2, #4
  406710:	d95b      	bls.n	4067ca <_malloc_r+0x41e>
  406712:	2a14      	cmp	r2, #20
  406714:	f200 80ae 	bhi.w	406874 <_malloc_r+0x4c8>
  406718:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40671c:	00c9      	lsls	r1, r1, #3
  40671e:	325b      	adds	r2, #91	; 0x5b
  406720:	eb07 0c01 	add.w	ip, r7, r1
  406724:	5879      	ldr	r1, [r7, r1]
  406726:	f1ac 0c08 	sub.w	ip, ip, #8
  40672a:	458c      	cmp	ip, r1
  40672c:	f000 8088 	beq.w	406840 <_malloc_r+0x494>
  406730:	684a      	ldr	r2, [r1, #4]
  406732:	f022 0203 	bic.w	r2, r2, #3
  406736:	4293      	cmp	r3, r2
  406738:	d273      	bcs.n	406822 <_malloc_r+0x476>
  40673a:	6889      	ldr	r1, [r1, #8]
  40673c:	458c      	cmp	ip, r1
  40673e:	d1f7      	bne.n	406730 <_malloc_r+0x384>
  406740:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406744:	687b      	ldr	r3, [r7, #4]
  406746:	60e2      	str	r2, [r4, #12]
  406748:	f8c4 c008 	str.w	ip, [r4, #8]
  40674c:	6094      	str	r4, [r2, #8]
  40674e:	f8cc 400c 	str.w	r4, [ip, #12]
  406752:	e68f      	b.n	406474 <_malloc_r+0xc8>
  406754:	19a1      	adds	r1, r4, r6
  406756:	f046 0c01 	orr.w	ip, r6, #1
  40675a:	f042 0601 	orr.w	r6, r2, #1
  40675e:	f8c4 c004 	str.w	ip, [r4, #4]
  406762:	4628      	mov	r0, r5
  406764:	6179      	str	r1, [r7, #20]
  406766:	6139      	str	r1, [r7, #16]
  406768:	f8c1 e00c 	str.w	lr, [r1, #12]
  40676c:	f8c1 e008 	str.w	lr, [r1, #8]
  406770:	604e      	str	r6, [r1, #4]
  406772:	50e2      	str	r2, [r4, r3]
  406774:	f000 f922 	bl	4069bc <__malloc_unlock>
  406778:	3408      	adds	r4, #8
  40677a:	e6dd      	b.n	406538 <_malloc_r+0x18c>
  40677c:	687b      	ldr	r3, [r7, #4]
  40677e:	e679      	b.n	406474 <_malloc_r+0xc8>
  406780:	f108 0801 	add.w	r8, r8, #1
  406784:	f018 0f03 	tst.w	r8, #3
  406788:	f10c 0c08 	add.w	ip, ip, #8
  40678c:	f47f ae85 	bne.w	40649a <_malloc_r+0xee>
  406790:	e02d      	b.n	4067ee <_malloc_r+0x442>
  406792:	68dc      	ldr	r4, [r3, #12]
  406794:	42a3      	cmp	r3, r4
  406796:	bf08      	it	eq
  406798:	3002      	addeq	r0, #2
  40679a:	f43f ae3e 	beq.w	40641a <_malloc_r+0x6e>
  40679e:	e6bb      	b.n	406518 <_malloc_r+0x16c>
  4067a0:	4419      	add	r1, r3
  4067a2:	461c      	mov	r4, r3
  4067a4:	684a      	ldr	r2, [r1, #4]
  4067a6:	68db      	ldr	r3, [r3, #12]
  4067a8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4067ac:	f042 0201 	orr.w	r2, r2, #1
  4067b0:	604a      	str	r2, [r1, #4]
  4067b2:	4628      	mov	r0, r5
  4067b4:	60f3      	str	r3, [r6, #12]
  4067b6:	609e      	str	r6, [r3, #8]
  4067b8:	f000 f900 	bl	4069bc <__malloc_unlock>
  4067bc:	e6bc      	b.n	406538 <_malloc_r+0x18c>
  4067be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4067c2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4067c6:	00c3      	lsls	r3, r0, #3
  4067c8:	e612      	b.n	4063f0 <_malloc_r+0x44>
  4067ca:	099a      	lsrs	r2, r3, #6
  4067cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4067d0:	00c9      	lsls	r1, r1, #3
  4067d2:	3238      	adds	r2, #56	; 0x38
  4067d4:	e7a4      	b.n	406720 <_malloc_r+0x374>
  4067d6:	42bc      	cmp	r4, r7
  4067d8:	d054      	beq.n	406884 <_malloc_r+0x4d8>
  4067da:	68bc      	ldr	r4, [r7, #8]
  4067dc:	6862      	ldr	r2, [r4, #4]
  4067de:	f022 0203 	bic.w	r2, r2, #3
  4067e2:	e75d      	b.n	4066a0 <_malloc_r+0x2f4>
  4067e4:	f859 3908 	ldr.w	r3, [r9], #-8
  4067e8:	4599      	cmp	r9, r3
  4067ea:	f040 8086 	bne.w	4068fa <_malloc_r+0x54e>
  4067ee:	f010 0f03 	tst.w	r0, #3
  4067f2:	f100 30ff 	add.w	r0, r0, #4294967295
  4067f6:	d1f5      	bne.n	4067e4 <_malloc_r+0x438>
  4067f8:	687b      	ldr	r3, [r7, #4]
  4067fa:	ea23 0304 	bic.w	r3, r3, r4
  4067fe:	607b      	str	r3, [r7, #4]
  406800:	0064      	lsls	r4, r4, #1
  406802:	429c      	cmp	r4, r3
  406804:	f63f aec7 	bhi.w	406596 <_malloc_r+0x1ea>
  406808:	2c00      	cmp	r4, #0
  40680a:	f43f aec4 	beq.w	406596 <_malloc_r+0x1ea>
  40680e:	421c      	tst	r4, r3
  406810:	4640      	mov	r0, r8
  406812:	f47f ae3e 	bne.w	406492 <_malloc_r+0xe6>
  406816:	0064      	lsls	r4, r4, #1
  406818:	421c      	tst	r4, r3
  40681a:	f100 0004 	add.w	r0, r0, #4
  40681e:	d0fa      	beq.n	406816 <_malloc_r+0x46a>
  406820:	e637      	b.n	406492 <_malloc_r+0xe6>
  406822:	468c      	mov	ip, r1
  406824:	e78c      	b.n	406740 <_malloc_r+0x394>
  406826:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40682a:	d815      	bhi.n	406858 <_malloc_r+0x4ac>
  40682c:	0bf3      	lsrs	r3, r6, #15
  40682e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406832:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406836:	00c3      	lsls	r3, r0, #3
  406838:	e5da      	b.n	4063f0 <_malloc_r+0x44>
  40683a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40683e:	e6ed      	b.n	40661c <_malloc_r+0x270>
  406840:	687b      	ldr	r3, [r7, #4]
  406842:	1092      	asrs	r2, r2, #2
  406844:	2101      	movs	r1, #1
  406846:	fa01 f202 	lsl.w	r2, r1, r2
  40684a:	4313      	orrs	r3, r2
  40684c:	607b      	str	r3, [r7, #4]
  40684e:	4662      	mov	r2, ip
  406850:	e779      	b.n	406746 <_malloc_r+0x39a>
  406852:	2301      	movs	r3, #1
  406854:	6053      	str	r3, [r2, #4]
  406856:	e729      	b.n	4066ac <_malloc_r+0x300>
  406858:	f240 5254 	movw	r2, #1364	; 0x554
  40685c:	4293      	cmp	r3, r2
  40685e:	d822      	bhi.n	4068a6 <_malloc_r+0x4fa>
  406860:	0cb3      	lsrs	r3, r6, #18
  406862:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406866:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40686a:	00c3      	lsls	r3, r0, #3
  40686c:	e5c0      	b.n	4063f0 <_malloc_r+0x44>
  40686e:	f103 0b10 	add.w	fp, r3, #16
  406872:	e6ae      	b.n	4065d2 <_malloc_r+0x226>
  406874:	2a54      	cmp	r2, #84	; 0x54
  406876:	d829      	bhi.n	4068cc <_malloc_r+0x520>
  406878:	0b1a      	lsrs	r2, r3, #12
  40687a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40687e:	00c9      	lsls	r1, r1, #3
  406880:	326e      	adds	r2, #110	; 0x6e
  406882:	e74d      	b.n	406720 <_malloc_r+0x374>
  406884:	4b20      	ldr	r3, [pc, #128]	; (406908 <_malloc_r+0x55c>)
  406886:	6819      	ldr	r1, [r3, #0]
  406888:	4459      	add	r1, fp
  40688a:	6019      	str	r1, [r3, #0]
  40688c:	e6b2      	b.n	4065f4 <_malloc_r+0x248>
  40688e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406892:	2800      	cmp	r0, #0
  406894:	f47f aeae 	bne.w	4065f4 <_malloc_r+0x248>
  406898:	eb08 030b 	add.w	r3, r8, fp
  40689c:	68ba      	ldr	r2, [r7, #8]
  40689e:	f043 0301 	orr.w	r3, r3, #1
  4068a2:	6053      	str	r3, [r2, #4]
  4068a4:	e6ee      	b.n	406684 <_malloc_r+0x2d8>
  4068a6:	207f      	movs	r0, #127	; 0x7f
  4068a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4068ac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4068b0:	e59e      	b.n	4063f0 <_malloc_r+0x44>
  4068b2:	f104 0108 	add.w	r1, r4, #8
  4068b6:	4628      	mov	r0, r5
  4068b8:	9300      	str	r3, [sp, #0]
  4068ba:	f000 fcf1 	bl	4072a0 <_free_r>
  4068be:	9b00      	ldr	r3, [sp, #0]
  4068c0:	6819      	ldr	r1, [r3, #0]
  4068c2:	e6df      	b.n	406684 <_malloc_r+0x2d8>
  4068c4:	2001      	movs	r0, #1
  4068c6:	f04f 0900 	mov.w	r9, #0
  4068ca:	e6bc      	b.n	406646 <_malloc_r+0x29a>
  4068cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4068d0:	d805      	bhi.n	4068de <_malloc_r+0x532>
  4068d2:	0bda      	lsrs	r2, r3, #15
  4068d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4068d8:	00c9      	lsls	r1, r1, #3
  4068da:	3277      	adds	r2, #119	; 0x77
  4068dc:	e720      	b.n	406720 <_malloc_r+0x374>
  4068de:	f240 5154 	movw	r1, #1364	; 0x554
  4068e2:	428a      	cmp	r2, r1
  4068e4:	d805      	bhi.n	4068f2 <_malloc_r+0x546>
  4068e6:	0c9a      	lsrs	r2, r3, #18
  4068e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4068ec:	00c9      	lsls	r1, r1, #3
  4068ee:	327c      	adds	r2, #124	; 0x7c
  4068f0:	e716      	b.n	406720 <_malloc_r+0x374>
  4068f2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4068f6:	227e      	movs	r2, #126	; 0x7e
  4068f8:	e712      	b.n	406720 <_malloc_r+0x374>
  4068fa:	687b      	ldr	r3, [r7, #4]
  4068fc:	e780      	b.n	406800 <_malloc_r+0x454>
  4068fe:	08f0      	lsrs	r0, r6, #3
  406900:	f106 0308 	add.w	r3, r6, #8
  406904:	e600      	b.n	406508 <_malloc_r+0x15c>
  406906:	bf00      	nop
  406908:	2040c5bc 	.word	0x2040c5bc
  40690c:	00000000 	.word	0x00000000

00406910 <memchr>:
  406910:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406914:	2a10      	cmp	r2, #16
  406916:	db2b      	blt.n	406970 <memchr+0x60>
  406918:	f010 0f07 	tst.w	r0, #7
  40691c:	d008      	beq.n	406930 <memchr+0x20>
  40691e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406922:	3a01      	subs	r2, #1
  406924:	428b      	cmp	r3, r1
  406926:	d02d      	beq.n	406984 <memchr+0x74>
  406928:	f010 0f07 	tst.w	r0, #7
  40692c:	b342      	cbz	r2, 406980 <memchr+0x70>
  40692e:	d1f6      	bne.n	40691e <memchr+0xe>
  406930:	b4f0      	push	{r4, r5, r6, r7}
  406932:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406936:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40693a:	f022 0407 	bic.w	r4, r2, #7
  40693e:	f07f 0700 	mvns.w	r7, #0
  406942:	2300      	movs	r3, #0
  406944:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406948:	3c08      	subs	r4, #8
  40694a:	ea85 0501 	eor.w	r5, r5, r1
  40694e:	ea86 0601 	eor.w	r6, r6, r1
  406952:	fa85 f547 	uadd8	r5, r5, r7
  406956:	faa3 f587 	sel	r5, r3, r7
  40695a:	fa86 f647 	uadd8	r6, r6, r7
  40695e:	faa5 f687 	sel	r6, r5, r7
  406962:	b98e      	cbnz	r6, 406988 <memchr+0x78>
  406964:	d1ee      	bne.n	406944 <memchr+0x34>
  406966:	bcf0      	pop	{r4, r5, r6, r7}
  406968:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40696c:	f002 0207 	and.w	r2, r2, #7
  406970:	b132      	cbz	r2, 406980 <memchr+0x70>
  406972:	f810 3b01 	ldrb.w	r3, [r0], #1
  406976:	3a01      	subs	r2, #1
  406978:	ea83 0301 	eor.w	r3, r3, r1
  40697c:	b113      	cbz	r3, 406984 <memchr+0x74>
  40697e:	d1f8      	bne.n	406972 <memchr+0x62>
  406980:	2000      	movs	r0, #0
  406982:	4770      	bx	lr
  406984:	3801      	subs	r0, #1
  406986:	4770      	bx	lr
  406988:	2d00      	cmp	r5, #0
  40698a:	bf06      	itte	eq
  40698c:	4635      	moveq	r5, r6
  40698e:	3803      	subeq	r0, #3
  406990:	3807      	subne	r0, #7
  406992:	f015 0f01 	tst.w	r5, #1
  406996:	d107      	bne.n	4069a8 <memchr+0x98>
  406998:	3001      	adds	r0, #1
  40699a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40699e:	bf02      	ittt	eq
  4069a0:	3001      	addeq	r0, #1
  4069a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4069a6:	3001      	addeq	r0, #1
  4069a8:	bcf0      	pop	{r4, r5, r6, r7}
  4069aa:	3801      	subs	r0, #1
  4069ac:	4770      	bx	lr
  4069ae:	bf00      	nop

004069b0 <__malloc_lock>:
  4069b0:	4801      	ldr	r0, [pc, #4]	; (4069b8 <__malloc_lock+0x8>)
  4069b2:	f7ff bcf7 	b.w	4063a4 <__retarget_lock_acquire_recursive>
  4069b6:	bf00      	nop
  4069b8:	2040c6d0 	.word	0x2040c6d0

004069bc <__malloc_unlock>:
  4069bc:	4801      	ldr	r0, [pc, #4]	; (4069c4 <__malloc_unlock+0x8>)
  4069be:	f7ff bcf3 	b.w	4063a8 <__retarget_lock_release_recursive>
  4069c2:	bf00      	nop
  4069c4:	2040c6d0 	.word	0x2040c6d0

004069c8 <_Balloc>:
  4069c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4069ca:	b570      	push	{r4, r5, r6, lr}
  4069cc:	4605      	mov	r5, r0
  4069ce:	460c      	mov	r4, r1
  4069d0:	b14b      	cbz	r3, 4069e6 <_Balloc+0x1e>
  4069d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4069d6:	b180      	cbz	r0, 4069fa <_Balloc+0x32>
  4069d8:	6802      	ldr	r2, [r0, #0]
  4069da:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4069de:	2300      	movs	r3, #0
  4069e0:	6103      	str	r3, [r0, #16]
  4069e2:	60c3      	str	r3, [r0, #12]
  4069e4:	bd70      	pop	{r4, r5, r6, pc}
  4069e6:	2221      	movs	r2, #33	; 0x21
  4069e8:	2104      	movs	r1, #4
  4069ea:	f000 fbd9 	bl	4071a0 <_calloc_r>
  4069ee:	64e8      	str	r0, [r5, #76]	; 0x4c
  4069f0:	4603      	mov	r3, r0
  4069f2:	2800      	cmp	r0, #0
  4069f4:	d1ed      	bne.n	4069d2 <_Balloc+0xa>
  4069f6:	2000      	movs	r0, #0
  4069f8:	bd70      	pop	{r4, r5, r6, pc}
  4069fa:	2101      	movs	r1, #1
  4069fc:	fa01 f604 	lsl.w	r6, r1, r4
  406a00:	1d72      	adds	r2, r6, #5
  406a02:	4628      	mov	r0, r5
  406a04:	0092      	lsls	r2, r2, #2
  406a06:	f000 fbcb 	bl	4071a0 <_calloc_r>
  406a0a:	2800      	cmp	r0, #0
  406a0c:	d0f3      	beq.n	4069f6 <_Balloc+0x2e>
  406a0e:	6044      	str	r4, [r0, #4]
  406a10:	6086      	str	r6, [r0, #8]
  406a12:	e7e4      	b.n	4069de <_Balloc+0x16>

00406a14 <_Bfree>:
  406a14:	b131      	cbz	r1, 406a24 <_Bfree+0x10>
  406a16:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406a18:	684a      	ldr	r2, [r1, #4]
  406a1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406a1e:	6008      	str	r0, [r1, #0]
  406a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406a24:	4770      	bx	lr
  406a26:	bf00      	nop

00406a28 <__multadd>:
  406a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a2a:	690c      	ldr	r4, [r1, #16]
  406a2c:	b083      	sub	sp, #12
  406a2e:	460d      	mov	r5, r1
  406a30:	4606      	mov	r6, r0
  406a32:	f101 0e14 	add.w	lr, r1, #20
  406a36:	2700      	movs	r7, #0
  406a38:	f8de 0000 	ldr.w	r0, [lr]
  406a3c:	b281      	uxth	r1, r0
  406a3e:	fb02 3301 	mla	r3, r2, r1, r3
  406a42:	0c01      	lsrs	r1, r0, #16
  406a44:	0c18      	lsrs	r0, r3, #16
  406a46:	fb02 0101 	mla	r1, r2, r1, r0
  406a4a:	b29b      	uxth	r3, r3
  406a4c:	3701      	adds	r7, #1
  406a4e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406a52:	42bc      	cmp	r4, r7
  406a54:	f84e 3b04 	str.w	r3, [lr], #4
  406a58:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406a5c:	dcec      	bgt.n	406a38 <__multadd+0x10>
  406a5e:	b13b      	cbz	r3, 406a70 <__multadd+0x48>
  406a60:	68aa      	ldr	r2, [r5, #8]
  406a62:	4294      	cmp	r4, r2
  406a64:	da07      	bge.n	406a76 <__multadd+0x4e>
  406a66:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406a6a:	3401      	adds	r4, #1
  406a6c:	6153      	str	r3, [r2, #20]
  406a6e:	612c      	str	r4, [r5, #16]
  406a70:	4628      	mov	r0, r5
  406a72:	b003      	add	sp, #12
  406a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a76:	6869      	ldr	r1, [r5, #4]
  406a78:	9301      	str	r3, [sp, #4]
  406a7a:	3101      	adds	r1, #1
  406a7c:	4630      	mov	r0, r6
  406a7e:	f7ff ffa3 	bl	4069c8 <_Balloc>
  406a82:	692a      	ldr	r2, [r5, #16]
  406a84:	3202      	adds	r2, #2
  406a86:	f105 010c 	add.w	r1, r5, #12
  406a8a:	4607      	mov	r7, r0
  406a8c:	0092      	lsls	r2, r2, #2
  406a8e:	300c      	adds	r0, #12
  406a90:	f7fd f8da 	bl	403c48 <memcpy>
  406a94:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406a96:	6869      	ldr	r1, [r5, #4]
  406a98:	9b01      	ldr	r3, [sp, #4]
  406a9a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406a9e:	6028      	str	r0, [r5, #0]
  406aa0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406aa4:	463d      	mov	r5, r7
  406aa6:	e7de      	b.n	406a66 <__multadd+0x3e>

00406aa8 <__hi0bits>:
  406aa8:	0c02      	lsrs	r2, r0, #16
  406aaa:	0412      	lsls	r2, r2, #16
  406aac:	4603      	mov	r3, r0
  406aae:	b9b2      	cbnz	r2, 406ade <__hi0bits+0x36>
  406ab0:	0403      	lsls	r3, r0, #16
  406ab2:	2010      	movs	r0, #16
  406ab4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406ab8:	bf04      	itt	eq
  406aba:	021b      	lsleq	r3, r3, #8
  406abc:	3008      	addeq	r0, #8
  406abe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406ac2:	bf04      	itt	eq
  406ac4:	011b      	lsleq	r3, r3, #4
  406ac6:	3004      	addeq	r0, #4
  406ac8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406acc:	bf04      	itt	eq
  406ace:	009b      	lsleq	r3, r3, #2
  406ad0:	3002      	addeq	r0, #2
  406ad2:	2b00      	cmp	r3, #0
  406ad4:	db02      	blt.n	406adc <__hi0bits+0x34>
  406ad6:	005b      	lsls	r3, r3, #1
  406ad8:	d403      	bmi.n	406ae2 <__hi0bits+0x3a>
  406ada:	2020      	movs	r0, #32
  406adc:	4770      	bx	lr
  406ade:	2000      	movs	r0, #0
  406ae0:	e7e8      	b.n	406ab4 <__hi0bits+0xc>
  406ae2:	3001      	adds	r0, #1
  406ae4:	4770      	bx	lr
  406ae6:	bf00      	nop

00406ae8 <__lo0bits>:
  406ae8:	6803      	ldr	r3, [r0, #0]
  406aea:	f013 0207 	ands.w	r2, r3, #7
  406aee:	4601      	mov	r1, r0
  406af0:	d007      	beq.n	406b02 <__lo0bits+0x1a>
  406af2:	07da      	lsls	r2, r3, #31
  406af4:	d421      	bmi.n	406b3a <__lo0bits+0x52>
  406af6:	0798      	lsls	r0, r3, #30
  406af8:	d421      	bmi.n	406b3e <__lo0bits+0x56>
  406afa:	089b      	lsrs	r3, r3, #2
  406afc:	600b      	str	r3, [r1, #0]
  406afe:	2002      	movs	r0, #2
  406b00:	4770      	bx	lr
  406b02:	b298      	uxth	r0, r3
  406b04:	b198      	cbz	r0, 406b2e <__lo0bits+0x46>
  406b06:	4610      	mov	r0, r2
  406b08:	f013 0fff 	tst.w	r3, #255	; 0xff
  406b0c:	bf04      	itt	eq
  406b0e:	0a1b      	lsreq	r3, r3, #8
  406b10:	3008      	addeq	r0, #8
  406b12:	071a      	lsls	r2, r3, #28
  406b14:	bf04      	itt	eq
  406b16:	091b      	lsreq	r3, r3, #4
  406b18:	3004      	addeq	r0, #4
  406b1a:	079a      	lsls	r2, r3, #30
  406b1c:	bf04      	itt	eq
  406b1e:	089b      	lsreq	r3, r3, #2
  406b20:	3002      	addeq	r0, #2
  406b22:	07da      	lsls	r2, r3, #31
  406b24:	d407      	bmi.n	406b36 <__lo0bits+0x4e>
  406b26:	085b      	lsrs	r3, r3, #1
  406b28:	d104      	bne.n	406b34 <__lo0bits+0x4c>
  406b2a:	2020      	movs	r0, #32
  406b2c:	4770      	bx	lr
  406b2e:	0c1b      	lsrs	r3, r3, #16
  406b30:	2010      	movs	r0, #16
  406b32:	e7e9      	b.n	406b08 <__lo0bits+0x20>
  406b34:	3001      	adds	r0, #1
  406b36:	600b      	str	r3, [r1, #0]
  406b38:	4770      	bx	lr
  406b3a:	2000      	movs	r0, #0
  406b3c:	4770      	bx	lr
  406b3e:	085b      	lsrs	r3, r3, #1
  406b40:	600b      	str	r3, [r1, #0]
  406b42:	2001      	movs	r0, #1
  406b44:	4770      	bx	lr
  406b46:	bf00      	nop

00406b48 <__i2b>:
  406b48:	b510      	push	{r4, lr}
  406b4a:	460c      	mov	r4, r1
  406b4c:	2101      	movs	r1, #1
  406b4e:	f7ff ff3b 	bl	4069c8 <_Balloc>
  406b52:	2201      	movs	r2, #1
  406b54:	6144      	str	r4, [r0, #20]
  406b56:	6102      	str	r2, [r0, #16]
  406b58:	bd10      	pop	{r4, pc}
  406b5a:	bf00      	nop

00406b5c <__multiply>:
  406b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b60:	690c      	ldr	r4, [r1, #16]
  406b62:	6915      	ldr	r5, [r2, #16]
  406b64:	42ac      	cmp	r4, r5
  406b66:	b083      	sub	sp, #12
  406b68:	468b      	mov	fp, r1
  406b6a:	4616      	mov	r6, r2
  406b6c:	da04      	bge.n	406b78 <__multiply+0x1c>
  406b6e:	4622      	mov	r2, r4
  406b70:	46b3      	mov	fp, r6
  406b72:	462c      	mov	r4, r5
  406b74:	460e      	mov	r6, r1
  406b76:	4615      	mov	r5, r2
  406b78:	f8db 3008 	ldr.w	r3, [fp, #8]
  406b7c:	f8db 1004 	ldr.w	r1, [fp, #4]
  406b80:	eb04 0805 	add.w	r8, r4, r5
  406b84:	4598      	cmp	r8, r3
  406b86:	bfc8      	it	gt
  406b88:	3101      	addgt	r1, #1
  406b8a:	f7ff ff1d 	bl	4069c8 <_Balloc>
  406b8e:	f100 0914 	add.w	r9, r0, #20
  406b92:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406b96:	45d1      	cmp	r9, sl
  406b98:	9000      	str	r0, [sp, #0]
  406b9a:	d205      	bcs.n	406ba8 <__multiply+0x4c>
  406b9c:	464b      	mov	r3, r9
  406b9e:	2100      	movs	r1, #0
  406ba0:	f843 1b04 	str.w	r1, [r3], #4
  406ba4:	459a      	cmp	sl, r3
  406ba6:	d8fb      	bhi.n	406ba0 <__multiply+0x44>
  406ba8:	f106 0c14 	add.w	ip, r6, #20
  406bac:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406bb0:	f10b 0b14 	add.w	fp, fp, #20
  406bb4:	459c      	cmp	ip, r3
  406bb6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406bba:	d24c      	bcs.n	406c56 <__multiply+0xfa>
  406bbc:	f8cd a004 	str.w	sl, [sp, #4]
  406bc0:	469a      	mov	sl, r3
  406bc2:	f8dc 5000 	ldr.w	r5, [ip]
  406bc6:	b2af      	uxth	r7, r5
  406bc8:	b1ef      	cbz	r7, 406c06 <__multiply+0xaa>
  406bca:	2100      	movs	r1, #0
  406bcc:	464d      	mov	r5, r9
  406bce:	465e      	mov	r6, fp
  406bd0:	460c      	mov	r4, r1
  406bd2:	f856 2b04 	ldr.w	r2, [r6], #4
  406bd6:	6828      	ldr	r0, [r5, #0]
  406bd8:	b293      	uxth	r3, r2
  406bda:	b281      	uxth	r1, r0
  406bdc:	fb07 1303 	mla	r3, r7, r3, r1
  406be0:	0c12      	lsrs	r2, r2, #16
  406be2:	0c01      	lsrs	r1, r0, #16
  406be4:	4423      	add	r3, r4
  406be6:	fb07 1102 	mla	r1, r7, r2, r1
  406bea:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406bee:	b29b      	uxth	r3, r3
  406bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406bf4:	45b6      	cmp	lr, r6
  406bf6:	f845 3b04 	str.w	r3, [r5], #4
  406bfa:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406bfe:	d8e8      	bhi.n	406bd2 <__multiply+0x76>
  406c00:	602c      	str	r4, [r5, #0]
  406c02:	f8dc 5000 	ldr.w	r5, [ip]
  406c06:	0c2d      	lsrs	r5, r5, #16
  406c08:	d01d      	beq.n	406c46 <__multiply+0xea>
  406c0a:	f8d9 3000 	ldr.w	r3, [r9]
  406c0e:	4648      	mov	r0, r9
  406c10:	461c      	mov	r4, r3
  406c12:	4659      	mov	r1, fp
  406c14:	2200      	movs	r2, #0
  406c16:	880e      	ldrh	r6, [r1, #0]
  406c18:	0c24      	lsrs	r4, r4, #16
  406c1a:	fb05 4406 	mla	r4, r5, r6, r4
  406c1e:	4422      	add	r2, r4
  406c20:	b29b      	uxth	r3, r3
  406c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406c26:	f840 3b04 	str.w	r3, [r0], #4
  406c2a:	f851 3b04 	ldr.w	r3, [r1], #4
  406c2e:	6804      	ldr	r4, [r0, #0]
  406c30:	0c1b      	lsrs	r3, r3, #16
  406c32:	b2a6      	uxth	r6, r4
  406c34:	fb05 6303 	mla	r3, r5, r3, r6
  406c38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406c3c:	458e      	cmp	lr, r1
  406c3e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406c42:	d8e8      	bhi.n	406c16 <__multiply+0xba>
  406c44:	6003      	str	r3, [r0, #0]
  406c46:	f10c 0c04 	add.w	ip, ip, #4
  406c4a:	45e2      	cmp	sl, ip
  406c4c:	f109 0904 	add.w	r9, r9, #4
  406c50:	d8b7      	bhi.n	406bc2 <__multiply+0x66>
  406c52:	f8dd a004 	ldr.w	sl, [sp, #4]
  406c56:	f1b8 0f00 	cmp.w	r8, #0
  406c5a:	dd0b      	ble.n	406c74 <__multiply+0x118>
  406c5c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406c60:	f1aa 0a04 	sub.w	sl, sl, #4
  406c64:	b11b      	cbz	r3, 406c6e <__multiply+0x112>
  406c66:	e005      	b.n	406c74 <__multiply+0x118>
  406c68:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406c6c:	b913      	cbnz	r3, 406c74 <__multiply+0x118>
  406c6e:	f1b8 0801 	subs.w	r8, r8, #1
  406c72:	d1f9      	bne.n	406c68 <__multiply+0x10c>
  406c74:	9800      	ldr	r0, [sp, #0]
  406c76:	f8c0 8010 	str.w	r8, [r0, #16]
  406c7a:	b003      	add	sp, #12
  406c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406c80 <__pow5mult>:
  406c80:	f012 0303 	ands.w	r3, r2, #3
  406c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c88:	4614      	mov	r4, r2
  406c8a:	4607      	mov	r7, r0
  406c8c:	d12e      	bne.n	406cec <__pow5mult+0x6c>
  406c8e:	460d      	mov	r5, r1
  406c90:	10a4      	asrs	r4, r4, #2
  406c92:	d01c      	beq.n	406cce <__pow5mult+0x4e>
  406c94:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406c96:	b396      	cbz	r6, 406cfe <__pow5mult+0x7e>
  406c98:	07e3      	lsls	r3, r4, #31
  406c9a:	f04f 0800 	mov.w	r8, #0
  406c9e:	d406      	bmi.n	406cae <__pow5mult+0x2e>
  406ca0:	1064      	asrs	r4, r4, #1
  406ca2:	d014      	beq.n	406cce <__pow5mult+0x4e>
  406ca4:	6830      	ldr	r0, [r6, #0]
  406ca6:	b1a8      	cbz	r0, 406cd4 <__pow5mult+0x54>
  406ca8:	4606      	mov	r6, r0
  406caa:	07e3      	lsls	r3, r4, #31
  406cac:	d5f8      	bpl.n	406ca0 <__pow5mult+0x20>
  406cae:	4632      	mov	r2, r6
  406cb0:	4629      	mov	r1, r5
  406cb2:	4638      	mov	r0, r7
  406cb4:	f7ff ff52 	bl	406b5c <__multiply>
  406cb8:	b1b5      	cbz	r5, 406ce8 <__pow5mult+0x68>
  406cba:	686a      	ldr	r2, [r5, #4]
  406cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406cbe:	1064      	asrs	r4, r4, #1
  406cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406cc4:	6029      	str	r1, [r5, #0]
  406cc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406cca:	4605      	mov	r5, r0
  406ccc:	d1ea      	bne.n	406ca4 <__pow5mult+0x24>
  406cce:	4628      	mov	r0, r5
  406cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cd4:	4632      	mov	r2, r6
  406cd6:	4631      	mov	r1, r6
  406cd8:	4638      	mov	r0, r7
  406cda:	f7ff ff3f 	bl	406b5c <__multiply>
  406cde:	6030      	str	r0, [r6, #0]
  406ce0:	f8c0 8000 	str.w	r8, [r0]
  406ce4:	4606      	mov	r6, r0
  406ce6:	e7e0      	b.n	406caa <__pow5mult+0x2a>
  406ce8:	4605      	mov	r5, r0
  406cea:	e7d9      	b.n	406ca0 <__pow5mult+0x20>
  406cec:	1e5a      	subs	r2, r3, #1
  406cee:	4d0b      	ldr	r5, [pc, #44]	; (406d1c <__pow5mult+0x9c>)
  406cf0:	2300      	movs	r3, #0
  406cf2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406cf6:	f7ff fe97 	bl	406a28 <__multadd>
  406cfa:	4605      	mov	r5, r0
  406cfc:	e7c8      	b.n	406c90 <__pow5mult+0x10>
  406cfe:	2101      	movs	r1, #1
  406d00:	4638      	mov	r0, r7
  406d02:	f7ff fe61 	bl	4069c8 <_Balloc>
  406d06:	f240 2171 	movw	r1, #625	; 0x271
  406d0a:	2201      	movs	r2, #1
  406d0c:	2300      	movs	r3, #0
  406d0e:	6141      	str	r1, [r0, #20]
  406d10:	6102      	str	r2, [r0, #16]
  406d12:	4606      	mov	r6, r0
  406d14:	64b8      	str	r0, [r7, #72]	; 0x48
  406d16:	6003      	str	r3, [r0, #0]
  406d18:	e7be      	b.n	406c98 <__pow5mult+0x18>
  406d1a:	bf00      	nop
  406d1c:	004090f0 	.word	0x004090f0

00406d20 <__lshift>:
  406d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406d24:	4691      	mov	r9, r2
  406d26:	690a      	ldr	r2, [r1, #16]
  406d28:	688b      	ldr	r3, [r1, #8]
  406d2a:	ea4f 1469 	mov.w	r4, r9, asr #5
  406d2e:	eb04 0802 	add.w	r8, r4, r2
  406d32:	f108 0501 	add.w	r5, r8, #1
  406d36:	429d      	cmp	r5, r3
  406d38:	460e      	mov	r6, r1
  406d3a:	4607      	mov	r7, r0
  406d3c:	6849      	ldr	r1, [r1, #4]
  406d3e:	dd04      	ble.n	406d4a <__lshift+0x2a>
  406d40:	005b      	lsls	r3, r3, #1
  406d42:	429d      	cmp	r5, r3
  406d44:	f101 0101 	add.w	r1, r1, #1
  406d48:	dcfa      	bgt.n	406d40 <__lshift+0x20>
  406d4a:	4638      	mov	r0, r7
  406d4c:	f7ff fe3c 	bl	4069c8 <_Balloc>
  406d50:	2c00      	cmp	r4, #0
  406d52:	f100 0314 	add.w	r3, r0, #20
  406d56:	dd06      	ble.n	406d66 <__lshift+0x46>
  406d58:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406d5c:	2100      	movs	r1, #0
  406d5e:	f843 1b04 	str.w	r1, [r3], #4
  406d62:	429a      	cmp	r2, r3
  406d64:	d1fb      	bne.n	406d5e <__lshift+0x3e>
  406d66:	6934      	ldr	r4, [r6, #16]
  406d68:	f106 0114 	add.w	r1, r6, #20
  406d6c:	f019 091f 	ands.w	r9, r9, #31
  406d70:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406d74:	d01d      	beq.n	406db2 <__lshift+0x92>
  406d76:	f1c9 0c20 	rsb	ip, r9, #32
  406d7a:	2200      	movs	r2, #0
  406d7c:	680c      	ldr	r4, [r1, #0]
  406d7e:	fa04 f409 	lsl.w	r4, r4, r9
  406d82:	4314      	orrs	r4, r2
  406d84:	f843 4b04 	str.w	r4, [r3], #4
  406d88:	f851 2b04 	ldr.w	r2, [r1], #4
  406d8c:	458e      	cmp	lr, r1
  406d8e:	fa22 f20c 	lsr.w	r2, r2, ip
  406d92:	d8f3      	bhi.n	406d7c <__lshift+0x5c>
  406d94:	601a      	str	r2, [r3, #0]
  406d96:	b10a      	cbz	r2, 406d9c <__lshift+0x7c>
  406d98:	f108 0502 	add.w	r5, r8, #2
  406d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406d9e:	6872      	ldr	r2, [r6, #4]
  406da0:	3d01      	subs	r5, #1
  406da2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406da6:	6105      	str	r5, [r0, #16]
  406da8:	6031      	str	r1, [r6, #0]
  406daa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406db2:	3b04      	subs	r3, #4
  406db4:	f851 2b04 	ldr.w	r2, [r1], #4
  406db8:	f843 2f04 	str.w	r2, [r3, #4]!
  406dbc:	458e      	cmp	lr, r1
  406dbe:	d8f9      	bhi.n	406db4 <__lshift+0x94>
  406dc0:	e7ec      	b.n	406d9c <__lshift+0x7c>
  406dc2:	bf00      	nop

00406dc4 <__mcmp>:
  406dc4:	b430      	push	{r4, r5}
  406dc6:	690b      	ldr	r3, [r1, #16]
  406dc8:	4605      	mov	r5, r0
  406dca:	6900      	ldr	r0, [r0, #16]
  406dcc:	1ac0      	subs	r0, r0, r3
  406dce:	d10f      	bne.n	406df0 <__mcmp+0x2c>
  406dd0:	009b      	lsls	r3, r3, #2
  406dd2:	3514      	adds	r5, #20
  406dd4:	3114      	adds	r1, #20
  406dd6:	4419      	add	r1, r3
  406dd8:	442b      	add	r3, r5
  406dda:	e001      	b.n	406de0 <__mcmp+0x1c>
  406ddc:	429d      	cmp	r5, r3
  406dde:	d207      	bcs.n	406df0 <__mcmp+0x2c>
  406de0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406de4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406de8:	4294      	cmp	r4, r2
  406dea:	d0f7      	beq.n	406ddc <__mcmp+0x18>
  406dec:	d302      	bcc.n	406df4 <__mcmp+0x30>
  406dee:	2001      	movs	r0, #1
  406df0:	bc30      	pop	{r4, r5}
  406df2:	4770      	bx	lr
  406df4:	f04f 30ff 	mov.w	r0, #4294967295
  406df8:	e7fa      	b.n	406df0 <__mcmp+0x2c>
  406dfa:	bf00      	nop

00406dfc <__mdiff>:
  406dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e00:	690f      	ldr	r7, [r1, #16]
  406e02:	460e      	mov	r6, r1
  406e04:	6911      	ldr	r1, [r2, #16]
  406e06:	1a7f      	subs	r7, r7, r1
  406e08:	2f00      	cmp	r7, #0
  406e0a:	4690      	mov	r8, r2
  406e0c:	d117      	bne.n	406e3e <__mdiff+0x42>
  406e0e:	0089      	lsls	r1, r1, #2
  406e10:	f106 0514 	add.w	r5, r6, #20
  406e14:	f102 0e14 	add.w	lr, r2, #20
  406e18:	186b      	adds	r3, r5, r1
  406e1a:	4471      	add	r1, lr
  406e1c:	e001      	b.n	406e22 <__mdiff+0x26>
  406e1e:	429d      	cmp	r5, r3
  406e20:	d25c      	bcs.n	406edc <__mdiff+0xe0>
  406e22:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406e26:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406e2a:	42a2      	cmp	r2, r4
  406e2c:	d0f7      	beq.n	406e1e <__mdiff+0x22>
  406e2e:	d25e      	bcs.n	406eee <__mdiff+0xf2>
  406e30:	4633      	mov	r3, r6
  406e32:	462c      	mov	r4, r5
  406e34:	4646      	mov	r6, r8
  406e36:	4675      	mov	r5, lr
  406e38:	4698      	mov	r8, r3
  406e3a:	2701      	movs	r7, #1
  406e3c:	e005      	b.n	406e4a <__mdiff+0x4e>
  406e3e:	db58      	blt.n	406ef2 <__mdiff+0xf6>
  406e40:	f106 0514 	add.w	r5, r6, #20
  406e44:	f108 0414 	add.w	r4, r8, #20
  406e48:	2700      	movs	r7, #0
  406e4a:	6871      	ldr	r1, [r6, #4]
  406e4c:	f7ff fdbc 	bl	4069c8 <_Balloc>
  406e50:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406e54:	6936      	ldr	r6, [r6, #16]
  406e56:	60c7      	str	r7, [r0, #12]
  406e58:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406e5c:	46a6      	mov	lr, r4
  406e5e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406e62:	f100 0414 	add.w	r4, r0, #20
  406e66:	2300      	movs	r3, #0
  406e68:	f85e 1b04 	ldr.w	r1, [lr], #4
  406e6c:	f855 8b04 	ldr.w	r8, [r5], #4
  406e70:	b28a      	uxth	r2, r1
  406e72:	fa13 f388 	uxtah	r3, r3, r8
  406e76:	0c09      	lsrs	r1, r1, #16
  406e78:	1a9a      	subs	r2, r3, r2
  406e7a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406e7e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406e82:	b292      	uxth	r2, r2
  406e84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406e88:	45f4      	cmp	ip, lr
  406e8a:	f844 2b04 	str.w	r2, [r4], #4
  406e8e:	ea4f 4323 	mov.w	r3, r3, asr #16
  406e92:	d8e9      	bhi.n	406e68 <__mdiff+0x6c>
  406e94:	42af      	cmp	r7, r5
  406e96:	d917      	bls.n	406ec8 <__mdiff+0xcc>
  406e98:	46a4      	mov	ip, r4
  406e9a:	46ae      	mov	lr, r5
  406e9c:	f85e 2b04 	ldr.w	r2, [lr], #4
  406ea0:	fa13 f382 	uxtah	r3, r3, r2
  406ea4:	1419      	asrs	r1, r3, #16
  406ea6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406eaa:	b29b      	uxth	r3, r3
  406eac:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406eb0:	4577      	cmp	r7, lr
  406eb2:	f84c 2b04 	str.w	r2, [ip], #4
  406eb6:	ea4f 4321 	mov.w	r3, r1, asr #16
  406eba:	d8ef      	bhi.n	406e9c <__mdiff+0xa0>
  406ebc:	43ed      	mvns	r5, r5
  406ebe:	442f      	add	r7, r5
  406ec0:	f027 0703 	bic.w	r7, r7, #3
  406ec4:	3704      	adds	r7, #4
  406ec6:	443c      	add	r4, r7
  406ec8:	3c04      	subs	r4, #4
  406eca:	b922      	cbnz	r2, 406ed6 <__mdiff+0xda>
  406ecc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406ed0:	3e01      	subs	r6, #1
  406ed2:	2b00      	cmp	r3, #0
  406ed4:	d0fa      	beq.n	406ecc <__mdiff+0xd0>
  406ed6:	6106      	str	r6, [r0, #16]
  406ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406edc:	2100      	movs	r1, #0
  406ede:	f7ff fd73 	bl	4069c8 <_Balloc>
  406ee2:	2201      	movs	r2, #1
  406ee4:	2300      	movs	r3, #0
  406ee6:	6102      	str	r2, [r0, #16]
  406ee8:	6143      	str	r3, [r0, #20]
  406eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406eee:	4674      	mov	r4, lr
  406ef0:	e7ab      	b.n	406e4a <__mdiff+0x4e>
  406ef2:	4633      	mov	r3, r6
  406ef4:	f106 0414 	add.w	r4, r6, #20
  406ef8:	f102 0514 	add.w	r5, r2, #20
  406efc:	4616      	mov	r6, r2
  406efe:	2701      	movs	r7, #1
  406f00:	4698      	mov	r8, r3
  406f02:	e7a2      	b.n	406e4a <__mdiff+0x4e>

00406f04 <__d2b>:
  406f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f08:	b082      	sub	sp, #8
  406f0a:	2101      	movs	r1, #1
  406f0c:	461c      	mov	r4, r3
  406f0e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406f12:	4615      	mov	r5, r2
  406f14:	9e08      	ldr	r6, [sp, #32]
  406f16:	f7ff fd57 	bl	4069c8 <_Balloc>
  406f1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406f1e:	4680      	mov	r8, r0
  406f20:	b10f      	cbz	r7, 406f26 <__d2b+0x22>
  406f22:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406f26:	9401      	str	r4, [sp, #4]
  406f28:	b31d      	cbz	r5, 406f72 <__d2b+0x6e>
  406f2a:	a802      	add	r0, sp, #8
  406f2c:	f840 5d08 	str.w	r5, [r0, #-8]!
  406f30:	f7ff fdda 	bl	406ae8 <__lo0bits>
  406f34:	2800      	cmp	r0, #0
  406f36:	d134      	bne.n	406fa2 <__d2b+0x9e>
  406f38:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406f3c:	f8c8 2014 	str.w	r2, [r8, #20]
  406f40:	2b00      	cmp	r3, #0
  406f42:	bf0c      	ite	eq
  406f44:	2101      	moveq	r1, #1
  406f46:	2102      	movne	r1, #2
  406f48:	f8c8 3018 	str.w	r3, [r8, #24]
  406f4c:	f8c8 1010 	str.w	r1, [r8, #16]
  406f50:	b9df      	cbnz	r7, 406f8a <__d2b+0x86>
  406f52:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406f56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406f5a:	6030      	str	r0, [r6, #0]
  406f5c:	6918      	ldr	r0, [r3, #16]
  406f5e:	f7ff fda3 	bl	406aa8 <__hi0bits>
  406f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f64:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406f68:	6018      	str	r0, [r3, #0]
  406f6a:	4640      	mov	r0, r8
  406f6c:	b002      	add	sp, #8
  406f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f72:	a801      	add	r0, sp, #4
  406f74:	f7ff fdb8 	bl	406ae8 <__lo0bits>
  406f78:	9b01      	ldr	r3, [sp, #4]
  406f7a:	f8c8 3014 	str.w	r3, [r8, #20]
  406f7e:	2101      	movs	r1, #1
  406f80:	3020      	adds	r0, #32
  406f82:	f8c8 1010 	str.w	r1, [r8, #16]
  406f86:	2f00      	cmp	r7, #0
  406f88:	d0e3      	beq.n	406f52 <__d2b+0x4e>
  406f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f8c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406f90:	4407      	add	r7, r0
  406f92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406f96:	6037      	str	r7, [r6, #0]
  406f98:	6018      	str	r0, [r3, #0]
  406f9a:	4640      	mov	r0, r8
  406f9c:	b002      	add	sp, #8
  406f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406fa2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406fa6:	f1c0 0220 	rsb	r2, r0, #32
  406faa:	fa03 f202 	lsl.w	r2, r3, r2
  406fae:	430a      	orrs	r2, r1
  406fb0:	40c3      	lsrs	r3, r0
  406fb2:	9301      	str	r3, [sp, #4]
  406fb4:	f8c8 2014 	str.w	r2, [r8, #20]
  406fb8:	e7c2      	b.n	406f40 <__d2b+0x3c>
  406fba:	bf00      	nop

00406fbc <_sbrk_r>:
  406fbc:	b538      	push	{r3, r4, r5, lr}
  406fbe:	4c07      	ldr	r4, [pc, #28]	; (406fdc <_sbrk_r+0x20>)
  406fc0:	2300      	movs	r3, #0
  406fc2:	4605      	mov	r5, r0
  406fc4:	4608      	mov	r0, r1
  406fc6:	6023      	str	r3, [r4, #0]
  406fc8:	f7fc fa64 	bl	403494 <_sbrk>
  406fcc:	1c43      	adds	r3, r0, #1
  406fce:	d000      	beq.n	406fd2 <_sbrk_r+0x16>
  406fd0:	bd38      	pop	{r3, r4, r5, pc}
  406fd2:	6823      	ldr	r3, [r4, #0]
  406fd4:	2b00      	cmp	r3, #0
  406fd6:	d0fb      	beq.n	406fd0 <_sbrk_r+0x14>
  406fd8:	602b      	str	r3, [r5, #0]
  406fda:	bd38      	pop	{r3, r4, r5, pc}
  406fdc:	2040c6e4 	.word	0x2040c6e4

00406fe0 <__ssprint_r>:
  406fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fe4:	6893      	ldr	r3, [r2, #8]
  406fe6:	b083      	sub	sp, #12
  406fe8:	4690      	mov	r8, r2
  406fea:	2b00      	cmp	r3, #0
  406fec:	d070      	beq.n	4070d0 <__ssprint_r+0xf0>
  406fee:	4682      	mov	sl, r0
  406ff0:	460c      	mov	r4, r1
  406ff2:	6817      	ldr	r7, [r2, #0]
  406ff4:	688d      	ldr	r5, [r1, #8]
  406ff6:	6808      	ldr	r0, [r1, #0]
  406ff8:	e042      	b.n	407080 <__ssprint_r+0xa0>
  406ffa:	89a3      	ldrh	r3, [r4, #12]
  406ffc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407000:	d02e      	beq.n	407060 <__ssprint_r+0x80>
  407002:	6965      	ldr	r5, [r4, #20]
  407004:	6921      	ldr	r1, [r4, #16]
  407006:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40700a:	eba0 0b01 	sub.w	fp, r0, r1
  40700e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  407012:	f10b 0001 	add.w	r0, fp, #1
  407016:	106d      	asrs	r5, r5, #1
  407018:	4430      	add	r0, r6
  40701a:	42a8      	cmp	r0, r5
  40701c:	462a      	mov	r2, r5
  40701e:	bf84      	itt	hi
  407020:	4605      	movhi	r5, r0
  407022:	462a      	movhi	r2, r5
  407024:	055b      	lsls	r3, r3, #21
  407026:	d538      	bpl.n	40709a <__ssprint_r+0xba>
  407028:	4611      	mov	r1, r2
  40702a:	4650      	mov	r0, sl
  40702c:	f7ff f9be 	bl	4063ac <_malloc_r>
  407030:	2800      	cmp	r0, #0
  407032:	d03c      	beq.n	4070ae <__ssprint_r+0xce>
  407034:	465a      	mov	r2, fp
  407036:	6921      	ldr	r1, [r4, #16]
  407038:	9001      	str	r0, [sp, #4]
  40703a:	f7fc fe05 	bl	403c48 <memcpy>
  40703e:	89a2      	ldrh	r2, [r4, #12]
  407040:	9b01      	ldr	r3, [sp, #4]
  407042:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40704a:	81a2      	strh	r2, [r4, #12]
  40704c:	eba5 020b 	sub.w	r2, r5, fp
  407050:	eb03 000b 	add.w	r0, r3, fp
  407054:	6165      	str	r5, [r4, #20]
  407056:	6123      	str	r3, [r4, #16]
  407058:	6020      	str	r0, [r4, #0]
  40705a:	60a2      	str	r2, [r4, #8]
  40705c:	4635      	mov	r5, r6
  40705e:	46b3      	mov	fp, r6
  407060:	465a      	mov	r2, fp
  407062:	4649      	mov	r1, r9
  407064:	f000 fa18 	bl	407498 <memmove>
  407068:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40706c:	68a2      	ldr	r2, [r4, #8]
  40706e:	6820      	ldr	r0, [r4, #0]
  407070:	1b55      	subs	r5, r2, r5
  407072:	4458      	add	r0, fp
  407074:	1b9e      	subs	r6, r3, r6
  407076:	60a5      	str	r5, [r4, #8]
  407078:	6020      	str	r0, [r4, #0]
  40707a:	f8c8 6008 	str.w	r6, [r8, #8]
  40707e:	b33e      	cbz	r6, 4070d0 <__ssprint_r+0xf0>
  407080:	687e      	ldr	r6, [r7, #4]
  407082:	463b      	mov	r3, r7
  407084:	3708      	adds	r7, #8
  407086:	2e00      	cmp	r6, #0
  407088:	d0fa      	beq.n	407080 <__ssprint_r+0xa0>
  40708a:	42ae      	cmp	r6, r5
  40708c:	f8d3 9000 	ldr.w	r9, [r3]
  407090:	46ab      	mov	fp, r5
  407092:	d2b2      	bcs.n	406ffa <__ssprint_r+0x1a>
  407094:	4635      	mov	r5, r6
  407096:	46b3      	mov	fp, r6
  407098:	e7e2      	b.n	407060 <__ssprint_r+0x80>
  40709a:	4650      	mov	r0, sl
  40709c:	f000 fa60 	bl	407560 <_realloc_r>
  4070a0:	4603      	mov	r3, r0
  4070a2:	2800      	cmp	r0, #0
  4070a4:	d1d2      	bne.n	40704c <__ssprint_r+0x6c>
  4070a6:	6921      	ldr	r1, [r4, #16]
  4070a8:	4650      	mov	r0, sl
  4070aa:	f000 f8f9 	bl	4072a0 <_free_r>
  4070ae:	230c      	movs	r3, #12
  4070b0:	f8ca 3000 	str.w	r3, [sl]
  4070b4:	89a3      	ldrh	r3, [r4, #12]
  4070b6:	2200      	movs	r2, #0
  4070b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070bc:	f04f 30ff 	mov.w	r0, #4294967295
  4070c0:	81a3      	strh	r3, [r4, #12]
  4070c2:	f8c8 2008 	str.w	r2, [r8, #8]
  4070c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4070ca:	b003      	add	sp, #12
  4070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070d0:	2000      	movs	r0, #0
  4070d2:	f8c8 0004 	str.w	r0, [r8, #4]
  4070d6:	b003      	add	sp, #12
  4070d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004070dc <__register_exitproc>:
  4070dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4070e0:	4d2c      	ldr	r5, [pc, #176]	; (407194 <__register_exitproc+0xb8>)
  4070e2:	4606      	mov	r6, r0
  4070e4:	6828      	ldr	r0, [r5, #0]
  4070e6:	4698      	mov	r8, r3
  4070e8:	460f      	mov	r7, r1
  4070ea:	4691      	mov	r9, r2
  4070ec:	f7ff f95a 	bl	4063a4 <__retarget_lock_acquire_recursive>
  4070f0:	4b29      	ldr	r3, [pc, #164]	; (407198 <__register_exitproc+0xbc>)
  4070f2:	681c      	ldr	r4, [r3, #0]
  4070f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4070f8:	2b00      	cmp	r3, #0
  4070fa:	d03e      	beq.n	40717a <__register_exitproc+0x9e>
  4070fc:	685a      	ldr	r2, [r3, #4]
  4070fe:	2a1f      	cmp	r2, #31
  407100:	dc1c      	bgt.n	40713c <__register_exitproc+0x60>
  407102:	f102 0e01 	add.w	lr, r2, #1
  407106:	b176      	cbz	r6, 407126 <__register_exitproc+0x4a>
  407108:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40710c:	2401      	movs	r4, #1
  40710e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407112:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407116:	4094      	lsls	r4, r2
  407118:	4320      	orrs	r0, r4
  40711a:	2e02      	cmp	r6, #2
  40711c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407120:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407124:	d023      	beq.n	40716e <__register_exitproc+0x92>
  407126:	3202      	adds	r2, #2
  407128:	f8c3 e004 	str.w	lr, [r3, #4]
  40712c:	6828      	ldr	r0, [r5, #0]
  40712e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407132:	f7ff f939 	bl	4063a8 <__retarget_lock_release_recursive>
  407136:	2000      	movs	r0, #0
  407138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40713c:	4b17      	ldr	r3, [pc, #92]	; (40719c <__register_exitproc+0xc0>)
  40713e:	b30b      	cbz	r3, 407184 <__register_exitproc+0xa8>
  407140:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407144:	f3af 8000 	nop.w
  407148:	4603      	mov	r3, r0
  40714a:	b1d8      	cbz	r0, 407184 <__register_exitproc+0xa8>
  40714c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407150:	6002      	str	r2, [r0, #0]
  407152:	2100      	movs	r1, #0
  407154:	6041      	str	r1, [r0, #4]
  407156:	460a      	mov	r2, r1
  407158:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40715c:	f04f 0e01 	mov.w	lr, #1
  407160:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407164:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407168:	2e00      	cmp	r6, #0
  40716a:	d0dc      	beq.n	407126 <__register_exitproc+0x4a>
  40716c:	e7cc      	b.n	407108 <__register_exitproc+0x2c>
  40716e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407172:	430c      	orrs	r4, r1
  407174:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407178:	e7d5      	b.n	407126 <__register_exitproc+0x4a>
  40717a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40717e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407182:	e7bb      	b.n	4070fc <__register_exitproc+0x20>
  407184:	6828      	ldr	r0, [r5, #0]
  407186:	f7ff f90f 	bl	4063a8 <__retarget_lock_release_recursive>
  40718a:	f04f 30ff 	mov.w	r0, #4294967295
  40718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407192:	bf00      	nop
  407194:	20400450 	.word	0x20400450
  407198:	00408f88 	.word	0x00408f88
  40719c:	00000000 	.word	0x00000000

004071a0 <_calloc_r>:
  4071a0:	b510      	push	{r4, lr}
  4071a2:	fb02 f101 	mul.w	r1, r2, r1
  4071a6:	f7ff f901 	bl	4063ac <_malloc_r>
  4071aa:	4604      	mov	r4, r0
  4071ac:	b1d8      	cbz	r0, 4071e6 <_calloc_r+0x46>
  4071ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4071b2:	f022 0203 	bic.w	r2, r2, #3
  4071b6:	3a04      	subs	r2, #4
  4071b8:	2a24      	cmp	r2, #36	; 0x24
  4071ba:	d818      	bhi.n	4071ee <_calloc_r+0x4e>
  4071bc:	2a13      	cmp	r2, #19
  4071be:	d914      	bls.n	4071ea <_calloc_r+0x4a>
  4071c0:	2300      	movs	r3, #0
  4071c2:	2a1b      	cmp	r2, #27
  4071c4:	6003      	str	r3, [r0, #0]
  4071c6:	6043      	str	r3, [r0, #4]
  4071c8:	d916      	bls.n	4071f8 <_calloc_r+0x58>
  4071ca:	2a24      	cmp	r2, #36	; 0x24
  4071cc:	6083      	str	r3, [r0, #8]
  4071ce:	60c3      	str	r3, [r0, #12]
  4071d0:	bf11      	iteee	ne
  4071d2:	f100 0210 	addne.w	r2, r0, #16
  4071d6:	6103      	streq	r3, [r0, #16]
  4071d8:	6143      	streq	r3, [r0, #20]
  4071da:	f100 0218 	addeq.w	r2, r0, #24
  4071de:	2300      	movs	r3, #0
  4071e0:	6013      	str	r3, [r2, #0]
  4071e2:	6053      	str	r3, [r2, #4]
  4071e4:	6093      	str	r3, [r2, #8]
  4071e6:	4620      	mov	r0, r4
  4071e8:	bd10      	pop	{r4, pc}
  4071ea:	4602      	mov	r2, r0
  4071ec:	e7f7      	b.n	4071de <_calloc_r+0x3e>
  4071ee:	2100      	movs	r1, #0
  4071f0:	f7fc fdc4 	bl	403d7c <memset>
  4071f4:	4620      	mov	r0, r4
  4071f6:	bd10      	pop	{r4, pc}
  4071f8:	f100 0208 	add.w	r2, r0, #8
  4071fc:	e7ef      	b.n	4071de <_calloc_r+0x3e>
  4071fe:	bf00      	nop

00407200 <_malloc_trim_r>:
  407200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407202:	4f24      	ldr	r7, [pc, #144]	; (407294 <_malloc_trim_r+0x94>)
  407204:	460c      	mov	r4, r1
  407206:	4606      	mov	r6, r0
  407208:	f7ff fbd2 	bl	4069b0 <__malloc_lock>
  40720c:	68bb      	ldr	r3, [r7, #8]
  40720e:	685d      	ldr	r5, [r3, #4]
  407210:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407214:	310f      	adds	r1, #15
  407216:	f025 0503 	bic.w	r5, r5, #3
  40721a:	4429      	add	r1, r5
  40721c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407220:	f021 010f 	bic.w	r1, r1, #15
  407224:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407228:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40722c:	db07      	blt.n	40723e <_malloc_trim_r+0x3e>
  40722e:	2100      	movs	r1, #0
  407230:	4630      	mov	r0, r6
  407232:	f7ff fec3 	bl	406fbc <_sbrk_r>
  407236:	68bb      	ldr	r3, [r7, #8]
  407238:	442b      	add	r3, r5
  40723a:	4298      	cmp	r0, r3
  40723c:	d004      	beq.n	407248 <_malloc_trim_r+0x48>
  40723e:	4630      	mov	r0, r6
  407240:	f7ff fbbc 	bl	4069bc <__malloc_unlock>
  407244:	2000      	movs	r0, #0
  407246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407248:	4261      	negs	r1, r4
  40724a:	4630      	mov	r0, r6
  40724c:	f7ff feb6 	bl	406fbc <_sbrk_r>
  407250:	3001      	adds	r0, #1
  407252:	d00d      	beq.n	407270 <_malloc_trim_r+0x70>
  407254:	4b10      	ldr	r3, [pc, #64]	; (407298 <_malloc_trim_r+0x98>)
  407256:	68ba      	ldr	r2, [r7, #8]
  407258:	6819      	ldr	r1, [r3, #0]
  40725a:	1b2d      	subs	r5, r5, r4
  40725c:	f045 0501 	orr.w	r5, r5, #1
  407260:	4630      	mov	r0, r6
  407262:	1b09      	subs	r1, r1, r4
  407264:	6055      	str	r5, [r2, #4]
  407266:	6019      	str	r1, [r3, #0]
  407268:	f7ff fba8 	bl	4069bc <__malloc_unlock>
  40726c:	2001      	movs	r0, #1
  40726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407270:	2100      	movs	r1, #0
  407272:	4630      	mov	r0, r6
  407274:	f7ff fea2 	bl	406fbc <_sbrk_r>
  407278:	68ba      	ldr	r2, [r7, #8]
  40727a:	1a83      	subs	r3, r0, r2
  40727c:	2b0f      	cmp	r3, #15
  40727e:	ddde      	ble.n	40723e <_malloc_trim_r+0x3e>
  407280:	4c06      	ldr	r4, [pc, #24]	; (40729c <_malloc_trim_r+0x9c>)
  407282:	4905      	ldr	r1, [pc, #20]	; (407298 <_malloc_trim_r+0x98>)
  407284:	6824      	ldr	r4, [r4, #0]
  407286:	f043 0301 	orr.w	r3, r3, #1
  40728a:	1b00      	subs	r0, r0, r4
  40728c:	6053      	str	r3, [r2, #4]
  40728e:	6008      	str	r0, [r1, #0]
  407290:	e7d5      	b.n	40723e <_malloc_trim_r+0x3e>
  407292:	bf00      	nop
  407294:	20400454 	.word	0x20400454
  407298:	2040c5bc 	.word	0x2040c5bc
  40729c:	2040085c 	.word	0x2040085c

004072a0 <_free_r>:
  4072a0:	2900      	cmp	r1, #0
  4072a2:	d044      	beq.n	40732e <_free_r+0x8e>
  4072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4072a8:	460d      	mov	r5, r1
  4072aa:	4680      	mov	r8, r0
  4072ac:	f7ff fb80 	bl	4069b0 <__malloc_lock>
  4072b0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4072b4:	4969      	ldr	r1, [pc, #420]	; (40745c <_free_r+0x1bc>)
  4072b6:	f027 0301 	bic.w	r3, r7, #1
  4072ba:	f1a5 0408 	sub.w	r4, r5, #8
  4072be:	18e2      	adds	r2, r4, r3
  4072c0:	688e      	ldr	r6, [r1, #8]
  4072c2:	6850      	ldr	r0, [r2, #4]
  4072c4:	42b2      	cmp	r2, r6
  4072c6:	f020 0003 	bic.w	r0, r0, #3
  4072ca:	d05e      	beq.n	40738a <_free_r+0xea>
  4072cc:	07fe      	lsls	r6, r7, #31
  4072ce:	6050      	str	r0, [r2, #4]
  4072d0:	d40b      	bmi.n	4072ea <_free_r+0x4a>
  4072d2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4072d6:	1be4      	subs	r4, r4, r7
  4072d8:	f101 0e08 	add.w	lr, r1, #8
  4072dc:	68a5      	ldr	r5, [r4, #8]
  4072de:	4575      	cmp	r5, lr
  4072e0:	443b      	add	r3, r7
  4072e2:	d06d      	beq.n	4073c0 <_free_r+0x120>
  4072e4:	68e7      	ldr	r7, [r4, #12]
  4072e6:	60ef      	str	r7, [r5, #12]
  4072e8:	60bd      	str	r5, [r7, #8]
  4072ea:	1815      	adds	r5, r2, r0
  4072ec:	686d      	ldr	r5, [r5, #4]
  4072ee:	07ed      	lsls	r5, r5, #31
  4072f0:	d53e      	bpl.n	407370 <_free_r+0xd0>
  4072f2:	f043 0201 	orr.w	r2, r3, #1
  4072f6:	6062      	str	r2, [r4, #4]
  4072f8:	50e3      	str	r3, [r4, r3]
  4072fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4072fe:	d217      	bcs.n	407330 <_free_r+0x90>
  407300:	08db      	lsrs	r3, r3, #3
  407302:	1c58      	adds	r0, r3, #1
  407304:	109a      	asrs	r2, r3, #2
  407306:	684d      	ldr	r5, [r1, #4]
  407308:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40730c:	60a7      	str	r7, [r4, #8]
  40730e:	2301      	movs	r3, #1
  407310:	4093      	lsls	r3, r2
  407312:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407316:	432b      	orrs	r3, r5
  407318:	3a08      	subs	r2, #8
  40731a:	60e2      	str	r2, [r4, #12]
  40731c:	604b      	str	r3, [r1, #4]
  40731e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407322:	60fc      	str	r4, [r7, #12]
  407324:	4640      	mov	r0, r8
  407326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40732a:	f7ff bb47 	b.w	4069bc <__malloc_unlock>
  40732e:	4770      	bx	lr
  407330:	0a5a      	lsrs	r2, r3, #9
  407332:	2a04      	cmp	r2, #4
  407334:	d852      	bhi.n	4073dc <_free_r+0x13c>
  407336:	099a      	lsrs	r2, r3, #6
  407338:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40733c:	00ff      	lsls	r7, r7, #3
  40733e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407342:	19c8      	adds	r0, r1, r7
  407344:	59ca      	ldr	r2, [r1, r7]
  407346:	3808      	subs	r0, #8
  407348:	4290      	cmp	r0, r2
  40734a:	d04f      	beq.n	4073ec <_free_r+0x14c>
  40734c:	6851      	ldr	r1, [r2, #4]
  40734e:	f021 0103 	bic.w	r1, r1, #3
  407352:	428b      	cmp	r3, r1
  407354:	d232      	bcs.n	4073bc <_free_r+0x11c>
  407356:	6892      	ldr	r2, [r2, #8]
  407358:	4290      	cmp	r0, r2
  40735a:	d1f7      	bne.n	40734c <_free_r+0xac>
  40735c:	68c3      	ldr	r3, [r0, #12]
  40735e:	60a0      	str	r0, [r4, #8]
  407360:	60e3      	str	r3, [r4, #12]
  407362:	609c      	str	r4, [r3, #8]
  407364:	60c4      	str	r4, [r0, #12]
  407366:	4640      	mov	r0, r8
  407368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40736c:	f7ff bb26 	b.w	4069bc <__malloc_unlock>
  407370:	6895      	ldr	r5, [r2, #8]
  407372:	4f3b      	ldr	r7, [pc, #236]	; (407460 <_free_r+0x1c0>)
  407374:	42bd      	cmp	r5, r7
  407376:	4403      	add	r3, r0
  407378:	d040      	beq.n	4073fc <_free_r+0x15c>
  40737a:	68d0      	ldr	r0, [r2, #12]
  40737c:	60e8      	str	r0, [r5, #12]
  40737e:	f043 0201 	orr.w	r2, r3, #1
  407382:	6085      	str	r5, [r0, #8]
  407384:	6062      	str	r2, [r4, #4]
  407386:	50e3      	str	r3, [r4, r3]
  407388:	e7b7      	b.n	4072fa <_free_r+0x5a>
  40738a:	07ff      	lsls	r7, r7, #31
  40738c:	4403      	add	r3, r0
  40738e:	d407      	bmi.n	4073a0 <_free_r+0x100>
  407390:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407394:	1aa4      	subs	r4, r4, r2
  407396:	4413      	add	r3, r2
  407398:	68a0      	ldr	r0, [r4, #8]
  40739a:	68e2      	ldr	r2, [r4, #12]
  40739c:	60c2      	str	r2, [r0, #12]
  40739e:	6090      	str	r0, [r2, #8]
  4073a0:	4a30      	ldr	r2, [pc, #192]	; (407464 <_free_r+0x1c4>)
  4073a2:	6812      	ldr	r2, [r2, #0]
  4073a4:	f043 0001 	orr.w	r0, r3, #1
  4073a8:	4293      	cmp	r3, r2
  4073aa:	6060      	str	r0, [r4, #4]
  4073ac:	608c      	str	r4, [r1, #8]
  4073ae:	d3b9      	bcc.n	407324 <_free_r+0x84>
  4073b0:	4b2d      	ldr	r3, [pc, #180]	; (407468 <_free_r+0x1c8>)
  4073b2:	4640      	mov	r0, r8
  4073b4:	6819      	ldr	r1, [r3, #0]
  4073b6:	f7ff ff23 	bl	407200 <_malloc_trim_r>
  4073ba:	e7b3      	b.n	407324 <_free_r+0x84>
  4073bc:	4610      	mov	r0, r2
  4073be:	e7cd      	b.n	40735c <_free_r+0xbc>
  4073c0:	1811      	adds	r1, r2, r0
  4073c2:	6849      	ldr	r1, [r1, #4]
  4073c4:	07c9      	lsls	r1, r1, #31
  4073c6:	d444      	bmi.n	407452 <_free_r+0x1b2>
  4073c8:	6891      	ldr	r1, [r2, #8]
  4073ca:	68d2      	ldr	r2, [r2, #12]
  4073cc:	60ca      	str	r2, [r1, #12]
  4073ce:	4403      	add	r3, r0
  4073d0:	f043 0001 	orr.w	r0, r3, #1
  4073d4:	6091      	str	r1, [r2, #8]
  4073d6:	6060      	str	r0, [r4, #4]
  4073d8:	50e3      	str	r3, [r4, r3]
  4073da:	e7a3      	b.n	407324 <_free_r+0x84>
  4073dc:	2a14      	cmp	r2, #20
  4073de:	d816      	bhi.n	40740e <_free_r+0x16e>
  4073e0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4073e4:	00ff      	lsls	r7, r7, #3
  4073e6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4073ea:	e7aa      	b.n	407342 <_free_r+0xa2>
  4073ec:	10aa      	asrs	r2, r5, #2
  4073ee:	2301      	movs	r3, #1
  4073f0:	684d      	ldr	r5, [r1, #4]
  4073f2:	4093      	lsls	r3, r2
  4073f4:	432b      	orrs	r3, r5
  4073f6:	604b      	str	r3, [r1, #4]
  4073f8:	4603      	mov	r3, r0
  4073fa:	e7b0      	b.n	40735e <_free_r+0xbe>
  4073fc:	f043 0201 	orr.w	r2, r3, #1
  407400:	614c      	str	r4, [r1, #20]
  407402:	610c      	str	r4, [r1, #16]
  407404:	60e5      	str	r5, [r4, #12]
  407406:	60a5      	str	r5, [r4, #8]
  407408:	6062      	str	r2, [r4, #4]
  40740a:	50e3      	str	r3, [r4, r3]
  40740c:	e78a      	b.n	407324 <_free_r+0x84>
  40740e:	2a54      	cmp	r2, #84	; 0x54
  407410:	d806      	bhi.n	407420 <_free_r+0x180>
  407412:	0b1a      	lsrs	r2, r3, #12
  407414:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407418:	00ff      	lsls	r7, r7, #3
  40741a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40741e:	e790      	b.n	407342 <_free_r+0xa2>
  407420:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407424:	d806      	bhi.n	407434 <_free_r+0x194>
  407426:	0bda      	lsrs	r2, r3, #15
  407428:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40742c:	00ff      	lsls	r7, r7, #3
  40742e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407432:	e786      	b.n	407342 <_free_r+0xa2>
  407434:	f240 5054 	movw	r0, #1364	; 0x554
  407438:	4282      	cmp	r2, r0
  40743a:	d806      	bhi.n	40744a <_free_r+0x1aa>
  40743c:	0c9a      	lsrs	r2, r3, #18
  40743e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407442:	00ff      	lsls	r7, r7, #3
  407444:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407448:	e77b      	b.n	407342 <_free_r+0xa2>
  40744a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40744e:	257e      	movs	r5, #126	; 0x7e
  407450:	e777      	b.n	407342 <_free_r+0xa2>
  407452:	f043 0101 	orr.w	r1, r3, #1
  407456:	6061      	str	r1, [r4, #4]
  407458:	6013      	str	r3, [r2, #0]
  40745a:	e763      	b.n	407324 <_free_r+0x84>
  40745c:	20400454 	.word	0x20400454
  407460:	2040045c 	.word	0x2040045c
  407464:	20400860 	.word	0x20400860
  407468:	2040c5ec 	.word	0x2040c5ec

0040746c <__ascii_mbtowc>:
  40746c:	b082      	sub	sp, #8
  40746e:	b149      	cbz	r1, 407484 <__ascii_mbtowc+0x18>
  407470:	b15a      	cbz	r2, 40748a <__ascii_mbtowc+0x1e>
  407472:	b16b      	cbz	r3, 407490 <__ascii_mbtowc+0x24>
  407474:	7813      	ldrb	r3, [r2, #0]
  407476:	600b      	str	r3, [r1, #0]
  407478:	7812      	ldrb	r2, [r2, #0]
  40747a:	1c10      	adds	r0, r2, #0
  40747c:	bf18      	it	ne
  40747e:	2001      	movne	r0, #1
  407480:	b002      	add	sp, #8
  407482:	4770      	bx	lr
  407484:	a901      	add	r1, sp, #4
  407486:	2a00      	cmp	r2, #0
  407488:	d1f3      	bne.n	407472 <__ascii_mbtowc+0x6>
  40748a:	4610      	mov	r0, r2
  40748c:	b002      	add	sp, #8
  40748e:	4770      	bx	lr
  407490:	f06f 0001 	mvn.w	r0, #1
  407494:	e7f4      	b.n	407480 <__ascii_mbtowc+0x14>
  407496:	bf00      	nop

00407498 <memmove>:
  407498:	4288      	cmp	r0, r1
  40749a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40749c:	d90d      	bls.n	4074ba <memmove+0x22>
  40749e:	188b      	adds	r3, r1, r2
  4074a0:	4298      	cmp	r0, r3
  4074a2:	d20a      	bcs.n	4074ba <memmove+0x22>
  4074a4:	1884      	adds	r4, r0, r2
  4074a6:	2a00      	cmp	r2, #0
  4074a8:	d051      	beq.n	40754e <memmove+0xb6>
  4074aa:	4622      	mov	r2, r4
  4074ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4074b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4074b4:	4299      	cmp	r1, r3
  4074b6:	d1f9      	bne.n	4074ac <memmove+0x14>
  4074b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074ba:	2a0f      	cmp	r2, #15
  4074bc:	d948      	bls.n	407550 <memmove+0xb8>
  4074be:	ea41 0300 	orr.w	r3, r1, r0
  4074c2:	079b      	lsls	r3, r3, #30
  4074c4:	d146      	bne.n	407554 <memmove+0xbc>
  4074c6:	f100 0410 	add.w	r4, r0, #16
  4074ca:	f101 0310 	add.w	r3, r1, #16
  4074ce:	4615      	mov	r5, r2
  4074d0:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4074d4:	f844 6c10 	str.w	r6, [r4, #-16]
  4074d8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4074dc:	f844 6c0c 	str.w	r6, [r4, #-12]
  4074e0:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4074e4:	f844 6c08 	str.w	r6, [r4, #-8]
  4074e8:	3d10      	subs	r5, #16
  4074ea:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4074ee:	f844 6c04 	str.w	r6, [r4, #-4]
  4074f2:	2d0f      	cmp	r5, #15
  4074f4:	f103 0310 	add.w	r3, r3, #16
  4074f8:	f104 0410 	add.w	r4, r4, #16
  4074fc:	d8e8      	bhi.n	4074d0 <memmove+0x38>
  4074fe:	f1a2 0310 	sub.w	r3, r2, #16
  407502:	f023 030f 	bic.w	r3, r3, #15
  407506:	f002 0e0f 	and.w	lr, r2, #15
  40750a:	3310      	adds	r3, #16
  40750c:	f1be 0f03 	cmp.w	lr, #3
  407510:	4419      	add	r1, r3
  407512:	4403      	add	r3, r0
  407514:	d921      	bls.n	40755a <memmove+0xc2>
  407516:	1f1e      	subs	r6, r3, #4
  407518:	460d      	mov	r5, r1
  40751a:	4674      	mov	r4, lr
  40751c:	3c04      	subs	r4, #4
  40751e:	f855 7b04 	ldr.w	r7, [r5], #4
  407522:	f846 7f04 	str.w	r7, [r6, #4]!
  407526:	2c03      	cmp	r4, #3
  407528:	d8f8      	bhi.n	40751c <memmove+0x84>
  40752a:	f1ae 0404 	sub.w	r4, lr, #4
  40752e:	f024 0403 	bic.w	r4, r4, #3
  407532:	3404      	adds	r4, #4
  407534:	4421      	add	r1, r4
  407536:	4423      	add	r3, r4
  407538:	f002 0203 	and.w	r2, r2, #3
  40753c:	b162      	cbz	r2, 407558 <memmove+0xc0>
  40753e:	3b01      	subs	r3, #1
  407540:	440a      	add	r2, r1
  407542:	f811 4b01 	ldrb.w	r4, [r1], #1
  407546:	f803 4f01 	strb.w	r4, [r3, #1]!
  40754a:	428a      	cmp	r2, r1
  40754c:	d1f9      	bne.n	407542 <memmove+0xaa>
  40754e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407550:	4603      	mov	r3, r0
  407552:	e7f3      	b.n	40753c <memmove+0xa4>
  407554:	4603      	mov	r3, r0
  407556:	e7f2      	b.n	40753e <memmove+0xa6>
  407558:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40755a:	4672      	mov	r2, lr
  40755c:	e7ee      	b.n	40753c <memmove+0xa4>
  40755e:	bf00      	nop

00407560 <_realloc_r>:
  407560:	2900      	cmp	r1, #0
  407562:	f000 8095 	beq.w	407690 <_realloc_r+0x130>
  407566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40756a:	460d      	mov	r5, r1
  40756c:	4616      	mov	r6, r2
  40756e:	b083      	sub	sp, #12
  407570:	4680      	mov	r8, r0
  407572:	f106 070b 	add.w	r7, r6, #11
  407576:	f7ff fa1b 	bl	4069b0 <__malloc_lock>
  40757a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40757e:	2f16      	cmp	r7, #22
  407580:	f02e 0403 	bic.w	r4, lr, #3
  407584:	f1a5 0908 	sub.w	r9, r5, #8
  407588:	d83c      	bhi.n	407604 <_realloc_r+0xa4>
  40758a:	2210      	movs	r2, #16
  40758c:	4617      	mov	r7, r2
  40758e:	42be      	cmp	r6, r7
  407590:	d83d      	bhi.n	40760e <_realloc_r+0xae>
  407592:	4294      	cmp	r4, r2
  407594:	da43      	bge.n	40761e <_realloc_r+0xbe>
  407596:	4bc4      	ldr	r3, [pc, #784]	; (4078a8 <_realloc_r+0x348>)
  407598:	6899      	ldr	r1, [r3, #8]
  40759a:	eb09 0004 	add.w	r0, r9, r4
  40759e:	4288      	cmp	r0, r1
  4075a0:	f000 80b4 	beq.w	40770c <_realloc_r+0x1ac>
  4075a4:	6843      	ldr	r3, [r0, #4]
  4075a6:	f023 0101 	bic.w	r1, r3, #1
  4075aa:	4401      	add	r1, r0
  4075ac:	6849      	ldr	r1, [r1, #4]
  4075ae:	07c9      	lsls	r1, r1, #31
  4075b0:	d54c      	bpl.n	40764c <_realloc_r+0xec>
  4075b2:	f01e 0f01 	tst.w	lr, #1
  4075b6:	f000 809b 	beq.w	4076f0 <_realloc_r+0x190>
  4075ba:	4631      	mov	r1, r6
  4075bc:	4640      	mov	r0, r8
  4075be:	f7fe fef5 	bl	4063ac <_malloc_r>
  4075c2:	4606      	mov	r6, r0
  4075c4:	2800      	cmp	r0, #0
  4075c6:	d03a      	beq.n	40763e <_realloc_r+0xde>
  4075c8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4075cc:	f023 0301 	bic.w	r3, r3, #1
  4075d0:	444b      	add	r3, r9
  4075d2:	f1a0 0208 	sub.w	r2, r0, #8
  4075d6:	429a      	cmp	r2, r3
  4075d8:	f000 8121 	beq.w	40781e <_realloc_r+0x2be>
  4075dc:	1f22      	subs	r2, r4, #4
  4075de:	2a24      	cmp	r2, #36	; 0x24
  4075e0:	f200 8107 	bhi.w	4077f2 <_realloc_r+0x292>
  4075e4:	2a13      	cmp	r2, #19
  4075e6:	f200 80db 	bhi.w	4077a0 <_realloc_r+0x240>
  4075ea:	4603      	mov	r3, r0
  4075ec:	462a      	mov	r2, r5
  4075ee:	6811      	ldr	r1, [r2, #0]
  4075f0:	6019      	str	r1, [r3, #0]
  4075f2:	6851      	ldr	r1, [r2, #4]
  4075f4:	6059      	str	r1, [r3, #4]
  4075f6:	6892      	ldr	r2, [r2, #8]
  4075f8:	609a      	str	r2, [r3, #8]
  4075fa:	4629      	mov	r1, r5
  4075fc:	4640      	mov	r0, r8
  4075fe:	f7ff fe4f 	bl	4072a0 <_free_r>
  407602:	e01c      	b.n	40763e <_realloc_r+0xde>
  407604:	f027 0707 	bic.w	r7, r7, #7
  407608:	2f00      	cmp	r7, #0
  40760a:	463a      	mov	r2, r7
  40760c:	dabf      	bge.n	40758e <_realloc_r+0x2e>
  40760e:	2600      	movs	r6, #0
  407610:	230c      	movs	r3, #12
  407612:	4630      	mov	r0, r6
  407614:	f8c8 3000 	str.w	r3, [r8]
  407618:	b003      	add	sp, #12
  40761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40761e:	462e      	mov	r6, r5
  407620:	1be3      	subs	r3, r4, r7
  407622:	2b0f      	cmp	r3, #15
  407624:	d81e      	bhi.n	407664 <_realloc_r+0x104>
  407626:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40762a:	f003 0301 	and.w	r3, r3, #1
  40762e:	4323      	orrs	r3, r4
  407630:	444c      	add	r4, r9
  407632:	f8c9 3004 	str.w	r3, [r9, #4]
  407636:	6863      	ldr	r3, [r4, #4]
  407638:	f043 0301 	orr.w	r3, r3, #1
  40763c:	6063      	str	r3, [r4, #4]
  40763e:	4640      	mov	r0, r8
  407640:	f7ff f9bc 	bl	4069bc <__malloc_unlock>
  407644:	4630      	mov	r0, r6
  407646:	b003      	add	sp, #12
  407648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40764c:	f023 0303 	bic.w	r3, r3, #3
  407650:	18e1      	adds	r1, r4, r3
  407652:	4291      	cmp	r1, r2
  407654:	db1f      	blt.n	407696 <_realloc_r+0x136>
  407656:	68c3      	ldr	r3, [r0, #12]
  407658:	6882      	ldr	r2, [r0, #8]
  40765a:	462e      	mov	r6, r5
  40765c:	60d3      	str	r3, [r2, #12]
  40765e:	460c      	mov	r4, r1
  407660:	609a      	str	r2, [r3, #8]
  407662:	e7dd      	b.n	407620 <_realloc_r+0xc0>
  407664:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407668:	eb09 0107 	add.w	r1, r9, r7
  40766c:	f002 0201 	and.w	r2, r2, #1
  407670:	444c      	add	r4, r9
  407672:	f043 0301 	orr.w	r3, r3, #1
  407676:	4317      	orrs	r7, r2
  407678:	f8c9 7004 	str.w	r7, [r9, #4]
  40767c:	604b      	str	r3, [r1, #4]
  40767e:	6863      	ldr	r3, [r4, #4]
  407680:	f043 0301 	orr.w	r3, r3, #1
  407684:	3108      	adds	r1, #8
  407686:	6063      	str	r3, [r4, #4]
  407688:	4640      	mov	r0, r8
  40768a:	f7ff fe09 	bl	4072a0 <_free_r>
  40768e:	e7d6      	b.n	40763e <_realloc_r+0xde>
  407690:	4611      	mov	r1, r2
  407692:	f7fe be8b 	b.w	4063ac <_malloc_r>
  407696:	f01e 0f01 	tst.w	lr, #1
  40769a:	d18e      	bne.n	4075ba <_realloc_r+0x5a>
  40769c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4076a0:	eba9 0a01 	sub.w	sl, r9, r1
  4076a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076a8:	f021 0103 	bic.w	r1, r1, #3
  4076ac:	440b      	add	r3, r1
  4076ae:	4423      	add	r3, r4
  4076b0:	4293      	cmp	r3, r2
  4076b2:	db25      	blt.n	407700 <_realloc_r+0x1a0>
  4076b4:	68c2      	ldr	r2, [r0, #12]
  4076b6:	6881      	ldr	r1, [r0, #8]
  4076b8:	4656      	mov	r6, sl
  4076ba:	60ca      	str	r2, [r1, #12]
  4076bc:	6091      	str	r1, [r2, #8]
  4076be:	f8da 100c 	ldr.w	r1, [sl, #12]
  4076c2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4076c6:	1f22      	subs	r2, r4, #4
  4076c8:	2a24      	cmp	r2, #36	; 0x24
  4076ca:	60c1      	str	r1, [r0, #12]
  4076cc:	6088      	str	r0, [r1, #8]
  4076ce:	f200 8094 	bhi.w	4077fa <_realloc_r+0x29a>
  4076d2:	2a13      	cmp	r2, #19
  4076d4:	d96f      	bls.n	4077b6 <_realloc_r+0x256>
  4076d6:	6829      	ldr	r1, [r5, #0]
  4076d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4076dc:	6869      	ldr	r1, [r5, #4]
  4076de:	f8ca 100c 	str.w	r1, [sl, #12]
  4076e2:	2a1b      	cmp	r2, #27
  4076e4:	f200 80a2 	bhi.w	40782c <_realloc_r+0x2cc>
  4076e8:	3508      	adds	r5, #8
  4076ea:	f10a 0210 	add.w	r2, sl, #16
  4076ee:	e063      	b.n	4077b8 <_realloc_r+0x258>
  4076f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4076f4:	eba9 0a03 	sub.w	sl, r9, r3
  4076f8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076fc:	f021 0103 	bic.w	r1, r1, #3
  407700:	1863      	adds	r3, r4, r1
  407702:	4293      	cmp	r3, r2
  407704:	f6ff af59 	blt.w	4075ba <_realloc_r+0x5a>
  407708:	4656      	mov	r6, sl
  40770a:	e7d8      	b.n	4076be <_realloc_r+0x15e>
  40770c:	6841      	ldr	r1, [r0, #4]
  40770e:	f021 0b03 	bic.w	fp, r1, #3
  407712:	44a3      	add	fp, r4
  407714:	f107 0010 	add.w	r0, r7, #16
  407718:	4583      	cmp	fp, r0
  40771a:	da56      	bge.n	4077ca <_realloc_r+0x26a>
  40771c:	f01e 0f01 	tst.w	lr, #1
  407720:	f47f af4b 	bne.w	4075ba <_realloc_r+0x5a>
  407724:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407728:	eba9 0a01 	sub.w	sl, r9, r1
  40772c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407730:	f021 0103 	bic.w	r1, r1, #3
  407734:	448b      	add	fp, r1
  407736:	4558      	cmp	r0, fp
  407738:	dce2      	bgt.n	407700 <_realloc_r+0x1a0>
  40773a:	4656      	mov	r6, sl
  40773c:	f8da 100c 	ldr.w	r1, [sl, #12]
  407740:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407744:	1f22      	subs	r2, r4, #4
  407746:	2a24      	cmp	r2, #36	; 0x24
  407748:	60c1      	str	r1, [r0, #12]
  40774a:	6088      	str	r0, [r1, #8]
  40774c:	f200 808f 	bhi.w	40786e <_realloc_r+0x30e>
  407750:	2a13      	cmp	r2, #19
  407752:	f240 808a 	bls.w	40786a <_realloc_r+0x30a>
  407756:	6829      	ldr	r1, [r5, #0]
  407758:	f8ca 1008 	str.w	r1, [sl, #8]
  40775c:	6869      	ldr	r1, [r5, #4]
  40775e:	f8ca 100c 	str.w	r1, [sl, #12]
  407762:	2a1b      	cmp	r2, #27
  407764:	f200 808a 	bhi.w	40787c <_realloc_r+0x31c>
  407768:	3508      	adds	r5, #8
  40776a:	f10a 0210 	add.w	r2, sl, #16
  40776e:	6829      	ldr	r1, [r5, #0]
  407770:	6011      	str	r1, [r2, #0]
  407772:	6869      	ldr	r1, [r5, #4]
  407774:	6051      	str	r1, [r2, #4]
  407776:	68a9      	ldr	r1, [r5, #8]
  407778:	6091      	str	r1, [r2, #8]
  40777a:	eb0a 0107 	add.w	r1, sl, r7
  40777e:	ebab 0207 	sub.w	r2, fp, r7
  407782:	f042 0201 	orr.w	r2, r2, #1
  407786:	6099      	str	r1, [r3, #8]
  407788:	604a      	str	r2, [r1, #4]
  40778a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40778e:	f003 0301 	and.w	r3, r3, #1
  407792:	431f      	orrs	r7, r3
  407794:	4640      	mov	r0, r8
  407796:	f8ca 7004 	str.w	r7, [sl, #4]
  40779a:	f7ff f90f 	bl	4069bc <__malloc_unlock>
  40779e:	e751      	b.n	407644 <_realloc_r+0xe4>
  4077a0:	682b      	ldr	r3, [r5, #0]
  4077a2:	6003      	str	r3, [r0, #0]
  4077a4:	686b      	ldr	r3, [r5, #4]
  4077a6:	6043      	str	r3, [r0, #4]
  4077a8:	2a1b      	cmp	r2, #27
  4077aa:	d82d      	bhi.n	407808 <_realloc_r+0x2a8>
  4077ac:	f100 0308 	add.w	r3, r0, #8
  4077b0:	f105 0208 	add.w	r2, r5, #8
  4077b4:	e71b      	b.n	4075ee <_realloc_r+0x8e>
  4077b6:	4632      	mov	r2, r6
  4077b8:	6829      	ldr	r1, [r5, #0]
  4077ba:	6011      	str	r1, [r2, #0]
  4077bc:	6869      	ldr	r1, [r5, #4]
  4077be:	6051      	str	r1, [r2, #4]
  4077c0:	68a9      	ldr	r1, [r5, #8]
  4077c2:	6091      	str	r1, [r2, #8]
  4077c4:	461c      	mov	r4, r3
  4077c6:	46d1      	mov	r9, sl
  4077c8:	e72a      	b.n	407620 <_realloc_r+0xc0>
  4077ca:	eb09 0107 	add.w	r1, r9, r7
  4077ce:	ebab 0b07 	sub.w	fp, fp, r7
  4077d2:	f04b 0201 	orr.w	r2, fp, #1
  4077d6:	6099      	str	r1, [r3, #8]
  4077d8:	604a      	str	r2, [r1, #4]
  4077da:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4077de:	f003 0301 	and.w	r3, r3, #1
  4077e2:	431f      	orrs	r7, r3
  4077e4:	4640      	mov	r0, r8
  4077e6:	f845 7c04 	str.w	r7, [r5, #-4]
  4077ea:	f7ff f8e7 	bl	4069bc <__malloc_unlock>
  4077ee:	462e      	mov	r6, r5
  4077f0:	e728      	b.n	407644 <_realloc_r+0xe4>
  4077f2:	4629      	mov	r1, r5
  4077f4:	f7ff fe50 	bl	407498 <memmove>
  4077f8:	e6ff      	b.n	4075fa <_realloc_r+0x9a>
  4077fa:	4629      	mov	r1, r5
  4077fc:	4630      	mov	r0, r6
  4077fe:	461c      	mov	r4, r3
  407800:	46d1      	mov	r9, sl
  407802:	f7ff fe49 	bl	407498 <memmove>
  407806:	e70b      	b.n	407620 <_realloc_r+0xc0>
  407808:	68ab      	ldr	r3, [r5, #8]
  40780a:	6083      	str	r3, [r0, #8]
  40780c:	68eb      	ldr	r3, [r5, #12]
  40780e:	60c3      	str	r3, [r0, #12]
  407810:	2a24      	cmp	r2, #36	; 0x24
  407812:	d017      	beq.n	407844 <_realloc_r+0x2e4>
  407814:	f100 0310 	add.w	r3, r0, #16
  407818:	f105 0210 	add.w	r2, r5, #16
  40781c:	e6e7      	b.n	4075ee <_realloc_r+0x8e>
  40781e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407822:	f023 0303 	bic.w	r3, r3, #3
  407826:	441c      	add	r4, r3
  407828:	462e      	mov	r6, r5
  40782a:	e6f9      	b.n	407620 <_realloc_r+0xc0>
  40782c:	68a9      	ldr	r1, [r5, #8]
  40782e:	f8ca 1010 	str.w	r1, [sl, #16]
  407832:	68e9      	ldr	r1, [r5, #12]
  407834:	f8ca 1014 	str.w	r1, [sl, #20]
  407838:	2a24      	cmp	r2, #36	; 0x24
  40783a:	d00c      	beq.n	407856 <_realloc_r+0x2f6>
  40783c:	3510      	adds	r5, #16
  40783e:	f10a 0218 	add.w	r2, sl, #24
  407842:	e7b9      	b.n	4077b8 <_realloc_r+0x258>
  407844:	692b      	ldr	r3, [r5, #16]
  407846:	6103      	str	r3, [r0, #16]
  407848:	696b      	ldr	r3, [r5, #20]
  40784a:	6143      	str	r3, [r0, #20]
  40784c:	f105 0218 	add.w	r2, r5, #24
  407850:	f100 0318 	add.w	r3, r0, #24
  407854:	e6cb      	b.n	4075ee <_realloc_r+0x8e>
  407856:	692a      	ldr	r2, [r5, #16]
  407858:	f8ca 2018 	str.w	r2, [sl, #24]
  40785c:	696a      	ldr	r2, [r5, #20]
  40785e:	f8ca 201c 	str.w	r2, [sl, #28]
  407862:	3518      	adds	r5, #24
  407864:	f10a 0220 	add.w	r2, sl, #32
  407868:	e7a6      	b.n	4077b8 <_realloc_r+0x258>
  40786a:	4632      	mov	r2, r6
  40786c:	e77f      	b.n	40776e <_realloc_r+0x20e>
  40786e:	4629      	mov	r1, r5
  407870:	4630      	mov	r0, r6
  407872:	9301      	str	r3, [sp, #4]
  407874:	f7ff fe10 	bl	407498 <memmove>
  407878:	9b01      	ldr	r3, [sp, #4]
  40787a:	e77e      	b.n	40777a <_realloc_r+0x21a>
  40787c:	68a9      	ldr	r1, [r5, #8]
  40787e:	f8ca 1010 	str.w	r1, [sl, #16]
  407882:	68e9      	ldr	r1, [r5, #12]
  407884:	f8ca 1014 	str.w	r1, [sl, #20]
  407888:	2a24      	cmp	r2, #36	; 0x24
  40788a:	d003      	beq.n	407894 <_realloc_r+0x334>
  40788c:	3510      	adds	r5, #16
  40788e:	f10a 0218 	add.w	r2, sl, #24
  407892:	e76c      	b.n	40776e <_realloc_r+0x20e>
  407894:	692a      	ldr	r2, [r5, #16]
  407896:	f8ca 2018 	str.w	r2, [sl, #24]
  40789a:	696a      	ldr	r2, [r5, #20]
  40789c:	f8ca 201c 	str.w	r2, [sl, #28]
  4078a0:	3518      	adds	r5, #24
  4078a2:	f10a 0220 	add.w	r2, sl, #32
  4078a6:	e762      	b.n	40776e <_realloc_r+0x20e>
  4078a8:	20400454 	.word	0x20400454

004078ac <__ascii_wctomb>:
  4078ac:	b121      	cbz	r1, 4078b8 <__ascii_wctomb+0xc>
  4078ae:	2aff      	cmp	r2, #255	; 0xff
  4078b0:	d804      	bhi.n	4078bc <__ascii_wctomb+0x10>
  4078b2:	700a      	strb	r2, [r1, #0]
  4078b4:	2001      	movs	r0, #1
  4078b6:	4770      	bx	lr
  4078b8:	4608      	mov	r0, r1
  4078ba:	4770      	bx	lr
  4078bc:	238a      	movs	r3, #138	; 0x8a
  4078be:	6003      	str	r3, [r0, #0]
  4078c0:	f04f 30ff 	mov.w	r0, #4294967295
  4078c4:	4770      	bx	lr
  4078c6:	bf00      	nop

004078c8 <__aeabi_drsub>:
  4078c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4078cc:	e002      	b.n	4078d4 <__adddf3>
  4078ce:	bf00      	nop

004078d0 <__aeabi_dsub>:
  4078d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004078d4 <__adddf3>:
  4078d4:	b530      	push	{r4, r5, lr}
  4078d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4078da:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4078de:	ea94 0f05 	teq	r4, r5
  4078e2:	bf08      	it	eq
  4078e4:	ea90 0f02 	teqeq	r0, r2
  4078e8:	bf1f      	itttt	ne
  4078ea:	ea54 0c00 	orrsne.w	ip, r4, r0
  4078ee:	ea55 0c02 	orrsne.w	ip, r5, r2
  4078f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4078f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4078fa:	f000 80e2 	beq.w	407ac2 <__adddf3+0x1ee>
  4078fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407902:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407906:	bfb8      	it	lt
  407908:	426d      	neglt	r5, r5
  40790a:	dd0c      	ble.n	407926 <__adddf3+0x52>
  40790c:	442c      	add	r4, r5
  40790e:	ea80 0202 	eor.w	r2, r0, r2
  407912:	ea81 0303 	eor.w	r3, r1, r3
  407916:	ea82 0000 	eor.w	r0, r2, r0
  40791a:	ea83 0101 	eor.w	r1, r3, r1
  40791e:	ea80 0202 	eor.w	r2, r0, r2
  407922:	ea81 0303 	eor.w	r3, r1, r3
  407926:	2d36      	cmp	r5, #54	; 0x36
  407928:	bf88      	it	hi
  40792a:	bd30      	pophi	{r4, r5, pc}
  40792c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407930:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407934:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407938:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40793c:	d002      	beq.n	407944 <__adddf3+0x70>
  40793e:	4240      	negs	r0, r0
  407940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407944:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407948:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40794c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407950:	d002      	beq.n	407958 <__adddf3+0x84>
  407952:	4252      	negs	r2, r2
  407954:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407958:	ea94 0f05 	teq	r4, r5
  40795c:	f000 80a7 	beq.w	407aae <__adddf3+0x1da>
  407960:	f1a4 0401 	sub.w	r4, r4, #1
  407964:	f1d5 0e20 	rsbs	lr, r5, #32
  407968:	db0d      	blt.n	407986 <__adddf3+0xb2>
  40796a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40796e:	fa22 f205 	lsr.w	r2, r2, r5
  407972:	1880      	adds	r0, r0, r2
  407974:	f141 0100 	adc.w	r1, r1, #0
  407978:	fa03 f20e 	lsl.w	r2, r3, lr
  40797c:	1880      	adds	r0, r0, r2
  40797e:	fa43 f305 	asr.w	r3, r3, r5
  407982:	4159      	adcs	r1, r3
  407984:	e00e      	b.n	4079a4 <__adddf3+0xd0>
  407986:	f1a5 0520 	sub.w	r5, r5, #32
  40798a:	f10e 0e20 	add.w	lr, lr, #32
  40798e:	2a01      	cmp	r2, #1
  407990:	fa03 fc0e 	lsl.w	ip, r3, lr
  407994:	bf28      	it	cs
  407996:	f04c 0c02 	orrcs.w	ip, ip, #2
  40799a:	fa43 f305 	asr.w	r3, r3, r5
  40799e:	18c0      	adds	r0, r0, r3
  4079a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4079a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4079a8:	d507      	bpl.n	4079ba <__adddf3+0xe6>
  4079aa:	f04f 0e00 	mov.w	lr, #0
  4079ae:	f1dc 0c00 	rsbs	ip, ip, #0
  4079b2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4079b6:	eb6e 0101 	sbc.w	r1, lr, r1
  4079ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4079be:	d31b      	bcc.n	4079f8 <__adddf3+0x124>
  4079c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4079c4:	d30c      	bcc.n	4079e0 <__adddf3+0x10c>
  4079c6:	0849      	lsrs	r1, r1, #1
  4079c8:	ea5f 0030 	movs.w	r0, r0, rrx
  4079cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4079d0:	f104 0401 	add.w	r4, r4, #1
  4079d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4079d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4079dc:	f080 809a 	bcs.w	407b14 <__adddf3+0x240>
  4079e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4079e4:	bf08      	it	eq
  4079e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4079ea:	f150 0000 	adcs.w	r0, r0, #0
  4079ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4079f2:	ea41 0105 	orr.w	r1, r1, r5
  4079f6:	bd30      	pop	{r4, r5, pc}
  4079f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4079fc:	4140      	adcs	r0, r0
  4079fe:	eb41 0101 	adc.w	r1, r1, r1
  407a02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407a06:	f1a4 0401 	sub.w	r4, r4, #1
  407a0a:	d1e9      	bne.n	4079e0 <__adddf3+0x10c>
  407a0c:	f091 0f00 	teq	r1, #0
  407a10:	bf04      	itt	eq
  407a12:	4601      	moveq	r1, r0
  407a14:	2000      	moveq	r0, #0
  407a16:	fab1 f381 	clz	r3, r1
  407a1a:	bf08      	it	eq
  407a1c:	3320      	addeq	r3, #32
  407a1e:	f1a3 030b 	sub.w	r3, r3, #11
  407a22:	f1b3 0220 	subs.w	r2, r3, #32
  407a26:	da0c      	bge.n	407a42 <__adddf3+0x16e>
  407a28:	320c      	adds	r2, #12
  407a2a:	dd08      	ble.n	407a3e <__adddf3+0x16a>
  407a2c:	f102 0c14 	add.w	ip, r2, #20
  407a30:	f1c2 020c 	rsb	r2, r2, #12
  407a34:	fa01 f00c 	lsl.w	r0, r1, ip
  407a38:	fa21 f102 	lsr.w	r1, r1, r2
  407a3c:	e00c      	b.n	407a58 <__adddf3+0x184>
  407a3e:	f102 0214 	add.w	r2, r2, #20
  407a42:	bfd8      	it	le
  407a44:	f1c2 0c20 	rsble	ip, r2, #32
  407a48:	fa01 f102 	lsl.w	r1, r1, r2
  407a4c:	fa20 fc0c 	lsr.w	ip, r0, ip
  407a50:	bfdc      	itt	le
  407a52:	ea41 010c 	orrle.w	r1, r1, ip
  407a56:	4090      	lslle	r0, r2
  407a58:	1ae4      	subs	r4, r4, r3
  407a5a:	bfa2      	ittt	ge
  407a5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407a60:	4329      	orrge	r1, r5
  407a62:	bd30      	popge	{r4, r5, pc}
  407a64:	ea6f 0404 	mvn.w	r4, r4
  407a68:	3c1f      	subs	r4, #31
  407a6a:	da1c      	bge.n	407aa6 <__adddf3+0x1d2>
  407a6c:	340c      	adds	r4, #12
  407a6e:	dc0e      	bgt.n	407a8e <__adddf3+0x1ba>
  407a70:	f104 0414 	add.w	r4, r4, #20
  407a74:	f1c4 0220 	rsb	r2, r4, #32
  407a78:	fa20 f004 	lsr.w	r0, r0, r4
  407a7c:	fa01 f302 	lsl.w	r3, r1, r2
  407a80:	ea40 0003 	orr.w	r0, r0, r3
  407a84:	fa21 f304 	lsr.w	r3, r1, r4
  407a88:	ea45 0103 	orr.w	r1, r5, r3
  407a8c:	bd30      	pop	{r4, r5, pc}
  407a8e:	f1c4 040c 	rsb	r4, r4, #12
  407a92:	f1c4 0220 	rsb	r2, r4, #32
  407a96:	fa20 f002 	lsr.w	r0, r0, r2
  407a9a:	fa01 f304 	lsl.w	r3, r1, r4
  407a9e:	ea40 0003 	orr.w	r0, r0, r3
  407aa2:	4629      	mov	r1, r5
  407aa4:	bd30      	pop	{r4, r5, pc}
  407aa6:	fa21 f004 	lsr.w	r0, r1, r4
  407aaa:	4629      	mov	r1, r5
  407aac:	bd30      	pop	{r4, r5, pc}
  407aae:	f094 0f00 	teq	r4, #0
  407ab2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407ab6:	bf06      	itte	eq
  407ab8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407abc:	3401      	addeq	r4, #1
  407abe:	3d01      	subne	r5, #1
  407ac0:	e74e      	b.n	407960 <__adddf3+0x8c>
  407ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407ac6:	bf18      	it	ne
  407ac8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407acc:	d029      	beq.n	407b22 <__adddf3+0x24e>
  407ace:	ea94 0f05 	teq	r4, r5
  407ad2:	bf08      	it	eq
  407ad4:	ea90 0f02 	teqeq	r0, r2
  407ad8:	d005      	beq.n	407ae6 <__adddf3+0x212>
  407ada:	ea54 0c00 	orrs.w	ip, r4, r0
  407ade:	bf04      	itt	eq
  407ae0:	4619      	moveq	r1, r3
  407ae2:	4610      	moveq	r0, r2
  407ae4:	bd30      	pop	{r4, r5, pc}
  407ae6:	ea91 0f03 	teq	r1, r3
  407aea:	bf1e      	ittt	ne
  407aec:	2100      	movne	r1, #0
  407aee:	2000      	movne	r0, #0
  407af0:	bd30      	popne	{r4, r5, pc}
  407af2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407af6:	d105      	bne.n	407b04 <__adddf3+0x230>
  407af8:	0040      	lsls	r0, r0, #1
  407afa:	4149      	adcs	r1, r1
  407afc:	bf28      	it	cs
  407afe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407b02:	bd30      	pop	{r4, r5, pc}
  407b04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407b08:	bf3c      	itt	cc
  407b0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407b0e:	bd30      	popcc	{r4, r5, pc}
  407b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407b14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407b1c:	f04f 0000 	mov.w	r0, #0
  407b20:	bd30      	pop	{r4, r5, pc}
  407b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407b26:	bf1a      	itte	ne
  407b28:	4619      	movne	r1, r3
  407b2a:	4610      	movne	r0, r2
  407b2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407b30:	bf1c      	itt	ne
  407b32:	460b      	movne	r3, r1
  407b34:	4602      	movne	r2, r0
  407b36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407b3a:	bf06      	itte	eq
  407b3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407b40:	ea91 0f03 	teqeq	r1, r3
  407b44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407b48:	bd30      	pop	{r4, r5, pc}
  407b4a:	bf00      	nop

00407b4c <__aeabi_ui2d>:
  407b4c:	f090 0f00 	teq	r0, #0
  407b50:	bf04      	itt	eq
  407b52:	2100      	moveq	r1, #0
  407b54:	4770      	bxeq	lr
  407b56:	b530      	push	{r4, r5, lr}
  407b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407b60:	f04f 0500 	mov.w	r5, #0
  407b64:	f04f 0100 	mov.w	r1, #0
  407b68:	e750      	b.n	407a0c <__adddf3+0x138>
  407b6a:	bf00      	nop

00407b6c <__aeabi_i2d>:
  407b6c:	f090 0f00 	teq	r0, #0
  407b70:	bf04      	itt	eq
  407b72:	2100      	moveq	r1, #0
  407b74:	4770      	bxeq	lr
  407b76:	b530      	push	{r4, r5, lr}
  407b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407b80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407b84:	bf48      	it	mi
  407b86:	4240      	negmi	r0, r0
  407b88:	f04f 0100 	mov.w	r1, #0
  407b8c:	e73e      	b.n	407a0c <__adddf3+0x138>
  407b8e:	bf00      	nop

00407b90 <__aeabi_f2d>:
  407b90:	0042      	lsls	r2, r0, #1
  407b92:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407b96:	ea4f 0131 	mov.w	r1, r1, rrx
  407b9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407b9e:	bf1f      	itttt	ne
  407ba0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407ba4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407ba8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407bac:	4770      	bxne	lr
  407bae:	f092 0f00 	teq	r2, #0
  407bb2:	bf14      	ite	ne
  407bb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407bb8:	4770      	bxeq	lr
  407bba:	b530      	push	{r4, r5, lr}
  407bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
  407bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407bc8:	e720      	b.n	407a0c <__adddf3+0x138>
  407bca:	bf00      	nop

00407bcc <__aeabi_ul2d>:
  407bcc:	ea50 0201 	orrs.w	r2, r0, r1
  407bd0:	bf08      	it	eq
  407bd2:	4770      	bxeq	lr
  407bd4:	b530      	push	{r4, r5, lr}
  407bd6:	f04f 0500 	mov.w	r5, #0
  407bda:	e00a      	b.n	407bf2 <__aeabi_l2d+0x16>

00407bdc <__aeabi_l2d>:
  407bdc:	ea50 0201 	orrs.w	r2, r0, r1
  407be0:	bf08      	it	eq
  407be2:	4770      	bxeq	lr
  407be4:	b530      	push	{r4, r5, lr}
  407be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407bea:	d502      	bpl.n	407bf2 <__aeabi_l2d+0x16>
  407bec:	4240      	negs	r0, r0
  407bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407bfe:	f43f aedc 	beq.w	4079ba <__adddf3+0xe6>
  407c02:	f04f 0203 	mov.w	r2, #3
  407c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407c0a:	bf18      	it	ne
  407c0c:	3203      	addne	r2, #3
  407c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407c12:	bf18      	it	ne
  407c14:	3203      	addne	r2, #3
  407c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407c1a:	f1c2 0320 	rsb	r3, r2, #32
  407c1e:	fa00 fc03 	lsl.w	ip, r0, r3
  407c22:	fa20 f002 	lsr.w	r0, r0, r2
  407c26:	fa01 fe03 	lsl.w	lr, r1, r3
  407c2a:	ea40 000e 	orr.w	r0, r0, lr
  407c2e:	fa21 f102 	lsr.w	r1, r1, r2
  407c32:	4414      	add	r4, r2
  407c34:	e6c1      	b.n	4079ba <__adddf3+0xe6>
  407c36:	bf00      	nop

00407c38 <__aeabi_dmul>:
  407c38:	b570      	push	{r4, r5, r6, lr}
  407c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407c46:	bf1d      	ittte	ne
  407c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407c4c:	ea94 0f0c 	teqne	r4, ip
  407c50:	ea95 0f0c 	teqne	r5, ip
  407c54:	f000 f8de 	bleq	407e14 <__aeabi_dmul+0x1dc>
  407c58:	442c      	add	r4, r5
  407c5a:	ea81 0603 	eor.w	r6, r1, r3
  407c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407c6a:	bf18      	it	ne
  407c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407c78:	d038      	beq.n	407cec <__aeabi_dmul+0xb4>
  407c7a:	fba0 ce02 	umull	ip, lr, r0, r2
  407c7e:	f04f 0500 	mov.w	r5, #0
  407c82:	fbe1 e502 	umlal	lr, r5, r1, r2
  407c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
  407c8e:	f04f 0600 	mov.w	r6, #0
  407c92:	fbe1 5603 	umlal	r5, r6, r1, r3
  407c96:	f09c 0f00 	teq	ip, #0
  407c9a:	bf18      	it	ne
  407c9c:	f04e 0e01 	orrne.w	lr, lr, #1
  407ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407cac:	d204      	bcs.n	407cb8 <__aeabi_dmul+0x80>
  407cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407cb2:	416d      	adcs	r5, r5
  407cb4:	eb46 0606 	adc.w	r6, r6, r6
  407cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407cd0:	bf88      	it	hi
  407cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407cd6:	d81e      	bhi.n	407d16 <__aeabi_dmul+0xde>
  407cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407cdc:	bf08      	it	eq
  407cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407ce2:	f150 0000 	adcs.w	r0, r0, #0
  407ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407cea:	bd70      	pop	{r4, r5, r6, pc}
  407cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407cf0:	ea46 0101 	orr.w	r1, r6, r1
  407cf4:	ea40 0002 	orr.w	r0, r0, r2
  407cf8:	ea81 0103 	eor.w	r1, r1, r3
  407cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407d00:	bfc2      	ittt	gt
  407d02:	ebd4 050c 	rsbsgt	r5, r4, ip
  407d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407d0a:	bd70      	popgt	{r4, r5, r6, pc}
  407d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407d10:	f04f 0e00 	mov.w	lr, #0
  407d14:	3c01      	subs	r4, #1
  407d16:	f300 80ab 	bgt.w	407e70 <__aeabi_dmul+0x238>
  407d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407d1e:	bfde      	ittt	le
  407d20:	2000      	movle	r0, #0
  407d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407d26:	bd70      	pople	{r4, r5, r6, pc}
  407d28:	f1c4 0400 	rsb	r4, r4, #0
  407d2c:	3c20      	subs	r4, #32
  407d2e:	da35      	bge.n	407d9c <__aeabi_dmul+0x164>
  407d30:	340c      	adds	r4, #12
  407d32:	dc1b      	bgt.n	407d6c <__aeabi_dmul+0x134>
  407d34:	f104 0414 	add.w	r4, r4, #20
  407d38:	f1c4 0520 	rsb	r5, r4, #32
  407d3c:	fa00 f305 	lsl.w	r3, r0, r5
  407d40:	fa20 f004 	lsr.w	r0, r0, r4
  407d44:	fa01 f205 	lsl.w	r2, r1, r5
  407d48:	ea40 0002 	orr.w	r0, r0, r2
  407d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407d58:	fa21 f604 	lsr.w	r6, r1, r4
  407d5c:	eb42 0106 	adc.w	r1, r2, r6
  407d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407d64:	bf08      	it	eq
  407d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407d6a:	bd70      	pop	{r4, r5, r6, pc}
  407d6c:	f1c4 040c 	rsb	r4, r4, #12
  407d70:	f1c4 0520 	rsb	r5, r4, #32
  407d74:	fa00 f304 	lsl.w	r3, r0, r4
  407d78:	fa20 f005 	lsr.w	r0, r0, r5
  407d7c:	fa01 f204 	lsl.w	r2, r1, r4
  407d80:	ea40 0002 	orr.w	r0, r0, r2
  407d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407d8c:	f141 0100 	adc.w	r1, r1, #0
  407d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407d94:	bf08      	it	eq
  407d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407d9a:	bd70      	pop	{r4, r5, r6, pc}
  407d9c:	f1c4 0520 	rsb	r5, r4, #32
  407da0:	fa00 f205 	lsl.w	r2, r0, r5
  407da4:	ea4e 0e02 	orr.w	lr, lr, r2
  407da8:	fa20 f304 	lsr.w	r3, r0, r4
  407dac:	fa01 f205 	lsl.w	r2, r1, r5
  407db0:	ea43 0302 	orr.w	r3, r3, r2
  407db4:	fa21 f004 	lsr.w	r0, r1, r4
  407db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407dbc:	fa21 f204 	lsr.w	r2, r1, r4
  407dc0:	ea20 0002 	bic.w	r0, r0, r2
  407dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407dcc:	bf08      	it	eq
  407dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407dd2:	bd70      	pop	{r4, r5, r6, pc}
  407dd4:	f094 0f00 	teq	r4, #0
  407dd8:	d10f      	bne.n	407dfa <__aeabi_dmul+0x1c2>
  407dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407dde:	0040      	lsls	r0, r0, #1
  407de0:	eb41 0101 	adc.w	r1, r1, r1
  407de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407de8:	bf08      	it	eq
  407dea:	3c01      	subeq	r4, #1
  407dec:	d0f7      	beq.n	407dde <__aeabi_dmul+0x1a6>
  407dee:	ea41 0106 	orr.w	r1, r1, r6
  407df2:	f095 0f00 	teq	r5, #0
  407df6:	bf18      	it	ne
  407df8:	4770      	bxne	lr
  407dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407dfe:	0052      	lsls	r2, r2, #1
  407e00:	eb43 0303 	adc.w	r3, r3, r3
  407e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407e08:	bf08      	it	eq
  407e0a:	3d01      	subeq	r5, #1
  407e0c:	d0f7      	beq.n	407dfe <__aeabi_dmul+0x1c6>
  407e0e:	ea43 0306 	orr.w	r3, r3, r6
  407e12:	4770      	bx	lr
  407e14:	ea94 0f0c 	teq	r4, ip
  407e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407e1c:	bf18      	it	ne
  407e1e:	ea95 0f0c 	teqne	r5, ip
  407e22:	d00c      	beq.n	407e3e <__aeabi_dmul+0x206>
  407e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407e28:	bf18      	it	ne
  407e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407e2e:	d1d1      	bne.n	407dd4 <__aeabi_dmul+0x19c>
  407e30:	ea81 0103 	eor.w	r1, r1, r3
  407e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e38:	f04f 0000 	mov.w	r0, #0
  407e3c:	bd70      	pop	{r4, r5, r6, pc}
  407e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407e42:	bf06      	itte	eq
  407e44:	4610      	moveq	r0, r2
  407e46:	4619      	moveq	r1, r3
  407e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407e4c:	d019      	beq.n	407e82 <__aeabi_dmul+0x24a>
  407e4e:	ea94 0f0c 	teq	r4, ip
  407e52:	d102      	bne.n	407e5a <__aeabi_dmul+0x222>
  407e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407e58:	d113      	bne.n	407e82 <__aeabi_dmul+0x24a>
  407e5a:	ea95 0f0c 	teq	r5, ip
  407e5e:	d105      	bne.n	407e6c <__aeabi_dmul+0x234>
  407e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407e64:	bf1c      	itt	ne
  407e66:	4610      	movne	r0, r2
  407e68:	4619      	movne	r1, r3
  407e6a:	d10a      	bne.n	407e82 <__aeabi_dmul+0x24a>
  407e6c:	ea81 0103 	eor.w	r1, r1, r3
  407e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407e7c:	f04f 0000 	mov.w	r0, #0
  407e80:	bd70      	pop	{r4, r5, r6, pc}
  407e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407e8a:	bd70      	pop	{r4, r5, r6, pc}

00407e8c <__aeabi_ddiv>:
  407e8c:	b570      	push	{r4, r5, r6, lr}
  407e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407e9a:	bf1d      	ittte	ne
  407e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407ea0:	ea94 0f0c 	teqne	r4, ip
  407ea4:	ea95 0f0c 	teqne	r5, ip
  407ea8:	f000 f8a7 	bleq	407ffa <__aeabi_ddiv+0x16e>
  407eac:	eba4 0405 	sub.w	r4, r4, r5
  407eb0:	ea81 0e03 	eor.w	lr, r1, r3
  407eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407ebc:	f000 8088 	beq.w	407fd0 <__aeabi_ddiv+0x144>
  407ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407ee4:	429d      	cmp	r5, r3
  407ee6:	bf08      	it	eq
  407ee8:	4296      	cmpeq	r6, r2
  407eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407ef2:	d202      	bcs.n	407efa <__aeabi_ddiv+0x6e>
  407ef4:	085b      	lsrs	r3, r3, #1
  407ef6:	ea4f 0232 	mov.w	r2, r2, rrx
  407efa:	1ab6      	subs	r6, r6, r2
  407efc:	eb65 0503 	sbc.w	r5, r5, r3
  407f00:	085b      	lsrs	r3, r3, #1
  407f02:	ea4f 0232 	mov.w	r2, r2, rrx
  407f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407f0e:	ebb6 0e02 	subs.w	lr, r6, r2
  407f12:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f16:	bf22      	ittt	cs
  407f18:	1ab6      	subcs	r6, r6, r2
  407f1a:	4675      	movcs	r5, lr
  407f1c:	ea40 000c 	orrcs.w	r0, r0, ip
  407f20:	085b      	lsrs	r3, r3, #1
  407f22:	ea4f 0232 	mov.w	r2, r2, rrx
  407f26:	ebb6 0e02 	subs.w	lr, r6, r2
  407f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f2e:	bf22      	ittt	cs
  407f30:	1ab6      	subcs	r6, r6, r2
  407f32:	4675      	movcs	r5, lr
  407f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407f38:	085b      	lsrs	r3, r3, #1
  407f3a:	ea4f 0232 	mov.w	r2, r2, rrx
  407f3e:	ebb6 0e02 	subs.w	lr, r6, r2
  407f42:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f46:	bf22      	ittt	cs
  407f48:	1ab6      	subcs	r6, r6, r2
  407f4a:	4675      	movcs	r5, lr
  407f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407f50:	085b      	lsrs	r3, r3, #1
  407f52:	ea4f 0232 	mov.w	r2, r2, rrx
  407f56:	ebb6 0e02 	subs.w	lr, r6, r2
  407f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f5e:	bf22      	ittt	cs
  407f60:	1ab6      	subcs	r6, r6, r2
  407f62:	4675      	movcs	r5, lr
  407f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407f68:	ea55 0e06 	orrs.w	lr, r5, r6
  407f6c:	d018      	beq.n	407fa0 <__aeabi_ddiv+0x114>
  407f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407f8a:	d1c0      	bne.n	407f0e <__aeabi_ddiv+0x82>
  407f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407f90:	d10b      	bne.n	407faa <__aeabi_ddiv+0x11e>
  407f92:	ea41 0100 	orr.w	r1, r1, r0
  407f96:	f04f 0000 	mov.w	r0, #0
  407f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407f9e:	e7b6      	b.n	407f0e <__aeabi_ddiv+0x82>
  407fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407fa4:	bf04      	itt	eq
  407fa6:	4301      	orreq	r1, r0
  407fa8:	2000      	moveq	r0, #0
  407faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407fae:	bf88      	it	hi
  407fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407fb4:	f63f aeaf 	bhi.w	407d16 <__aeabi_dmul+0xde>
  407fb8:	ebb5 0c03 	subs.w	ip, r5, r3
  407fbc:	bf04      	itt	eq
  407fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
  407fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407fc6:	f150 0000 	adcs.w	r0, r0, #0
  407fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407fce:	bd70      	pop	{r4, r5, r6, pc}
  407fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407fdc:	bfc2      	ittt	gt
  407fde:	ebd4 050c 	rsbsgt	r5, r4, ip
  407fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407fe6:	bd70      	popgt	{r4, r5, r6, pc}
  407fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407fec:	f04f 0e00 	mov.w	lr, #0
  407ff0:	3c01      	subs	r4, #1
  407ff2:	e690      	b.n	407d16 <__aeabi_dmul+0xde>
  407ff4:	ea45 0e06 	orr.w	lr, r5, r6
  407ff8:	e68d      	b.n	407d16 <__aeabi_dmul+0xde>
  407ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407ffe:	ea94 0f0c 	teq	r4, ip
  408002:	bf08      	it	eq
  408004:	ea95 0f0c 	teqeq	r5, ip
  408008:	f43f af3b 	beq.w	407e82 <__aeabi_dmul+0x24a>
  40800c:	ea94 0f0c 	teq	r4, ip
  408010:	d10a      	bne.n	408028 <__aeabi_ddiv+0x19c>
  408012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408016:	f47f af34 	bne.w	407e82 <__aeabi_dmul+0x24a>
  40801a:	ea95 0f0c 	teq	r5, ip
  40801e:	f47f af25 	bne.w	407e6c <__aeabi_dmul+0x234>
  408022:	4610      	mov	r0, r2
  408024:	4619      	mov	r1, r3
  408026:	e72c      	b.n	407e82 <__aeabi_dmul+0x24a>
  408028:	ea95 0f0c 	teq	r5, ip
  40802c:	d106      	bne.n	40803c <__aeabi_ddiv+0x1b0>
  40802e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408032:	f43f aefd 	beq.w	407e30 <__aeabi_dmul+0x1f8>
  408036:	4610      	mov	r0, r2
  408038:	4619      	mov	r1, r3
  40803a:	e722      	b.n	407e82 <__aeabi_dmul+0x24a>
  40803c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408040:	bf18      	it	ne
  408042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408046:	f47f aec5 	bne.w	407dd4 <__aeabi_dmul+0x19c>
  40804a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40804e:	f47f af0d 	bne.w	407e6c <__aeabi_dmul+0x234>
  408052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408056:	f47f aeeb 	bne.w	407e30 <__aeabi_dmul+0x1f8>
  40805a:	e712      	b.n	407e82 <__aeabi_dmul+0x24a>

0040805c <__gedf2>:
  40805c:	f04f 3cff 	mov.w	ip, #4294967295
  408060:	e006      	b.n	408070 <__cmpdf2+0x4>
  408062:	bf00      	nop

00408064 <__ledf2>:
  408064:	f04f 0c01 	mov.w	ip, #1
  408068:	e002      	b.n	408070 <__cmpdf2+0x4>
  40806a:	bf00      	nop

0040806c <__cmpdf2>:
  40806c:	f04f 0c01 	mov.w	ip, #1
  408070:	f84d cd04 	str.w	ip, [sp, #-4]!
  408074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40807c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408080:	bf18      	it	ne
  408082:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408086:	d01b      	beq.n	4080c0 <__cmpdf2+0x54>
  408088:	b001      	add	sp, #4
  40808a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40808e:	bf0c      	ite	eq
  408090:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408094:	ea91 0f03 	teqne	r1, r3
  408098:	bf02      	ittt	eq
  40809a:	ea90 0f02 	teqeq	r0, r2
  40809e:	2000      	moveq	r0, #0
  4080a0:	4770      	bxeq	lr
  4080a2:	f110 0f00 	cmn.w	r0, #0
  4080a6:	ea91 0f03 	teq	r1, r3
  4080aa:	bf58      	it	pl
  4080ac:	4299      	cmppl	r1, r3
  4080ae:	bf08      	it	eq
  4080b0:	4290      	cmpeq	r0, r2
  4080b2:	bf2c      	ite	cs
  4080b4:	17d8      	asrcs	r0, r3, #31
  4080b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4080ba:	f040 0001 	orr.w	r0, r0, #1
  4080be:	4770      	bx	lr
  4080c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4080c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4080c8:	d102      	bne.n	4080d0 <__cmpdf2+0x64>
  4080ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4080ce:	d107      	bne.n	4080e0 <__cmpdf2+0x74>
  4080d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4080d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4080d8:	d1d6      	bne.n	408088 <__cmpdf2+0x1c>
  4080da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4080de:	d0d3      	beq.n	408088 <__cmpdf2+0x1c>
  4080e0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4080e4:	4770      	bx	lr
  4080e6:	bf00      	nop

004080e8 <__aeabi_cdrcmple>:
  4080e8:	4684      	mov	ip, r0
  4080ea:	4610      	mov	r0, r2
  4080ec:	4662      	mov	r2, ip
  4080ee:	468c      	mov	ip, r1
  4080f0:	4619      	mov	r1, r3
  4080f2:	4663      	mov	r3, ip
  4080f4:	e000      	b.n	4080f8 <__aeabi_cdcmpeq>
  4080f6:	bf00      	nop

004080f8 <__aeabi_cdcmpeq>:
  4080f8:	b501      	push	{r0, lr}
  4080fa:	f7ff ffb7 	bl	40806c <__cmpdf2>
  4080fe:	2800      	cmp	r0, #0
  408100:	bf48      	it	mi
  408102:	f110 0f00 	cmnmi.w	r0, #0
  408106:	bd01      	pop	{r0, pc}

00408108 <__aeabi_dcmpeq>:
  408108:	f84d ed08 	str.w	lr, [sp, #-8]!
  40810c:	f7ff fff4 	bl	4080f8 <__aeabi_cdcmpeq>
  408110:	bf0c      	ite	eq
  408112:	2001      	moveq	r0, #1
  408114:	2000      	movne	r0, #0
  408116:	f85d fb08 	ldr.w	pc, [sp], #8
  40811a:	bf00      	nop

0040811c <__aeabi_dcmplt>:
  40811c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408120:	f7ff ffea 	bl	4080f8 <__aeabi_cdcmpeq>
  408124:	bf34      	ite	cc
  408126:	2001      	movcc	r0, #1
  408128:	2000      	movcs	r0, #0
  40812a:	f85d fb08 	ldr.w	pc, [sp], #8
  40812e:	bf00      	nop

00408130 <__aeabi_dcmple>:
  408130:	f84d ed08 	str.w	lr, [sp, #-8]!
  408134:	f7ff ffe0 	bl	4080f8 <__aeabi_cdcmpeq>
  408138:	bf94      	ite	ls
  40813a:	2001      	movls	r0, #1
  40813c:	2000      	movhi	r0, #0
  40813e:	f85d fb08 	ldr.w	pc, [sp], #8
  408142:	bf00      	nop

00408144 <__aeabi_dcmpge>:
  408144:	f84d ed08 	str.w	lr, [sp, #-8]!
  408148:	f7ff ffce 	bl	4080e8 <__aeabi_cdrcmple>
  40814c:	bf94      	ite	ls
  40814e:	2001      	movls	r0, #1
  408150:	2000      	movhi	r0, #0
  408152:	f85d fb08 	ldr.w	pc, [sp], #8
  408156:	bf00      	nop

00408158 <__aeabi_dcmpgt>:
  408158:	f84d ed08 	str.w	lr, [sp, #-8]!
  40815c:	f7ff ffc4 	bl	4080e8 <__aeabi_cdrcmple>
  408160:	bf34      	ite	cc
  408162:	2001      	movcc	r0, #1
  408164:	2000      	movcs	r0, #0
  408166:	f85d fb08 	ldr.w	pc, [sp], #8
  40816a:	bf00      	nop

0040816c <__aeabi_dcmpun>:
  40816c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408174:	d102      	bne.n	40817c <__aeabi_dcmpun+0x10>
  408176:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40817a:	d10a      	bne.n	408192 <__aeabi_dcmpun+0x26>
  40817c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408184:	d102      	bne.n	40818c <__aeabi_dcmpun+0x20>
  408186:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40818a:	d102      	bne.n	408192 <__aeabi_dcmpun+0x26>
  40818c:	f04f 0000 	mov.w	r0, #0
  408190:	4770      	bx	lr
  408192:	f04f 0001 	mov.w	r0, #1
  408196:	4770      	bx	lr

00408198 <__aeabi_d2iz>:
  408198:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40819c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4081a0:	d215      	bcs.n	4081ce <__aeabi_d2iz+0x36>
  4081a2:	d511      	bpl.n	4081c8 <__aeabi_d2iz+0x30>
  4081a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4081a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4081ac:	d912      	bls.n	4081d4 <__aeabi_d2iz+0x3c>
  4081ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4081b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4081b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4081ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4081be:	fa23 f002 	lsr.w	r0, r3, r2
  4081c2:	bf18      	it	ne
  4081c4:	4240      	negne	r0, r0
  4081c6:	4770      	bx	lr
  4081c8:	f04f 0000 	mov.w	r0, #0
  4081cc:	4770      	bx	lr
  4081ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4081d2:	d105      	bne.n	4081e0 <__aeabi_d2iz+0x48>
  4081d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4081d8:	bf08      	it	eq
  4081da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4081de:	4770      	bx	lr
  4081e0:	f04f 0000 	mov.w	r0, #0
  4081e4:	4770      	bx	lr
  4081e6:	bf00      	nop

004081e8 <__aeabi_uldivmod>:
  4081e8:	b953      	cbnz	r3, 408200 <__aeabi_uldivmod+0x18>
  4081ea:	b94a      	cbnz	r2, 408200 <__aeabi_uldivmod+0x18>
  4081ec:	2900      	cmp	r1, #0
  4081ee:	bf08      	it	eq
  4081f0:	2800      	cmpeq	r0, #0
  4081f2:	bf1c      	itt	ne
  4081f4:	f04f 31ff 	movne.w	r1, #4294967295
  4081f8:	f04f 30ff 	movne.w	r0, #4294967295
  4081fc:	f000 b97a 	b.w	4084f4 <__aeabi_idiv0>
  408200:	f1ad 0c08 	sub.w	ip, sp, #8
  408204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408208:	f000 f806 	bl	408218 <__udivmoddi4>
  40820c:	f8dd e004 	ldr.w	lr, [sp, #4]
  408210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408214:	b004      	add	sp, #16
  408216:	4770      	bx	lr

00408218 <__udivmoddi4>:
  408218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40821c:	468c      	mov	ip, r1
  40821e:	460d      	mov	r5, r1
  408220:	4604      	mov	r4, r0
  408222:	9e08      	ldr	r6, [sp, #32]
  408224:	2b00      	cmp	r3, #0
  408226:	d151      	bne.n	4082cc <__udivmoddi4+0xb4>
  408228:	428a      	cmp	r2, r1
  40822a:	4617      	mov	r7, r2
  40822c:	d96d      	bls.n	40830a <__udivmoddi4+0xf2>
  40822e:	fab2 fe82 	clz	lr, r2
  408232:	f1be 0f00 	cmp.w	lr, #0
  408236:	d00b      	beq.n	408250 <__udivmoddi4+0x38>
  408238:	f1ce 0c20 	rsb	ip, lr, #32
  40823c:	fa01 f50e 	lsl.w	r5, r1, lr
  408240:	fa20 fc0c 	lsr.w	ip, r0, ip
  408244:	fa02 f70e 	lsl.w	r7, r2, lr
  408248:	ea4c 0c05 	orr.w	ip, ip, r5
  40824c:	fa00 f40e 	lsl.w	r4, r0, lr
  408250:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408254:	0c25      	lsrs	r5, r4, #16
  408256:	fbbc f8fa 	udiv	r8, ip, sl
  40825a:	fa1f f987 	uxth.w	r9, r7
  40825e:	fb0a cc18 	mls	ip, sl, r8, ip
  408262:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408266:	fb08 f309 	mul.w	r3, r8, r9
  40826a:	42ab      	cmp	r3, r5
  40826c:	d90a      	bls.n	408284 <__udivmoddi4+0x6c>
  40826e:	19ed      	adds	r5, r5, r7
  408270:	f108 32ff 	add.w	r2, r8, #4294967295
  408274:	f080 8123 	bcs.w	4084be <__udivmoddi4+0x2a6>
  408278:	42ab      	cmp	r3, r5
  40827a:	f240 8120 	bls.w	4084be <__udivmoddi4+0x2a6>
  40827e:	f1a8 0802 	sub.w	r8, r8, #2
  408282:	443d      	add	r5, r7
  408284:	1aed      	subs	r5, r5, r3
  408286:	b2a4      	uxth	r4, r4
  408288:	fbb5 f0fa 	udiv	r0, r5, sl
  40828c:	fb0a 5510 	mls	r5, sl, r0, r5
  408290:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408294:	fb00 f909 	mul.w	r9, r0, r9
  408298:	45a1      	cmp	r9, r4
  40829a:	d909      	bls.n	4082b0 <__udivmoddi4+0x98>
  40829c:	19e4      	adds	r4, r4, r7
  40829e:	f100 33ff 	add.w	r3, r0, #4294967295
  4082a2:	f080 810a 	bcs.w	4084ba <__udivmoddi4+0x2a2>
  4082a6:	45a1      	cmp	r9, r4
  4082a8:	f240 8107 	bls.w	4084ba <__udivmoddi4+0x2a2>
  4082ac:	3802      	subs	r0, #2
  4082ae:	443c      	add	r4, r7
  4082b0:	eba4 0409 	sub.w	r4, r4, r9
  4082b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4082b8:	2100      	movs	r1, #0
  4082ba:	2e00      	cmp	r6, #0
  4082bc:	d061      	beq.n	408382 <__udivmoddi4+0x16a>
  4082be:	fa24 f40e 	lsr.w	r4, r4, lr
  4082c2:	2300      	movs	r3, #0
  4082c4:	6034      	str	r4, [r6, #0]
  4082c6:	6073      	str	r3, [r6, #4]
  4082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082cc:	428b      	cmp	r3, r1
  4082ce:	d907      	bls.n	4082e0 <__udivmoddi4+0xc8>
  4082d0:	2e00      	cmp	r6, #0
  4082d2:	d054      	beq.n	40837e <__udivmoddi4+0x166>
  4082d4:	2100      	movs	r1, #0
  4082d6:	e886 0021 	stmia.w	r6, {r0, r5}
  4082da:	4608      	mov	r0, r1
  4082dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082e0:	fab3 f183 	clz	r1, r3
  4082e4:	2900      	cmp	r1, #0
  4082e6:	f040 808e 	bne.w	408406 <__udivmoddi4+0x1ee>
  4082ea:	42ab      	cmp	r3, r5
  4082ec:	d302      	bcc.n	4082f4 <__udivmoddi4+0xdc>
  4082ee:	4282      	cmp	r2, r0
  4082f0:	f200 80fa 	bhi.w	4084e8 <__udivmoddi4+0x2d0>
  4082f4:	1a84      	subs	r4, r0, r2
  4082f6:	eb65 0503 	sbc.w	r5, r5, r3
  4082fa:	2001      	movs	r0, #1
  4082fc:	46ac      	mov	ip, r5
  4082fe:	2e00      	cmp	r6, #0
  408300:	d03f      	beq.n	408382 <__udivmoddi4+0x16a>
  408302:	e886 1010 	stmia.w	r6, {r4, ip}
  408306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40830a:	b912      	cbnz	r2, 408312 <__udivmoddi4+0xfa>
  40830c:	2701      	movs	r7, #1
  40830e:	fbb7 f7f2 	udiv	r7, r7, r2
  408312:	fab7 fe87 	clz	lr, r7
  408316:	f1be 0f00 	cmp.w	lr, #0
  40831a:	d134      	bne.n	408386 <__udivmoddi4+0x16e>
  40831c:	1beb      	subs	r3, r5, r7
  40831e:	0c3a      	lsrs	r2, r7, #16
  408320:	fa1f fc87 	uxth.w	ip, r7
  408324:	2101      	movs	r1, #1
  408326:	fbb3 f8f2 	udiv	r8, r3, r2
  40832a:	0c25      	lsrs	r5, r4, #16
  40832c:	fb02 3318 	mls	r3, r2, r8, r3
  408330:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408334:	fb0c f308 	mul.w	r3, ip, r8
  408338:	42ab      	cmp	r3, r5
  40833a:	d907      	bls.n	40834c <__udivmoddi4+0x134>
  40833c:	19ed      	adds	r5, r5, r7
  40833e:	f108 30ff 	add.w	r0, r8, #4294967295
  408342:	d202      	bcs.n	40834a <__udivmoddi4+0x132>
  408344:	42ab      	cmp	r3, r5
  408346:	f200 80d1 	bhi.w	4084ec <__udivmoddi4+0x2d4>
  40834a:	4680      	mov	r8, r0
  40834c:	1aed      	subs	r5, r5, r3
  40834e:	b2a3      	uxth	r3, r4
  408350:	fbb5 f0f2 	udiv	r0, r5, r2
  408354:	fb02 5510 	mls	r5, r2, r0, r5
  408358:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40835c:	fb0c fc00 	mul.w	ip, ip, r0
  408360:	45a4      	cmp	ip, r4
  408362:	d907      	bls.n	408374 <__udivmoddi4+0x15c>
  408364:	19e4      	adds	r4, r4, r7
  408366:	f100 33ff 	add.w	r3, r0, #4294967295
  40836a:	d202      	bcs.n	408372 <__udivmoddi4+0x15a>
  40836c:	45a4      	cmp	ip, r4
  40836e:	f200 80b8 	bhi.w	4084e2 <__udivmoddi4+0x2ca>
  408372:	4618      	mov	r0, r3
  408374:	eba4 040c 	sub.w	r4, r4, ip
  408378:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40837c:	e79d      	b.n	4082ba <__udivmoddi4+0xa2>
  40837e:	4631      	mov	r1, r6
  408380:	4630      	mov	r0, r6
  408382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408386:	f1ce 0420 	rsb	r4, lr, #32
  40838a:	fa05 f30e 	lsl.w	r3, r5, lr
  40838e:	fa07 f70e 	lsl.w	r7, r7, lr
  408392:	fa20 f804 	lsr.w	r8, r0, r4
  408396:	0c3a      	lsrs	r2, r7, #16
  408398:	fa25 f404 	lsr.w	r4, r5, r4
  40839c:	ea48 0803 	orr.w	r8, r8, r3
  4083a0:	fbb4 f1f2 	udiv	r1, r4, r2
  4083a4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4083a8:	fb02 4411 	mls	r4, r2, r1, r4
  4083ac:	fa1f fc87 	uxth.w	ip, r7
  4083b0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4083b4:	fb01 f30c 	mul.w	r3, r1, ip
  4083b8:	42ab      	cmp	r3, r5
  4083ba:	fa00 f40e 	lsl.w	r4, r0, lr
  4083be:	d909      	bls.n	4083d4 <__udivmoddi4+0x1bc>
  4083c0:	19ed      	adds	r5, r5, r7
  4083c2:	f101 30ff 	add.w	r0, r1, #4294967295
  4083c6:	f080 808a 	bcs.w	4084de <__udivmoddi4+0x2c6>
  4083ca:	42ab      	cmp	r3, r5
  4083cc:	f240 8087 	bls.w	4084de <__udivmoddi4+0x2c6>
  4083d0:	3902      	subs	r1, #2
  4083d2:	443d      	add	r5, r7
  4083d4:	1aeb      	subs	r3, r5, r3
  4083d6:	fa1f f588 	uxth.w	r5, r8
  4083da:	fbb3 f0f2 	udiv	r0, r3, r2
  4083de:	fb02 3310 	mls	r3, r2, r0, r3
  4083e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4083e6:	fb00 f30c 	mul.w	r3, r0, ip
  4083ea:	42ab      	cmp	r3, r5
  4083ec:	d907      	bls.n	4083fe <__udivmoddi4+0x1e6>
  4083ee:	19ed      	adds	r5, r5, r7
  4083f0:	f100 38ff 	add.w	r8, r0, #4294967295
  4083f4:	d26f      	bcs.n	4084d6 <__udivmoddi4+0x2be>
  4083f6:	42ab      	cmp	r3, r5
  4083f8:	d96d      	bls.n	4084d6 <__udivmoddi4+0x2be>
  4083fa:	3802      	subs	r0, #2
  4083fc:	443d      	add	r5, r7
  4083fe:	1aeb      	subs	r3, r5, r3
  408400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408404:	e78f      	b.n	408326 <__udivmoddi4+0x10e>
  408406:	f1c1 0720 	rsb	r7, r1, #32
  40840a:	fa22 f807 	lsr.w	r8, r2, r7
  40840e:	408b      	lsls	r3, r1
  408410:	fa05 f401 	lsl.w	r4, r5, r1
  408414:	ea48 0303 	orr.w	r3, r8, r3
  408418:	fa20 fe07 	lsr.w	lr, r0, r7
  40841c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408420:	40fd      	lsrs	r5, r7
  408422:	ea4e 0e04 	orr.w	lr, lr, r4
  408426:	fbb5 f9fc 	udiv	r9, r5, ip
  40842a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40842e:	fb0c 5519 	mls	r5, ip, r9, r5
  408432:	fa1f f883 	uxth.w	r8, r3
  408436:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40843a:	fb09 f408 	mul.w	r4, r9, r8
  40843e:	42ac      	cmp	r4, r5
  408440:	fa02 f201 	lsl.w	r2, r2, r1
  408444:	fa00 fa01 	lsl.w	sl, r0, r1
  408448:	d908      	bls.n	40845c <__udivmoddi4+0x244>
  40844a:	18ed      	adds	r5, r5, r3
  40844c:	f109 30ff 	add.w	r0, r9, #4294967295
  408450:	d243      	bcs.n	4084da <__udivmoddi4+0x2c2>
  408452:	42ac      	cmp	r4, r5
  408454:	d941      	bls.n	4084da <__udivmoddi4+0x2c2>
  408456:	f1a9 0902 	sub.w	r9, r9, #2
  40845a:	441d      	add	r5, r3
  40845c:	1b2d      	subs	r5, r5, r4
  40845e:	fa1f fe8e 	uxth.w	lr, lr
  408462:	fbb5 f0fc 	udiv	r0, r5, ip
  408466:	fb0c 5510 	mls	r5, ip, r0, r5
  40846a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40846e:	fb00 f808 	mul.w	r8, r0, r8
  408472:	45a0      	cmp	r8, r4
  408474:	d907      	bls.n	408486 <__udivmoddi4+0x26e>
  408476:	18e4      	adds	r4, r4, r3
  408478:	f100 35ff 	add.w	r5, r0, #4294967295
  40847c:	d229      	bcs.n	4084d2 <__udivmoddi4+0x2ba>
  40847e:	45a0      	cmp	r8, r4
  408480:	d927      	bls.n	4084d2 <__udivmoddi4+0x2ba>
  408482:	3802      	subs	r0, #2
  408484:	441c      	add	r4, r3
  408486:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40848a:	eba4 0408 	sub.w	r4, r4, r8
  40848e:	fba0 8902 	umull	r8, r9, r0, r2
  408492:	454c      	cmp	r4, r9
  408494:	46c6      	mov	lr, r8
  408496:	464d      	mov	r5, r9
  408498:	d315      	bcc.n	4084c6 <__udivmoddi4+0x2ae>
  40849a:	d012      	beq.n	4084c2 <__udivmoddi4+0x2aa>
  40849c:	b156      	cbz	r6, 4084b4 <__udivmoddi4+0x29c>
  40849e:	ebba 030e 	subs.w	r3, sl, lr
  4084a2:	eb64 0405 	sbc.w	r4, r4, r5
  4084a6:	fa04 f707 	lsl.w	r7, r4, r7
  4084aa:	40cb      	lsrs	r3, r1
  4084ac:	431f      	orrs	r7, r3
  4084ae:	40cc      	lsrs	r4, r1
  4084b0:	6037      	str	r7, [r6, #0]
  4084b2:	6074      	str	r4, [r6, #4]
  4084b4:	2100      	movs	r1, #0
  4084b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4084ba:	4618      	mov	r0, r3
  4084bc:	e6f8      	b.n	4082b0 <__udivmoddi4+0x98>
  4084be:	4690      	mov	r8, r2
  4084c0:	e6e0      	b.n	408284 <__udivmoddi4+0x6c>
  4084c2:	45c2      	cmp	sl, r8
  4084c4:	d2ea      	bcs.n	40849c <__udivmoddi4+0x284>
  4084c6:	ebb8 0e02 	subs.w	lr, r8, r2
  4084ca:	eb69 0503 	sbc.w	r5, r9, r3
  4084ce:	3801      	subs	r0, #1
  4084d0:	e7e4      	b.n	40849c <__udivmoddi4+0x284>
  4084d2:	4628      	mov	r0, r5
  4084d4:	e7d7      	b.n	408486 <__udivmoddi4+0x26e>
  4084d6:	4640      	mov	r0, r8
  4084d8:	e791      	b.n	4083fe <__udivmoddi4+0x1e6>
  4084da:	4681      	mov	r9, r0
  4084dc:	e7be      	b.n	40845c <__udivmoddi4+0x244>
  4084de:	4601      	mov	r1, r0
  4084e0:	e778      	b.n	4083d4 <__udivmoddi4+0x1bc>
  4084e2:	3802      	subs	r0, #2
  4084e4:	443c      	add	r4, r7
  4084e6:	e745      	b.n	408374 <__udivmoddi4+0x15c>
  4084e8:	4608      	mov	r0, r1
  4084ea:	e708      	b.n	4082fe <__udivmoddi4+0xe6>
  4084ec:	f1a8 0802 	sub.w	r8, r8, #2
  4084f0:	443d      	add	r5, r7
  4084f2:	e72b      	b.n	40834c <__udivmoddi4+0x134>

004084f4 <__aeabi_idiv0>:
  4084f4:	4770      	bx	lr
  4084f6:	bf00      	nop
  4084f8:	454c4449 	.word	0x454c4449
  4084fc:	00000000 	.word	0x00000000
  408500:	51726d54 	.word	0x51726d54
  408504:	00000000 	.word	0x00000000
  408508:	20726d54 	.word	0x20726d54
  40850c:	00637653 	.word	0x00637653

00408510 <sysfont_glyphs>:
	...
  408530:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  408540:	00000030 00000000 00000000 006c006c     0...........l.l.
  408550:	006c006c 00000000 00000000 00000000     l.l.............
	...
  408568:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  408578:	00000028 00000000 00000000 003c0010     (.............<.
  408588:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  4085a0:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  4085b0:	00000088 00000000 00000000 00900060     ............`...
  4085c0:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4085d8:	00100010 00000010 00000000 00000000     ................
	...
  4085f4:	00100008 00200020 00200020 00200020     .... . . . . . .
  408604:	00080010 00000000 00000000 00100020     ............ ...
  408614:	00080008 00080008 00080008 00200010     .............. .
  408624:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  40864c:	00100010 00fe0010 00100010 00000010     ................
	...
  408674:	00300010 00000020 00000000 00000000     ..0. ...........
  408684:	00000000 007c0000 00000000 00000000     ......|.........
	...
  4086a8:	00300000 00000030 00000000 00000000     ..0.0...........
  4086b8:	00080000 00100008 00200010 00400020     .......... . .@.
  4086c8:	00000040 00000000 00000000 00780000     @.............x.
  4086d8:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  4086f0:	00100000 00500030 00100010 00100010     ....0.P.........
  408700:	0000007c 00000000 00000000 00700000     |.............p.
  408710:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  408728:	00700000 00080088 00080030 00880008     ..p.....0.......
  408738:	00000070 00000000 00000000 00080000     p...............
  408748:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  408760:	00780000 00800080 000800f0 00080008     ..x.............
  408770:	000000f0 00000000 00000000 00300000     ..............0.
  408780:	00800040 008800f0 00880088 00000070     @...........p...
	...
  408798:	00f80000 00100008 00200010 00400020     .......... . .@.
  4087a8:	00000040 00000000 00000000 00700000     @.............p.
  4087b8:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  4087d0:	00700000 00880088 00780088 00100008     ..p.......x.....
  4087e0:	00000060 00000000 00000000 00000000     `...............
  4087f0:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  40880c:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  40881c:	00000040 00000000 00000000 00100008     @...............
  40882c:	00400020 00100020 00000008 00000000      .@. ...........
	...
  408848:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  408860:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  408878:	00300000 00080048 00200010 00000000     ..0.H..... .....
  408888:	00000020 00000000 00000000 00000000      ...............
  408898:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  4088b0:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  4088c0:	00000044 00000000 00000000 00f80000     D...............
  4088d0:	00840084 008400f8 00840084 000000f8     ................
	...
  4088e8:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  4088f8:	0000003c 00000000 00000000 00f00000     <...............
  408908:	00840088 00840084 00880084 000000f0     ................
	...
  408920:	00f80000 00800080 008000f0 00800080     ................
  408930:	000000f8 00000000 00000000 00f80000     ................
  408940:	00800080 008000f8 00800080 00000080     ................
	...
  408958:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  408968:	00000038 00000000 00000000 00880000     8...............
  408978:	00880088 008800f8 00880088 00000088     ................
	...
  408990:	00f80000 00200020 00200020 00200020     .... . . . . . .
  4089a0:	000000f8 00000000 00000000 00f80000     ................
  4089b0:	00080008 00080008 00080008 000000f0     ................
	...
  4089c8:	00840000 00900088 00d000a0 00840088     ................
  4089d8:	00000084 00000000 00000000 00800000     ................
  4089e8:	00800080 00800080 00800080 000000fc     ................
	...
  408a00:	00840000 00cc00cc 00b400b4 00840084     ................
  408a10:	00000084 00000000 00000000 00840000     ................
  408a20:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  408a38:	00780000 00840084 00840084 00840084     ..x.............
  408a48:	00000078 00000000 00000000 00f80000     x...............
  408a58:	00840084 00f80084 00800080 00000080     ................
	...
  408a70:	00780000 00840084 00840084 00840084     ..x.............
  408a80:	00200078 00000018 00000000 00f80000     x. .............
  408a90:	00840084 00f80084 00840088 00000084     ................
	...
  408aa8:	007c0000 00800080 00180060 00040004     ..|.....`.......
  408ab8:	000000f8 00000000 00000000 00f80000     ................
  408ac8:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  408ae0:	00840000 00840084 00840084 00840084     ................
  408af0:	00000078 00000000 00000000 00840000     x...............
  408b00:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  408b18:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  408b28:	00000050 00000000 00000000 00880000     P...............
  408b38:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  408b50:	00880000 00880088 00500050 00200020     ........P.P. . .
  408b60:	00000020 00000000 00000000 00fc0000      ...............
  408b70:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  408b88:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  408b98:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  408ba8:	00200020 00100020 00100010 00080008      . . ...........
	...
  408bc0:	00080038 00080008 00080008 00080008     8...............
  408bd0:	00080008 00000038 00000000 00280010     ....8.........(.
  408be0:	00000044 00000000 00000000 00000000     D...............
	...
  408c08:	00000038 00000000 00000000 00200000     8............. .
  408c18:	00000010 00000000 00000000 00000000     ................
	...
  408c34:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  408c4c:	00800080 00f80080 00840084 00840084     ................
  408c5c:	000000f8 00000000 00000000 00000000     ................
  408c6c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  408c84:	00040004 007c0004 00840084 008c0084     ......|.........
  408c94:	00000074 00000000 00000000 00000000     t...............
  408ca4:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  408cbc:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  408ccc:	000000fc 00000000 00000000 00000000     ................
  408cdc:	007c0000 00840084 00840084 0004007c     ..|.........|...
  408cec:	00000078 00000000 00800080 00b80080     x...............
  408cfc:	008400c4 00840084 00000084 00000000     ................
  408d0c:	00000000 00100000 00700000 00100010     ..........p.....
  408d1c:	00100010 0000007c 00000000 00000000     ....|...........
  408d2c:	00080000 00780000 00080008 00080008     ......x.........
  408d3c:	00080008 00700008 00000000 00800080     ......p.........
  408d4c:	00880080 00a00090 008800d0 00000088     ................
	...
  408d64:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  408d74:	000000f8 00000000 00000000 00000000     ................
  408d84:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  408da0:	00b80000 008400c4 00840084 00000084     ................
	...
  408dbc:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  408dd8:	00b80000 008400c4 00840084 008000f8     ................
  408de8:	00000080 00000000 00000000 007c0000     ..............|.
  408df8:	00840084 00840084 0004007c 00000004     ........|.......
	...
  408e10:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  408e2c:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  408e48:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  408e64:	00880000 00880088 00880088 0000007c     ............|...
	...
  408e80:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  408e9c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  408eb8:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  408ed4:	00840000 00480084 00300048 00200010     ......H.H.0... .
  408ee4:	00000040 00000000 00000000 00f80000     @...............
  408ef4:	00100008 00400020 000000f8 00000000     .... .@.........
  408f04:	00000000 00200010 00100020 00200020     ...... . ... . .
  408f14:	00200010 00100020 00000000 00000000     .. . ...........
  408f24:	00100010 00100010 00000000 00100010     ................
  408f34:	00100010 00000000 00000000 00100020     ............ ...
  408f44:	00200010 00100010 00100020 00200010     .. ..... ..... .
  408f54:	00000000 000007e2 00000003 00000013     ................
  408f64:	0000000c 0000000f 0000002d 00000001     ........-.......
  408f74:	64656c6f 00000000 253a6425 30253a64     oled....%d:%d:%0
  408f84:	00006432                                2d..

00408f88 <_global_impure_ptr>:
  408f88:	20400028 00464e49 00666e69 004e414e     (.@ INF.inf.NAN.
  408f98:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  408fa8:	46454443 00000000 33323130 37363534     CDEF....01234567
  408fb8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408fc8:	0000296c 00000030                       l)..0...

00408fd0 <blanks.7223>:
  408fd0:	20202020 20202020 20202020 20202020                     

00408fe0 <zeroes.7224>:
  408fe0:	30303030 30303030 30303030 30303030     0000000000000000
  408ff0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00409000 <__mprec_bigtens>:
  409000:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409010:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409020:	7f73bf3c 75154fdd                       <.s..O.u

00409028 <__mprec_tens>:
  409028:	00000000 3ff00000 00000000 40240000     .......?......$@
  409038:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409048:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409058:	00000000 412e8480 00000000 416312d0     .......A......cA
  409068:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409078:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409088:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409098:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4090a8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4090b8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4090c8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4090d8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4090e8:	79d99db4 44ea7843                       ...yCx.D

004090f0 <p05.6055>:
  4090f0:	00000005 00000019 0000007d 00000043     ........}...C...
  409100:	49534f50 00000058 0000002e              POSIX.......

0040910c <_ctype_>:
  40910c:	20202000 20202020 28282020 20282828     .         ((((( 
  40911c:	20202020 20202020 20202020 20202020                     
  40912c:	10108820 10101010 10101010 10101010      ...............
  40913c:	04040410 04040404 10040404 10101010     ................
  40914c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40915c:	01010101 01010101 01010101 10101010     ................
  40916c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40917c:	02020202 02020202 02020202 10101010     ................
  40918c:	00000020 00000000 00000000 00000000      ...............
	...

00409210 <_init>:
  409210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409212:	bf00      	nop
  409214:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409216:	bc08      	pop	{r3}
  409218:	469e      	mov	lr, r3
  40921a:	4770      	bx	lr

0040921c <__init_array_start>:
  40921c:	004053b9 	.word	0x004053b9

00409220 <__frame_dummy_init_array_entry>:
  409220:	00400165                                e.@.

00409224 <_fini>:
  409224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409226:	bf00      	nop
  409228:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40922a:	bc08      	pop	{r3}
  40922c:	469e      	mov	lr, r3
  40922e:	4770      	bx	lr

00409230 <__fini_array_start>:
  409230:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <sysfont>:
20400010:	0000 0000 8510 0040 0e0a 7d20               ......@... }

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	c6c0 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	78ad 0040 746d 0040 0000 0000 910c 0040     .x@.mt@.......@.
20400954:	9108 0040 84fc 0040 84fc 0040 84fc 0040     ..@...@...@...@.
20400964:	84fc 0040 84fc 0040 84fc 0040 84fc 0040     ..@...@...@...@.
20400974:	84fc 0040 84fc 0040 ffff ffff ffff ffff     ..@...@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
