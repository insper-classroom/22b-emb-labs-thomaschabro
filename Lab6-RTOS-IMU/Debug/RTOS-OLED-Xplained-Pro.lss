
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c784  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c784  0040c784  0001c784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040c78c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000048c  204009d8  0040d164  000209d8  2**2
                  ALLOC
  4 .stack        00002004  20400e64  0040d5f0  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20402e68  0040f5f4  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002abd7  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d2b  00000000  00000000  0004b636  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010fff  00000000  00000000  00051361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011c8  00000000  00000000  00062360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001660  00000000  00000000  00063528  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027d41  00000000  00000000  00064b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018ccb  00000000  00000000  0008c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009aa8d  00000000  00000000  000a5594  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004490  00000000  00000000  00140024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 2e 40 20 d1 1b 40 00 cf 1b 40 00 cf 1b 40 00     h.@ ..@...@...@.
  400010:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 1f 40 00 cf 1b 40 00 00 00 00 00 49 20 40 00     ..@...@.....I @.
  40003c:	b1 20 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     . @...@...@...@.
  40004c:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  40005c:	cf 1b 40 00 cf 1b 40 00 00 00 00 00 c1 18 40 00     ..@...@.......@.
  40006c:	d5 18 40 00 e9 18 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  40007c:	cf 1b 40 00 fd 18 40 00 11 19 40 00 cf 1b 40 00     ..@...@...@...@.
  40008c:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  40009c:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  4000ac:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  4000bc:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  4000cc:	cf 1b 40 00 00 00 00 00 cf 1b 40 00 00 00 00 00     ..@.......@.....
  4000dc:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  4000ec:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  4000fc:	cf 1b 40 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ..@...@...@...@.
  40010c:	cf 1b 40 00 cf 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 cf 1b 40 00 cf 1b 40 00 cf 1b 40 00     ......@...@...@.
  40012c:	cf 1b 40 00 cf 1b 40 00 00 00 00 00 cf 1b 40 00     ..@...@.......@.
  40013c:	cf 1b 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	0040c78c 	.word	0x0040c78c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040c78c 	.word	0x0040c78c
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040c78c 	.word	0x0040c78c
  4001a8:	00000000 	.word	0x00000000

004001ac <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  4001ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  4001b0:	6103      	str	r3, [r0, #16]
  4001b2:	2300      	movs	r3, #0
  4001b4:	6143      	str	r3, [r0, #20]
  4001b6:	6183      	str	r3, [r0, #24]
  4001b8:	61c3      	str	r3, [r0, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  4001ba:	6203      	str	r3, [r0, #32]
  4001bc:	6243      	str	r3, [r0, #36]	; 0x24
  4001be:	6283      	str	r3, [r0, #40]	; 0x28
    ahrs->initialising = true;
  4001c0:	2201      	movs	r2, #1
  4001c2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
  4001c6:	4a0a      	ldr	r2, [pc, #40]	; (4001f0 <FusionAhrsReset+0x44>)
  4001c8:	6302      	str	r2, [r0, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  4001ca:	6383      	str	r3, [r0, #56]	; 0x38
  4001cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  4001ce:	6403      	str	r3, [r0, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4001d0:	6443      	str	r3, [r0, #68]	; 0x44
  4001d2:	6483      	str	r3, [r0, #72]	; 0x48
  4001d4:	64c3      	str	r3, [r0, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
  4001d6:	2300      	movs	r3, #0
  4001d8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
  4001dc:	6543      	str	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
  4001de:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
  4001e2:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
  4001e6:	65c3      	str	r3, [r0, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
  4001e8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  4001ec:	4770      	bx	lr
  4001ee:	bf00      	nop
  4001f0:	41200000 	.word	0x41200000

004001f4 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  4001f4:	b538      	push	{r3, r4, r5, lr}
  4001f6:	ed2d 8b02 	vpush	{d8}
  4001fa:	4604      	mov	r4, r0
  4001fc:	460d      	mov	r5, r1
    ahrs->settings.gain = settings->gain;
  4001fe:	ed91 8a00 	vldr	s16, [r1]
  400202:	ed80 8a00 	vstr	s16, [r0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  400206:	edd1 7a01 	vldr	s15, [r1, #4]
  40020a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40020e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400212:	d001      	beq.n	400218 <FusionAhrsSetSettings+0x24>
  400214:	68cb      	ldr	r3, [r1, #12]
  400216:	bb03      	cbnz	r3, 40025a <FusionAhrsSetSettings+0x66>
        ahrs->settings.accelerationRejection = FLT_MAX;
  400218:	4b23      	ldr	r3, [pc, #140]	; (4002a8 <FusionAhrsSetSettings+0xb4>)
  40021a:	6063      	str	r3, [r4, #4]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  40021c:	edd5 7a02 	vldr	s15, [r5, #8]
  400220:	eef5 7a40 	vcmp.f32	s15, #0.0
  400224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400228:	d001      	beq.n	40022e <FusionAhrsSetSettings+0x3a>
  40022a:	68eb      	ldr	r3, [r5, #12]
  40022c:	bb43      	cbnz	r3, 400280 <FusionAhrsSetSettings+0x8c>
        ahrs->settings.magneticRejection = FLT_MAX;
  40022e:	4b1e      	ldr	r3, [pc, #120]	; (4002a8 <FusionAhrsSetSettings+0xb4>)
  400230:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  400232:	68eb      	ldr	r3, [r5, #12]
  400234:	60e3      	str	r3, [r4, #12]
    if (ahrs->initialising == false) {
  400236:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  40023a:	b90b      	cbnz	r3, 400240 <FusionAhrsSetSettings+0x4c>
        ahrs->rampedGain = ahrs->settings.gain;
  40023c:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  400240:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  400244:	ee77 7ac8 	vsub.f32	s15, s15, s16
  400248:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  40024c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400250:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
  400254:	ecbd 8b02 	vpop	{d8}
  400258:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  40025a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 4002ac <FusionAhrsSetSettings+0xb8>
  40025e:	ee67 7a87 	vmul.f32	s15, s15, s14
  400262:	ee17 0a90 	vmov	r0, s15
  400266:	4b12      	ldr	r3, [pc, #72]	; (4002b0 <FusionAhrsSetSettings+0xbc>)
  400268:	4798      	blx	r3
  40026a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  40026e:	ee07 0a10 	vmov	s14, r0
  400272:	ee67 7a27 	vmul.f32	s15, s14, s15
  400276:	ee67 7aa7 	vmul.f32	s15, s15, s15
  40027a:	edc4 7a01 	vstr	s15, [r4, #4]
  40027e:	e7cd      	b.n	40021c <FusionAhrsSetSettings+0x28>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  400280:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 4002ac <FusionAhrsSetSettings+0xb8>
  400284:	ee67 7a87 	vmul.f32	s15, s15, s14
  400288:	ee17 0a90 	vmov	r0, s15
  40028c:	4b08      	ldr	r3, [pc, #32]	; (4002b0 <FusionAhrsSetSettings+0xbc>)
  40028e:	4798      	blx	r3
  400290:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  400294:	ee07 0a10 	vmov	s14, r0
  400298:	ee67 7a27 	vmul.f32	s15, s14, s15
  40029c:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4002a0:	edc4 7a02 	vstr	s15, [r4, #8]
  4002a4:	e7c5      	b.n	400232 <FusionAhrsSetSettings+0x3e>
  4002a6:	bf00      	nop
  4002a8:	7f7fffff 	.word	0x7f7fffff
  4002ac:	3c8efa35 	.word	0x3c8efa35
  4002b0:	0040462d 	.word	0x0040462d

004002b4 <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  4002b4:	b530      	push	{r4, r5, lr}
  4002b6:	b085      	sub	sp, #20
  4002b8:	4605      	mov	r5, r0
    const FusionAhrsSettings settings = {
  4002ba:	4b06      	ldr	r3, [pc, #24]	; (4002d4 <FusionAhrsInitialise+0x20>)
  4002bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4002be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    FusionAhrsSetSettings(ahrs, &settings);
  4002c2:	4669      	mov	r1, sp
  4002c4:	4628      	mov	r0, r5
  4002c6:	4b04      	ldr	r3, [pc, #16]	; (4002d8 <FusionAhrsInitialise+0x24>)
  4002c8:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  4002ca:	4628      	mov	r0, r5
  4002cc:	4b03      	ldr	r3, [pc, #12]	; (4002dc <FusionAhrsInitialise+0x28>)
  4002ce:	4798      	blx	r3
}
  4002d0:	b005      	add	sp, #20
  4002d2:	bd30      	pop	{r4, r5, pc}
  4002d4:	0040bcb0 	.word	0x0040bcb0
  4002d8:	004001f5 	.word	0x004001f5
  4002dc:	004001ad 	.word	0x004001ad

004002e0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
  4002e0:	b410      	push	{r4}
  4002e2:	4604      	mov	r4, r0
    return ahrs->quaternion;
  4002e4:	3110      	adds	r1, #16
  4002e6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  4002e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  4002ec:	4620      	mov	r0, r4
  4002ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002f2:	4770      	bx	lr

004002f4 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
  4002f4:	b510      	push	{r4, lr}
  4002f6:	ed2d 8b04 	vpush	{d8-d9}
  4002fa:	4604      	mov	r4, r0
  4002fc:	ee08 1a10 	vmov	s16, r1
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
  400300:	ed90 7a07 	vldr	s14, [r0, #28]
  400304:	edd0 7a06 	vldr	s15, [r0, #24]
  400308:	ee67 6aa7 	vmul.f32	s13, s15, s15
  40030c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  400310:	ee79 6a66 	vsub.f32	s13, s18, s13
  400314:	ee27 6a07 	vmul.f32	s12, s14, s14
  400318:	edd0 5a04 	vldr	s11, [r0, #16]
  40031c:	ee27 7a25 	vmul.f32	s14, s14, s11
  400320:	edd0 5a05 	vldr	s11, [r0, #20]
  400324:	ee67 7aa5 	vmul.f32	s15, s15, s11
  400328:	ee76 6ac6 	vsub.f32	s13, s13, s12
  40032c:	ee16 1a90 	vmov	r1, s13
  400330:	ee77 7a27 	vadd.f32	s15, s14, s15
  400334:	ee17 0a90 	vmov	r0, s15
  400338:	4b2f      	ldr	r3, [pc, #188]	; (4003f8 <FusionAhrsSetHeading+0x104>)
  40033a:	4798      	blx	r3
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
    return degrees * ((float) M_PI / 180.0f);
  40033c:	eddf 8a2f 	vldr	s17, [pc, #188]	; 4003fc <FusionAhrsSetHeading+0x108>
  400340:	ee68 8a28 	vmul.f32	s17, s16, s17
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
  400344:	ee07 0a90 	vmov	s15, r0
  400348:	ee77 8ae8 	vsub.f32	s17, s15, s17
  40034c:	ee68 8a89 	vmul.f32	s17, s17, s18
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
  400350:	ee18 0a90 	vmov	r0, s17
  400354:	4b2a      	ldr	r3, [pc, #168]	; (400400 <FusionAhrsSetHeading+0x10c>)
  400356:	4798      	blx	r3
  400358:	ee08 0a10 	vmov	s16, r0
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
  40035c:	ee18 0a90 	vmov	r0, s17
  400360:	4b28      	ldr	r3, [pc, #160]	; (400404 <FusionAhrsSetHeading+0x110>)
  400362:	4798      	blx	r3
  400364:	ee07 0a90 	vmov	s15, r0
  400368:	eeb1 5a67 	vneg.f32	s10, s15
  40036c:	ed94 6a04 	vldr	s12, [r4, #16]
  400370:	edd4 5a05 	vldr	s11, [r4, #20]
  400374:	edd4 7a06 	vldr	s15, [r4, #24]
  400378:	edd4 4a07 	vldr	s9, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  40037c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 400408 <FusionAhrsSetHeading+0x114>
  400380:	ee25 4a87 	vmul.f32	s8, s11, s14
  400384:	ee67 3a87 	vmul.f32	s7, s15, s14
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  400388:	ee26 3a07 	vmul.f32	s6, s12, s14
  40038c:	ee24 7a87 	vmul.f32	s14, s9, s14
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  400390:	ee68 6a06 	vmul.f32	s13, s16, s12
  400394:	ee76 6ac4 	vsub.f32	s13, s13, s8
  400398:	ee76 6ae3 	vsub.f32	s13, s13, s7
  40039c:	ee65 2a24 	vmul.f32	s5, s10, s9
  4003a0:	ee76 6ae2 	vsub.f32	s13, s13, s5
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
  4003a4:	edc4 6a04 	vstr	s13, [r4, #16]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  4003a8:	ee68 6a25 	vmul.f32	s13, s16, s11
  4003ac:	ee76 6a83 	vadd.f32	s13, s13, s6
  4003b0:	ee76 6a87 	vadd.f32	s13, s13, s14
  4003b4:	ee67 2a85 	vmul.f32	s5, s15, s10
  4003b8:	ee76 6ae2 	vsub.f32	s13, s13, s5
  4003bc:	edc4 6a05 	vstr	s13, [r4, #20]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
  4003c0:	ee68 7a27 	vmul.f32	s15, s16, s15
  4003c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4003c8:	ee77 7a83 	vadd.f32	s15, s15, s6
  4003cc:	ee65 5a85 	vmul.f32	s11, s11, s10
  4003d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
  4003d4:	edc4 7a06 	vstr	s15, [r4, #24]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
  4003d8:	ee28 8a24 	vmul.f32	s16, s16, s9
  4003dc:	ee38 8a23 	vadd.f32	s16, s16, s7
  4003e0:	ee38 8a44 	vsub.f32	s16, s16, s8
  4003e4:	ee26 6a05 	vmul.f32	s12, s12, s10
  4003e8:	ee38 8a06 	vadd.f32	s16, s16, s12
  4003ec:	ed84 8a07 	vstr	s16, [r4, #28]
#undef Q
}
  4003f0:	ecbd 8b04 	vpop	{d8-d9}
  4003f4:	bd10      	pop	{r4, pc}
  4003f6:	bf00      	nop
  4003f8:	00404805 	.word	0x00404805
  4003fc:	3c8efa35 	.word	0x3c8efa35
  400400:	004045b5 	.word	0x004045b5
  400404:	0040462d 	.word	0x0040462d
  400408:	00000000 	.word	0x00000000

0040040c <FusionAhrsUpdate>:
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
  40040c:	b570      	push	{r4, r5, r6, lr}
  40040e:	ed2d 8b0a 	vpush	{d8-d12}
  400412:	b08e      	sub	sp, #56	; 0x38
  400414:	4604      	mov	r4, r0
  400416:	a803      	add	r0, sp, #12
  400418:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  40041c:	ed9d 9a22 	vldr	s18, [sp, #136]	; 0x88
    ahrs->accelerometer = accelerometer;
  400420:	f104 0320 	add.w	r3, r4, #32
  400424:	aa1c      	add	r2, sp, #112	; 0x70
  400426:	ca07      	ldmia	r2, {r0, r1, r2}
  400428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (ahrs->initialising == true) {
  40042c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400430:	b1bb      	cbz	r3, 400462 <FusionAhrsUpdate+0x56>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
  400432:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
  400436:	ee29 7a27 	vmul.f32	s14, s18, s15
  40043a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
  40043e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400442:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
  400446:	ed94 7a00 	vldr	s14, [r4]
  40044a:	eef4 7ac7 	vcmpe.f32	s15, s14
  40044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400452:	d506      	bpl.n	400462 <FusionAhrsUpdate+0x56>
            ahrs->rampedGain = ahrs->settings.gain;
  400454:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
            ahrs->initialising = false;
  400458:	2300      	movs	r3, #0
  40045a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
  40045e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            .axis.x = Q.x * Q.z - Q.w * Q.y,
  400462:	ed94 6a05 	vldr	s12, [r4, #20]
  400466:	edd4 9a07 	vldr	s19, [r4, #28]
  40046a:	ed94 7a04 	vldr	s14, [r4, #16]
  40046e:	edd4 aa06 	vldr	s21, [r4, #24]
  400472:	ee66 6a29 	vmul.f32	s13, s12, s19
  400476:	ee67 7a2a 	vmul.f32	s15, s14, s21
  40047a:	ee36 bae7 	vsub.f32	s22, s13, s15
            .axis.y = Q.y * Q.z + Q.w * Q.x,
  40047e:	ee69 aaaa 	vmul.f32	s21, s19, s21
  400482:	ee26 6a07 	vmul.f32	s12, s12, s14
  400486:	ee7a aa86 	vadd.f32	s21, s21, s12
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
  40048a:	ee27 7a07 	vmul.f32	s14, s14, s14
  40048e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  400492:	ee37 7a67 	vsub.f32	s14, s14, s15
  400496:	ee69 9aa9 	vmul.f32	s19, s19, s19
  40049a:	ee77 9a29 	vadd.f32	s19, s14, s19
    ahrs->accelerometerIgnored = true;
  40049e:	2301      	movs	r3, #1
  4004a0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  4004a4:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
  4004a8:	ed9d aa1d 	vldr	s20, [sp, #116]	; 0x74
  4004ac:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
  4004b0:	eeb5 aa40 	vcmp.f32	s20, #0.0
  4004b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4004b8:	bf18      	it	ne
  4004ba:	2300      	movne	r3, #0
  4004bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
  4004c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(accelerometer) == false) {
  4004c4:	f003 0301 	and.w	r3, r3, #1
  4004c8:	bf18      	it	ne
  4004ca:	2300      	movne	r3, #0
  4004cc:	b38b      	cbz	r3, 400532 <FusionAhrsUpdate+0x126>
  4004ce:	eef5 8a40 	vcmp.f32	s17, #0.0
  4004d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4004d6:	d12c      	bne.n	400532 <FusionAhrsUpdate+0x126>
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  4004d8:	ed9f 8ae8 	vldr	s16, [pc, #928]	; 40087c <FusionAhrsUpdate+0x470>
  4004dc:	eef0 8a48 	vmov.f32	s17, s16
  4004e0:	eeb0 aa48 	vmov.f32	s20, s16
    ahrs->magnetometerIgnored = true;
  4004e4:	2301      	movs	r3, #1
  4004e6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  4004ea:	eddd ba1f 	vldr	s23, [sp, #124]	; 0x7c
  4004ee:	ed9d ca20 	vldr	s24, [sp, #128]	; 0x80
  4004f2:	eddd ca21 	vldr	s25, [sp, #132]	; 0x84
  4004f6:	eeb5 ca40 	vcmp.f32	s24, #0.0
  4004fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4004fe:	bf18      	it	ne
  400500:	2300      	movne	r3, #0
  400502:	eef5 ba40 	vcmp.f32	s23, #0.0
  400506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(magnetometer) == false) {
  40050a:	f003 0301 	and.w	r3, r3, #1
  40050e:	bf18      	it	ne
  400510:	2300      	movne	r3, #0
  400512:	2b00      	cmp	r3, #0
  400514:	f000 8089 	beq.w	40062a <FusionAhrsUpdate+0x21e>
  400518:	eef5 ca40 	vcmp.f32	s25, #0.0
  40051c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400520:	f040 8083 	bne.w	40062a <FusionAhrsUpdate+0x21e>
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400524:	eddf 9ad5 	vldr	s19, [pc, #852]	; 40087c <FusionAhrsUpdate+0x470>
  400528:	eef0 6a69 	vmov.f32	s13, s19
  40052c:	eeb0 7a69 	vmov.f32	s14, s19
  400530:	e10d      	b.n	40074e <FusionAhrsUpdate+0x342>
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
  400532:	6d62      	ldr	r2, [r4, #84]	; 0x54
  400534:	68e3      	ldr	r3, [r4, #12]
  400536:	429a      	cmp	r2, r3
  400538:	d859      	bhi.n	4005ee <FusionAhrsUpdate+0x1e2>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40053a:	ee68 7a08 	vmul.f32	s15, s16, s16
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  40053e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400542:	ee77 7a87 	vadd.f32	s15, s15, s14
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  400546:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40054a:	ee77 7a87 	vadd.f32	s15, s15, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  40054e:	4bcc      	ldr	r3, [pc, #816]	; (400880 <FusionAhrsUpdate+0x474>)
  400550:	ee17 2a90 	vmov	r2, s15
  400554:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400558:	ee06 3a90 	vmov	s13, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  40055c:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 400884 <FusionAhrsUpdate+0x478>
  400560:	ee67 7a87 	vmul.f32	s15, s15, s14
  400564:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400568:	ee67 7aa6 	vmul.f32	s15, s15, s13
  40056c:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 400888 <FusionAhrsUpdate+0x47c>
  400570:	ee77 7a67 	vsub.f32	s15, s14, s15
  400574:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = vector.axis.x * scalar;
  400578:	ee28 8a27 	vmul.f32	s16, s16, s15
    result.axis.y = vector.axis.y * scalar;
  40057c:	ee2a 6a27 	vmul.f32	s12, s20, s15
    result.axis.z = vector.axis.z * scalar;
  400580:	ee68 8aa7 	vmul.f32	s17, s17, s15
    result.axis.x = A.y * B.z - A.z * B.y;
  400584:	ee29 7a86 	vmul.f32	s14, s19, s12
  400588:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  40058c:	ee37 aa67 	vsub.f32	s20, s14, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  400590:	ee6b 8a28 	vmul.f32	s17, s22, s17
  400594:	ee69 6a88 	vmul.f32	s13, s19, s16
  400598:	ee78 8ae6 	vsub.f32	s17, s17, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  40059c:	ee2a 8a88 	vmul.f32	s16, s21, s16
  4005a0:	ee2b 6a06 	vmul.f32	s12, s22, s12
  4005a4:	ee38 8a46 	vsub.f32	s16, s16, s12
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
  4005a8:	ed84 aa0e 	vstr	s20, [r4, #56]	; 0x38
  4005ac:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
  4005b0:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
  4005b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4005b8:	b973      	cbnz	r3, 4005d8 <FusionAhrsUpdate+0x1cc>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4005ba:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4005be:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4005c2:	ee77 7a87 	vadd.f32	s15, s15, s14
  4005c6:	ee48 7a08 	vmla.f32	s15, s16, s16
  4005ca:	ed94 7a01 	vldr	s14, [r4, #4]
  4005ce:	eef4 7ac7 	vcmpe.f32	s15, s14
  4005d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4005d6:	d81e      	bhi.n	400616 <FusionAhrsUpdate+0x20a>
            ahrs->accelerometerIgnored = false;
  4005d8:	2300      	movs	r3, #0
  4005da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
  4005de:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4005e0:	2b09      	cmp	r3, #9
  4005e2:	bf8c      	ite	hi
  4005e4:	220a      	movhi	r2, #10
  4005e6:	2200      	movls	r2, #0
  4005e8:	1a9b      	subs	r3, r3, r2
  4005ea:	6563      	str	r3, [r4, #84]	; 0x54
  4005ec:	e77a      	b.n	4004e4 <FusionAhrsUpdate+0xd8>
            const FusionQuaternion quaternion = ahrs->quaternion;
  4005ee:	ae07      	add	r6, sp, #28
  4005f0:	f104 0510 	add.w	r5, r4, #16
  4005f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4005f8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
  4005fc:	4620      	mov	r0, r4
  4005fe:	4ba3      	ldr	r3, [pc, #652]	; (40088c <FusionAhrsUpdate+0x480>)
  400600:	4798      	blx	r3
            ahrs->quaternion = quaternion;
  400602:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400606:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
  40060a:	2300      	movs	r3, #0
  40060c:	6563      	str	r3, [r4, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
  40060e:	2301      	movs	r3, #1
  400610:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  400614:	e791      	b.n	40053a <FusionAhrsUpdate+0x12e>
            ahrs->accelerationRejectionTimer++;
  400616:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400618:	3301      	adds	r3, #1
  40061a:	6563      	str	r3, [r4, #84]	; 0x54
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  40061c:	ed9f 8a97 	vldr	s16, [pc, #604]	; 40087c <FusionAhrsUpdate+0x470>
  400620:	eef0 8a48 	vmov.f32	s17, s16
  400624:	eeb0 aa48 	vmov.f32	s20, s16
  400628:	e75c      	b.n	4004e4 <FusionAhrsUpdate+0xd8>
        ahrs->magneticRejectionTimeout = false;
  40062a:	2300      	movs	r3, #0
  40062c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
  400630:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  400632:	68e3      	ldr	r3, [r4, #12]
  400634:	429a      	cmp	r2, r3
  400636:	f200 812d 	bhi.w	400894 <FusionAhrsUpdate+0x488>
                .axis.x = Q.x * Q.y + Q.w * Q.z,
  40063a:	edd4 6a05 	vldr	s13, [r4, #20]
  40063e:	ed94 7a06 	vldr	s14, [r4, #24]
  400642:	edd4 4a04 	vldr	s9, [r4, #16]
  400646:	edd4 5a07 	vldr	s11, [r4, #28]
  40064a:	ee26 5a87 	vmul.f32	s10, s13, s14
  40064e:	ee64 7aa5 	vmul.f32	s15, s9, s11
  400652:	ee35 5a27 	vadd.f32	s10, s10, s15
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
  400656:	ee64 7aa4 	vmul.f32	s15, s9, s9
  40065a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  40065e:	ee77 7ac6 	vsub.f32	s15, s15, s12
  400662:	ee27 6a07 	vmul.f32	s12, s14, s14
  400666:	ee37 6a86 	vadd.f32	s12, s15, s12
                .axis.z = Q.y * Q.z - Q.w * Q.x
  40066a:	ee27 7a25 	vmul.f32	s14, s14, s11
  40066e:	ee66 6aa4 	vmul.f32	s13, s13, s9
  400672:	ee77 4a66 	vsub.f32	s9, s14, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  400676:	ee6a 5aac 	vmul.f32	s11, s21, s25
  40067a:	ee69 7a8c 	vmul.f32	s15, s19, s24
  40067e:	ee75 5ae7 	vsub.f32	s11, s11, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  400682:	ee69 9aab 	vmul.f32	s19, s19, s23
  400686:	ee6b ca2c 	vmul.f32	s25, s22, s25
  40068a:	ee79 9aec 	vsub.f32	s19, s19, s25
    result.axis.z = A.x * B.y - A.y * B.x;
  40068e:	ee6b 6a0c 	vmul.f32	s13, s22, s24
  400692:	ee6a 7aab 	vmul.f32	s15, s21, s23
  400696:	ee76 6ae7 	vsub.f32	s13, s13, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40069a:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  40069e:	ee69 7aa9 	vmul.f32	s15, s19, s19
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4006a2:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4006a6:	ee66 7aa6 	vmul.f32	s15, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4006aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4006ae:	4b74      	ldr	r3, [pc, #464]	; (400880 <FusionAhrsUpdate+0x474>)
  4006b0:	ee17 2a10 	vmov	r2, s14
  4006b4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4006b8:	ee04 3a10 	vmov	s8, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4006bc:	eddf 7a71 	vldr	s15, [pc, #452]	; 400884 <FusionAhrsUpdate+0x478>
  4006c0:	ee27 7a27 	vmul.f32	s14, s14, s15
  4006c4:	ee27 7a04 	vmul.f32	s14, s14, s8
  4006c8:	ee27 7a04 	vmul.f32	s14, s14, s8
  4006cc:	eddf 7a6e 	vldr	s15, [pc, #440]	; 400888 <FusionAhrsUpdate+0x47c>
  4006d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4006d4:	ee67 7a84 	vmul.f32	s15, s15, s8
    result.axis.x = vector.axis.x * scalar;
  4006d8:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  4006dc:	ee67 9aa9 	vmul.f32	s19, s15, s19
    result.axis.z = vector.axis.z * scalar;
  4006e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  4006e4:	ee24 7aa9 	vmul.f32	s14, s9, s19
  4006e8:	ee66 6a27 	vmul.f32	s13, s12, s15
  4006ec:	ee37 7a66 	vsub.f32	s14, s14, s13
    result.axis.y = A.z * B.x - A.x * B.z;
  4006f0:	ee65 7a27 	vmul.f32	s15, s10, s15
  4006f4:	ee64 6aa5 	vmul.f32	s13, s9, s11
  4006f8:	ee77 6ae6 	vsub.f32	s13, s15, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  4006fc:	ee66 7a25 	vmul.f32	s15, s12, s11
  400700:	ee65 9a29 	vmul.f32	s19, s10, s19
  400704:	ee77 9ae9 	vsub.f32	s19, s15, s19
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
  400708:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  40070c:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
  400710:	edc4 9a13 	vstr	s19, [r4, #76]	; 0x4c
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
  400714:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400718:	b97b      	cbnz	r3, 40073a <FusionAhrsUpdate+0x32e>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40071a:	ee67 7a07 	vmul.f32	s15, s14, s14
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  40071e:	ee26 6aa6 	vmul.f32	s12, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400722:	ee77 7a86 	vadd.f32	s15, s15, s12
  400726:	ee49 7aa9 	vmla.f32	s15, s19, s19
  40072a:	ed94 6a02 	vldr	s12, [r4, #8]
  40072e:	eef4 7ac6 	vcmpe.f32	s15, s12
  400732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400736:	f200 80c8 	bhi.w	4008ca <FusionAhrsUpdate+0x4be>
            ahrs->magnetometerIgnored = false;
  40073a:	2300      	movs	r3, #0
  40073c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
  400740:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  400742:	2b09      	cmp	r3, #9
  400744:	bf8c      	ite	hi
  400746:	220a      	movhi	r2, #10
  400748:	2200      	movls	r2, #0
  40074a:	1a9b      	subs	r3, r3, r2
  40074c:	65e3      	str	r3, [r4, #92]	; 0x5c
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
  40074e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  400752:	ee37 7a0a 	vadd.f32	s14, s14, s20
    result.axis.x = vector.axis.x * scalar;
  400756:	ee27 7a27 	vmul.f32	s14, s14, s15
  40075a:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 400890 <FusionAhrsUpdate+0x484>
  40075e:	eddd 5a03 	vldr	s11, [sp, #12]
  400762:	ee65 5a86 	vmul.f32	s11, s11, s12
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  400766:	ee37 7a25 	vadd.f32	s14, s14, s11
    result.axis.x = vector.axis.x * scalar;
  40076a:	ee27 7a09 	vmul.f32	s14, s14, s18
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  40076e:	ee78 6aa6 	vadd.f32	s13, s17, s13
    result.axis.y = vector.axis.y * scalar;
  400772:	ee66 6aa7 	vmul.f32	s13, s13, s15
  400776:	eddd 8a04 	vldr	s17, [sp, #16]
  40077a:	ee68 8a86 	vmul.f32	s17, s17, s12
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  40077e:	ee76 6aa8 	vadd.f32	s13, s13, s17
    result.axis.y = vector.axis.y * scalar;
  400782:	ee66 6a89 	vmul.f32	s13, s13, s18
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  400786:	ee38 8a29 	vadd.f32	s16, s16, s19
    result.axis.z = vector.axis.z * scalar;
  40078a:	ee28 8a27 	vmul.f32	s16, s16, s15
  40078e:	eddd 7a05 	vldr	s15, [sp, #20]
  400792:	ee67 7a86 	vmul.f32	s15, s15, s12
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  400796:	ee38 8a27 	vadd.f32	s16, s16, s15
    result.axis.z = vector.axis.z * scalar;
  40079a:	ee68 7a09 	vmul.f32	s15, s16, s18
  40079e:	ed94 3a04 	vldr	s6, [r4, #16]
  4007a2:	edd4 3a05 	vldr	s7, [r4, #20]
  4007a6:	ed94 4a06 	vldr	s8, [r4, #24]
  4007aa:	ed94 5a07 	vldr	s10, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
  4007ae:	ee63 5ac7 	vnmul.f32	s11, s7, s14
  4007b2:	ee26 6a84 	vmul.f32	s12, s13, s8
  4007b6:	ee75 5ac6 	vsub.f32	s11, s11, s12
  4007ba:	ee27 6a85 	vmul.f32	s12, s15, s10
  4007be:	ee75 5ac6 	vsub.f32	s11, s11, s12
    result.element.w = quaternionA.element.w + quaternionB.element.w;
  4007c2:	ee75 5a83 	vadd.f32	s11, s11, s6
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
  4007c6:	ee67 4a03 	vmul.f32	s9, s14, s6
  4007ca:	ee27 6a84 	vmul.f32	s12, s15, s8
  4007ce:	ee74 4a86 	vadd.f32	s9, s9, s12
  4007d2:	ee26 6a85 	vmul.f32	s12, s13, s10
  4007d6:	ee74 4ac6 	vsub.f32	s9, s9, s12
    result.element.x = quaternionA.element.x + quaternionB.element.x;
  4007da:	ee74 4aa3 	vadd.f32	s9, s9, s7
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
  4007de:	ee26 6a83 	vmul.f32	s12, s13, s6
  4007e2:	ee67 2aa3 	vmul.f32	s5, s15, s7
  4007e6:	ee36 6a62 	vsub.f32	s12, s12, s5
  4007ea:	ee67 2a05 	vmul.f32	s5, s14, s10
  4007ee:	ee36 6a22 	vadd.f32	s12, s12, s5
    result.element.y = quaternionA.element.y + quaternionB.element.y;
  4007f2:	ee36 6a04 	vadd.f32	s12, s12, s8
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
  4007f6:	ee67 7a83 	vmul.f32	s15, s15, s6
  4007fa:	ee66 6aa3 	vmul.f32	s13, s13, s7
  4007fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
  400802:	ee27 7a04 	vmul.f32	s14, s14, s8
  400806:	ee77 7ac7 	vsub.f32	s15, s15, s14
    result.element.z = quaternionA.element.z + quaternionB.element.z;
  40080a:	ee77 7a85 	vadd.f32	s15, s15, s10
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
  40080e:	ee25 7aa5 	vmul.f32	s14, s11, s11
  400812:	ee64 6aa4 	vmul.f32	s13, s9, s9
  400816:	ee37 7a26 	vadd.f32	s14, s14, s13
  40081a:	ee66 6a06 	vmul.f32	s13, s12, s12
  40081e:	ee37 7a26 	vadd.f32	s14, s14, s13
  400822:	ee67 6aa7 	vmul.f32	s13, s15, s15
  400826:	ee37 7a26 	vadd.f32	s14, s14, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  40082a:	4b15      	ldr	r3, [pc, #84]	; (400880 <FusionAhrsUpdate+0x474>)
  40082c:	ee17 2a10 	vmov	r2, s14
  400830:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400834:	ee05 3a10 	vmov	s10, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400838:	eddf 6a12 	vldr	s13, [pc, #72]	; 400884 <FusionAhrsUpdate+0x478>
  40083c:	ee27 7a26 	vmul.f32	s14, s14, s13
  400840:	ee27 7a05 	vmul.f32	s14, s14, s10
  400844:	ee27 7a05 	vmul.f32	s14, s14, s10
  400848:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400888 <FusionAhrsUpdate+0x47c>
  40084c:	ee36 7ac7 	vsub.f32	s14, s13, s14
  400850:	ee27 7a05 	vmul.f32	s14, s14, s10
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
  400854:	ee67 5a25 	vmul.f32	s11, s14, s11
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
  400858:	edc4 5a04 	vstr	s11, [r4, #16]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
  40085c:	ee67 6a24 	vmul.f32	s13, s14, s9
  400860:	edc4 6a05 	vstr	s13, [r4, #20]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
  400864:	ee27 6a06 	vmul.f32	s12, s14, s12
  400868:	ed84 6a06 	vstr	s12, [r4, #24]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
  40086c:	ee27 7a27 	vmul.f32	s14, s14, s15
  400870:	ed84 7a07 	vstr	s14, [r4, #28]
}
  400874:	b00e      	add	sp, #56	; 0x38
  400876:	ecbd 8b0a 	vpop	{d8-d12}
  40087a:	bd70      	pop	{r4, r5, r6, pc}
  40087c:	00000000 	.word	0x00000000
  400880:	5f1f1412 	.word	0x5f1f1412
  400884:	3f36d312 	.word	0x3f36d312
  400888:	3fd851ff 	.word	0x3fd851ff
  40088c:	004001ad 	.word	0x004001ad
  400890:	3c0efa35 	.word	0x3c0efa35
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
  400894:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  400898:	edcd aa0c 	vstr	s21, [sp, #48]	; 0x30
  40089c:	edcd 9a0d 	vstr	s19, [sp, #52]	; 0x34
  4008a0:	ab20      	add	r3, sp, #128	; 0x80
  4008a2:	e893 0003 	ldmia.w	r3, {r0, r1}
  4008a6:	e88d 0003 	stmia.w	sp, {r0, r1}
  4008aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4008ac:	aa0e      	add	r2, sp, #56	; 0x38
  4008ae:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  4008b2:	4d0b      	ldr	r5, [pc, #44]	; (4008e0 <FusionAhrsUpdate+0x4d4>)
  4008b4:	47a8      	blx	r5
  4008b6:	4601      	mov	r1, r0
  4008b8:	4620      	mov	r0, r4
  4008ba:	4b0a      	ldr	r3, [pc, #40]	; (4008e4 <FusionAhrsUpdate+0x4d8>)
  4008bc:	4798      	blx	r3
            ahrs->magneticRejectionTimer = 0;
  4008be:	2300      	movs	r3, #0
  4008c0:	65e3      	str	r3, [r4, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
  4008c2:	2301      	movs	r3, #1
  4008c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  4008c8:	e6b7      	b.n	40063a <FusionAhrsUpdate+0x22e>
            ahrs->magneticRejectionTimer++;
  4008ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4008cc:	3301      	adds	r3, #1
  4008ce:	65e3      	str	r3, [r4, #92]	; 0x5c
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4008d0:	eddf 9a05 	vldr	s19, [pc, #20]	; 4008e8 <FusionAhrsUpdate+0x4dc>
  4008d4:	eef0 6a69 	vmov.f32	s13, s19
  4008d8:	eeb0 7a69 	vmov.f32	s14, s19
  4008dc:	e737      	b.n	40074e <FusionAhrsUpdate+0x342>
  4008de:	bf00      	nop
  4008e0:	00400949 	.word	0x00400949
  4008e4:	004002f5 	.word	0x004002f5
  4008e8:	00000000 	.word	0x00000000

004008ec <FusionAhrsUpdateNoMagnetometer>:
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
  4008ec:	b530      	push	{r4, r5, lr}
  4008ee:	b091      	sub	sp, #68	; 0x44
  4008f0:	4605      	mov	r5, r0
  4008f2:	ac09      	add	r4, sp, #36	; 0x24
  4008f4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
  4008f8:	2300      	movs	r3, #0
  4008fa:	930d      	str	r3, [sp, #52]	; 0x34
  4008fc:	930e      	str	r3, [sp, #56]	; 0x38
  4008fe:	930f      	str	r3, [sp, #60]	; 0x3c
  400900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  400902:	9306      	str	r3, [sp, #24]
  400904:	ab03      	add	r3, sp, #12
  400906:	aa10      	add	r2, sp, #64	; 0x40
  400908:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  40090c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  400910:	ab14      	add	r3, sp, #80	; 0x50
  400912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400916:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  40091a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  40091e:	4628      	mov	r0, r5
  400920:	4c07      	ldr	r4, [pc, #28]	; (400940 <FusionAhrsUpdateNoMagnetometer+0x54>)
  400922:	47a0      	blx	r4
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
  400924:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
  400928:	b113      	cbz	r3, 400930 <FusionAhrsUpdateNoMagnetometer+0x44>
  40092a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  40092e:	b10b      	cbz	r3, 400934 <FusionAhrsUpdateNoMagnetometer+0x48>
}
  400930:	b011      	add	sp, #68	; 0x44
  400932:	bd30      	pop	{r4, r5, pc}
        FusionAhrsSetHeading(ahrs, 0.0f);
  400934:	2100      	movs	r1, #0
  400936:	4628      	mov	r0, r5
  400938:	4b02      	ldr	r3, [pc, #8]	; (400944 <FusionAhrsUpdateNoMagnetometer+0x58>)
  40093a:	4798      	blx	r3
}
  40093c:	e7f8      	b.n	400930 <FusionAhrsUpdateNoMagnetometer+0x44>
  40093e:	bf00      	nop
  400940:	0040040d 	.word	0x0040040d
  400944:	004002f5 	.word	0x004002f5

00400948 <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
  400948:	b082      	sub	sp, #8
  40094a:	b500      	push	{lr}
  40094c:	b085      	sub	sp, #20
  40094e:	f10d 0e10 	add.w	lr, sp, #16
  400952:	e90e 0007 	stmdb	lr, {r0, r1, r2}
  400956:	9307      	str	r3, [sp, #28]
  400958:	eddd 3a01 	vldr	s7, [sp, #4]
  40095c:	eddd 6a02 	vldr	s13, [sp, #8]
  400960:	ed9d 4a03 	vldr	s8, [sp, #12]
  400964:	eddd 7a07 	vldr	s15, [sp, #28]
  400968:	ed9d 5a08 	vldr	s10, [sp, #32]
  40096c:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
    result.axis.x = A.y * B.z - A.z * B.y;
  400970:	ee66 5a26 	vmul.f32	s11, s12, s13
  400974:	ee24 7a05 	vmul.f32	s14, s8, s10
  400978:	ee75 5ac7 	vsub.f32	s11, s11, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  40097c:	ee24 7a27 	vmul.f32	s14, s8, s15
  400980:	ee26 6a23 	vmul.f32	s12, s12, s7
  400984:	ee37 6a46 	vsub.f32	s12, s14, s12
    result.axis.z = A.x * B.y - A.y * B.x;
  400988:	ee25 5a23 	vmul.f32	s10, s10, s7
  40098c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400990:	ee35 5a67 	vsub.f32	s10, s10, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400994:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400998:	ee66 7a06 	vmul.f32	s15, s12, s12
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40099c:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4009a0:	ee65 7a05 	vmul.f32	s15, s10, s10
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4009a4:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4009a8:	4b2d      	ldr	r3, [pc, #180]	; (400a60 <FusionCompassCalculateHeading+0x118>)
  4009aa:	ee17 2a10 	vmov	r2, s14
  4009ae:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  4009b2:	ee03 2a10 	vmov	s6, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4009b6:	eddf 2a2b 	vldr	s5, [pc, #172]	; 400a64 <FusionCompassCalculateHeading+0x11c>
  4009ba:	ee27 7a22 	vmul.f32	s14, s14, s5
  4009be:	ee27 7a03 	vmul.f32	s14, s14, s6
  4009c2:	ee27 7a03 	vmul.f32	s14, s14, s6
  4009c6:	eddf 4a28 	vldr	s9, [pc, #160]	; 400a68 <FusionCompassCalculateHeading+0x120>
  4009ca:	ee34 7ac7 	vsub.f32	s14, s9, s14
  4009ce:	ee67 7a03 	vmul.f32	s15, s14, s6
    result.axis.x = vector.axis.x * scalar;
  4009d2:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  4009d6:	ee27 6a86 	vmul.f32	s12, s15, s12
    result.axis.z = vector.axis.z * scalar;
  4009da:	ee67 7a85 	vmul.f32	s15, s15, s10
    result.axis.x = A.y * B.z - A.z * B.y;
  4009de:	ee24 5a06 	vmul.f32	s10, s8, s12
  4009e2:	ee26 7aa7 	vmul.f32	s14, s13, s15
  4009e6:	ee35 5a47 	vsub.f32	s10, s10, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  4009ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
  4009ee:	ee24 4a25 	vmul.f32	s8, s8, s11
  4009f2:	ee77 7ac4 	vsub.f32	s15, s15, s8
    result.axis.z = A.x * B.y - A.y * B.x;
  4009f6:	ee66 6aa5 	vmul.f32	s13, s13, s11
  4009fa:	ee26 6a23 	vmul.f32	s12, s12, s7
  4009fe:	ee76 6ac6 	vsub.f32	s13, s13, s12
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400a02:	ee25 7a05 	vmul.f32	s14, s10, s10
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400a06:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  400a0e:	ee66 6aa6 	vmul.f32	s13, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400a16:	ee17 2a90 	vmov	r2, s15
  400a1a:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400a1e:	ee07 3a10 	vmov	s14, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400a22:	ee67 7aa2 	vmul.f32	s15, s15, s5
  400a26:	ee67 7a87 	vmul.f32	s15, s15, s14
  400a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
  400a2e:	ee74 7ae7 	vsub.f32	s15, s9, s15
  400a32:	ee67 7a87 	vmul.f32	s15, s15, s14

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
  400a36:	ee67 7a85 	vmul.f32	s15, s15, s10
  400a3a:	ee17 1a90 	vmov	r1, s15
  400a3e:	ee15 0a90 	vmov	r0, s11
  400a42:	4b0a      	ldr	r3, [pc, #40]	; (400a6c <FusionCompassCalculateHeading+0x124>)
  400a44:	4798      	blx	r3
}
  400a46:	eddf 7a0a 	vldr	s15, [pc, #40]	; 400a70 <FusionCompassCalculateHeading+0x128>
  400a4a:	ee07 0a10 	vmov	s14, r0
  400a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
  400a52:	ee17 0a90 	vmov	r0, s15
  400a56:	b005      	add	sp, #20
  400a58:	f85d eb04 	ldr.w	lr, [sp], #4
  400a5c:	b002      	add	sp, #8
  400a5e:	4770      	bx	lr
  400a60:	5f1f1412 	.word	0x5f1f1412
  400a64:	3f36d312 	.word	0x3f36d312
  400a68:	3fd851ff 	.word	0x3fd851ff
  400a6c:	00404805 	.word	0x00404805
  400a70:	42652ee0 	.word	0x42652ee0

00400a74 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400a74:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400a76:	4b07      	ldr	r3, [pc, #28]	; (400a94 <spi_enable_clock+0x20>)
  400a78:	4298      	cmp	r0, r3
  400a7a:	d003      	beq.n	400a84 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400a7c:	4b06      	ldr	r3, [pc, #24]	; (400a98 <spi_enable_clock+0x24>)
  400a7e:	4298      	cmp	r0, r3
  400a80:	d004      	beq.n	400a8c <spi_enable_clock+0x18>
  400a82:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a84:	2015      	movs	r0, #21
  400a86:	4b05      	ldr	r3, [pc, #20]	; (400a9c <spi_enable_clock+0x28>)
  400a88:	4798      	blx	r3
  400a8a:	bd08      	pop	{r3, pc}
  400a8c:	202a      	movs	r0, #42	; 0x2a
  400a8e:	4b03      	ldr	r3, [pc, #12]	; (400a9c <spi_enable_clock+0x28>)
  400a90:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400a92:	e7f6      	b.n	400a82 <spi_enable_clock+0xe>
  400a94:	40008000 	.word	0x40008000
  400a98:	40058000 	.word	0x40058000
  400a9c:	00401a45 	.word	0x00401a45

00400aa0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400aa0:	6843      	ldr	r3, [r0, #4]
  400aa2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400aa6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400aa8:	6843      	ldr	r3, [r0, #4]
  400aaa:	0409      	lsls	r1, r1, #16
  400aac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400ab0:	4319      	orrs	r1, r3
  400ab2:	6041      	str	r1, [r0, #4]
  400ab4:	4770      	bx	lr

00400ab6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400ab6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400ab8:	f643 2499 	movw	r4, #15001	; 0x3a99
  400abc:	6905      	ldr	r5, [r0, #16]
  400abe:	f015 0f02 	tst.w	r5, #2
  400ac2:	d103      	bne.n	400acc <spi_write+0x16>
		if (!timeout--) {
  400ac4:	3c01      	subs	r4, #1
  400ac6:	d1f9      	bne.n	400abc <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400ac8:	2001      	movs	r0, #1
  400aca:	e00c      	b.n	400ae6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400acc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400ace:	f014 0f02 	tst.w	r4, #2
  400ad2:	d006      	beq.n	400ae2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400ad4:	0412      	lsls	r2, r2, #16
  400ad6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400ada:	4311      	orrs	r1, r2
		if (uc_last) {
  400adc:	b10b      	cbz	r3, 400ae2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400ade:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400ae2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400ae4:	2000      	movs	r0, #0
}
  400ae6:	bc30      	pop	{r4, r5}
  400ae8:	4770      	bx	lr

00400aea <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400aea:	b932      	cbnz	r2, 400afa <spi_set_clock_polarity+0x10>
  400aec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400af0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400af2:	f023 0301 	bic.w	r3, r3, #1
  400af6:	6303      	str	r3, [r0, #48]	; 0x30
  400af8:	4770      	bx	lr
  400afa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400afe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b00:	f043 0301 	orr.w	r3, r3, #1
  400b04:	6303      	str	r3, [r0, #48]	; 0x30
  400b06:	4770      	bx	lr

00400b08 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400b08:	b932      	cbnz	r2, 400b18 <spi_set_clock_phase+0x10>
  400b0a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400b0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b10:	f023 0302 	bic.w	r3, r3, #2
  400b14:	6303      	str	r3, [r0, #48]	; 0x30
  400b16:	4770      	bx	lr
  400b18:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400b1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b1e:	f043 0302 	orr.w	r3, r3, #2
  400b22:	6303      	str	r3, [r0, #48]	; 0x30
  400b24:	4770      	bx	lr

00400b26 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400b26:	2a04      	cmp	r2, #4
  400b28:	d003      	beq.n	400b32 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400b2a:	b16a      	cbz	r2, 400b48 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400b2c:	2a08      	cmp	r2, #8
  400b2e:	d016      	beq.n	400b5e <spi_configure_cs_behavior+0x38>
  400b30:	4770      	bx	lr
  400b32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400b36:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b38:	f023 0308 	bic.w	r3, r3, #8
  400b3c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400b3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b40:	f043 0304 	orr.w	r3, r3, #4
  400b44:	6303      	str	r3, [r0, #48]	; 0x30
  400b46:	4770      	bx	lr
  400b48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400b4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b4e:	f023 0308 	bic.w	r3, r3, #8
  400b52:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400b54:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b56:	f023 0304 	bic.w	r3, r3, #4
  400b5a:	6303      	str	r3, [r0, #48]	; 0x30
  400b5c:	4770      	bx	lr
  400b5e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400b62:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b64:	f043 0308 	orr.w	r3, r3, #8
  400b68:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400b6a:	e7e1      	b.n	400b30 <spi_configure_cs_behavior+0xa>

00400b6c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400b6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400b70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400b76:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400b78:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400b7a:	431a      	orrs	r2, r3
  400b7c:	630a      	str	r2, [r1, #48]	; 0x30
  400b7e:	4770      	bx	lr

00400b80 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400b80:	1e43      	subs	r3, r0, #1
  400b82:	4419      	add	r1, r3
  400b84:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400b88:	1e43      	subs	r3, r0, #1
  400b8a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400b8c:	bf94      	ite	ls
  400b8e:	b200      	sxthls	r0, r0
		return -1;
  400b90:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400b94:	4770      	bx	lr

00400b96 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400b96:	b17a      	cbz	r2, 400bb8 <spi_set_baudrate_div+0x22>
{
  400b98:	b410      	push	{r4}
  400b9a:	4614      	mov	r4, r2
  400b9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400ba0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400ba6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400ba8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400baa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400bae:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400bb0:	2000      	movs	r0, #0
}
  400bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bb6:	4770      	bx	lr
        return -1;
  400bb8:	f04f 30ff 	mov.w	r0, #4294967295
  400bbc:	4770      	bx	lr
	...

00400bc0 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400bc0:	4b28      	ldr	r3, [pc, #160]	; (400c64 <twihs_set_speed+0xa4>)
  400bc2:	4299      	cmp	r1, r3
  400bc4:	d84b      	bhi.n	400c5e <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400bc6:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400bca:	4299      	cmp	r1, r3
  400bcc:	d92d      	bls.n	400c2a <twihs_set_speed+0x6a>
{
  400bce:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400bd0:	4c25      	ldr	r4, [pc, #148]	; (400c68 <twihs_set_speed+0xa8>)
  400bd2:	fba4 3402 	umull	r3, r4, r4, r2
  400bd6:	0ba4      	lsrs	r4, r4, #14
  400bd8:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400bda:	4b24      	ldr	r3, [pc, #144]	; (400c6c <twihs_set_speed+0xac>)
  400bdc:	440b      	add	r3, r1
  400bde:	009b      	lsls	r3, r3, #2
  400be0:	fbb2 f2f3 	udiv	r2, r2, r3
  400be4:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400be6:	2cff      	cmp	r4, #255	; 0xff
  400be8:	d91d      	bls.n	400c26 <twihs_set_speed+0x66>
  400bea:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400bec:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400bee:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400bf0:	2cff      	cmp	r4, #255	; 0xff
  400bf2:	d901      	bls.n	400bf8 <twihs_set_speed+0x38>
  400bf4:	2906      	cmp	r1, #6
  400bf6:	d9f9      	bls.n	400bec <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400bf8:	2aff      	cmp	r2, #255	; 0xff
  400bfa:	d907      	bls.n	400c0c <twihs_set_speed+0x4c>
  400bfc:	2906      	cmp	r1, #6
  400bfe:	d805      	bhi.n	400c0c <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400c00:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  400c02:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400c04:	2aff      	cmp	r2, #255	; 0xff
  400c06:	d901      	bls.n	400c0c <twihs_set_speed+0x4c>
  400c08:	2906      	cmp	r1, #6
  400c0a:	d9f9      	bls.n	400c00 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400c0c:	0213      	lsls	r3, r2, #8
  400c0e:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400c10:	0409      	lsls	r1, r1, #16
  400c12:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400c16:	430b      	orrs	r3, r1
  400c18:	b2e4      	uxtb	r4, r4
  400c1a:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400c1c:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400c1e:	2000      	movs	r0, #0
}
  400c20:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c24:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400c26:	2100      	movs	r1, #0
  400c28:	e7e6      	b.n	400bf8 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400c2a:	0049      	lsls	r1, r1, #1
  400c2c:	fbb2 f2f1 	udiv	r2, r2, r1
  400c30:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400c32:	2aff      	cmp	r2, #255	; 0xff
  400c34:	d911      	bls.n	400c5a <twihs_set_speed+0x9a>
  400c36:	2300      	movs	r3, #0
			ckdiv++;
  400c38:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400c3a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400c3c:	2aff      	cmp	r2, #255	; 0xff
  400c3e:	d901      	bls.n	400c44 <twihs_set_speed+0x84>
  400c40:	2b06      	cmp	r3, #6
  400c42:	d9f9      	bls.n	400c38 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400c44:	0211      	lsls	r1, r2, #8
  400c46:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400c48:	041b      	lsls	r3, r3, #16
  400c4a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400c4e:	430b      	orrs	r3, r1
  400c50:	b2d2      	uxtb	r2, r2
  400c52:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400c54:	6102      	str	r2, [r0, #16]
	return PASS;
  400c56:	2000      	movs	r0, #0
  400c58:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400c5a:	2300      	movs	r3, #0
  400c5c:	e7f2      	b.n	400c44 <twihs_set_speed+0x84>
		return FAIL;
  400c5e:	2001      	movs	r0, #1
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop
  400c64:	00061a80 	.word	0x00061a80
  400c68:	057619f1 	.word	0x057619f1
  400c6c:	3ffd1200 	.word	0x3ffd1200

00400c70 <twihs_master_init>:
{
  400c70:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  400c72:	f04f 32ff 	mov.w	r2, #4294967295
  400c76:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  400c78:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  400c7a:	2280      	movs	r2, #128	; 0x80
  400c7c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  400c7e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400c80:	2208      	movs	r2, #8
  400c82:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400c84:	2220      	movs	r2, #32
  400c86:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400c88:	2204      	movs	r2, #4
  400c8a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400c8c:	680a      	ldr	r2, [r1, #0]
  400c8e:	6849      	ldr	r1, [r1, #4]
  400c90:	4b03      	ldr	r3, [pc, #12]	; (400ca0 <twihs_master_init+0x30>)
  400c92:	4798      	blx	r3
}
  400c94:	2801      	cmp	r0, #1
  400c96:	bf14      	ite	ne
  400c98:	2000      	movne	r0, #0
  400c9a:	2001      	moveq	r0, #1
  400c9c:	bd08      	pop	{r3, pc}
  400c9e:	bf00      	nop
  400ca0:	00400bc1 	.word	0x00400bc1

00400ca4 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400ca4:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  400ca6:	2a00      	cmp	r2, #0
  400ca8:	d04c      	beq.n	400d44 <twihs_master_read+0xa0>
{
  400caa:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400cac:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400cae:	2600      	movs	r6, #0
  400cb0:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400cb2:	684b      	ldr	r3, [r1, #4]
  400cb4:	021b      	lsls	r3, r3, #8
  400cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  400cba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400cbe:	7c0d      	ldrb	r5, [r1, #16]
  400cc0:	042d      	lsls	r5, r5, #16
  400cc2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  400cc6:	432b      	orrs	r3, r5
  400cc8:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400cca:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400ccc:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400cce:	b15d      	cbz	r5, 400ce8 <twihs_master_read+0x44>
	val = addr[0];
  400cd0:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400cd2:	2d01      	cmp	r5, #1
  400cd4:	dd02      	ble.n	400cdc <twihs_master_read+0x38>
		val |= addr[1];
  400cd6:	784e      	ldrb	r6, [r1, #1]
  400cd8:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400cdc:	2d02      	cmp	r5, #2
  400cde:	dd04      	ble.n	400cea <twihs_master_read+0x46>
		val |= addr[2];
  400ce0:	7889      	ldrb	r1, [r1, #2]
  400ce2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400ce6:	e000      	b.n	400cea <twihs_master_read+0x46>
		return 0;
  400ce8:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400cea:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400cec:	2301      	movs	r3, #1
  400cee:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400cf0:	2502      	movs	r5, #2
  400cf2:	e012      	b.n	400d1a <twihs_master_read+0x76>
  400cf4:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  400cf6:	f013 0f02 	tst.w	r3, #2
  400cfa:	d01b      	beq.n	400d34 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400cfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400cfe:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400d00:	6a03      	ldr	r3, [r0, #32]
  400d02:	f013 0f01 	tst.w	r3, #1
  400d06:	d0fb      	beq.n	400d00 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400d08:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400d0a:	2000      	movs	r0, #0
}
  400d0c:	bc70      	pop	{r4, r5, r6}
  400d0e:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400d10:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400d12:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  400d16:	3a01      	subs	r2, #1
  400d18:	d0f2      	beq.n	400d00 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400d1a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400d1c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400d20:	d114      	bne.n	400d4c <twihs_master_read+0xa8>
  400d22:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  400d26:	2a01      	cmp	r2, #1
  400d28:	d0e4      	beq.n	400cf4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400d2a:	f013 0f02 	tst.w	r3, #2
  400d2e:	d1ef      	bne.n	400d10 <twihs_master_read+0x6c>
	while (cnt > 0) {
  400d30:	2a00      	cmp	r2, #0
  400d32:	d0e5      	beq.n	400d00 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400d34:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400d36:	f413 7f80 	tst.w	r3, #256	; 0x100
  400d3a:	d105      	bne.n	400d48 <twihs_master_read+0xa4>
		if (!timeout--) {
  400d3c:	3901      	subs	r1, #1
  400d3e:	d1f2      	bne.n	400d26 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400d40:	2009      	movs	r0, #9
  400d42:	e7e3      	b.n	400d0c <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  400d44:	2001      	movs	r0, #1
  400d46:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400d48:	2005      	movs	r0, #5
  400d4a:	e7df      	b.n	400d0c <twihs_master_read+0x68>
  400d4c:	2005      	movs	r0, #5
  400d4e:	e7dd      	b.n	400d0c <twihs_master_read+0x68>

00400d50 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400d50:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400d52:	2b00      	cmp	r3, #0
  400d54:	d043      	beq.n	400dde <twihs_master_write+0x8e>
{
  400d56:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400d58:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400d5a:	2600      	movs	r6, #0
  400d5c:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400d5e:	7c0a      	ldrb	r2, [r1, #16]
  400d60:	0412      	lsls	r2, r2, #16
  400d62:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400d66:	684d      	ldr	r5, [r1, #4]
  400d68:	022d      	lsls	r5, r5, #8
  400d6a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400d6e:	432a      	orrs	r2, r5
  400d70:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400d72:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400d74:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400d76:	b15d      	cbz	r5, 400d90 <twihs_master_write+0x40>
	val = addr[0];
  400d78:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400d7a:	2d01      	cmp	r5, #1
  400d7c:	dd02      	ble.n	400d84 <twihs_master_write+0x34>
		val |= addr[1];
  400d7e:	784e      	ldrb	r6, [r1, #1]
  400d80:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400d84:	2d02      	cmp	r5, #2
  400d86:	dd04      	ble.n	400d92 <twihs_master_write+0x42>
		val |= addr[2];
  400d88:	7889      	ldrb	r1, [r1, #2]
  400d8a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400d8e:	e000      	b.n	400d92 <twihs_master_write+0x42>
		return 0;
  400d90:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400d92:	60c2      	str	r2, [r0, #12]
  400d94:	e004      	b.n	400da0 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  400d96:	f814 2b01 	ldrb.w	r2, [r4], #1
  400d9a:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  400d9c:	3b01      	subs	r3, #1
  400d9e:	d00f      	beq.n	400dc0 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  400da0:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400da2:	f412 7f80 	tst.w	r2, #256	; 0x100
  400da6:	d11e      	bne.n	400de6 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  400da8:	f012 0f04 	tst.w	r2, #4
  400dac:	d1f3      	bne.n	400d96 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  400dae:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400db0:	f412 7f80 	tst.w	r2, #256	; 0x100
  400db4:	d115      	bne.n	400de2 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  400db6:	f012 0f04 	tst.w	r2, #4
  400dba:	d1ec      	bne.n	400d96 <twihs_master_write+0x46>
	while (cnt > 0) {
  400dbc:	2b00      	cmp	r3, #0
  400dbe:	d1f6      	bne.n	400dae <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  400dc0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400dc2:	f413 7f80 	tst.w	r3, #256	; 0x100
  400dc6:	d111      	bne.n	400dec <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  400dc8:	f013 0f04 	tst.w	r3, #4
  400dcc:	d0f8      	beq.n	400dc0 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400dce:	2302      	movs	r3, #2
  400dd0:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400dd2:	6a03      	ldr	r3, [r0, #32]
  400dd4:	f013 0f01 	tst.w	r3, #1
  400dd8:	d0fb      	beq.n	400dd2 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  400dda:	2000      	movs	r0, #0
  400ddc:	e004      	b.n	400de8 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400dde:	2001      	movs	r0, #1
  400de0:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400de2:	2005      	movs	r0, #5
  400de4:	e000      	b.n	400de8 <twihs_master_write+0x98>
  400de6:	2005      	movs	r0, #5
}
  400de8:	bc70      	pop	{r4, r5, r6}
  400dea:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400dec:	2005      	movs	r0, #5
  400dee:	e7fb      	b.n	400de8 <twihs_master_write+0x98>

00400df0 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400df0:	4b01      	ldr	r3, [pc, #4]	; (400df8 <gfx_mono_set_framebuffer+0x8>)
  400df2:	6018      	str	r0, [r3, #0]
  400df4:	4770      	bx	lr
  400df6:	bf00      	nop
  400df8:	204009f4 	.word	0x204009f4

00400dfc <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400dfc:	4b02      	ldr	r3, [pc, #8]	; (400e08 <gfx_mono_framebuffer_put_byte+0xc>)
  400dfe:	681b      	ldr	r3, [r3, #0]
  400e00:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400e04:	5442      	strb	r2, [r0, r1]
  400e06:	4770      	bx	lr
  400e08:	204009f4 	.word	0x204009f4

00400e0c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400e0c:	4b02      	ldr	r3, [pc, #8]	; (400e18 <gfx_mono_framebuffer_get_byte+0xc>)
  400e0e:	681b      	ldr	r3, [r3, #0]
  400e10:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400e14:	5c40      	ldrb	r0, [r0, r1]
  400e16:	4770      	bx	lr
  400e18:	204009f4 	.word	0x204009f4

00400e1c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400e20:	1884      	adds	r4, r0, r2
  400e22:	2c80      	cmp	r4, #128	; 0x80
  400e24:	dd02      	ble.n	400e2c <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400e26:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400e2a:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400e2c:	b322      	cbz	r2, 400e78 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400e2e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400e30:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400e34:	2601      	movs	r6, #1
  400e36:	fa06 f101 	lsl.w	r1, r6, r1
  400e3a:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400e3c:	2b01      	cmp	r3, #1
  400e3e:	d01d      	beq.n	400e7c <gfx_mono_generic_draw_horizontal_line+0x60>
  400e40:	2b00      	cmp	r3, #0
  400e42:	d035      	beq.n	400eb0 <gfx_mono_generic_draw_horizontal_line+0x94>
  400e44:	2b02      	cmp	r3, #2
  400e46:	d117      	bne.n	400e78 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400e48:	3801      	subs	r0, #1
  400e4a:	b2c7      	uxtb	r7, r0
  400e4c:	19d4      	adds	r4, r2, r7
  400e4e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400e50:	f8df a090 	ldr.w	sl, [pc, #144]	; 400ee4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400e54:	f04f 0900 	mov.w	r9, #0
  400e58:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400ee8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400e5c:	4621      	mov	r1, r4
  400e5e:	4628      	mov	r0, r5
  400e60:	47d0      	blx	sl
			temp ^= pixelmask;
  400e62:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400e66:	464b      	mov	r3, r9
  400e68:	b2d2      	uxtb	r2, r2
  400e6a:	4621      	mov	r1, r4
  400e6c:	4628      	mov	r0, r5
  400e6e:	47c0      	blx	r8
  400e70:	3c01      	subs	r4, #1
  400e72:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400e74:	42bc      	cmp	r4, r7
  400e76:	d1f1      	bne.n	400e5c <gfx_mono_generic_draw_horizontal_line+0x40>
  400e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e7c:	3801      	subs	r0, #1
  400e7e:	b2c7      	uxtb	r7, r0
  400e80:	19d4      	adds	r4, r2, r7
  400e82:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400e84:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400ee4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400e88:	f04f 0900 	mov.w	r9, #0
  400e8c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400ee8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400e90:	4621      	mov	r1, r4
  400e92:	4628      	mov	r0, r5
  400e94:	47d0      	blx	sl
			temp |= pixelmask;
  400e96:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400e9a:	464b      	mov	r3, r9
  400e9c:	b2d2      	uxtb	r2, r2
  400e9e:	4621      	mov	r1, r4
  400ea0:	4628      	mov	r0, r5
  400ea2:	47c0      	blx	r8
  400ea4:	3c01      	subs	r4, #1
  400ea6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400ea8:	42bc      	cmp	r4, r7
  400eaa:	d1f1      	bne.n	400e90 <gfx_mono_generic_draw_horizontal_line+0x74>
  400eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400eb0:	3801      	subs	r0, #1
  400eb2:	b2c7      	uxtb	r7, r0
  400eb4:	19d4      	adds	r4, r2, r7
  400eb6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400eb8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400ee4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400ebc:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400ebe:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400ee8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400ec2:	4621      	mov	r1, r4
  400ec4:	4628      	mov	r0, r5
  400ec6:	47c0      	blx	r8
			temp &= ~pixelmask;
  400ec8:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400ecc:	2300      	movs	r3, #0
  400ece:	b2d2      	uxtb	r2, r2
  400ed0:	4621      	mov	r1, r4
  400ed2:	4628      	mov	r0, r5
  400ed4:	47c8      	blx	r9
  400ed6:	3c01      	subs	r4, #1
  400ed8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400eda:	42bc      	cmp	r4, r7
  400edc:	d1f1      	bne.n	400ec2 <gfx_mono_generic_draw_horizontal_line+0xa6>
  400ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ee2:	bf00      	nop
  400ee4:	0040111d 	.word	0x0040111d
  400ee8:	00401019 	.word	0x00401019

00400eec <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ef0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400ef4:	b18b      	cbz	r3, 400f1a <gfx_mono_generic_draw_filled_rect+0x2e>
  400ef6:	461c      	mov	r4, r3
  400ef8:	4690      	mov	r8, r2
  400efa:	4606      	mov	r6, r0
  400efc:	1e4d      	subs	r5, r1, #1
  400efe:	b2ed      	uxtb	r5, r5
  400f00:	442c      	add	r4, r5
  400f02:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400f04:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400f20 <gfx_mono_generic_draw_filled_rect+0x34>
  400f08:	463b      	mov	r3, r7
  400f0a:	4642      	mov	r2, r8
  400f0c:	4621      	mov	r1, r4
  400f0e:	4630      	mov	r0, r6
  400f10:	47c8      	blx	r9
  400f12:	3c01      	subs	r4, #1
  400f14:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400f16:	42ac      	cmp	r4, r5
  400f18:	d1f6      	bne.n	400f08 <gfx_mono_generic_draw_filled_rect+0x1c>
  400f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f1e:	bf00      	nop
  400f20:	00400e1d 	.word	0x00400e1d

00400f24 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f28:	b083      	sub	sp, #12
  400f2a:	4604      	mov	r4, r0
  400f2c:	4688      	mov	r8, r1
  400f2e:	4691      	mov	r9, r2
  400f30:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400f32:	7a5b      	ldrb	r3, [r3, #9]
  400f34:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400f38:	2100      	movs	r1, #0
  400f3a:	9100      	str	r1, [sp, #0]
  400f3c:	4649      	mov	r1, r9
  400f3e:	4640      	mov	r0, r8
  400f40:	4d21      	ldr	r5, [pc, #132]	; (400fc8 <gfx_mono_draw_char+0xa4>)
  400f42:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400f44:	f89b 3000 	ldrb.w	r3, [fp]
  400f48:	b113      	cbz	r3, 400f50 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400f4a:	b003      	add	sp, #12
  400f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400f50:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400f54:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400f56:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400f5a:	bf18      	it	ne
  400f5c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400f5e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400f62:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400f66:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400f68:	fb17 f70a 	smulbb	r7, r7, sl
  400f6c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400f70:	f8db 3004 	ldr.w	r3, [fp, #4]
  400f74:	fa13 f787 	uxtah	r7, r3, r7
  400f78:	e01f      	b.n	400fba <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400f7a:	0064      	lsls	r4, r4, #1
  400f7c:	b2e4      	uxtb	r4, r4
  400f7e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400f80:	b2eb      	uxtb	r3, r5
  400f82:	429e      	cmp	r6, r3
  400f84:	d910      	bls.n	400fa8 <gfx_mono_draw_char+0x84>
  400f86:	b2eb      	uxtb	r3, r5
  400f88:	eb08 0003 	add.w	r0, r8, r3
  400f8c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400f8e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400f92:	bf08      	it	eq
  400f94:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400f98:	f014 0f80 	tst.w	r4, #128	; 0x80
  400f9c:	d0ed      	beq.n	400f7a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400f9e:	2201      	movs	r2, #1
  400fa0:	4649      	mov	r1, r9
  400fa2:	4b0a      	ldr	r3, [pc, #40]	; (400fcc <gfx_mono_draw_char+0xa8>)
  400fa4:	4798      	blx	r3
  400fa6:	e7e8      	b.n	400f7a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400fa8:	f109 0901 	add.w	r9, r9, #1
  400fac:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400fb0:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400fb4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400fb8:	d0c7      	beq.n	400f4a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400fba:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400fbe:	2e00      	cmp	r6, #0
  400fc0:	d0f2      	beq.n	400fa8 <gfx_mono_draw_char+0x84>
  400fc2:	2500      	movs	r5, #0
  400fc4:	462c      	mov	r4, r5
  400fc6:	e7de      	b.n	400f86 <gfx_mono_draw_char+0x62>
  400fc8:	00400eed 	.word	0x00400eed
  400fcc:	004010b9 	.word	0x004010b9

00400fd0 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400fd4:	4604      	mov	r4, r0
  400fd6:	4690      	mov	r8, r2
  400fd8:	461d      	mov	r5, r3
  400fda:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400fdc:	4f0d      	ldr	r7, [pc, #52]	; (401014 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400fde:	460e      	mov	r6, r1
  400fe0:	e008      	b.n	400ff4 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400fe2:	7a6a      	ldrb	r2, [r5, #9]
  400fe4:	3201      	adds	r2, #1
  400fe6:	4442      	add	r2, r8
  400fe8:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400fec:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400fee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400ff2:	b16b      	cbz	r3, 401010 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400ff4:	7820      	ldrb	r0, [r4, #0]
  400ff6:	280a      	cmp	r0, #10
  400ff8:	d0f3      	beq.n	400fe2 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400ffa:	280d      	cmp	r0, #13
  400ffc:	d0f7      	beq.n	400fee <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400ffe:	462b      	mov	r3, r5
  401000:	4642      	mov	r2, r8
  401002:	4649      	mov	r1, r9
  401004:	47b8      	blx	r7
			x += font->width;
  401006:	7a2b      	ldrb	r3, [r5, #8]
  401008:	4499      	add	r9, r3
  40100a:	fa5f f989 	uxtb.w	r9, r9
  40100e:	e7ee      	b.n	400fee <gfx_mono_draw_string+0x1e>
}
  401010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401014:	00400f25 	.word	0x00400f25

00401018 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  401018:	b570      	push	{r4, r5, r6, lr}
  40101a:	4604      	mov	r4, r0
  40101c:	460d      	mov	r5, r1
  40101e:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  401020:	b91b      	cbnz	r3, 40102a <gfx_mono_ssd1306_put_byte+0x12>
  401022:	4b0d      	ldr	r3, [pc, #52]	; (401058 <gfx_mono_ssd1306_put_byte+0x40>)
  401024:	4798      	blx	r3
  401026:	42b0      	cmp	r0, r6
  401028:	d015      	beq.n	401056 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40102a:	4632      	mov	r2, r6
  40102c:	4629      	mov	r1, r5
  40102e:	4620      	mov	r0, r4
  401030:	4b0a      	ldr	r3, [pc, #40]	; (40105c <gfx_mono_ssd1306_put_byte+0x44>)
  401032:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  401034:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401038:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40103c:	4c08      	ldr	r4, [pc, #32]	; (401060 <gfx_mono_ssd1306_put_byte+0x48>)
  40103e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  401040:	f3c5 1002 	ubfx	r0, r5, #4, #3
  401044:	f040 0010 	orr.w	r0, r0, #16
  401048:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40104a:	f005 000f 	and.w	r0, r5, #15
  40104e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  401050:	4630      	mov	r0, r6
  401052:	4b04      	ldr	r3, [pc, #16]	; (401064 <gfx_mono_ssd1306_put_byte+0x4c>)
  401054:	4798      	blx	r3
  401056:	bd70      	pop	{r4, r5, r6, pc}
  401058:	00400e0d 	.word	0x00400e0d
  40105c:	00400dfd 	.word	0x00400dfd
  401060:	00401129 	.word	0x00401129
  401064:	00401349 	.word	0x00401349

00401068 <gfx_mono_ssd1306_init>:
{
  401068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40106c:	480d      	ldr	r0, [pc, #52]	; (4010a4 <gfx_mono_ssd1306_init+0x3c>)
  40106e:	4b0e      	ldr	r3, [pc, #56]	; (4010a8 <gfx_mono_ssd1306_init+0x40>)
  401070:	4798      	blx	r3
	ssd1306_init();
  401072:	4b0e      	ldr	r3, [pc, #56]	; (4010ac <gfx_mono_ssd1306_init+0x44>)
  401074:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  401076:	2040      	movs	r0, #64	; 0x40
  401078:	4b0d      	ldr	r3, [pc, #52]	; (4010b0 <gfx_mono_ssd1306_init+0x48>)
  40107a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40107c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40107e:	f04f 0801 	mov.w	r8, #1
  401082:	462f      	mov	r7, r5
  401084:	4e0b      	ldr	r6, [pc, #44]	; (4010b4 <gfx_mono_ssd1306_init+0x4c>)
{
  401086:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  401088:	4643      	mov	r3, r8
  40108a:	463a      	mov	r2, r7
  40108c:	b2e1      	uxtb	r1, r4
  40108e:	4628      	mov	r0, r5
  401090:	47b0      	blx	r6
  401092:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  401094:	2c80      	cmp	r4, #128	; 0x80
  401096:	d1f7      	bne.n	401088 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  401098:	3501      	adds	r5, #1
  40109a:	b2ed      	uxtb	r5, r5
  40109c:	2d04      	cmp	r5, #4
  40109e:	d1f2      	bne.n	401086 <gfx_mono_ssd1306_init+0x1e>
  4010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010a4:	204009f8 	.word	0x204009f8
  4010a8:	00400df1 	.word	0x00400df1
  4010ac:	00401169 	.word	0x00401169
  4010b0:	00401129 	.word	0x00401129
  4010b4:	00401019 	.word	0x00401019

004010b8 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4010b8:	09c3      	lsrs	r3, r0, #7
  4010ba:	d12a      	bne.n	401112 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4010bc:	291f      	cmp	r1, #31
  4010be:	d828      	bhi.n	401112 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4010c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010c4:	4614      	mov	r4, r2
  4010c6:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4010c8:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4010ca:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4010ce:	2201      	movs	r2, #1
  4010d0:	fa02 f701 	lsl.w	r7, r2, r1
  4010d4:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4010d8:	4601      	mov	r1, r0
  4010da:	4630      	mov	r0, r6
  4010dc:	4b0d      	ldr	r3, [pc, #52]	; (401114 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4010de:	4798      	blx	r3
  4010e0:	4602      	mov	r2, r0
	switch (color) {
  4010e2:	2c01      	cmp	r4, #1
  4010e4:	d009      	beq.n	4010fa <gfx_mono_ssd1306_draw_pixel+0x42>
  4010e6:	b164      	cbz	r4, 401102 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4010e8:	2c02      	cmp	r4, #2
  4010ea:	d00e      	beq.n	40110a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4010ec:	2300      	movs	r3, #0
  4010ee:	4629      	mov	r1, r5
  4010f0:	4630      	mov	r0, r6
  4010f2:	4c09      	ldr	r4, [pc, #36]	; (401118 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4010f4:	47a0      	blx	r4
  4010f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4010fa:	ea48 0200 	orr.w	r2, r8, r0
  4010fe:	b2d2      	uxtb	r2, r2
		break;
  401100:	e7f4      	b.n	4010ec <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  401102:	ea20 0207 	bic.w	r2, r0, r7
  401106:	b2d2      	uxtb	r2, r2
		break;
  401108:	e7f0      	b.n	4010ec <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  40110a:	ea88 0200 	eor.w	r2, r8, r0
  40110e:	b2d2      	uxtb	r2, r2
		break;
  401110:	e7ec      	b.n	4010ec <gfx_mono_ssd1306_draw_pixel+0x34>
  401112:	4770      	bx	lr
  401114:	00400e0d 	.word	0x00400e0d
  401118:	00401019 	.word	0x00401019

0040111c <gfx_mono_ssd1306_get_byte>:
{
  40111c:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  40111e:	4b01      	ldr	r3, [pc, #4]	; (401124 <gfx_mono_ssd1306_get_byte+0x8>)
  401120:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  401122:	bd08      	pop	{r3, pc}
  401124:	00400e0d 	.word	0x00400e0d

00401128 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  401128:	b538      	push	{r3, r4, r5, lr}
  40112a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40112c:	2208      	movs	r2, #8
  40112e:	4b09      	ldr	r3, [pc, #36]	; (401154 <ssd1306_write_command+0x2c>)
  401130:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401132:	4c09      	ldr	r4, [pc, #36]	; (401158 <ssd1306_write_command+0x30>)
  401134:	2101      	movs	r1, #1
  401136:	4620      	mov	r0, r4
  401138:	4b08      	ldr	r3, [pc, #32]	; (40115c <ssd1306_write_command+0x34>)
  40113a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40113c:	2301      	movs	r3, #1
  40113e:	461a      	mov	r2, r3
  401140:	4629      	mov	r1, r5
  401142:	4620      	mov	r0, r4
  401144:	4c06      	ldr	r4, [pc, #24]	; (401160 <ssd1306_write_command+0x38>)
  401146:	47a0      	blx	r4
	delay_us(10);
  401148:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40114c:	4b05      	ldr	r3, [pc, #20]	; (401164 <ssd1306_write_command+0x3c>)
  40114e:	4798      	blx	r3
  401150:	bd38      	pop	{r3, r4, r5, pc}
  401152:	bf00      	nop
  401154:	400e1000 	.word	0x400e1000
  401158:	40008000 	.word	0x40008000
  40115c:	00400aa1 	.word	0x00400aa1
  401160:	00400ab7 	.word	0x00400ab7
  401164:	20400001 	.word	0x20400001

00401168 <ssd1306_init>:
{
  401168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40116c:	4d66      	ldr	r5, [pc, #408]	; (401308 <ssd1306_init+0x1a0>)
  40116e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  401172:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401174:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401178:	4b64      	ldr	r3, [pc, #400]	; (40130c <ssd1306_init+0x1a4>)
  40117a:	2708      	movs	r7, #8
  40117c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40117e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401182:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401184:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  401188:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40118a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40118c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401190:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  401192:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  401196:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401198:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40119a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40119e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4011a0:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4011a2:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4011a6:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4011a8:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4011aa:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4011ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4011b0:	f022 0208 	bic.w	r2, r2, #8
  4011b4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4011b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4011b8:	f022 0208 	bic.w	r2, r2, #8
  4011bc:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4011be:	601f      	str	r7, [r3, #0]
  4011c0:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011c2:	631f      	str	r7, [r3, #48]	; 0x30
  4011c4:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011c6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 401344 <ssd1306_init+0x1dc>
  4011ca:	2300      	movs	r3, #0
  4011cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011d4:	4640      	mov	r0, r8
  4011d6:	4c4e      	ldr	r4, [pc, #312]	; (401310 <ssd1306_init+0x1a8>)
  4011d8:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4011da:	2300      	movs	r3, #0
  4011dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4011e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011e4:	4640      	mov	r0, r8
  4011e6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4011e8:	2300      	movs	r3, #0
  4011ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4011ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011f2:	4640      	mov	r0, r8
  4011f4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011f6:	2300      	movs	r3, #0
  4011f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401200:	4640      	mov	r0, r8
  401202:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401204:	2300      	movs	r3, #0
  401206:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40120a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40120e:	4640      	mov	r0, r8
  401210:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401212:	2300      	movs	r3, #0
  401214:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401218:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40121c:	4640      	mov	r0, r8
  40121e:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401220:	4c3c      	ldr	r4, [pc, #240]	; (401314 <ssd1306_init+0x1ac>)
  401222:	f04f 0902 	mov.w	r9, #2
  401226:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40122a:	f04f 0880 	mov.w	r8, #128	; 0x80
  40122e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401232:	6863      	ldr	r3, [r4, #4]
  401234:	f043 0301 	orr.w	r3, r3, #1
  401238:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  40123a:	463a      	mov	r2, r7
  40123c:	2101      	movs	r1, #1
  40123e:	4620      	mov	r0, r4
  401240:	4b35      	ldr	r3, [pc, #212]	; (401318 <ssd1306_init+0x1b0>)
  401242:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  401244:	2200      	movs	r2, #0
  401246:	2101      	movs	r1, #1
  401248:	4620      	mov	r0, r4
  40124a:	4b34      	ldr	r3, [pc, #208]	; (40131c <ssd1306_init+0x1b4>)
  40124c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40124e:	2200      	movs	r2, #0
  401250:	2101      	movs	r1, #1
  401252:	4620      	mov	r0, r4
  401254:	4b32      	ldr	r3, [pc, #200]	; (401320 <ssd1306_init+0x1b8>)
  401256:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401258:	6863      	ldr	r3, [r4, #4]
  40125a:	f023 0302 	bic.w	r3, r3, #2
  40125e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401260:	2200      	movs	r2, #0
  401262:	2101      	movs	r1, #1
  401264:	4620      	mov	r0, r4
  401266:	4b2f      	ldr	r3, [pc, #188]	; (401324 <ssd1306_init+0x1bc>)
  401268:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40126a:	6863      	ldr	r3, [r4, #4]
  40126c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401270:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401272:	6863      	ldr	r3, [r4, #4]
  401274:	f043 0310 	orr.w	r3, r3, #16
  401278:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40127a:	492b      	ldr	r1, [pc, #172]	; (401328 <ssd1306_init+0x1c0>)
  40127c:	482b      	ldr	r0, [pc, #172]	; (40132c <ssd1306_init+0x1c4>)
  40127e:	4b2c      	ldr	r3, [pc, #176]	; (401330 <ssd1306_init+0x1c8>)
  401280:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  401282:	b2c2      	uxtb	r2, r0
  401284:	2101      	movs	r1, #1
  401286:	4620      	mov	r0, r4
  401288:	4b2a      	ldr	r3, [pc, #168]	; (401334 <ssd1306_init+0x1cc>)
  40128a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40128c:	4620      	mov	r0, r4
  40128e:	4b2a      	ldr	r3, [pc, #168]	; (401338 <ssd1306_init+0x1d0>)
  401290:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401292:	2301      	movs	r3, #1
  401294:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401296:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  401298:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40129c:	4c27      	ldr	r4, [pc, #156]	; (40133c <ssd1306_init+0x1d4>)
  40129e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012a0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4012a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4012a6:	47a0      	blx	r4
  4012a8:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4012aa:	20a8      	movs	r0, #168	; 0xa8
  4012ac:	4c24      	ldr	r4, [pc, #144]	; (401340 <ssd1306_init+0x1d8>)
  4012ae:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4012b0:	201f      	movs	r0, #31
  4012b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4012b4:	20d3      	movs	r0, #211	; 0xd3
  4012b6:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4012b8:	2000      	movs	r0, #0
  4012ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4012bc:	2040      	movs	r0, #64	; 0x40
  4012be:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4012c0:	20a1      	movs	r0, #161	; 0xa1
  4012c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4012c4:	20c8      	movs	r0, #200	; 0xc8
  4012c6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4012c8:	20da      	movs	r0, #218	; 0xda
  4012ca:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4012cc:	4648      	mov	r0, r9
  4012ce:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4012d0:	2081      	movs	r0, #129	; 0x81
  4012d2:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4012d4:	208f      	movs	r0, #143	; 0x8f
  4012d6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4012d8:	20a4      	movs	r0, #164	; 0xa4
  4012da:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4012dc:	20a6      	movs	r0, #166	; 0xa6
  4012de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4012e0:	20d5      	movs	r0, #213	; 0xd5
  4012e2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4012e4:	4640      	mov	r0, r8
  4012e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4012e8:	208d      	movs	r0, #141	; 0x8d
  4012ea:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4012ec:	2014      	movs	r0, #20
  4012ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4012f0:	20db      	movs	r0, #219	; 0xdb
  4012f2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4012f4:	2040      	movs	r0, #64	; 0x40
  4012f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4012f8:	20d9      	movs	r0, #217	; 0xd9
  4012fa:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4012fc:	20f1      	movs	r0, #241	; 0xf1
  4012fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  401300:	20af      	movs	r0, #175	; 0xaf
  401302:	47a0      	blx	r4
  401304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401308:	400e1200 	.word	0x400e1200
  40130c:	400e1000 	.word	0x400e1000
  401310:	00401731 	.word	0x00401731
  401314:	40008000 	.word	0x40008000
  401318:	00400b27 	.word	0x00400b27
  40131c:	00400aeb 	.word	0x00400aeb
  401320:	00400b09 	.word	0x00400b09
  401324:	00400b6d 	.word	0x00400b6d
  401328:	08f0d180 	.word	0x08f0d180
  40132c:	001e8480 	.word	0x001e8480
  401330:	00400b81 	.word	0x00400b81
  401334:	00400b97 	.word	0x00400b97
  401338:	00400a75 	.word	0x00400a75
  40133c:	20400001 	.word	0x20400001
  401340:	00401129 	.word	0x00401129
  401344:	400e1400 	.word	0x400e1400

00401348 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401348:	b538      	push	{r3, r4, r5, lr}
  40134a:	4605      	mov	r5, r0
  40134c:	2208      	movs	r2, #8
  40134e:	4b09      	ldr	r3, [pc, #36]	; (401374 <ssd1306_write_data+0x2c>)
  401350:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401352:	4c09      	ldr	r4, [pc, #36]	; (401378 <ssd1306_write_data+0x30>)
  401354:	2101      	movs	r1, #1
  401356:	4620      	mov	r0, r4
  401358:	4b08      	ldr	r3, [pc, #32]	; (40137c <ssd1306_write_data+0x34>)
  40135a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40135c:	2301      	movs	r3, #1
  40135e:	461a      	mov	r2, r3
  401360:	4629      	mov	r1, r5
  401362:	4620      	mov	r0, r4
  401364:	4c06      	ldr	r4, [pc, #24]	; (401380 <ssd1306_write_data+0x38>)
  401366:	47a0      	blx	r4
	delay_us(10);
  401368:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40136c:	4b05      	ldr	r3, [pc, #20]	; (401384 <ssd1306_write_data+0x3c>)
  40136e:	4798      	blx	r3
  401370:	bd38      	pop	{r3, r4, r5, pc}
  401372:	bf00      	nop
  401374:	400e1000 	.word	0x400e1000
  401378:	40008000 	.word	0x40008000
  40137c:	00400aa1 	.word	0x00400aa1
  401380:	00400ab7 	.word	0x00400ab7
  401384:	20400001 	.word	0x20400001

00401388 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401388:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40138a:	4810      	ldr	r0, [pc, #64]	; (4013cc <sysclk_init+0x44>)
  40138c:	4b10      	ldr	r3, [pc, #64]	; (4013d0 <sysclk_init+0x48>)
  40138e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401390:	213e      	movs	r1, #62	; 0x3e
  401392:	2000      	movs	r0, #0
  401394:	4b0f      	ldr	r3, [pc, #60]	; (4013d4 <sysclk_init+0x4c>)
  401396:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401398:	4c0f      	ldr	r4, [pc, #60]	; (4013d8 <sysclk_init+0x50>)
  40139a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40139c:	2800      	cmp	r0, #0
  40139e:	d0fc      	beq.n	40139a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4013a0:	4b0e      	ldr	r3, [pc, #56]	; (4013dc <sysclk_init+0x54>)
  4013a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4013a4:	4a0e      	ldr	r2, [pc, #56]	; (4013e0 <sysclk_init+0x58>)
  4013a6:	4b0f      	ldr	r3, [pc, #60]	; (4013e4 <sysclk_init+0x5c>)
  4013a8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4013aa:	4c0f      	ldr	r4, [pc, #60]	; (4013e8 <sysclk_init+0x60>)
  4013ac:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4013ae:	2800      	cmp	r0, #0
  4013b0:	d0fc      	beq.n	4013ac <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4013b2:	2002      	movs	r0, #2
  4013b4:	4b0d      	ldr	r3, [pc, #52]	; (4013ec <sysclk_init+0x64>)
  4013b6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4013b8:	2000      	movs	r0, #0
  4013ba:	4b0d      	ldr	r3, [pc, #52]	; (4013f0 <sysclk_init+0x68>)
  4013bc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4013be:	4b0d      	ldr	r3, [pc, #52]	; (4013f4 <sysclk_init+0x6c>)
  4013c0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4013c2:	4802      	ldr	r0, [pc, #8]	; (4013cc <sysclk_init+0x44>)
  4013c4:	4b02      	ldr	r3, [pc, #8]	; (4013d0 <sysclk_init+0x48>)
  4013c6:	4798      	blx	r3
  4013c8:	bd10      	pop	{r4, pc}
  4013ca:	bf00      	nop
  4013cc:	11e1a300 	.word	0x11e1a300
  4013d0:	00401da5 	.word	0x00401da5
  4013d4:	004019c1 	.word	0x004019c1
  4013d8:	00401a15 	.word	0x00401a15
  4013dc:	00401a25 	.word	0x00401a25
  4013e0:	20183f01 	.word	0x20183f01
  4013e4:	400e0600 	.word	0x400e0600
  4013e8:	00401a35 	.word	0x00401a35
  4013ec:	00401925 	.word	0x00401925
  4013f0:	0040195d 	.word	0x0040195d
  4013f4:	00401c99 	.word	0x00401c99

004013f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4013fc:	b980      	cbnz	r0, 401420 <_read+0x28>
  4013fe:	460c      	mov	r4, r1
  401400:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401402:	2a00      	cmp	r2, #0
  401404:	dd0f      	ble.n	401426 <_read+0x2e>
  401406:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401408:	4e08      	ldr	r6, [pc, #32]	; (40142c <_read+0x34>)
  40140a:	4d09      	ldr	r5, [pc, #36]	; (401430 <_read+0x38>)
  40140c:	6830      	ldr	r0, [r6, #0]
  40140e:	4621      	mov	r1, r4
  401410:	682b      	ldr	r3, [r5, #0]
  401412:	4798      	blx	r3
		ptr++;
  401414:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401416:	42bc      	cmp	r4, r7
  401418:	d1f8      	bne.n	40140c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40141a:	4640      	mov	r0, r8
  40141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401420:	f04f 38ff 	mov.w	r8, #4294967295
  401424:	e7f9      	b.n	40141a <_read+0x22>
	for (; len > 0; --len) {
  401426:	4680      	mov	r8, r0
  401428:	e7f7      	b.n	40141a <_read+0x22>
  40142a:	bf00      	nop
  40142c:	20400df0 	.word	0x20400df0
  401430:	20400de8 	.word	0x20400de8

00401434 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401434:	3801      	subs	r0, #1
  401436:	2802      	cmp	r0, #2
  401438:	d815      	bhi.n	401466 <_write+0x32>
{
  40143a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40143e:	460e      	mov	r6, r1
  401440:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401442:	b19a      	cbz	r2, 40146c <_write+0x38>
  401444:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401446:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401480 <_write+0x4c>
  40144a:	4f0c      	ldr	r7, [pc, #48]	; (40147c <_write+0x48>)
  40144c:	f8d8 0000 	ldr.w	r0, [r8]
  401450:	f815 1b01 	ldrb.w	r1, [r5], #1
  401454:	683b      	ldr	r3, [r7, #0]
  401456:	4798      	blx	r3
  401458:	2800      	cmp	r0, #0
  40145a:	db0a      	blt.n	401472 <_write+0x3e>
  40145c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40145e:	3c01      	subs	r4, #1
  401460:	d1f4      	bne.n	40144c <_write+0x18>
  401462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401466:	f04f 30ff 	mov.w	r0, #4294967295
  40146a:	4770      	bx	lr
	for (; len != 0; --len) {
  40146c:	4610      	mov	r0, r2
  40146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401472:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40147a:	bf00      	nop
  40147c:	20400dec 	.word	0x20400dec
  401480:	20400df0 	.word	0x20400df0

00401484 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40148a:	4b5c      	ldr	r3, [pc, #368]	; (4015fc <board_init+0x178>)
  40148c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40148e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401492:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401496:	4b5a      	ldr	r3, [pc, #360]	; (401600 <board_init+0x17c>)
  401498:	2200      	movs	r2, #0
  40149a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40149e:	695a      	ldr	r2, [r3, #20]
  4014a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4014a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4014a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014aa:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4014ae:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4014b2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4014b6:	f007 0007 	and.w	r0, r7, #7
  4014ba:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4014bc:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4014c0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4014c4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4014c8:	f3bf 8f4f 	dsb	sy
  4014cc:	f04f 34ff 	mov.w	r4, #4294967295
  4014d0:	fa04 fc00 	lsl.w	ip, r4, r0
  4014d4:	fa06 f000 	lsl.w	r0, r6, r0
  4014d8:	fa04 f40e 	lsl.w	r4, r4, lr
  4014dc:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4014e0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4014e2:	463a      	mov	r2, r7
  4014e4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4014e6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4014ea:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4014ee:	3a01      	subs	r2, #1
  4014f0:	4423      	add	r3, r4
  4014f2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4014f6:	d1f6      	bne.n	4014e6 <board_init+0x62>
        } while(sets--);
  4014f8:	3e01      	subs	r6, #1
  4014fa:	4460      	add	r0, ip
  4014fc:	f1b6 3fff 	cmp.w	r6, #4294967295
  401500:	d1ef      	bne.n	4014e2 <board_init+0x5e>
  401502:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401506:	4b3e      	ldr	r3, [pc, #248]	; (401600 <board_init+0x17c>)
  401508:	695a      	ldr	r2, [r3, #20]
  40150a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40150e:	615a      	str	r2, [r3, #20]
  401510:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401514:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401518:	4a3a      	ldr	r2, [pc, #232]	; (401604 <board_init+0x180>)
  40151a:	493b      	ldr	r1, [pc, #236]	; (401608 <board_init+0x184>)
  40151c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40151e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401522:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  401524:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401528:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40152c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401530:	f022 0201 	bic.w	r2, r2, #1
  401534:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401538:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40153c:	f022 0201 	bic.w	r2, r2, #1
  401540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401544:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401548:	f3bf 8f6f 	isb	sy
  40154c:	200a      	movs	r0, #10
  40154e:	4c2f      	ldr	r4, [pc, #188]	; (40160c <board_init+0x188>)
  401550:	47a0      	blx	r4
  401552:	200b      	movs	r0, #11
  401554:	47a0      	blx	r4
  401556:	200c      	movs	r0, #12
  401558:	47a0      	blx	r4
  40155a:	2010      	movs	r0, #16
  40155c:	47a0      	blx	r4
  40155e:	2011      	movs	r0, #17
  401560:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401562:	4b2b      	ldr	r3, [pc, #172]	; (401610 <board_init+0x18c>)
  401564:	f44f 7280 	mov.w	r2, #256	; 0x100
  401568:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40156a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40156e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401570:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401574:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401578:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40157a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40157e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401584:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401586:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40158c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40158e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401592:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401594:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401596:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40159a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40159c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4015a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4015a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4015a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4015ac:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4015ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4015b2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4015b4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4015b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4015ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4015bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4015c0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4015c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4015c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4015c8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4015ca:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4015cc:	4a11      	ldr	r2, [pc, #68]	; (401614 <board_init+0x190>)
  4015ce:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4015d2:	f043 0310 	orr.w	r3, r3, #16
  4015d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4015da:	4b0f      	ldr	r3, [pc, #60]	; (401618 <board_init+0x194>)
  4015dc:	2210      	movs	r2, #16
  4015de:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4015e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4015e4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4015e6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4015e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4015ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4015ee:	4311      	orrs	r1, r2
  4015f0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4015f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4015f4:	4311      	orrs	r1, r2
  4015f6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4015f8:	605a      	str	r2, [r3, #4]
  4015fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015fc:	400e1850 	.word	0x400e1850
  401600:	e000ed00 	.word	0xe000ed00
  401604:	400e0c00 	.word	0x400e0c00
  401608:	5a00080c 	.word	0x5a00080c
  40160c:	00401a45 	.word	0x00401a45
  401610:	400e1200 	.word	0x400e1200
  401614:	40088000 	.word	0x40088000
  401618:	400e1000 	.word	0x400e1000

0040161c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40161c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401620:	0053      	lsls	r3, r2, #1
  401622:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401626:	fbb2 f2f3 	udiv	r2, r2, r3
  40162a:	3a01      	subs	r2, #1
  40162c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  401630:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  401634:	4770      	bx	lr

00401636 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401636:	6301      	str	r1, [r0, #48]	; 0x30
  401638:	4770      	bx	lr

0040163a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40163a:	6341      	str	r1, [r0, #52]	; 0x34
  40163c:	4770      	bx	lr

0040163e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40163e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401640:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401644:	d03a      	beq.n	4016bc <pio_set_peripheral+0x7e>
  401646:	d813      	bhi.n	401670 <pio_set_peripheral+0x32>
  401648:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40164c:	d025      	beq.n	40169a <pio_set_peripheral+0x5c>
  40164e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401652:	d10a      	bne.n	40166a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401654:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401656:	4313      	orrs	r3, r2
  401658:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40165a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40165c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40165e:	400b      	ands	r3, r1
  401660:	ea23 0302 	bic.w	r3, r3, r2
  401664:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401666:	6042      	str	r2, [r0, #4]
  401668:	4770      	bx	lr
	switch (ul_type) {
  40166a:	2900      	cmp	r1, #0
  40166c:	d1fb      	bne.n	401666 <pio_set_peripheral+0x28>
  40166e:	4770      	bx	lr
  401670:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401674:	d021      	beq.n	4016ba <pio_set_peripheral+0x7c>
  401676:	d809      	bhi.n	40168c <pio_set_peripheral+0x4e>
  401678:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40167c:	d1f3      	bne.n	401666 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40167e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401680:	4313      	orrs	r3, r2
  401682:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401684:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401686:	4313      	orrs	r3, r2
  401688:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40168a:	e7ec      	b.n	401666 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40168c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401690:	d013      	beq.n	4016ba <pio_set_peripheral+0x7c>
  401692:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401696:	d010      	beq.n	4016ba <pio_set_peripheral+0x7c>
  401698:	e7e5      	b.n	401666 <pio_set_peripheral+0x28>
{
  40169a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40169c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40169e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4016a0:	43d3      	mvns	r3, r2
  4016a2:	4021      	ands	r1, r4
  4016a4:	461c      	mov	r4, r3
  4016a6:	4019      	ands	r1, r3
  4016a8:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4016aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4016ae:	400b      	ands	r3, r1
  4016b0:	4023      	ands	r3, r4
  4016b2:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4016b4:	6042      	str	r2, [r0, #4]
}
  4016b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016ba:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016be:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4016c0:	400b      	ands	r3, r1
  4016c2:	ea23 0302 	bic.w	r3, r3, r2
  4016c6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4016c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016ca:	4313      	orrs	r3, r2
  4016cc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016ce:	e7ca      	b.n	401666 <pio_set_peripheral+0x28>

004016d0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4016d0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4016d2:	f012 0f01 	tst.w	r2, #1
  4016d6:	d10d      	bne.n	4016f4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4016d8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4016da:	f012 0f0a 	tst.w	r2, #10
  4016de:	d00b      	beq.n	4016f8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4016e0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4016e2:	f012 0f02 	tst.w	r2, #2
  4016e6:	d109      	bne.n	4016fc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4016e8:	f012 0f08 	tst.w	r2, #8
  4016ec:	d008      	beq.n	401700 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4016ee:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4016f2:	e005      	b.n	401700 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4016f4:	6641      	str	r1, [r0, #100]	; 0x64
  4016f6:	e7f0      	b.n	4016da <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4016f8:	6241      	str	r1, [r0, #36]	; 0x24
  4016fa:	e7f2      	b.n	4016e2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4016fc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401700:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401702:	6001      	str	r1, [r0, #0]
  401704:	4770      	bx	lr

00401706 <pio_set_output>:
{
  401706:	b410      	push	{r4}
  401708:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40170a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40170c:	b94c      	cbnz	r4, 401722 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40170e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401710:	b14b      	cbz	r3, 401726 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401712:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401714:	b94a      	cbnz	r2, 40172a <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401716:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401718:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40171a:	6001      	str	r1, [r0, #0]
}
  40171c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401720:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401722:	6641      	str	r1, [r0, #100]	; 0x64
  401724:	e7f4      	b.n	401710 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401726:	6541      	str	r1, [r0, #84]	; 0x54
  401728:	e7f4      	b.n	401714 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40172a:	6301      	str	r1, [r0, #48]	; 0x30
  40172c:	e7f4      	b.n	401718 <pio_set_output+0x12>
	...

00401730 <pio_configure>:
{
  401730:	b570      	push	{r4, r5, r6, lr}
  401732:	b082      	sub	sp, #8
  401734:	4605      	mov	r5, r0
  401736:	4616      	mov	r6, r2
  401738:	461c      	mov	r4, r3
	switch (ul_type) {
  40173a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40173e:	d014      	beq.n	40176a <pio_configure+0x3a>
  401740:	d90a      	bls.n	401758 <pio_configure+0x28>
  401742:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401746:	d024      	beq.n	401792 <pio_configure+0x62>
  401748:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40174c:	d021      	beq.n	401792 <pio_configure+0x62>
  40174e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401752:	d017      	beq.n	401784 <pio_configure+0x54>
		return 0;
  401754:	2000      	movs	r0, #0
  401756:	e01a      	b.n	40178e <pio_configure+0x5e>
	switch (ul_type) {
  401758:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40175c:	d005      	beq.n	40176a <pio_configure+0x3a>
  40175e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401762:	d002      	beq.n	40176a <pio_configure+0x3a>
  401764:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401768:	d1f4      	bne.n	401754 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40176a:	4632      	mov	r2, r6
  40176c:	4628      	mov	r0, r5
  40176e:	4b11      	ldr	r3, [pc, #68]	; (4017b4 <pio_configure+0x84>)
  401770:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401772:	f014 0f01 	tst.w	r4, #1
  401776:	d102      	bne.n	40177e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401778:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40177a:	2001      	movs	r0, #1
  40177c:	e007      	b.n	40178e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40177e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401780:	2001      	movs	r0, #1
  401782:	e004      	b.n	40178e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401784:	461a      	mov	r2, r3
  401786:	4631      	mov	r1, r6
  401788:	4b0b      	ldr	r3, [pc, #44]	; (4017b8 <pio_configure+0x88>)
  40178a:	4798      	blx	r3
	return 1;
  40178c:	2001      	movs	r0, #1
}
  40178e:	b002      	add	sp, #8
  401790:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401792:	f004 0301 	and.w	r3, r4, #1
  401796:	9300      	str	r3, [sp, #0]
  401798:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40179c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4017a0:	bf14      	ite	ne
  4017a2:	2200      	movne	r2, #0
  4017a4:	2201      	moveq	r2, #1
  4017a6:	4631      	mov	r1, r6
  4017a8:	4628      	mov	r0, r5
  4017aa:	4c04      	ldr	r4, [pc, #16]	; (4017bc <pio_configure+0x8c>)
  4017ac:	47a0      	blx	r4
	return 1;
  4017ae:	2001      	movs	r0, #1
		break;
  4017b0:	e7ed      	b.n	40178e <pio_configure+0x5e>
  4017b2:	bf00      	nop
  4017b4:	0040163f 	.word	0x0040163f
  4017b8:	004016d1 	.word	0x004016d1
  4017bc:	00401707 	.word	0x00401707

004017c0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4017c0:	f012 0f10 	tst.w	r2, #16
  4017c4:	d012      	beq.n	4017ec <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4017c6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4017ca:	f012 0f20 	tst.w	r2, #32
  4017ce:	d007      	beq.n	4017e0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4017d0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4017d4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4017d8:	d005      	beq.n	4017e6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4017da:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4017de:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4017e0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4017e4:	e7f6      	b.n	4017d4 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4017e6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4017ea:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4017ec:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4017f0:	4770      	bx	lr

004017f2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4017f2:	6401      	str	r1, [r0, #64]	; 0x40
  4017f4:	4770      	bx	lr

004017f6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4017f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4017f8:	4770      	bx	lr

004017fa <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4017fa:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4017fc:	4770      	bx	lr
	...

00401800 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401804:	4604      	mov	r4, r0
  401806:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401808:	4b0e      	ldr	r3, [pc, #56]	; (401844 <pio_handler_process+0x44>)
  40180a:	4798      	blx	r3
  40180c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40180e:	4620      	mov	r0, r4
  401810:	4b0d      	ldr	r3, [pc, #52]	; (401848 <pio_handler_process+0x48>)
  401812:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401814:	4005      	ands	r5, r0
  401816:	d013      	beq.n	401840 <pio_handler_process+0x40>
  401818:	4c0c      	ldr	r4, [pc, #48]	; (40184c <pio_handler_process+0x4c>)
  40181a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40181e:	e003      	b.n	401828 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401820:	42b4      	cmp	r4, r6
  401822:	d00d      	beq.n	401840 <pio_handler_process+0x40>
  401824:	3410      	adds	r4, #16
		while (status != 0) {
  401826:	b15d      	cbz	r5, 401840 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401828:	6820      	ldr	r0, [r4, #0]
  40182a:	4540      	cmp	r0, r8
  40182c:	d1f8      	bne.n	401820 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40182e:	6861      	ldr	r1, [r4, #4]
  401830:	4229      	tst	r1, r5
  401832:	d0f5      	beq.n	401820 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401834:	68e3      	ldr	r3, [r4, #12]
  401836:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401838:	6863      	ldr	r3, [r4, #4]
  40183a:	ea25 0503 	bic.w	r5, r5, r3
  40183e:	e7ef      	b.n	401820 <pio_handler_process+0x20>
  401840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401844:	004017f7 	.word	0x004017f7
  401848:	004017fb 	.word	0x004017fb
  40184c:	20400bf8 	.word	0x20400bf8

00401850 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401852:	4c18      	ldr	r4, [pc, #96]	; (4018b4 <pio_handler_set+0x64>)
  401854:	6826      	ldr	r6, [r4, #0]
  401856:	2e06      	cmp	r6, #6
  401858:	d82a      	bhi.n	4018b0 <pio_handler_set+0x60>
  40185a:	f04f 0c00 	mov.w	ip, #0
  40185e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401860:	4f15      	ldr	r7, [pc, #84]	; (4018b8 <pio_handler_set+0x68>)
  401862:	e004      	b.n	40186e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401864:	3401      	adds	r4, #1
  401866:	b2e4      	uxtb	r4, r4
  401868:	46a4      	mov	ip, r4
  40186a:	42a6      	cmp	r6, r4
  40186c:	d309      	bcc.n	401882 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40186e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401870:	0125      	lsls	r5, r4, #4
  401872:	597d      	ldr	r5, [r7, r5]
  401874:	428d      	cmp	r5, r1
  401876:	d1f5      	bne.n	401864 <pio_handler_set+0x14>
  401878:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40187c:	686d      	ldr	r5, [r5, #4]
  40187e:	4295      	cmp	r5, r2
  401880:	d1f0      	bne.n	401864 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401882:	4d0d      	ldr	r5, [pc, #52]	; (4018b8 <pio_handler_set+0x68>)
  401884:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401888:	eb05 040e 	add.w	r4, r5, lr
  40188c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401890:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401892:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401894:	9906      	ldr	r1, [sp, #24]
  401896:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401898:	3601      	adds	r6, #1
  40189a:	4566      	cmp	r6, ip
  40189c:	d005      	beq.n	4018aa <pio_handler_set+0x5a>
  40189e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4018a0:	461a      	mov	r2, r3
  4018a2:	4b06      	ldr	r3, [pc, #24]	; (4018bc <pio_handler_set+0x6c>)
  4018a4:	4798      	blx	r3

	return 0;
  4018a6:	2000      	movs	r0, #0
  4018a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4018aa:	4902      	ldr	r1, [pc, #8]	; (4018b4 <pio_handler_set+0x64>)
  4018ac:	600e      	str	r6, [r1, #0]
  4018ae:	e7f6      	b.n	40189e <pio_handler_set+0x4e>
		return 1;
  4018b0:	2001      	movs	r0, #1
}
  4018b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018b4:	20400c68 	.word	0x20400c68
  4018b8:	20400bf8 	.word	0x20400bf8
  4018bc:	004017c1 	.word	0x004017c1

004018c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4018c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4018c2:	210a      	movs	r1, #10
  4018c4:	4801      	ldr	r0, [pc, #4]	; (4018cc <PIOA_Handler+0xc>)
  4018c6:	4b02      	ldr	r3, [pc, #8]	; (4018d0 <PIOA_Handler+0x10>)
  4018c8:	4798      	blx	r3
  4018ca:	bd08      	pop	{r3, pc}
  4018cc:	400e0e00 	.word	0x400e0e00
  4018d0:	00401801 	.word	0x00401801

004018d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4018d4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4018d6:	210b      	movs	r1, #11
  4018d8:	4801      	ldr	r0, [pc, #4]	; (4018e0 <PIOB_Handler+0xc>)
  4018da:	4b02      	ldr	r3, [pc, #8]	; (4018e4 <PIOB_Handler+0x10>)
  4018dc:	4798      	blx	r3
  4018de:	bd08      	pop	{r3, pc}
  4018e0:	400e1000 	.word	0x400e1000
  4018e4:	00401801 	.word	0x00401801

004018e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4018e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4018ea:	210c      	movs	r1, #12
  4018ec:	4801      	ldr	r0, [pc, #4]	; (4018f4 <PIOC_Handler+0xc>)
  4018ee:	4b02      	ldr	r3, [pc, #8]	; (4018f8 <PIOC_Handler+0x10>)
  4018f0:	4798      	blx	r3
  4018f2:	bd08      	pop	{r3, pc}
  4018f4:	400e1200 	.word	0x400e1200
  4018f8:	00401801 	.word	0x00401801

004018fc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4018fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4018fe:	2110      	movs	r1, #16
  401900:	4801      	ldr	r0, [pc, #4]	; (401908 <PIOD_Handler+0xc>)
  401902:	4b02      	ldr	r3, [pc, #8]	; (40190c <PIOD_Handler+0x10>)
  401904:	4798      	blx	r3
  401906:	bd08      	pop	{r3, pc}
  401908:	400e1400 	.word	0x400e1400
  40190c:	00401801 	.word	0x00401801

00401910 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401910:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401912:	2111      	movs	r1, #17
  401914:	4801      	ldr	r0, [pc, #4]	; (40191c <PIOE_Handler+0xc>)
  401916:	4b02      	ldr	r3, [pc, #8]	; (401920 <PIOE_Handler+0x10>)
  401918:	4798      	blx	r3
  40191a:	bd08      	pop	{r3, pc}
  40191c:	400e1600 	.word	0x400e1600
  401920:	00401801 	.word	0x00401801

00401924 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401924:	2803      	cmp	r0, #3
  401926:	d011      	beq.n	40194c <pmc_mck_set_division+0x28>
  401928:	2804      	cmp	r0, #4
  40192a:	d012      	beq.n	401952 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40192c:	2802      	cmp	r0, #2
  40192e:	bf0c      	ite	eq
  401930:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401934:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401936:	4a08      	ldr	r2, [pc, #32]	; (401958 <pmc_mck_set_division+0x34>)
  401938:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40193a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40193e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401940:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401942:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401944:	f013 0f08 	tst.w	r3, #8
  401948:	d0fb      	beq.n	401942 <pmc_mck_set_division+0x1e>
}
  40194a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40194c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401950:	e7f1      	b.n	401936 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401952:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401956:	e7ee      	b.n	401936 <pmc_mck_set_division+0x12>
  401958:	400e0600 	.word	0x400e0600

0040195c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40195c:	4a17      	ldr	r2, [pc, #92]	; (4019bc <pmc_switch_mck_to_pllack+0x60>)
  40195e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401964:	4318      	orrs	r0, r3
  401966:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401968:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40196a:	f013 0f08 	tst.w	r3, #8
  40196e:	d10a      	bne.n	401986 <pmc_switch_mck_to_pllack+0x2a>
  401970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401974:	4911      	ldr	r1, [pc, #68]	; (4019bc <pmc_switch_mck_to_pllack+0x60>)
  401976:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401978:	f012 0f08 	tst.w	r2, #8
  40197c:	d103      	bne.n	401986 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40197e:	3b01      	subs	r3, #1
  401980:	d1f9      	bne.n	401976 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401982:	2001      	movs	r0, #1
  401984:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401986:	4a0d      	ldr	r2, [pc, #52]	; (4019bc <pmc_switch_mck_to_pllack+0x60>)
  401988:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40198a:	f023 0303 	bic.w	r3, r3, #3
  40198e:	f043 0302 	orr.w	r3, r3, #2
  401992:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401994:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401996:	f013 0f08 	tst.w	r3, #8
  40199a:	d10a      	bne.n	4019b2 <pmc_switch_mck_to_pllack+0x56>
  40199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4019a0:	4906      	ldr	r1, [pc, #24]	; (4019bc <pmc_switch_mck_to_pllack+0x60>)
  4019a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019a4:	f012 0f08 	tst.w	r2, #8
  4019a8:	d105      	bne.n	4019b6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019aa:	3b01      	subs	r3, #1
  4019ac:	d1f9      	bne.n	4019a2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4019ae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4019b0:	4770      	bx	lr
	return 0;
  4019b2:	2000      	movs	r0, #0
  4019b4:	4770      	bx	lr
  4019b6:	2000      	movs	r0, #0
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop
  4019bc:	400e0600 	.word	0x400e0600

004019c0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4019c0:	b9a0      	cbnz	r0, 4019ec <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019c2:	480e      	ldr	r0, [pc, #56]	; (4019fc <pmc_switch_mainck_to_xtal+0x3c>)
  4019c4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4019c6:	0209      	lsls	r1, r1, #8
  4019c8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019ca:	4a0d      	ldr	r2, [pc, #52]	; (401a00 <pmc_switch_mainck_to_xtal+0x40>)
  4019cc:	401a      	ands	r2, r3
  4019ce:	4b0d      	ldr	r3, [pc, #52]	; (401a04 <pmc_switch_mainck_to_xtal+0x44>)
  4019d0:	4313      	orrs	r3, r2
  4019d2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019d4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019d6:	4602      	mov	r2, r0
  4019d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019da:	f013 0f01 	tst.w	r3, #1
  4019de:	d0fb      	beq.n	4019d8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4019e0:	4a06      	ldr	r2, [pc, #24]	; (4019fc <pmc_switch_mainck_to_xtal+0x3c>)
  4019e2:	6a11      	ldr	r1, [r2, #32]
  4019e4:	4b08      	ldr	r3, [pc, #32]	; (401a08 <pmc_switch_mainck_to_xtal+0x48>)
  4019e6:	430b      	orrs	r3, r1
  4019e8:	6213      	str	r3, [r2, #32]
  4019ea:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019ec:	4903      	ldr	r1, [pc, #12]	; (4019fc <pmc_switch_mainck_to_xtal+0x3c>)
  4019ee:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4019f0:	4a06      	ldr	r2, [pc, #24]	; (401a0c <pmc_switch_mainck_to_xtal+0x4c>)
  4019f2:	401a      	ands	r2, r3
  4019f4:	4b06      	ldr	r3, [pc, #24]	; (401a10 <pmc_switch_mainck_to_xtal+0x50>)
  4019f6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019f8:	620b      	str	r3, [r1, #32]
  4019fa:	4770      	bx	lr
  4019fc:	400e0600 	.word	0x400e0600
  401a00:	ffc8fffc 	.word	0xffc8fffc
  401a04:	00370001 	.word	0x00370001
  401a08:	01370000 	.word	0x01370000
  401a0c:	fec8fffc 	.word	0xfec8fffc
  401a10:	01370002 	.word	0x01370002

00401a14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a14:	4b02      	ldr	r3, [pc, #8]	; (401a20 <pmc_osc_is_ready_mainck+0xc>)
  401a16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a1c:	4770      	bx	lr
  401a1e:	bf00      	nop
  401a20:	400e0600 	.word	0x400e0600

00401a24 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a28:	4b01      	ldr	r3, [pc, #4]	; (401a30 <pmc_disable_pllack+0xc>)
  401a2a:	629a      	str	r2, [r3, #40]	; 0x28
  401a2c:	4770      	bx	lr
  401a2e:	bf00      	nop
  401a30:	400e0600 	.word	0x400e0600

00401a34 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a34:	4b02      	ldr	r3, [pc, #8]	; (401a40 <pmc_is_locked_pllack+0xc>)
  401a36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a38:	f000 0002 	and.w	r0, r0, #2
  401a3c:	4770      	bx	lr
  401a3e:	bf00      	nop
  401a40:	400e0600 	.word	0x400e0600

00401a44 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401a44:	283f      	cmp	r0, #63	; 0x3f
  401a46:	d81e      	bhi.n	401a86 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401a48:	281f      	cmp	r0, #31
  401a4a:	d80c      	bhi.n	401a66 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a4c:	4b11      	ldr	r3, [pc, #68]	; (401a94 <pmc_enable_periph_clk+0x50>)
  401a4e:	699a      	ldr	r2, [r3, #24]
  401a50:	2301      	movs	r3, #1
  401a52:	4083      	lsls	r3, r0
  401a54:	4393      	bics	r3, r2
  401a56:	d018      	beq.n	401a8a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a58:	2301      	movs	r3, #1
  401a5a:	fa03 f000 	lsl.w	r0, r3, r0
  401a5e:	4b0d      	ldr	r3, [pc, #52]	; (401a94 <pmc_enable_periph_clk+0x50>)
  401a60:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401a62:	2000      	movs	r0, #0
  401a64:	4770      	bx	lr
		ul_id -= 32;
  401a66:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a68:	4b0a      	ldr	r3, [pc, #40]	; (401a94 <pmc_enable_periph_clk+0x50>)
  401a6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a6e:	2301      	movs	r3, #1
  401a70:	4083      	lsls	r3, r0
  401a72:	4393      	bics	r3, r2
  401a74:	d00b      	beq.n	401a8e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a76:	2301      	movs	r3, #1
  401a78:	fa03 f000 	lsl.w	r0, r3, r0
  401a7c:	4b05      	ldr	r3, [pc, #20]	; (401a94 <pmc_enable_periph_clk+0x50>)
  401a7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401a82:	2000      	movs	r0, #0
  401a84:	4770      	bx	lr
		return 1;
  401a86:	2001      	movs	r0, #1
  401a88:	4770      	bx	lr
	return 0;
  401a8a:	2000      	movs	r0, #0
  401a8c:	4770      	bx	lr
  401a8e:	2000      	movs	r0, #0
}
  401a90:	4770      	bx	lr
  401a92:	bf00      	nop
  401a94:	400e0600 	.word	0x400e0600

00401a98 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401a98:	6943      	ldr	r3, [r0, #20]
  401a9a:	f013 0f02 	tst.w	r3, #2
  401a9e:	d002      	beq.n	401aa6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401aa0:	61c1      	str	r1, [r0, #28]
	return 0;
  401aa2:	2000      	movs	r0, #0
  401aa4:	4770      	bx	lr
		return 1;
  401aa6:	2001      	movs	r0, #1
}
  401aa8:	4770      	bx	lr

00401aaa <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401aaa:	6943      	ldr	r3, [r0, #20]
  401aac:	f013 0f01 	tst.w	r3, #1
  401ab0:	d003      	beq.n	401aba <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401ab2:	6983      	ldr	r3, [r0, #24]
  401ab4:	700b      	strb	r3, [r1, #0]
	return 0;
  401ab6:	2000      	movs	r0, #0
  401ab8:	4770      	bx	lr
		return 1;
  401aba:	2001      	movs	r0, #1
}
  401abc:	4770      	bx	lr

00401abe <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401abe:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401ac0:	010b      	lsls	r3, r1, #4
  401ac2:	4293      	cmp	r3, r2
  401ac4:	d914      	bls.n	401af0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401ac6:	00c9      	lsls	r1, r1, #3
  401ac8:	084b      	lsrs	r3, r1, #1
  401aca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401ace:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401ad2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ad4:	1e5c      	subs	r4, r3, #1
  401ad6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401ada:	428c      	cmp	r4, r1
  401adc:	d901      	bls.n	401ae2 <usart_set_async_baudrate+0x24>
		return 1;
  401ade:	2001      	movs	r0, #1
  401ae0:	e017      	b.n	401b12 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401ae2:	6841      	ldr	r1, [r0, #4]
  401ae4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401ae8:	6041      	str	r1, [r0, #4]
  401aea:	e00c      	b.n	401b06 <usart_set_async_baudrate+0x48>
		return 1;
  401aec:	2001      	movs	r0, #1
  401aee:	e010      	b.n	401b12 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401af0:	0859      	lsrs	r1, r3, #1
  401af2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401af6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401afa:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401afc:	1e5c      	subs	r4, r3, #1
  401afe:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401b02:	428c      	cmp	r4, r1
  401b04:	d8f2      	bhi.n	401aec <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401b06:	0412      	lsls	r2, r2, #16
  401b08:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401b0c:	431a      	orrs	r2, r3
  401b0e:	6202      	str	r2, [r0, #32]

	return 0;
  401b10:	2000      	movs	r0, #0
}
  401b12:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b16:	4770      	bx	lr

00401b18 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401b18:	4b08      	ldr	r3, [pc, #32]	; (401b3c <usart_reset+0x24>)
  401b1a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401b1e:	2300      	movs	r3, #0
  401b20:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401b22:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401b24:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401b26:	2388      	movs	r3, #136	; 0x88
  401b28:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401b2a:	2324      	movs	r3, #36	; 0x24
  401b2c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401b32:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401b34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401b38:	6003      	str	r3, [r0, #0]
  401b3a:	4770      	bx	lr
  401b3c:	55534100 	.word	0x55534100

00401b40 <usart_init_rs232>:
{
  401b40:	b570      	push	{r4, r5, r6, lr}
  401b42:	4605      	mov	r5, r0
  401b44:	460c      	mov	r4, r1
  401b46:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401b48:	4b0f      	ldr	r3, [pc, #60]	; (401b88 <usart_init_rs232+0x48>)
  401b4a:	4798      	blx	r3
	ul_reg_val = 0;
  401b4c:	2200      	movs	r2, #0
  401b4e:	4b0f      	ldr	r3, [pc, #60]	; (401b8c <usart_init_rs232+0x4c>)
  401b50:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401b52:	b1a4      	cbz	r4, 401b7e <usart_init_rs232+0x3e>
  401b54:	4632      	mov	r2, r6
  401b56:	6821      	ldr	r1, [r4, #0]
  401b58:	4628      	mov	r0, r5
  401b5a:	4b0d      	ldr	r3, [pc, #52]	; (401b90 <usart_init_rs232+0x50>)
  401b5c:	4798      	blx	r3
  401b5e:	4602      	mov	r2, r0
  401b60:	b978      	cbnz	r0, 401b82 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401b62:	6863      	ldr	r3, [r4, #4]
  401b64:	68a1      	ldr	r1, [r4, #8]
  401b66:	430b      	orrs	r3, r1
  401b68:	6921      	ldr	r1, [r4, #16]
  401b6a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401b6c:	68e1      	ldr	r1, [r4, #12]
  401b6e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401b70:	4906      	ldr	r1, [pc, #24]	; (401b8c <usart_init_rs232+0x4c>)
  401b72:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401b74:	6869      	ldr	r1, [r5, #4]
  401b76:	430b      	orrs	r3, r1
  401b78:	606b      	str	r3, [r5, #4]
}
  401b7a:	4610      	mov	r0, r2
  401b7c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401b7e:	2201      	movs	r2, #1
  401b80:	e7fb      	b.n	401b7a <usart_init_rs232+0x3a>
  401b82:	2201      	movs	r2, #1
  401b84:	e7f9      	b.n	401b7a <usart_init_rs232+0x3a>
  401b86:	bf00      	nop
  401b88:	00401b19 	.word	0x00401b19
  401b8c:	20400c6c 	.word	0x20400c6c
  401b90:	00401abf 	.word	0x00401abf

00401b94 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401b94:	2340      	movs	r3, #64	; 0x40
  401b96:	6003      	str	r3, [r0, #0]
  401b98:	4770      	bx	lr

00401b9a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401b9a:	2310      	movs	r3, #16
  401b9c:	6003      	str	r3, [r0, #0]
  401b9e:	4770      	bx	lr

00401ba0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401ba0:	6943      	ldr	r3, [r0, #20]
  401ba2:	f013 0f02 	tst.w	r3, #2
  401ba6:	d004      	beq.n	401bb2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401ba8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401bac:	61c1      	str	r1, [r0, #28]
	return 0;
  401bae:	2000      	movs	r0, #0
  401bb0:	4770      	bx	lr
		return 1;
  401bb2:	2001      	movs	r0, #1
}
  401bb4:	4770      	bx	lr

00401bb6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401bb6:	6943      	ldr	r3, [r0, #20]
  401bb8:	f013 0f01 	tst.w	r3, #1
  401bbc:	d005      	beq.n	401bca <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401bbe:	6983      	ldr	r3, [r0, #24]
  401bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401bc4:	600b      	str	r3, [r1, #0]
	return 0;
  401bc6:	2000      	movs	r0, #0
  401bc8:	4770      	bx	lr
		return 1;
  401bca:	2001      	movs	r0, #1
}
  401bcc:	4770      	bx	lr

00401bce <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bce:	e7fe      	b.n	401bce <Dummy_Handler>

00401bd0 <Reset_Handler>:
{
  401bd0:	b500      	push	{lr}
  401bd2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401bd4:	4b25      	ldr	r3, [pc, #148]	; (401c6c <Reset_Handler+0x9c>)
  401bd6:	4a26      	ldr	r2, [pc, #152]	; (401c70 <Reset_Handler+0xa0>)
  401bd8:	429a      	cmp	r2, r3
  401bda:	d010      	beq.n	401bfe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401bdc:	4b25      	ldr	r3, [pc, #148]	; (401c74 <Reset_Handler+0xa4>)
  401bde:	4a23      	ldr	r2, [pc, #140]	; (401c6c <Reset_Handler+0x9c>)
  401be0:	429a      	cmp	r2, r3
  401be2:	d20c      	bcs.n	401bfe <Reset_Handler+0x2e>
  401be4:	3b01      	subs	r3, #1
  401be6:	1a9b      	subs	r3, r3, r2
  401be8:	f023 0303 	bic.w	r3, r3, #3
  401bec:	3304      	adds	r3, #4
  401bee:	4413      	add	r3, r2
  401bf0:	491f      	ldr	r1, [pc, #124]	; (401c70 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401bf2:	f851 0b04 	ldr.w	r0, [r1], #4
  401bf6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401bfa:	429a      	cmp	r2, r3
  401bfc:	d1f9      	bne.n	401bf2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401bfe:	4b1e      	ldr	r3, [pc, #120]	; (401c78 <Reset_Handler+0xa8>)
  401c00:	4a1e      	ldr	r2, [pc, #120]	; (401c7c <Reset_Handler+0xac>)
  401c02:	429a      	cmp	r2, r3
  401c04:	d20a      	bcs.n	401c1c <Reset_Handler+0x4c>
  401c06:	3b01      	subs	r3, #1
  401c08:	1a9b      	subs	r3, r3, r2
  401c0a:	f023 0303 	bic.w	r3, r3, #3
  401c0e:	3304      	adds	r3, #4
  401c10:	4413      	add	r3, r2
                *pDest++ = 0;
  401c12:	2100      	movs	r1, #0
  401c14:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401c18:	4293      	cmp	r3, r2
  401c1a:	d1fb      	bne.n	401c14 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401c1c:	4a18      	ldr	r2, [pc, #96]	; (401c80 <Reset_Handler+0xb0>)
  401c1e:	4b19      	ldr	r3, [pc, #100]	; (401c84 <Reset_Handler+0xb4>)
  401c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401c24:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401c26:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c2a:	fab3 f383 	clz	r3, r3
  401c2e:	095b      	lsrs	r3, r3, #5
  401c30:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401c32:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401c34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c38:	2200      	movs	r2, #0
  401c3a:	4b13      	ldr	r3, [pc, #76]	; (401c88 <Reset_Handler+0xb8>)
  401c3c:	701a      	strb	r2, [r3, #0]
	return flags;
  401c3e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401c40:	4a12      	ldr	r2, [pc, #72]	; (401c8c <Reset_Handler+0xbc>)
  401c42:	6813      	ldr	r3, [r2, #0]
  401c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401c48:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c4e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401c52:	b129      	cbz	r1, 401c60 <Reset_Handler+0x90>
		cpu_irq_enable();
  401c54:	2201      	movs	r2, #1
  401c56:	4b0c      	ldr	r3, [pc, #48]	; (401c88 <Reset_Handler+0xb8>)
  401c58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401c5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c5e:	b662      	cpsie	i
        __libc_init_array();
  401c60:	4b0b      	ldr	r3, [pc, #44]	; (401c90 <Reset_Handler+0xc0>)
  401c62:	4798      	blx	r3
        main();
  401c64:	4b0b      	ldr	r3, [pc, #44]	; (401c94 <Reset_Handler+0xc4>)
  401c66:	4798      	blx	r3
  401c68:	e7fe      	b.n	401c68 <Reset_Handler+0x98>
  401c6a:	bf00      	nop
  401c6c:	20400000 	.word	0x20400000
  401c70:	0040c78c 	.word	0x0040c78c
  401c74:	204009d8 	.word	0x204009d8
  401c78:	20400e64 	.word	0x20400e64
  401c7c:	204009d8 	.word	0x204009d8
  401c80:	e000ed00 	.word	0xe000ed00
  401c84:	00400000 	.word	0x00400000
  401c88:	20400018 	.word	0x20400018
  401c8c:	e000ed88 	.word	0xe000ed88
  401c90:	00406d65 	.word	0x00406d65
  401c94:	0040436d 	.word	0x0040436d

00401c98 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401c98:	4b3b      	ldr	r3, [pc, #236]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c9c:	f003 0303 	and.w	r3, r3, #3
  401ca0:	2b01      	cmp	r3, #1
  401ca2:	d01d      	beq.n	401ce0 <SystemCoreClockUpdate+0x48>
  401ca4:	b183      	cbz	r3, 401cc8 <SystemCoreClockUpdate+0x30>
  401ca6:	2b02      	cmp	r3, #2
  401ca8:	d036      	beq.n	401d18 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401caa:	4b37      	ldr	r3, [pc, #220]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cb2:	2b70      	cmp	r3, #112	; 0x70
  401cb4:	d05f      	beq.n	401d76 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401cb6:	4b34      	ldr	r3, [pc, #208]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401cba:	4934      	ldr	r1, [pc, #208]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401cbc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401cc0:	680b      	ldr	r3, [r1, #0]
  401cc2:	40d3      	lsrs	r3, r2
  401cc4:	600b      	str	r3, [r1, #0]
  401cc6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401cc8:	4b31      	ldr	r3, [pc, #196]	; (401d90 <SystemCoreClockUpdate+0xf8>)
  401cca:	695b      	ldr	r3, [r3, #20]
  401ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401cd0:	bf14      	ite	ne
  401cd2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401cd6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401cda:	4b2c      	ldr	r3, [pc, #176]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401cdc:	601a      	str	r2, [r3, #0]
  401cde:	e7e4      	b.n	401caa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401ce0:	4b29      	ldr	r3, [pc, #164]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401ce2:	6a1b      	ldr	r3, [r3, #32]
  401ce4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ce8:	d003      	beq.n	401cf2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401cea:	4a2a      	ldr	r2, [pc, #168]	; (401d94 <SystemCoreClockUpdate+0xfc>)
  401cec:	4b27      	ldr	r3, [pc, #156]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401cee:	601a      	str	r2, [r3, #0]
  401cf0:	e7db      	b.n	401caa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401cf2:	4a29      	ldr	r2, [pc, #164]	; (401d98 <SystemCoreClockUpdate+0x100>)
  401cf4:	4b25      	ldr	r3, [pc, #148]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401cf6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401cf8:	4b23      	ldr	r3, [pc, #140]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401cfa:	6a1b      	ldr	r3, [r3, #32]
  401cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d00:	2b10      	cmp	r3, #16
  401d02:	d005      	beq.n	401d10 <SystemCoreClockUpdate+0x78>
  401d04:	2b20      	cmp	r3, #32
  401d06:	d1d0      	bne.n	401caa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401d08:	4a22      	ldr	r2, [pc, #136]	; (401d94 <SystemCoreClockUpdate+0xfc>)
  401d0a:	4b20      	ldr	r3, [pc, #128]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d0c:	601a      	str	r2, [r3, #0]
          break;
  401d0e:	e7cc      	b.n	401caa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401d10:	4a22      	ldr	r2, [pc, #136]	; (401d9c <SystemCoreClockUpdate+0x104>)
  401d12:	4b1e      	ldr	r3, [pc, #120]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d14:	601a      	str	r2, [r3, #0]
          break;
  401d16:	e7c8      	b.n	401caa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401d18:	4b1b      	ldr	r3, [pc, #108]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401d1a:	6a1b      	ldr	r3, [r3, #32]
  401d1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401d20:	d016      	beq.n	401d50 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401d22:	4a1c      	ldr	r2, [pc, #112]	; (401d94 <SystemCoreClockUpdate+0xfc>)
  401d24:	4b19      	ldr	r3, [pc, #100]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d26:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401d28:	4b17      	ldr	r3, [pc, #92]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d2c:	f003 0303 	and.w	r3, r3, #3
  401d30:	2b02      	cmp	r3, #2
  401d32:	d1ba      	bne.n	401caa <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401d34:	4a14      	ldr	r2, [pc, #80]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401d36:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401d3a:	4814      	ldr	r0, [pc, #80]	; (401d8c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401d3c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401d40:	6803      	ldr	r3, [r0, #0]
  401d42:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d46:	b2d2      	uxtb	r2, r2
  401d48:	fbb3 f3f2 	udiv	r3, r3, r2
  401d4c:	6003      	str	r3, [r0, #0]
  401d4e:	e7ac      	b.n	401caa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d50:	4a11      	ldr	r2, [pc, #68]	; (401d98 <SystemCoreClockUpdate+0x100>)
  401d52:	4b0e      	ldr	r3, [pc, #56]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d54:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401d56:	4b0c      	ldr	r3, [pc, #48]	; (401d88 <SystemCoreClockUpdate+0xf0>)
  401d58:	6a1b      	ldr	r3, [r3, #32]
  401d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d5e:	2b10      	cmp	r3, #16
  401d60:	d005      	beq.n	401d6e <SystemCoreClockUpdate+0xd6>
  401d62:	2b20      	cmp	r3, #32
  401d64:	d1e0      	bne.n	401d28 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401d66:	4a0b      	ldr	r2, [pc, #44]	; (401d94 <SystemCoreClockUpdate+0xfc>)
  401d68:	4b08      	ldr	r3, [pc, #32]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d6a:	601a      	str	r2, [r3, #0]
          break;
  401d6c:	e7dc      	b.n	401d28 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401d6e:	4a0b      	ldr	r2, [pc, #44]	; (401d9c <SystemCoreClockUpdate+0x104>)
  401d70:	4b06      	ldr	r3, [pc, #24]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d72:	601a      	str	r2, [r3, #0]
          break;
  401d74:	e7d8      	b.n	401d28 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401d76:	4a05      	ldr	r2, [pc, #20]	; (401d8c <SystemCoreClockUpdate+0xf4>)
  401d78:	6813      	ldr	r3, [r2, #0]
  401d7a:	4909      	ldr	r1, [pc, #36]	; (401da0 <SystemCoreClockUpdate+0x108>)
  401d7c:	fba1 1303 	umull	r1, r3, r1, r3
  401d80:	085b      	lsrs	r3, r3, #1
  401d82:	6013      	str	r3, [r2, #0]
  401d84:	4770      	bx	lr
  401d86:	bf00      	nop
  401d88:	400e0600 	.word	0x400e0600
  401d8c:	2040001c 	.word	0x2040001c
  401d90:	400e1810 	.word	0x400e1810
  401d94:	00b71b00 	.word	0x00b71b00
  401d98:	003d0900 	.word	0x003d0900
  401d9c:	007a1200 	.word	0x007a1200
  401da0:	aaaaaaab 	.word	0xaaaaaaab

00401da4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401da4:	4b16      	ldr	r3, [pc, #88]	; (401e00 <system_init_flash+0x5c>)
  401da6:	4298      	cmp	r0, r3
  401da8:	d913      	bls.n	401dd2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401daa:	4b16      	ldr	r3, [pc, #88]	; (401e04 <system_init_flash+0x60>)
  401dac:	4298      	cmp	r0, r3
  401dae:	d915      	bls.n	401ddc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401db0:	4b15      	ldr	r3, [pc, #84]	; (401e08 <system_init_flash+0x64>)
  401db2:	4298      	cmp	r0, r3
  401db4:	d916      	bls.n	401de4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401db6:	4b15      	ldr	r3, [pc, #84]	; (401e0c <system_init_flash+0x68>)
  401db8:	4298      	cmp	r0, r3
  401dba:	d917      	bls.n	401dec <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401dbc:	4b14      	ldr	r3, [pc, #80]	; (401e10 <system_init_flash+0x6c>)
  401dbe:	4298      	cmp	r0, r3
  401dc0:	d918      	bls.n	401df4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401dc2:	4b14      	ldr	r3, [pc, #80]	; (401e14 <system_init_flash+0x70>)
  401dc4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dc6:	bf94      	ite	ls
  401dc8:	4a13      	ldrls	r2, [pc, #76]	; (401e18 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401dca:	4a14      	ldrhi	r2, [pc, #80]	; (401e1c <system_init_flash+0x78>)
  401dcc:	4b14      	ldr	r3, [pc, #80]	; (401e20 <system_init_flash+0x7c>)
  401dce:	601a      	str	r2, [r3, #0]
  401dd0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401dd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401dd6:	4b12      	ldr	r3, [pc, #72]	; (401e20 <system_init_flash+0x7c>)
  401dd8:	601a      	str	r2, [r3, #0]
  401dda:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401ddc:	4a11      	ldr	r2, [pc, #68]	; (401e24 <system_init_flash+0x80>)
  401dde:	4b10      	ldr	r3, [pc, #64]	; (401e20 <system_init_flash+0x7c>)
  401de0:	601a      	str	r2, [r3, #0]
  401de2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401de4:	4a10      	ldr	r2, [pc, #64]	; (401e28 <system_init_flash+0x84>)
  401de6:	4b0e      	ldr	r3, [pc, #56]	; (401e20 <system_init_flash+0x7c>)
  401de8:	601a      	str	r2, [r3, #0]
  401dea:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401dec:	4a0f      	ldr	r2, [pc, #60]	; (401e2c <system_init_flash+0x88>)
  401dee:	4b0c      	ldr	r3, [pc, #48]	; (401e20 <system_init_flash+0x7c>)
  401df0:	601a      	str	r2, [r3, #0]
  401df2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401df4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401df8:	4b09      	ldr	r3, [pc, #36]	; (401e20 <system_init_flash+0x7c>)
  401dfa:	601a      	str	r2, [r3, #0]
  401dfc:	4770      	bx	lr
  401dfe:	bf00      	nop
  401e00:	015ef3bf 	.word	0x015ef3bf
  401e04:	02bde77f 	.word	0x02bde77f
  401e08:	041cdb3f 	.word	0x041cdb3f
  401e0c:	057bceff 	.word	0x057bceff
  401e10:	06dac2bf 	.word	0x06dac2bf
  401e14:	0839b67f 	.word	0x0839b67f
  401e18:	04000500 	.word	0x04000500
  401e1c:	04000600 	.word	0x04000600
  401e20:	400e0c00 	.word	0x400e0c00
  401e24:	04000100 	.word	0x04000100
  401e28:	04000200 	.word	0x04000200
  401e2c:	04000300 	.word	0x04000300

00401e30 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401e30:	4b0a      	ldr	r3, [pc, #40]	; (401e5c <_sbrk+0x2c>)
  401e32:	681b      	ldr	r3, [r3, #0]
  401e34:	b153      	cbz	r3, 401e4c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401e36:	4b09      	ldr	r3, [pc, #36]	; (401e5c <_sbrk+0x2c>)
  401e38:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401e3a:	181a      	adds	r2, r3, r0
  401e3c:	4908      	ldr	r1, [pc, #32]	; (401e60 <_sbrk+0x30>)
  401e3e:	4291      	cmp	r1, r2
  401e40:	db08      	blt.n	401e54 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401e42:	4610      	mov	r0, r2
  401e44:	4a05      	ldr	r2, [pc, #20]	; (401e5c <_sbrk+0x2c>)
  401e46:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401e48:	4618      	mov	r0, r3
  401e4a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401e4c:	4a05      	ldr	r2, [pc, #20]	; (401e64 <_sbrk+0x34>)
  401e4e:	4b03      	ldr	r3, [pc, #12]	; (401e5c <_sbrk+0x2c>)
  401e50:	601a      	str	r2, [r3, #0]
  401e52:	e7f0      	b.n	401e36 <_sbrk+0x6>
		return (caddr_t) -1;	
  401e54:	f04f 30ff 	mov.w	r0, #4294967295
}
  401e58:	4770      	bx	lr
  401e5a:	bf00      	nop
  401e5c:	20400c70 	.word	0x20400c70
  401e60:	2045fffc 	.word	0x2045fffc
  401e64:	20403068 	.word	0x20403068

00401e68 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401e68:	f04f 30ff 	mov.w	r0, #4294967295
  401e6c:	4770      	bx	lr

00401e6e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401e72:	604b      	str	r3, [r1, #4]

	return 0;
}
  401e74:	2000      	movs	r0, #0
  401e76:	4770      	bx	lr

00401e78 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401e78:	2001      	movs	r0, #1
  401e7a:	4770      	bx	lr

00401e7c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401e7c:	2000      	movs	r0, #0
  401e7e:	4770      	bx	lr

00401e80 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e80:	f100 0308 	add.w	r3, r0, #8
  401e84:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401e86:	f04f 32ff 	mov.w	r2, #4294967295
  401e8a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e8e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401e90:	2300      	movs	r3, #0
  401e92:	6003      	str	r3, [r0, #0]
  401e94:	4770      	bx	lr

00401e96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401e96:	2300      	movs	r3, #0
  401e98:	6103      	str	r3, [r0, #16]
  401e9a:	4770      	bx	lr

00401e9c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401e9c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401e9e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401ea0:	689a      	ldr	r2, [r3, #8]
  401ea2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401ea4:	689a      	ldr	r2, [r3, #8]
  401ea6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401ea8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401eaa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401eac:	6803      	ldr	r3, [r0, #0]
  401eae:	3301      	adds	r3, #1
  401eb0:	6003      	str	r3, [r0, #0]
  401eb2:	4770      	bx	lr

00401eb4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401eb4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401eb6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401eb8:	f1b5 3fff 	cmp.w	r5, #4294967295
  401ebc:	d002      	beq.n	401ec4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401ebe:	f100 0208 	add.w	r2, r0, #8
  401ec2:	e002      	b.n	401eca <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401ec4:	6902      	ldr	r2, [r0, #16]
  401ec6:	e004      	b.n	401ed2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401ec8:	461a      	mov	r2, r3
  401eca:	6853      	ldr	r3, [r2, #4]
  401ecc:	681c      	ldr	r4, [r3, #0]
  401ece:	42a5      	cmp	r5, r4
  401ed0:	d2fa      	bcs.n	401ec8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401ed2:	6853      	ldr	r3, [r2, #4]
  401ed4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401ed6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401ed8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401eda:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401edc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401ede:	6803      	ldr	r3, [r0, #0]
  401ee0:	3301      	adds	r3, #1
  401ee2:	6003      	str	r3, [r0, #0]
}
  401ee4:	bc30      	pop	{r4, r5}
  401ee6:	4770      	bx	lr

00401ee8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401ee8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401eea:	6842      	ldr	r2, [r0, #4]
  401eec:	6881      	ldr	r1, [r0, #8]
  401eee:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401ef0:	6882      	ldr	r2, [r0, #8]
  401ef2:	6841      	ldr	r1, [r0, #4]
  401ef4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401ef6:	685a      	ldr	r2, [r3, #4]
  401ef8:	4290      	cmp	r0, r2
  401efa:	d005      	beq.n	401f08 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401efc:	2200      	movs	r2, #0
  401efe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401f00:	6818      	ldr	r0, [r3, #0]
  401f02:	3801      	subs	r0, #1
  401f04:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401f06:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401f08:	6882      	ldr	r2, [r0, #8]
  401f0a:	605a      	str	r2, [r3, #4]
  401f0c:	e7f6      	b.n	401efc <uxListRemove+0x14>
	...

00401f10 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401f10:	4b0d      	ldr	r3, [pc, #52]	; (401f48 <prvTaskExitError+0x38>)
  401f12:	681b      	ldr	r3, [r3, #0]
  401f14:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f18:	d00a      	beq.n	401f30 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401f1a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f1e:	b672      	cpsid	i
  401f20:	f383 8811 	msr	BASEPRI, r3
  401f24:	f3bf 8f6f 	isb	sy
  401f28:	f3bf 8f4f 	dsb	sy
  401f2c:	b662      	cpsie	i
  401f2e:	e7fe      	b.n	401f2e <prvTaskExitError+0x1e>
  401f30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f34:	b672      	cpsid	i
  401f36:	f383 8811 	msr	BASEPRI, r3
  401f3a:	f3bf 8f6f 	isb	sy
  401f3e:	f3bf 8f4f 	dsb	sy
  401f42:	b662      	cpsie	i
  401f44:	e7fe      	b.n	401f44 <prvTaskExitError+0x34>
  401f46:	bf00      	nop
  401f48:	20400020 	.word	0x20400020

00401f4c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401f4c:	4806      	ldr	r0, [pc, #24]	; (401f68 <prvPortStartFirstTask+0x1c>)
  401f4e:	6800      	ldr	r0, [r0, #0]
  401f50:	6800      	ldr	r0, [r0, #0]
  401f52:	f380 8808 	msr	MSP, r0
  401f56:	b662      	cpsie	i
  401f58:	b661      	cpsie	f
  401f5a:	f3bf 8f4f 	dsb	sy
  401f5e:	f3bf 8f6f 	isb	sy
  401f62:	df00      	svc	0
  401f64:	bf00      	nop
  401f66:	0000      	.short	0x0000
  401f68:	e000ed08 	.word	0xe000ed08

00401f6c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401f6c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401f7c <vPortEnableVFP+0x10>
  401f70:	6801      	ldr	r1, [r0, #0]
  401f72:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401f76:	6001      	str	r1, [r0, #0]
  401f78:	4770      	bx	lr
  401f7a:	0000      	.short	0x0000
  401f7c:	e000ed88 	.word	0xe000ed88

00401f80 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401f84:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401f88:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401f8c:	4b05      	ldr	r3, [pc, #20]	; (401fa4 <pxPortInitialiseStack+0x24>)
  401f8e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401f92:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401f96:	f06f 0302 	mvn.w	r3, #2
  401f9a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401f9e:	3844      	subs	r0, #68	; 0x44
  401fa0:	4770      	bx	lr
  401fa2:	bf00      	nop
  401fa4:	00401f11 	.word	0x00401f11

00401fa8 <SVC_Handler>:
	__asm volatile (
  401fa8:	4b06      	ldr	r3, [pc, #24]	; (401fc4 <pxCurrentTCBConst2>)
  401faa:	6819      	ldr	r1, [r3, #0]
  401fac:	6808      	ldr	r0, [r1, #0]
  401fae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fb2:	f380 8809 	msr	PSP, r0
  401fb6:	f3bf 8f6f 	isb	sy
  401fba:	f04f 0000 	mov.w	r0, #0
  401fbe:	f380 8811 	msr	BASEPRI, r0
  401fc2:	4770      	bx	lr

00401fc4 <pxCurrentTCBConst2>:
  401fc4:	20400c7c 	.word	0x20400c7c
  401fc8:	4770      	bx	lr
  401fca:	bf00      	nop

00401fcc <vPortEnterCritical>:
  401fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fd0:	b672      	cpsid	i
  401fd2:	f383 8811 	msr	BASEPRI, r3
  401fd6:	f3bf 8f6f 	isb	sy
  401fda:	f3bf 8f4f 	dsb	sy
  401fde:	b662      	cpsie	i
	uxCriticalNesting++;
  401fe0:	4a0b      	ldr	r2, [pc, #44]	; (402010 <vPortEnterCritical+0x44>)
  401fe2:	6813      	ldr	r3, [r2, #0]
  401fe4:	3301      	adds	r3, #1
  401fe6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401fe8:	2b01      	cmp	r3, #1
  401fea:	d10f      	bne.n	40200c <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401fec:	4b09      	ldr	r3, [pc, #36]	; (402014 <vPortEnterCritical+0x48>)
  401fee:	681b      	ldr	r3, [r3, #0]
  401ff0:	f013 0fff 	tst.w	r3, #255	; 0xff
  401ff4:	d00a      	beq.n	40200c <vPortEnterCritical+0x40>
  401ff6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ffa:	b672      	cpsid	i
  401ffc:	f383 8811 	msr	BASEPRI, r3
  402000:	f3bf 8f6f 	isb	sy
  402004:	f3bf 8f4f 	dsb	sy
  402008:	b662      	cpsie	i
  40200a:	e7fe      	b.n	40200a <vPortEnterCritical+0x3e>
  40200c:	4770      	bx	lr
  40200e:	bf00      	nop
  402010:	20400020 	.word	0x20400020
  402014:	e000ed04 	.word	0xe000ed04

00402018 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402018:	4b0a      	ldr	r3, [pc, #40]	; (402044 <vPortExitCritical+0x2c>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	b953      	cbnz	r3, 402034 <vPortExitCritical+0x1c>
  40201e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402022:	b672      	cpsid	i
  402024:	f383 8811 	msr	BASEPRI, r3
  402028:	f3bf 8f6f 	isb	sy
  40202c:	f3bf 8f4f 	dsb	sy
  402030:	b662      	cpsie	i
  402032:	e7fe      	b.n	402032 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  402034:	3b01      	subs	r3, #1
  402036:	4a03      	ldr	r2, [pc, #12]	; (402044 <vPortExitCritical+0x2c>)
  402038:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40203a:	b90b      	cbnz	r3, 402040 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40203c:	f383 8811 	msr	BASEPRI, r3
  402040:	4770      	bx	lr
  402042:	bf00      	nop
  402044:	20400020 	.word	0x20400020

00402048 <PendSV_Handler>:
	__asm volatile
  402048:	f3ef 8009 	mrs	r0, PSP
  40204c:	f3bf 8f6f 	isb	sy
  402050:	4b15      	ldr	r3, [pc, #84]	; (4020a8 <pxCurrentTCBConst>)
  402052:	681a      	ldr	r2, [r3, #0]
  402054:	f01e 0f10 	tst.w	lr, #16
  402058:	bf08      	it	eq
  40205a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40205e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402062:	6010      	str	r0, [r2, #0]
  402064:	f84d 3d04 	str.w	r3, [sp, #-4]!
  402068:	f04f 0080 	mov.w	r0, #128	; 0x80
  40206c:	b672      	cpsid	i
  40206e:	f380 8811 	msr	BASEPRI, r0
  402072:	f3bf 8f4f 	dsb	sy
  402076:	f3bf 8f6f 	isb	sy
  40207a:	b662      	cpsie	i
  40207c:	f001 f890 	bl	4031a0 <vTaskSwitchContext>
  402080:	f04f 0000 	mov.w	r0, #0
  402084:	f380 8811 	msr	BASEPRI, r0
  402088:	bc08      	pop	{r3}
  40208a:	6819      	ldr	r1, [r3, #0]
  40208c:	6808      	ldr	r0, [r1, #0]
  40208e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402092:	f01e 0f10 	tst.w	lr, #16
  402096:	bf08      	it	eq
  402098:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40209c:	f380 8809 	msr	PSP, r0
  4020a0:	f3bf 8f6f 	isb	sy
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop

004020a8 <pxCurrentTCBConst>:
  4020a8:	20400c7c 	.word	0x20400c7c
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <SysTick_Handler>:
{
  4020b0:	b508      	push	{r3, lr}
	__asm volatile
  4020b2:	f3ef 8311 	mrs	r3, BASEPRI
  4020b6:	f04f 0280 	mov.w	r2, #128	; 0x80
  4020ba:	b672      	cpsid	i
  4020bc:	f382 8811 	msr	BASEPRI, r2
  4020c0:	f3bf 8f6f 	isb	sy
  4020c4:	f3bf 8f4f 	dsb	sy
  4020c8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4020ca:	4b05      	ldr	r3, [pc, #20]	; (4020e0 <SysTick_Handler+0x30>)
  4020cc:	4798      	blx	r3
  4020ce:	b118      	cbz	r0, 4020d8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4020d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4020d4:	4b03      	ldr	r3, [pc, #12]	; (4020e4 <SysTick_Handler+0x34>)
  4020d6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4020d8:	2300      	movs	r3, #0
  4020da:	f383 8811 	msr	BASEPRI, r3
  4020de:	bd08      	pop	{r3, pc}
  4020e0:	00402e0d 	.word	0x00402e0d
  4020e4:	e000ed04 	.word	0xe000ed04

004020e8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4020e8:	4a03      	ldr	r2, [pc, #12]	; (4020f8 <vPortSetupTimerInterrupt+0x10>)
  4020ea:	4b04      	ldr	r3, [pc, #16]	; (4020fc <vPortSetupTimerInterrupt+0x14>)
  4020ec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4020ee:	2207      	movs	r2, #7
  4020f0:	3b04      	subs	r3, #4
  4020f2:	601a      	str	r2, [r3, #0]
  4020f4:	4770      	bx	lr
  4020f6:	bf00      	nop
  4020f8:	000927bf 	.word	0x000927bf
  4020fc:	e000e014 	.word	0xe000e014

00402100 <xPortStartScheduler>:
{
  402100:	b500      	push	{lr}
  402102:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402104:	4b25      	ldr	r3, [pc, #148]	; (40219c <xPortStartScheduler+0x9c>)
  402106:	781a      	ldrb	r2, [r3, #0]
  402108:	b2d2      	uxtb	r2, r2
  40210a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40210c:	22ff      	movs	r2, #255	; 0xff
  40210e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402110:	781b      	ldrb	r3, [r3, #0]
  402112:	b2db      	uxtb	r3, r3
  402114:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402118:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402120:	4a1f      	ldr	r2, [pc, #124]	; (4021a0 <xPortStartScheduler+0xa0>)
  402122:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402124:	2207      	movs	r2, #7
  402126:	4b1f      	ldr	r3, [pc, #124]	; (4021a4 <xPortStartScheduler+0xa4>)
  402128:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40212a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40212e:	f013 0f80 	tst.w	r3, #128	; 0x80
  402132:	d010      	beq.n	402156 <xPortStartScheduler+0x56>
  402134:	2206      	movs	r2, #6
  402136:	e000      	b.n	40213a <xPortStartScheduler+0x3a>
  402138:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40213a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40213e:	005b      	lsls	r3, r3, #1
  402140:	b2db      	uxtb	r3, r3
  402142:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402146:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40214a:	1e51      	subs	r1, r2, #1
  40214c:	f013 0f80 	tst.w	r3, #128	; 0x80
  402150:	d1f2      	bne.n	402138 <xPortStartScheduler+0x38>
  402152:	4b14      	ldr	r3, [pc, #80]	; (4021a4 <xPortStartScheduler+0xa4>)
  402154:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402156:	4a13      	ldr	r2, [pc, #76]	; (4021a4 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402158:	6813      	ldr	r3, [r2, #0]
  40215a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40215c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402160:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  402162:	9b01      	ldr	r3, [sp, #4]
  402164:	b2db      	uxtb	r3, r3
  402166:	4a0d      	ldr	r2, [pc, #52]	; (40219c <xPortStartScheduler+0x9c>)
  402168:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40216a:	4b0f      	ldr	r3, [pc, #60]	; (4021a8 <xPortStartScheduler+0xa8>)
  40216c:	681a      	ldr	r2, [r3, #0]
  40216e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  402172:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  402174:	681a      	ldr	r2, [r3, #0]
  402176:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40217a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40217c:	4b0b      	ldr	r3, [pc, #44]	; (4021ac <xPortStartScheduler+0xac>)
  40217e:	4798      	blx	r3
	uxCriticalNesting = 0;
  402180:	2200      	movs	r2, #0
  402182:	4b0b      	ldr	r3, [pc, #44]	; (4021b0 <xPortStartScheduler+0xb0>)
  402184:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  402186:	4b0b      	ldr	r3, [pc, #44]	; (4021b4 <xPortStartScheduler+0xb4>)
  402188:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40218a:	4a0b      	ldr	r2, [pc, #44]	; (4021b8 <xPortStartScheduler+0xb8>)
  40218c:	6813      	ldr	r3, [r2, #0]
  40218e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  402192:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  402194:	4b09      	ldr	r3, [pc, #36]	; (4021bc <xPortStartScheduler+0xbc>)
  402196:	4798      	blx	r3
	prvTaskExitError();
  402198:	4b09      	ldr	r3, [pc, #36]	; (4021c0 <xPortStartScheduler+0xc0>)
  40219a:	4798      	blx	r3
  40219c:	e000e400 	.word	0xe000e400
  4021a0:	20400c74 	.word	0x20400c74
  4021a4:	20400c78 	.word	0x20400c78
  4021a8:	e000ed20 	.word	0xe000ed20
  4021ac:	004020e9 	.word	0x004020e9
  4021b0:	20400020 	.word	0x20400020
  4021b4:	00401f6d 	.word	0x00401f6d
  4021b8:	e000ef34 	.word	0xe000ef34
  4021bc:	00401f4d 	.word	0x00401f4d
  4021c0:	00401f11 	.word	0x00401f11

004021c4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4021c4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4021c8:	2b0f      	cmp	r3, #15
  4021ca:	d911      	bls.n	4021f0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4021cc:	4a12      	ldr	r2, [pc, #72]	; (402218 <vPortValidateInterruptPriority+0x54>)
  4021ce:	5c9b      	ldrb	r3, [r3, r2]
  4021d0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4021d2:	4a12      	ldr	r2, [pc, #72]	; (40221c <vPortValidateInterruptPriority+0x58>)
  4021d4:	7812      	ldrb	r2, [r2, #0]
  4021d6:	429a      	cmp	r2, r3
  4021d8:	d90a      	bls.n	4021f0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4021da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021de:	b672      	cpsid	i
  4021e0:	f383 8811 	msr	BASEPRI, r3
  4021e4:	f3bf 8f6f 	isb	sy
  4021e8:	f3bf 8f4f 	dsb	sy
  4021ec:	b662      	cpsie	i
  4021ee:	e7fe      	b.n	4021ee <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4021f0:	4b0b      	ldr	r3, [pc, #44]	; (402220 <vPortValidateInterruptPriority+0x5c>)
  4021f2:	681b      	ldr	r3, [r3, #0]
  4021f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4021f8:	4a0a      	ldr	r2, [pc, #40]	; (402224 <vPortValidateInterruptPriority+0x60>)
  4021fa:	6812      	ldr	r2, [r2, #0]
  4021fc:	4293      	cmp	r3, r2
  4021fe:	d90a      	bls.n	402216 <vPortValidateInterruptPriority+0x52>
  402200:	f04f 0380 	mov.w	r3, #128	; 0x80
  402204:	b672      	cpsid	i
  402206:	f383 8811 	msr	BASEPRI, r3
  40220a:	f3bf 8f6f 	isb	sy
  40220e:	f3bf 8f4f 	dsb	sy
  402212:	b662      	cpsie	i
  402214:	e7fe      	b.n	402214 <vPortValidateInterruptPriority+0x50>
  402216:	4770      	bx	lr
  402218:	e000e3f0 	.word	0xe000e3f0
  40221c:	20400c74 	.word	0x20400c74
  402220:	e000ed0c 	.word	0xe000ed0c
  402224:	20400c78 	.word	0x20400c78

00402228 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402228:	b510      	push	{r4, lr}
  40222a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  40222c:	4b06      	ldr	r3, [pc, #24]	; (402248 <pvPortMalloc+0x20>)
  40222e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  402230:	4620      	mov	r0, r4
  402232:	4b06      	ldr	r3, [pc, #24]	; (40224c <pvPortMalloc+0x24>)
  402234:	4798      	blx	r3
  402236:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  402238:	4b05      	ldr	r3, [pc, #20]	; (402250 <pvPortMalloc+0x28>)
  40223a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40223c:	b10c      	cbz	r4, 402242 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40223e:	4620      	mov	r0, r4
  402240:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  402242:	4b04      	ldr	r3, [pc, #16]	; (402254 <pvPortMalloc+0x2c>)
  402244:	4798      	blx	r3
	return pvReturn;
  402246:	e7fa      	b.n	40223e <pvPortMalloc+0x16>
  402248:	00402df1 	.word	0x00402df1
  40224c:	00406db5 	.word	0x00406db5
  402250:	00402f59 	.word	0x00402f59
  402254:	00403dbb 	.word	0x00403dbb

00402258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  402258:	b148      	cbz	r0, 40226e <vPortFree+0x16>
{
  40225a:	b510      	push	{r4, lr}
  40225c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40225e:	4b04      	ldr	r3, [pc, #16]	; (402270 <vPortFree+0x18>)
  402260:	4798      	blx	r3
		{
			free( pv );
  402262:	4620      	mov	r0, r4
  402264:	4b03      	ldr	r3, [pc, #12]	; (402274 <vPortFree+0x1c>)
  402266:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  402268:	4b03      	ldr	r3, [pc, #12]	; (402278 <vPortFree+0x20>)
  40226a:	4798      	blx	r3
  40226c:	bd10      	pop	{r4, pc}
  40226e:	4770      	bx	lr
  402270:	00402df1 	.word	0x00402df1
  402274:	00406dc5 	.word	0x00406dc5
  402278:	00402f59 	.word	0x00402f59

0040227c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40227c:	b538      	push	{r3, r4, r5, lr}
  40227e:	4604      	mov	r4, r0
  402280:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  402282:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402284:	b95a      	cbnz	r2, 40229e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402286:	6803      	ldr	r3, [r0, #0]
  402288:	2b00      	cmp	r3, #0
  40228a:	d12e      	bne.n	4022ea <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40228c:	6840      	ldr	r0, [r0, #4]
  40228e:	4b1b      	ldr	r3, [pc, #108]	; (4022fc <prvCopyDataToQueue+0x80>)
  402290:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  402292:	2300      	movs	r3, #0
  402294:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  402296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402298:	3301      	adds	r3, #1
  40229a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40229c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40229e:	b96d      	cbnz	r5, 4022bc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4022a0:	6880      	ldr	r0, [r0, #8]
  4022a2:	4b17      	ldr	r3, [pc, #92]	; (402300 <prvCopyDataToQueue+0x84>)
  4022a4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4022a6:	68a3      	ldr	r3, [r4, #8]
  4022a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4022aa:	4413      	add	r3, r2
  4022ac:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4022ae:	6862      	ldr	r2, [r4, #4]
  4022b0:	4293      	cmp	r3, r2
  4022b2:	d31c      	bcc.n	4022ee <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4022b4:	6823      	ldr	r3, [r4, #0]
  4022b6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4022b8:	2000      	movs	r0, #0
  4022ba:	e7ec      	b.n	402296 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022bc:	68c0      	ldr	r0, [r0, #12]
  4022be:	4b10      	ldr	r3, [pc, #64]	; (402300 <prvCopyDataToQueue+0x84>)
  4022c0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4022c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4022c4:	425b      	negs	r3, r3
  4022c6:	68e2      	ldr	r2, [r4, #12]
  4022c8:	441a      	add	r2, r3
  4022ca:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4022cc:	6821      	ldr	r1, [r4, #0]
  4022ce:	428a      	cmp	r2, r1
  4022d0:	d202      	bcs.n	4022d8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4022d2:	6862      	ldr	r2, [r4, #4]
  4022d4:	4413      	add	r3, r2
  4022d6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4022d8:	2d02      	cmp	r5, #2
  4022da:	d10a      	bne.n	4022f2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4022dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4022de:	b153      	cbz	r3, 4022f6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4022e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4022e2:	3b01      	subs	r3, #1
  4022e4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4022e6:	2000      	movs	r0, #0
  4022e8:	e7d5      	b.n	402296 <prvCopyDataToQueue+0x1a>
  4022ea:	2000      	movs	r0, #0
  4022ec:	e7d3      	b.n	402296 <prvCopyDataToQueue+0x1a>
  4022ee:	2000      	movs	r0, #0
  4022f0:	e7d1      	b.n	402296 <prvCopyDataToQueue+0x1a>
  4022f2:	2000      	movs	r0, #0
  4022f4:	e7cf      	b.n	402296 <prvCopyDataToQueue+0x1a>
  4022f6:	2000      	movs	r0, #0
  4022f8:	e7cd      	b.n	402296 <prvCopyDataToQueue+0x1a>
  4022fa:	bf00      	nop
  4022fc:	004035a1 	.word	0x004035a1
  402300:	00407335 	.word	0x00407335

00402304 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402304:	b530      	push	{r4, r5, lr}
  402306:	b083      	sub	sp, #12
  402308:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40230a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40230c:	b174      	cbz	r4, 40232c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40230e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402312:	429a      	cmp	r2, r3
  402314:	d315      	bcc.n	402342 <prvNotifyQueueSetContainer+0x3e>
  402316:	f04f 0380 	mov.w	r3, #128	; 0x80
  40231a:	b672      	cpsid	i
  40231c:	f383 8811 	msr	BASEPRI, r3
  402320:	f3bf 8f6f 	isb	sy
  402324:	f3bf 8f4f 	dsb	sy
  402328:	b662      	cpsie	i
  40232a:	e7fe      	b.n	40232a <prvNotifyQueueSetContainer+0x26>
  40232c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402330:	b672      	cpsid	i
  402332:	f383 8811 	msr	BASEPRI, r3
  402336:	f3bf 8f6f 	isb	sy
  40233a:	f3bf 8f4f 	dsb	sy
  40233e:	b662      	cpsie	i
  402340:	e7fe      	b.n	402340 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  402342:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402344:	4293      	cmp	r3, r2
  402346:	d803      	bhi.n	402350 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  402348:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40234a:	4628      	mov	r0, r5
  40234c:	b003      	add	sp, #12
  40234e:	bd30      	pop	{r4, r5, pc}
  402350:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  402352:	a901      	add	r1, sp, #4
  402354:	4620      	mov	r0, r4
  402356:	4b0b      	ldr	r3, [pc, #44]	; (402384 <prvNotifyQueueSetContainer+0x80>)
  402358:	4798      	blx	r3
  40235a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40235c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40235e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402362:	d10a      	bne.n	40237a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  402364:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402366:	2b00      	cmp	r3, #0
  402368:	d0ef      	beq.n	40234a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40236a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40236e:	4b06      	ldr	r3, [pc, #24]	; (402388 <prvNotifyQueueSetContainer+0x84>)
  402370:	4798      	blx	r3
  402372:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  402374:	bf18      	it	ne
  402376:	2501      	movne	r5, #1
  402378:	e7e7      	b.n	40234a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40237a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40237c:	3301      	adds	r3, #1
  40237e:	64a3      	str	r3, [r4, #72]	; 0x48
  402380:	e7e3      	b.n	40234a <prvNotifyQueueSetContainer+0x46>
  402382:	bf00      	nop
  402384:	0040227d 	.word	0x0040227d
  402388:	00403375 	.word	0x00403375

0040238c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40238c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40238e:	b172      	cbz	r2, 4023ae <prvCopyDataFromQueue+0x22>
{
  402390:	b510      	push	{r4, lr}
  402392:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402394:	68c4      	ldr	r4, [r0, #12]
  402396:	4414      	add	r4, r2
  402398:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40239a:	6840      	ldr	r0, [r0, #4]
  40239c:	4284      	cmp	r4, r0
  40239e:	d301      	bcc.n	4023a4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4023a0:	6818      	ldr	r0, [r3, #0]
  4023a2:	60d8      	str	r0, [r3, #12]
  4023a4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4023a6:	68d9      	ldr	r1, [r3, #12]
  4023a8:	4b01      	ldr	r3, [pc, #4]	; (4023b0 <prvCopyDataFromQueue+0x24>)
  4023aa:	4798      	blx	r3
  4023ac:	bd10      	pop	{r4, pc}
  4023ae:	4770      	bx	lr
  4023b0:	00407335 	.word	0x00407335

004023b4 <prvUnlockQueue>:
{
  4023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023b6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4023b8:	4b22      	ldr	r3, [pc, #136]	; (402444 <prvUnlockQueue+0x90>)
  4023ba:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4023bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023be:	2b00      	cmp	r3, #0
  4023c0:	dd1b      	ble.n	4023fa <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4023c2:	4d21      	ldr	r5, [pc, #132]	; (402448 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4023c4:	4f21      	ldr	r7, [pc, #132]	; (40244c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4023c6:	4e22      	ldr	r6, [pc, #136]	; (402450 <prvUnlockQueue+0x9c>)
  4023c8:	e00b      	b.n	4023e2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4023ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4023cc:	b1ab      	cbz	r3, 4023fa <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4023ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4023d2:	47b0      	blx	r6
  4023d4:	b978      	cbnz	r0, 4023f6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4023d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023d8:	3b01      	subs	r3, #1
  4023da:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4023dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023de:	2b00      	cmp	r3, #0
  4023e0:	dd0b      	ble.n	4023fa <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4023e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	d0f0      	beq.n	4023ca <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4023e8:	2100      	movs	r1, #0
  4023ea:	4620      	mov	r0, r4
  4023ec:	47a8      	blx	r5
  4023ee:	2801      	cmp	r0, #1
  4023f0:	d1f1      	bne.n	4023d6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4023f2:	47b8      	blx	r7
  4023f4:	e7ef      	b.n	4023d6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4023f6:	47b8      	blx	r7
  4023f8:	e7ed      	b.n	4023d6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4023fa:	f04f 33ff 	mov.w	r3, #4294967295
  4023fe:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402400:	4b14      	ldr	r3, [pc, #80]	; (402454 <prvUnlockQueue+0xa0>)
  402402:	4798      	blx	r3
	taskENTER_CRITICAL();
  402404:	4b0f      	ldr	r3, [pc, #60]	; (402444 <prvUnlockQueue+0x90>)
  402406:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402408:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40240a:	2b00      	cmp	r3, #0
  40240c:	dd14      	ble.n	402438 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40240e:	6923      	ldr	r3, [r4, #16]
  402410:	b193      	cbz	r3, 402438 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402412:	f104 0610 	add.w	r6, r4, #16
  402416:	4d0e      	ldr	r5, [pc, #56]	; (402450 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402418:	4f0c      	ldr	r7, [pc, #48]	; (40244c <prvUnlockQueue+0x98>)
  40241a:	e007      	b.n	40242c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  40241c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40241e:	3b01      	subs	r3, #1
  402420:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402422:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402424:	2b00      	cmp	r3, #0
  402426:	dd07      	ble.n	402438 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402428:	6923      	ldr	r3, [r4, #16]
  40242a:	b12b      	cbz	r3, 402438 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40242c:	4630      	mov	r0, r6
  40242e:	47a8      	blx	r5
  402430:	2800      	cmp	r0, #0
  402432:	d0f3      	beq.n	40241c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  402434:	47b8      	blx	r7
  402436:	e7f1      	b.n	40241c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  402438:	f04f 33ff 	mov.w	r3, #4294967295
  40243c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40243e:	4b05      	ldr	r3, [pc, #20]	; (402454 <prvUnlockQueue+0xa0>)
  402440:	4798      	blx	r3
  402442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402444:	00401fcd 	.word	0x00401fcd
  402448:	00402305 	.word	0x00402305
  40244c:	004034d1 	.word	0x004034d1
  402450:	00403375 	.word	0x00403375
  402454:	00402019 	.word	0x00402019

00402458 <xQueueGenericReset>:
{
  402458:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40245a:	b308      	cbz	r0, 4024a0 <xQueueGenericReset+0x48>
  40245c:	4604      	mov	r4, r0
  40245e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402460:	4b1d      	ldr	r3, [pc, #116]	; (4024d8 <xQueueGenericReset+0x80>)
  402462:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402464:	6822      	ldr	r2, [r4, #0]
  402466:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40246a:	fb03 f301 	mul.w	r3, r3, r1
  40246e:	18d0      	adds	r0, r2, r3
  402470:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  402472:	2000      	movs	r0, #0
  402474:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  402476:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402478:	1a5b      	subs	r3, r3, r1
  40247a:	4413      	add	r3, r2
  40247c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40247e:	f04f 33ff 	mov.w	r3, #4294967295
  402482:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402484:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  402486:	b9fd      	cbnz	r5, 4024c8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402488:	6923      	ldr	r3, [r4, #16]
  40248a:	b12b      	cbz	r3, 402498 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40248c:	f104 0010 	add.w	r0, r4, #16
  402490:	4b12      	ldr	r3, [pc, #72]	; (4024dc <xQueueGenericReset+0x84>)
  402492:	4798      	blx	r3
  402494:	2801      	cmp	r0, #1
  402496:	d00e      	beq.n	4024b6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402498:	4b11      	ldr	r3, [pc, #68]	; (4024e0 <xQueueGenericReset+0x88>)
  40249a:	4798      	blx	r3
}
  40249c:	2001      	movs	r0, #1
  40249e:	bd38      	pop	{r3, r4, r5, pc}
  4024a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024a4:	b672      	cpsid	i
  4024a6:	f383 8811 	msr	BASEPRI, r3
  4024aa:	f3bf 8f6f 	isb	sy
  4024ae:	f3bf 8f4f 	dsb	sy
  4024b2:	b662      	cpsie	i
  4024b4:	e7fe      	b.n	4024b4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4024b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024ba:	4b0a      	ldr	r3, [pc, #40]	; (4024e4 <xQueueGenericReset+0x8c>)
  4024bc:	601a      	str	r2, [r3, #0]
  4024be:	f3bf 8f4f 	dsb	sy
  4024c2:	f3bf 8f6f 	isb	sy
  4024c6:	e7e7      	b.n	402498 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4024c8:	f104 0010 	add.w	r0, r4, #16
  4024cc:	4d06      	ldr	r5, [pc, #24]	; (4024e8 <xQueueGenericReset+0x90>)
  4024ce:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4024d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4024d4:	47a8      	blx	r5
  4024d6:	e7df      	b.n	402498 <xQueueGenericReset+0x40>
  4024d8:	00401fcd 	.word	0x00401fcd
  4024dc:	00403375 	.word	0x00403375
  4024e0:	00402019 	.word	0x00402019
  4024e4:	e000ed04 	.word	0xe000ed04
  4024e8:	00401e81 	.word	0x00401e81

004024ec <xQueueGenericCreate>:
{
  4024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4024ee:	b950      	cbnz	r0, 402506 <xQueueGenericCreate+0x1a>
  4024f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024f4:	b672      	cpsid	i
  4024f6:	f383 8811 	msr	BASEPRI, r3
  4024fa:	f3bf 8f6f 	isb	sy
  4024fe:	f3bf 8f4f 	dsb	sy
  402502:	b662      	cpsie	i
  402504:	e7fe      	b.n	402504 <xQueueGenericCreate+0x18>
  402506:	4606      	mov	r6, r0
  402508:	4617      	mov	r7, r2
  40250a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  40250c:	b189      	cbz	r1, 402532 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40250e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402512:	3059      	adds	r0, #89	; 0x59
  402514:	4b12      	ldr	r3, [pc, #72]	; (402560 <xQueueGenericCreate+0x74>)
  402516:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402518:	4604      	mov	r4, r0
  40251a:	b9e8      	cbnz	r0, 402558 <xQueueGenericCreate+0x6c>
  40251c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402520:	b672      	cpsid	i
  402522:	f383 8811 	msr	BASEPRI, r3
  402526:	f3bf 8f6f 	isb	sy
  40252a:	f3bf 8f4f 	dsb	sy
  40252e:	b662      	cpsie	i
  402530:	e7fe      	b.n	402530 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402532:	2058      	movs	r0, #88	; 0x58
  402534:	4b0a      	ldr	r3, [pc, #40]	; (402560 <xQueueGenericCreate+0x74>)
  402536:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402538:	4604      	mov	r4, r0
  40253a:	2800      	cmp	r0, #0
  40253c:	d0ee      	beq.n	40251c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40253e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402540:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  402542:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402544:	2101      	movs	r1, #1
  402546:	4620      	mov	r0, r4
  402548:	4b06      	ldr	r3, [pc, #24]	; (402564 <xQueueGenericCreate+0x78>)
  40254a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40254c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402550:	2300      	movs	r3, #0
  402552:	6563      	str	r3, [r4, #84]	; 0x54
}
  402554:	4620      	mov	r0, r4
  402556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402558:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40255c:	6003      	str	r3, [r0, #0]
  40255e:	e7ef      	b.n	402540 <xQueueGenericCreate+0x54>
  402560:	00402229 	.word	0x00402229
  402564:	00402459 	.word	0x00402459

00402568 <xQueueGenericSend>:
{
  402568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40256c:	b085      	sub	sp, #20
  40256e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402570:	b1b8      	cbz	r0, 4025a2 <xQueueGenericSend+0x3a>
  402572:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402574:	b301      	cbz	r1, 4025b8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402576:	2b02      	cmp	r3, #2
  402578:	d02c      	beq.n	4025d4 <xQueueGenericSend+0x6c>
  40257a:	461d      	mov	r5, r3
  40257c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40257e:	4b66      	ldr	r3, [pc, #408]	; (402718 <xQueueGenericSend+0x1b0>)
  402580:	4798      	blx	r3
  402582:	2800      	cmp	r0, #0
  402584:	d134      	bne.n	4025f0 <xQueueGenericSend+0x88>
  402586:	9b01      	ldr	r3, [sp, #4]
  402588:	2b00      	cmp	r3, #0
  40258a:	d038      	beq.n	4025fe <xQueueGenericSend+0x96>
  40258c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402590:	b672      	cpsid	i
  402592:	f383 8811 	msr	BASEPRI, r3
  402596:	f3bf 8f6f 	isb	sy
  40259a:	f3bf 8f4f 	dsb	sy
  40259e:	b662      	cpsie	i
  4025a0:	e7fe      	b.n	4025a0 <xQueueGenericSend+0x38>
  4025a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025a6:	b672      	cpsid	i
  4025a8:	f383 8811 	msr	BASEPRI, r3
  4025ac:	f3bf 8f6f 	isb	sy
  4025b0:	f3bf 8f4f 	dsb	sy
  4025b4:	b662      	cpsie	i
  4025b6:	e7fe      	b.n	4025b6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4025b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4025ba:	2a00      	cmp	r2, #0
  4025bc:	d0db      	beq.n	402576 <xQueueGenericSend+0xe>
  4025be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025c2:	b672      	cpsid	i
  4025c4:	f383 8811 	msr	BASEPRI, r3
  4025c8:	f3bf 8f6f 	isb	sy
  4025cc:	f3bf 8f4f 	dsb	sy
  4025d0:	b662      	cpsie	i
  4025d2:	e7fe      	b.n	4025d2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4025d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4025d6:	2a01      	cmp	r2, #1
  4025d8:	d0cf      	beq.n	40257a <xQueueGenericSend+0x12>
  4025da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025de:	b672      	cpsid	i
  4025e0:	f383 8811 	msr	BASEPRI, r3
  4025e4:	f3bf 8f6f 	isb	sy
  4025e8:	f3bf 8f4f 	dsb	sy
  4025ec:	b662      	cpsie	i
  4025ee:	e7fe      	b.n	4025ee <xQueueGenericSend+0x86>
  4025f0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4025f2:	4e4a      	ldr	r6, [pc, #296]	; (40271c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4025f4:	f8df a150 	ldr.w	sl, [pc, #336]	; 402748 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4025f8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402728 <xQueueGenericSend+0x1c0>
  4025fc:	e042      	b.n	402684 <xQueueGenericSend+0x11c>
  4025fe:	2700      	movs	r7, #0
  402600:	e7f7      	b.n	4025f2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402602:	462a      	mov	r2, r5
  402604:	4641      	mov	r1, r8
  402606:	4620      	mov	r0, r4
  402608:	4b45      	ldr	r3, [pc, #276]	; (402720 <xQueueGenericSend+0x1b8>)
  40260a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40260c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40260e:	b19b      	cbz	r3, 402638 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402610:	4629      	mov	r1, r5
  402612:	4620      	mov	r0, r4
  402614:	4b43      	ldr	r3, [pc, #268]	; (402724 <xQueueGenericSend+0x1bc>)
  402616:	4798      	blx	r3
  402618:	2801      	cmp	r0, #1
  40261a:	d107      	bne.n	40262c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40261c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402620:	4b41      	ldr	r3, [pc, #260]	; (402728 <xQueueGenericSend+0x1c0>)
  402622:	601a      	str	r2, [r3, #0]
  402624:	f3bf 8f4f 	dsb	sy
  402628:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40262c:	4b3f      	ldr	r3, [pc, #252]	; (40272c <xQueueGenericSend+0x1c4>)
  40262e:	4798      	blx	r3
				return pdPASS;
  402630:	2001      	movs	r0, #1
}
  402632:	b005      	add	sp, #20
  402634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402638:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40263a:	b173      	cbz	r3, 40265a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40263c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402640:	4b3b      	ldr	r3, [pc, #236]	; (402730 <xQueueGenericSend+0x1c8>)
  402642:	4798      	blx	r3
  402644:	2801      	cmp	r0, #1
  402646:	d1f1      	bne.n	40262c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40264c:	4b36      	ldr	r3, [pc, #216]	; (402728 <xQueueGenericSend+0x1c0>)
  40264e:	601a      	str	r2, [r3, #0]
  402650:	f3bf 8f4f 	dsb	sy
  402654:	f3bf 8f6f 	isb	sy
  402658:	e7e8      	b.n	40262c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40265a:	2800      	cmp	r0, #0
  40265c:	d0e6      	beq.n	40262c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402662:	4b31      	ldr	r3, [pc, #196]	; (402728 <xQueueGenericSend+0x1c0>)
  402664:	601a      	str	r2, [r3, #0]
  402666:	f3bf 8f4f 	dsb	sy
  40266a:	f3bf 8f6f 	isb	sy
  40266e:	e7dd      	b.n	40262c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402670:	4b2e      	ldr	r3, [pc, #184]	; (40272c <xQueueGenericSend+0x1c4>)
  402672:	4798      	blx	r3
					return errQUEUE_FULL;
  402674:	2000      	movs	r0, #0
  402676:	e7dc      	b.n	402632 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402678:	4620      	mov	r0, r4
  40267a:	4b2e      	ldr	r3, [pc, #184]	; (402734 <xQueueGenericSend+0x1cc>)
  40267c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40267e:	4b2e      	ldr	r3, [pc, #184]	; (402738 <xQueueGenericSend+0x1d0>)
  402680:	4798      	blx	r3
  402682:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402684:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402686:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40268a:	429a      	cmp	r2, r3
  40268c:	d3b9      	bcc.n	402602 <xQueueGenericSend+0x9a>
  40268e:	2d02      	cmp	r5, #2
  402690:	d0b7      	beq.n	402602 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402692:	9b01      	ldr	r3, [sp, #4]
  402694:	2b00      	cmp	r3, #0
  402696:	d0eb      	beq.n	402670 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402698:	b90f      	cbnz	r7, 40269e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40269a:	a802      	add	r0, sp, #8
  40269c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40269e:	4b23      	ldr	r3, [pc, #140]	; (40272c <xQueueGenericSend+0x1c4>)
  4026a0:	4798      	blx	r3
		vTaskSuspendAll();
  4026a2:	4b26      	ldr	r3, [pc, #152]	; (40273c <xQueueGenericSend+0x1d4>)
  4026a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4026a6:	47b0      	blx	r6
  4026a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026ae:	d101      	bne.n	4026b4 <xQueueGenericSend+0x14c>
  4026b0:	2300      	movs	r3, #0
  4026b2:	6463      	str	r3, [r4, #68]	; 0x44
  4026b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026ba:	d101      	bne.n	4026c0 <xQueueGenericSend+0x158>
  4026bc:	2300      	movs	r3, #0
  4026be:	64a3      	str	r3, [r4, #72]	; 0x48
  4026c0:	4b1a      	ldr	r3, [pc, #104]	; (40272c <xQueueGenericSend+0x1c4>)
  4026c2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4026c4:	a901      	add	r1, sp, #4
  4026c6:	a802      	add	r0, sp, #8
  4026c8:	4b1d      	ldr	r3, [pc, #116]	; (402740 <xQueueGenericSend+0x1d8>)
  4026ca:	4798      	blx	r3
  4026cc:	b9e0      	cbnz	r0, 402708 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4026ce:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4026d0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4026d4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4026d6:	4b15      	ldr	r3, [pc, #84]	; (40272c <xQueueGenericSend+0x1c4>)
  4026d8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4026da:	45bb      	cmp	fp, r7
  4026dc:	d1cc      	bne.n	402678 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4026de:	9901      	ldr	r1, [sp, #4]
  4026e0:	f104 0010 	add.w	r0, r4, #16
  4026e4:	4b17      	ldr	r3, [pc, #92]	; (402744 <xQueueGenericSend+0x1dc>)
  4026e6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4026e8:	4620      	mov	r0, r4
  4026ea:	4b12      	ldr	r3, [pc, #72]	; (402734 <xQueueGenericSend+0x1cc>)
  4026ec:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4026ee:	4b12      	ldr	r3, [pc, #72]	; (402738 <xQueueGenericSend+0x1d0>)
  4026f0:	4798      	blx	r3
  4026f2:	2800      	cmp	r0, #0
  4026f4:	d1c5      	bne.n	402682 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4026f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4026fa:	f8c9 3000 	str.w	r3, [r9]
  4026fe:	f3bf 8f4f 	dsb	sy
  402702:	f3bf 8f6f 	isb	sy
  402706:	e7bc      	b.n	402682 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402708:	4620      	mov	r0, r4
  40270a:	4b0a      	ldr	r3, [pc, #40]	; (402734 <xQueueGenericSend+0x1cc>)
  40270c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40270e:	4b0a      	ldr	r3, [pc, #40]	; (402738 <xQueueGenericSend+0x1d0>)
  402710:	4798      	blx	r3
			return errQUEUE_FULL;
  402712:	2000      	movs	r0, #0
  402714:	e78d      	b.n	402632 <xQueueGenericSend+0xca>
  402716:	bf00      	nop
  402718:	004034dd 	.word	0x004034dd
  40271c:	00401fcd 	.word	0x00401fcd
  402720:	0040227d 	.word	0x0040227d
  402724:	00402305 	.word	0x00402305
  402728:	e000ed04 	.word	0xe000ed04
  40272c:	00402019 	.word	0x00402019
  402730:	00403375 	.word	0x00403375
  402734:	004023b5 	.word	0x004023b5
  402738:	00402f59 	.word	0x00402f59
  40273c:	00402df1 	.word	0x00402df1
  402740:	0040343d 	.word	0x0040343d
  402744:	00403271 	.word	0x00403271
  402748:	0040340d 	.word	0x0040340d

0040274c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  40274c:	2800      	cmp	r0, #0
  40274e:	d036      	beq.n	4027be <xQueueGenericSendFromISR+0x72>
{
  402750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402754:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402756:	2900      	cmp	r1, #0
  402758:	d03c      	beq.n	4027d4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40275a:	2b02      	cmp	r3, #2
  40275c:	d048      	beq.n	4027f0 <xQueueGenericSendFromISR+0xa4>
  40275e:	461e      	mov	r6, r3
  402760:	4615      	mov	r5, r2
  402762:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402764:	4b35      	ldr	r3, [pc, #212]	; (40283c <xQueueGenericSendFromISR+0xf0>)
  402766:	4798      	blx	r3
	__asm volatile
  402768:	f3ef 8711 	mrs	r7, BASEPRI
  40276c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402770:	b672      	cpsid	i
  402772:	f383 8811 	msr	BASEPRI, r3
  402776:	f3bf 8f6f 	isb	sy
  40277a:	f3bf 8f4f 	dsb	sy
  40277e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402784:	429a      	cmp	r2, r3
  402786:	d301      	bcc.n	40278c <xQueueGenericSendFromISR+0x40>
  402788:	2e02      	cmp	r6, #2
  40278a:	d14f      	bne.n	40282c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40278c:	4632      	mov	r2, r6
  40278e:	4641      	mov	r1, r8
  402790:	4620      	mov	r0, r4
  402792:	4b2b      	ldr	r3, [pc, #172]	; (402840 <xQueueGenericSendFromISR+0xf4>)
  402794:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402796:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402798:	f1b3 3fff 	cmp.w	r3, #4294967295
  40279c:	d141      	bne.n	402822 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40279e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	d033      	beq.n	40280c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4027a4:	4631      	mov	r1, r6
  4027a6:	4620      	mov	r0, r4
  4027a8:	4b26      	ldr	r3, [pc, #152]	; (402844 <xQueueGenericSendFromISR+0xf8>)
  4027aa:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4027ac:	2d00      	cmp	r5, #0
  4027ae:	d03f      	beq.n	402830 <xQueueGenericSendFromISR+0xe4>
  4027b0:	2801      	cmp	r0, #1
  4027b2:	d13d      	bne.n	402830 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4027b4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4027b6:	f387 8811 	msr	BASEPRI, r7
}
  4027ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4027be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027c2:	b672      	cpsid	i
  4027c4:	f383 8811 	msr	BASEPRI, r3
  4027c8:	f3bf 8f6f 	isb	sy
  4027cc:	f3bf 8f4f 	dsb	sy
  4027d0:	b662      	cpsie	i
  4027d2:	e7fe      	b.n	4027d2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4027d6:	2800      	cmp	r0, #0
  4027d8:	d0bf      	beq.n	40275a <xQueueGenericSendFromISR+0xe>
  4027da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027de:	b672      	cpsid	i
  4027e0:	f383 8811 	msr	BASEPRI, r3
  4027e4:	f3bf 8f6f 	isb	sy
  4027e8:	f3bf 8f4f 	dsb	sy
  4027ec:	b662      	cpsie	i
  4027ee:	e7fe      	b.n	4027ee <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4027f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4027f2:	2801      	cmp	r0, #1
  4027f4:	d0b3      	beq.n	40275e <xQueueGenericSendFromISR+0x12>
  4027f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027fa:	b672      	cpsid	i
  4027fc:	f383 8811 	msr	BASEPRI, r3
  402800:	f3bf 8f6f 	isb	sy
  402804:	f3bf 8f4f 	dsb	sy
  402808:	b662      	cpsie	i
  40280a:	e7fe      	b.n	40280a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40280c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40280e:	b18b      	cbz	r3, 402834 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402810:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402814:	4b0c      	ldr	r3, [pc, #48]	; (402848 <xQueueGenericSendFromISR+0xfc>)
  402816:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402818:	b175      	cbz	r5, 402838 <xQueueGenericSendFromISR+0xec>
  40281a:	b168      	cbz	r0, 402838 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40281c:	2001      	movs	r0, #1
  40281e:	6028      	str	r0, [r5, #0]
  402820:	e7c9      	b.n	4027b6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402822:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402824:	3301      	adds	r3, #1
  402826:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402828:	2001      	movs	r0, #1
  40282a:	e7c4      	b.n	4027b6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  40282c:	2000      	movs	r0, #0
  40282e:	e7c2      	b.n	4027b6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402830:	2001      	movs	r0, #1
  402832:	e7c0      	b.n	4027b6 <xQueueGenericSendFromISR+0x6a>
  402834:	2001      	movs	r0, #1
  402836:	e7be      	b.n	4027b6 <xQueueGenericSendFromISR+0x6a>
  402838:	2001      	movs	r0, #1
  40283a:	e7bc      	b.n	4027b6 <xQueueGenericSendFromISR+0x6a>
  40283c:	004021c5 	.word	0x004021c5
  402840:	0040227d 	.word	0x0040227d
  402844:	00402305 	.word	0x00402305
  402848:	00403375 	.word	0x00403375

0040284c <xQueueGenericReceive>:
{
  40284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402850:	b084      	sub	sp, #16
  402852:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402854:	b198      	cbz	r0, 40287e <xQueueGenericReceive+0x32>
  402856:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402858:	b1e1      	cbz	r1, 402894 <xQueueGenericReceive+0x48>
  40285a:	4698      	mov	r8, r3
  40285c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40285e:	4b61      	ldr	r3, [pc, #388]	; (4029e4 <xQueueGenericReceive+0x198>)
  402860:	4798      	blx	r3
  402862:	bb28      	cbnz	r0, 4028b0 <xQueueGenericReceive+0x64>
  402864:	9b01      	ldr	r3, [sp, #4]
  402866:	b353      	cbz	r3, 4028be <xQueueGenericReceive+0x72>
  402868:	f04f 0380 	mov.w	r3, #128	; 0x80
  40286c:	b672      	cpsid	i
  40286e:	f383 8811 	msr	BASEPRI, r3
  402872:	f3bf 8f6f 	isb	sy
  402876:	f3bf 8f4f 	dsb	sy
  40287a:	b662      	cpsie	i
  40287c:	e7fe      	b.n	40287c <xQueueGenericReceive+0x30>
  40287e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402882:	b672      	cpsid	i
  402884:	f383 8811 	msr	BASEPRI, r3
  402888:	f3bf 8f6f 	isb	sy
  40288c:	f3bf 8f4f 	dsb	sy
  402890:	b662      	cpsie	i
  402892:	e7fe      	b.n	402892 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402894:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402896:	2a00      	cmp	r2, #0
  402898:	d0df      	beq.n	40285a <xQueueGenericReceive+0xe>
  40289a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40289e:	b672      	cpsid	i
  4028a0:	f383 8811 	msr	BASEPRI, r3
  4028a4:	f3bf 8f6f 	isb	sy
  4028a8:	f3bf 8f4f 	dsb	sy
  4028ac:	b662      	cpsie	i
  4028ae:	e7fe      	b.n	4028ae <xQueueGenericReceive+0x62>
  4028b0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4028b2:	4d4d      	ldr	r5, [pc, #308]	; (4029e8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  4028b4:	f8df a160 	ldr.w	sl, [pc, #352]	; 402a18 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4028b8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4029f8 <xQueueGenericReceive+0x1ac>
  4028bc:	e04b      	b.n	402956 <xQueueGenericReceive+0x10a>
  4028be:	2600      	movs	r6, #0
  4028c0:	e7f7      	b.n	4028b2 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4028c2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4028c4:	4639      	mov	r1, r7
  4028c6:	4620      	mov	r0, r4
  4028c8:	4b48      	ldr	r3, [pc, #288]	; (4029ec <xQueueGenericReceive+0x1a0>)
  4028ca:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4028cc:	f1b8 0f00 	cmp.w	r8, #0
  4028d0:	d11d      	bne.n	40290e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4028d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4028d4:	3b01      	subs	r3, #1
  4028d6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4028d8:	6823      	ldr	r3, [r4, #0]
  4028da:	b913      	cbnz	r3, 4028e2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4028dc:	4b44      	ldr	r3, [pc, #272]	; (4029f0 <xQueueGenericReceive+0x1a4>)
  4028de:	4798      	blx	r3
  4028e0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4028e2:	6923      	ldr	r3, [r4, #16]
  4028e4:	b16b      	cbz	r3, 402902 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4028e6:	f104 0010 	add.w	r0, r4, #16
  4028ea:	4b42      	ldr	r3, [pc, #264]	; (4029f4 <xQueueGenericReceive+0x1a8>)
  4028ec:	4798      	blx	r3
  4028ee:	2801      	cmp	r0, #1
  4028f0:	d107      	bne.n	402902 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4028f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4028f6:	4b40      	ldr	r3, [pc, #256]	; (4029f8 <xQueueGenericReceive+0x1ac>)
  4028f8:	601a      	str	r2, [r3, #0]
  4028fa:	f3bf 8f4f 	dsb	sy
  4028fe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402902:	4b3e      	ldr	r3, [pc, #248]	; (4029fc <xQueueGenericReceive+0x1b0>)
  402904:	4798      	blx	r3
				return pdPASS;
  402906:	2001      	movs	r0, #1
}
  402908:	b004      	add	sp, #16
  40290a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40290e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402910:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402912:	2b00      	cmp	r3, #0
  402914:	d0f5      	beq.n	402902 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402916:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40291a:	4b36      	ldr	r3, [pc, #216]	; (4029f4 <xQueueGenericReceive+0x1a8>)
  40291c:	4798      	blx	r3
  40291e:	2800      	cmp	r0, #0
  402920:	d0ef      	beq.n	402902 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402926:	4b34      	ldr	r3, [pc, #208]	; (4029f8 <xQueueGenericReceive+0x1ac>)
  402928:	601a      	str	r2, [r3, #0]
  40292a:	f3bf 8f4f 	dsb	sy
  40292e:	f3bf 8f6f 	isb	sy
  402932:	e7e6      	b.n	402902 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402934:	4b31      	ldr	r3, [pc, #196]	; (4029fc <xQueueGenericReceive+0x1b0>)
  402936:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402938:	2000      	movs	r0, #0
  40293a:	e7e5      	b.n	402908 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  40293c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40293e:	6860      	ldr	r0, [r4, #4]
  402940:	4b2f      	ldr	r3, [pc, #188]	; (402a00 <xQueueGenericReceive+0x1b4>)
  402942:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402944:	4b2d      	ldr	r3, [pc, #180]	; (4029fc <xQueueGenericReceive+0x1b0>)
  402946:	4798      	blx	r3
  402948:	e030      	b.n	4029ac <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40294a:	4620      	mov	r0, r4
  40294c:	4b2d      	ldr	r3, [pc, #180]	; (402a04 <xQueueGenericReceive+0x1b8>)
  40294e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402950:	4b2d      	ldr	r3, [pc, #180]	; (402a08 <xQueueGenericReceive+0x1bc>)
  402952:	4798      	blx	r3
  402954:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402956:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40295a:	2b00      	cmp	r3, #0
  40295c:	d1b1      	bne.n	4028c2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40295e:	9b01      	ldr	r3, [sp, #4]
  402960:	2b00      	cmp	r3, #0
  402962:	d0e7      	beq.n	402934 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402964:	b90e      	cbnz	r6, 40296a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402966:	a802      	add	r0, sp, #8
  402968:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40296a:	4b24      	ldr	r3, [pc, #144]	; (4029fc <xQueueGenericReceive+0x1b0>)
  40296c:	4798      	blx	r3
		vTaskSuspendAll();
  40296e:	4b27      	ldr	r3, [pc, #156]	; (402a0c <xQueueGenericReceive+0x1c0>)
  402970:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402972:	47a8      	blx	r5
  402974:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402976:	f1b3 3fff 	cmp.w	r3, #4294967295
  40297a:	d101      	bne.n	402980 <xQueueGenericReceive+0x134>
  40297c:	2300      	movs	r3, #0
  40297e:	6463      	str	r3, [r4, #68]	; 0x44
  402980:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402982:	f1b3 3fff 	cmp.w	r3, #4294967295
  402986:	d101      	bne.n	40298c <xQueueGenericReceive+0x140>
  402988:	2300      	movs	r3, #0
  40298a:	64a3      	str	r3, [r4, #72]	; 0x48
  40298c:	4b1b      	ldr	r3, [pc, #108]	; (4029fc <xQueueGenericReceive+0x1b0>)
  40298e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402990:	a901      	add	r1, sp, #4
  402992:	a802      	add	r0, sp, #8
  402994:	4b1e      	ldr	r3, [pc, #120]	; (402a10 <xQueueGenericReceive+0x1c4>)
  402996:	4798      	blx	r3
  402998:	b9e8      	cbnz	r0, 4029d6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40299a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40299c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40299e:	4b17      	ldr	r3, [pc, #92]	; (4029fc <xQueueGenericReceive+0x1b0>)
  4029a0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4029a2:	2e00      	cmp	r6, #0
  4029a4:	d1d1      	bne.n	40294a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4029a6:	6823      	ldr	r3, [r4, #0]
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d0c7      	beq.n	40293c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4029ac:	9901      	ldr	r1, [sp, #4]
  4029ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4029b2:	4b18      	ldr	r3, [pc, #96]	; (402a14 <xQueueGenericReceive+0x1c8>)
  4029b4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4029b6:	4620      	mov	r0, r4
  4029b8:	4b12      	ldr	r3, [pc, #72]	; (402a04 <xQueueGenericReceive+0x1b8>)
  4029ba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4029bc:	4b12      	ldr	r3, [pc, #72]	; (402a08 <xQueueGenericReceive+0x1bc>)
  4029be:	4798      	blx	r3
  4029c0:	2800      	cmp	r0, #0
  4029c2:	d1c7      	bne.n	402954 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4029c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4029c8:	f8c9 3000 	str.w	r3, [r9]
  4029cc:	f3bf 8f4f 	dsb	sy
  4029d0:	f3bf 8f6f 	isb	sy
  4029d4:	e7be      	b.n	402954 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4029d6:	4620      	mov	r0, r4
  4029d8:	4b0a      	ldr	r3, [pc, #40]	; (402a04 <xQueueGenericReceive+0x1b8>)
  4029da:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4029dc:	4b0a      	ldr	r3, [pc, #40]	; (402a08 <xQueueGenericReceive+0x1bc>)
  4029de:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4029e0:	2000      	movs	r0, #0
  4029e2:	e791      	b.n	402908 <xQueueGenericReceive+0xbc>
  4029e4:	004034dd 	.word	0x004034dd
  4029e8:	00401fcd 	.word	0x00401fcd
  4029ec:	0040238d 	.word	0x0040238d
  4029f0:	0040365d 	.word	0x0040365d
  4029f4:	00403375 	.word	0x00403375
  4029f8:	e000ed04 	.word	0xe000ed04
  4029fc:	00402019 	.word	0x00402019
  402a00:	004034fd 	.word	0x004034fd
  402a04:	004023b5 	.word	0x004023b5
  402a08:	00402f59 	.word	0x00402f59
  402a0c:	00402df1 	.word	0x00402df1
  402a10:	0040343d 	.word	0x0040343d
  402a14:	00403271 	.word	0x00403271
  402a18:	0040340d 	.word	0x0040340d

00402a1c <vQueueAddToRegistry>:
	{
  402a1c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402a1e:	4b0b      	ldr	r3, [pc, #44]	; (402a4c <vQueueAddToRegistry+0x30>)
  402a20:	681b      	ldr	r3, [r3, #0]
  402a22:	b153      	cbz	r3, 402a3a <vQueueAddToRegistry+0x1e>
  402a24:	2301      	movs	r3, #1
  402a26:	4c09      	ldr	r4, [pc, #36]	; (402a4c <vQueueAddToRegistry+0x30>)
  402a28:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402a2c:	b132      	cbz	r2, 402a3c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402a2e:	3301      	adds	r3, #1
  402a30:	2b08      	cmp	r3, #8
  402a32:	d1f9      	bne.n	402a28 <vQueueAddToRegistry+0xc>
	}
  402a34:	f85d 4b04 	ldr.w	r4, [sp], #4
  402a38:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402a3a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402a3c:	4a03      	ldr	r2, [pc, #12]	; (402a4c <vQueueAddToRegistry+0x30>)
  402a3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402a42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402a46:	6058      	str	r0, [r3, #4]
				break;
  402a48:	e7f4      	b.n	402a34 <vQueueAddToRegistry+0x18>
  402a4a:	bf00      	nop
  402a4c:	20400df4 	.word	0x20400df4

00402a50 <vQueueWaitForMessageRestricted>:
	{
  402a50:	b570      	push	{r4, r5, r6, lr}
  402a52:	4604      	mov	r4, r0
  402a54:	460d      	mov	r5, r1
  402a56:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402a58:	4b0f      	ldr	r3, [pc, #60]	; (402a98 <vQueueWaitForMessageRestricted+0x48>)
  402a5a:	4798      	blx	r3
  402a5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a62:	d00b      	beq.n	402a7c <vQueueWaitForMessageRestricted+0x2c>
  402a64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a66:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a6a:	d00a      	beq.n	402a82 <vQueueWaitForMessageRestricted+0x32>
  402a6c:	4b0b      	ldr	r3, [pc, #44]	; (402a9c <vQueueWaitForMessageRestricted+0x4c>)
  402a6e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a72:	b14b      	cbz	r3, 402a88 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402a74:	4620      	mov	r0, r4
  402a76:	4b0a      	ldr	r3, [pc, #40]	; (402aa0 <vQueueWaitForMessageRestricted+0x50>)
  402a78:	4798      	blx	r3
  402a7a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402a7c:	2300      	movs	r3, #0
  402a7e:	6463      	str	r3, [r4, #68]	; 0x44
  402a80:	e7f0      	b.n	402a64 <vQueueWaitForMessageRestricted+0x14>
  402a82:	2300      	movs	r3, #0
  402a84:	64a3      	str	r3, [r4, #72]	; 0x48
  402a86:	e7f1      	b.n	402a6c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402a88:	4632      	mov	r2, r6
  402a8a:	4629      	mov	r1, r5
  402a8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a90:	4b04      	ldr	r3, [pc, #16]	; (402aa4 <vQueueWaitForMessageRestricted+0x54>)
  402a92:	4798      	blx	r3
  402a94:	e7ee      	b.n	402a74 <vQueueWaitForMessageRestricted+0x24>
  402a96:	bf00      	nop
  402a98:	00401fcd 	.word	0x00401fcd
  402a9c:	00402019 	.word	0x00402019
  402aa0:	004023b5 	.word	0x004023b5
  402aa4:	004032f5 	.word	0x004032f5

00402aa8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402aa8:	4b08      	ldr	r3, [pc, #32]	; (402acc <prvResetNextTaskUnblockTime+0x24>)
  402aaa:	681b      	ldr	r3, [r3, #0]
  402aac:	681b      	ldr	r3, [r3, #0]
  402aae:	b13b      	cbz	r3, 402ac0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402ab0:	4b06      	ldr	r3, [pc, #24]	; (402acc <prvResetNextTaskUnblockTime+0x24>)
  402ab2:	681b      	ldr	r3, [r3, #0]
  402ab4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402ab6:	68db      	ldr	r3, [r3, #12]
  402ab8:	685a      	ldr	r2, [r3, #4]
  402aba:	4b05      	ldr	r3, [pc, #20]	; (402ad0 <prvResetNextTaskUnblockTime+0x28>)
  402abc:	601a      	str	r2, [r3, #0]
  402abe:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402ac0:	f04f 32ff 	mov.w	r2, #4294967295
  402ac4:	4b02      	ldr	r3, [pc, #8]	; (402ad0 <prvResetNextTaskUnblockTime+0x28>)
  402ac6:	601a      	str	r2, [r3, #0]
  402ac8:	4770      	bx	lr
  402aca:	bf00      	nop
  402acc:	20400c80 	.word	0x20400c80
  402ad0:	20400d2c 	.word	0x20400d2c

00402ad4 <prvAddCurrentTaskToDelayedList>:
{
  402ad4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402ad6:	4b0f      	ldr	r3, [pc, #60]	; (402b14 <prvAddCurrentTaskToDelayedList+0x40>)
  402ad8:	681b      	ldr	r3, [r3, #0]
  402ada:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402adc:	4b0e      	ldr	r3, [pc, #56]	; (402b18 <prvAddCurrentTaskToDelayedList+0x44>)
  402ade:	681b      	ldr	r3, [r3, #0]
  402ae0:	4298      	cmp	r0, r3
  402ae2:	d30e      	bcc.n	402b02 <prvAddCurrentTaskToDelayedList+0x2e>
  402ae4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402ae6:	4b0d      	ldr	r3, [pc, #52]	; (402b1c <prvAddCurrentTaskToDelayedList+0x48>)
  402ae8:	6818      	ldr	r0, [r3, #0]
  402aea:	4b0a      	ldr	r3, [pc, #40]	; (402b14 <prvAddCurrentTaskToDelayedList+0x40>)
  402aec:	6819      	ldr	r1, [r3, #0]
  402aee:	3104      	adds	r1, #4
  402af0:	4b0b      	ldr	r3, [pc, #44]	; (402b20 <prvAddCurrentTaskToDelayedList+0x4c>)
  402af2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402af4:	4b0b      	ldr	r3, [pc, #44]	; (402b24 <prvAddCurrentTaskToDelayedList+0x50>)
  402af6:	681b      	ldr	r3, [r3, #0]
  402af8:	429c      	cmp	r4, r3
  402afa:	d201      	bcs.n	402b00 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402afc:	4b09      	ldr	r3, [pc, #36]	; (402b24 <prvAddCurrentTaskToDelayedList+0x50>)
  402afe:	601c      	str	r4, [r3, #0]
  402b00:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402b02:	4b09      	ldr	r3, [pc, #36]	; (402b28 <prvAddCurrentTaskToDelayedList+0x54>)
  402b04:	6818      	ldr	r0, [r3, #0]
  402b06:	4b03      	ldr	r3, [pc, #12]	; (402b14 <prvAddCurrentTaskToDelayedList+0x40>)
  402b08:	6819      	ldr	r1, [r3, #0]
  402b0a:	3104      	adds	r1, #4
  402b0c:	4b04      	ldr	r3, [pc, #16]	; (402b20 <prvAddCurrentTaskToDelayedList+0x4c>)
  402b0e:	4798      	blx	r3
  402b10:	bd10      	pop	{r4, pc}
  402b12:	bf00      	nop
  402b14:	20400c7c 	.word	0x20400c7c
  402b18:	20400d74 	.word	0x20400d74
  402b1c:	20400c80 	.word	0x20400c80
  402b20:	00401eb5 	.word	0x00401eb5
  402b24:	20400d2c 	.word	0x20400d2c
  402b28:	20400c84 	.word	0x20400c84

00402b2c <xTaskGenericCreate>:
{
  402b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b30:	b083      	sub	sp, #12
  402b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402b34:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402b38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402b3a:	b160      	cbz	r0, 402b56 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402b3c:	2d04      	cmp	r5, #4
  402b3e:	d915      	bls.n	402b6c <xTaskGenericCreate+0x40>
  402b40:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b44:	b672      	cpsid	i
  402b46:	f383 8811 	msr	BASEPRI, r3
  402b4a:	f3bf 8f6f 	isb	sy
  402b4e:	f3bf 8f4f 	dsb	sy
  402b52:	b662      	cpsie	i
  402b54:	e7fe      	b.n	402b54 <xTaskGenericCreate+0x28>
  402b56:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b5a:	b672      	cpsid	i
  402b5c:	f383 8811 	msr	BASEPRI, r3
  402b60:	f3bf 8f6f 	isb	sy
  402b64:	f3bf 8f4f 	dsb	sy
  402b68:	b662      	cpsie	i
  402b6a:	e7fe      	b.n	402b6a <xTaskGenericCreate+0x3e>
  402b6c:	9001      	str	r0, [sp, #4]
  402b6e:	4698      	mov	r8, r3
  402b70:	4691      	mov	r9, r2
  402b72:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b74:	b936      	cbnz	r6, 402b84 <xTaskGenericCreate+0x58>
  402b76:	0090      	lsls	r0, r2, #2
  402b78:	4b62      	ldr	r3, [pc, #392]	; (402d04 <xTaskGenericCreate+0x1d8>)
  402b7a:	4798      	blx	r3
		if( pxStack != NULL )
  402b7c:	4606      	mov	r6, r0
  402b7e:	2800      	cmp	r0, #0
  402b80:	f000 809e 	beq.w	402cc0 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402b84:	2058      	movs	r0, #88	; 0x58
  402b86:	4b5f      	ldr	r3, [pc, #380]	; (402d04 <xTaskGenericCreate+0x1d8>)
  402b88:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402b8a:	4604      	mov	r4, r0
  402b8c:	2800      	cmp	r0, #0
  402b8e:	f000 8094 	beq.w	402cba <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402b92:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402b94:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402b98:	21a5      	movs	r1, #165	; 0xa5
  402b9a:	4630      	mov	r0, r6
  402b9c:	4b5a      	ldr	r3, [pc, #360]	; (402d08 <xTaskGenericCreate+0x1dc>)
  402b9e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402ba0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402ba4:	444e      	add	r6, r9
  402ba6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402ba8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402bac:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402bb0:	783b      	ldrb	r3, [r7, #0]
  402bb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402bb6:	783b      	ldrb	r3, [r7, #0]
  402bb8:	2b00      	cmp	r3, #0
  402bba:	f040 8084 	bne.w	402cc6 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402bbe:	2700      	movs	r7, #0
  402bc0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402bc4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402bc6:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402bc8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402bca:	f104 0904 	add.w	r9, r4, #4
  402bce:	4648      	mov	r0, r9
  402bd0:	f8df b184 	ldr.w	fp, [pc, #388]	; 402d58 <xTaskGenericCreate+0x22c>
  402bd4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402bd6:	f104 0018 	add.w	r0, r4, #24
  402bda:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402bdc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bde:	f1c5 0305 	rsb	r3, r5, #5
  402be2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402be4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402be6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402be8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402bec:	4642      	mov	r2, r8
  402bee:	9901      	ldr	r1, [sp, #4]
  402bf0:	4630      	mov	r0, r6
  402bf2:	4b46      	ldr	r3, [pc, #280]	; (402d0c <xTaskGenericCreate+0x1e0>)
  402bf4:	4798      	blx	r3
  402bf6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402bf8:	f1ba 0f00 	cmp.w	sl, #0
  402bfc:	d001      	beq.n	402c02 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402bfe:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402c02:	4b43      	ldr	r3, [pc, #268]	; (402d10 <xTaskGenericCreate+0x1e4>)
  402c04:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402c06:	4a43      	ldr	r2, [pc, #268]	; (402d14 <xTaskGenericCreate+0x1e8>)
  402c08:	6813      	ldr	r3, [r2, #0]
  402c0a:	3301      	adds	r3, #1
  402c0c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402c0e:	4b42      	ldr	r3, [pc, #264]	; (402d18 <xTaskGenericCreate+0x1ec>)
  402c10:	681b      	ldr	r3, [r3, #0]
  402c12:	2b00      	cmp	r3, #0
  402c14:	d166      	bne.n	402ce4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402c16:	4b40      	ldr	r3, [pc, #256]	; (402d18 <xTaskGenericCreate+0x1ec>)
  402c18:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402c1a:	6813      	ldr	r3, [r2, #0]
  402c1c:	2b01      	cmp	r3, #1
  402c1e:	d121      	bne.n	402c64 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402c20:	4f3e      	ldr	r7, [pc, #248]	; (402d1c <xTaskGenericCreate+0x1f0>)
  402c22:	4638      	mov	r0, r7
  402c24:	4e3e      	ldr	r6, [pc, #248]	; (402d20 <xTaskGenericCreate+0x1f4>)
  402c26:	47b0      	blx	r6
  402c28:	f107 0014 	add.w	r0, r7, #20
  402c2c:	47b0      	blx	r6
  402c2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402c32:	47b0      	blx	r6
  402c34:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402c38:	47b0      	blx	r6
  402c3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402c3e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402c40:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402d5c <xTaskGenericCreate+0x230>
  402c44:	4640      	mov	r0, r8
  402c46:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402c48:	4f36      	ldr	r7, [pc, #216]	; (402d24 <xTaskGenericCreate+0x1f8>)
  402c4a:	4638      	mov	r0, r7
  402c4c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402c4e:	4836      	ldr	r0, [pc, #216]	; (402d28 <xTaskGenericCreate+0x1fc>)
  402c50:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402c52:	4836      	ldr	r0, [pc, #216]	; (402d2c <xTaskGenericCreate+0x200>)
  402c54:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402c56:	4836      	ldr	r0, [pc, #216]	; (402d30 <xTaskGenericCreate+0x204>)
  402c58:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402c5a:	4b36      	ldr	r3, [pc, #216]	; (402d34 <xTaskGenericCreate+0x208>)
  402c5c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402c60:	4b35      	ldr	r3, [pc, #212]	; (402d38 <xTaskGenericCreate+0x20c>)
  402c62:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402c64:	4a35      	ldr	r2, [pc, #212]	; (402d3c <xTaskGenericCreate+0x210>)
  402c66:	6813      	ldr	r3, [r2, #0]
  402c68:	3301      	adds	r3, #1
  402c6a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402c6c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402c6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402c70:	4a33      	ldr	r2, [pc, #204]	; (402d40 <xTaskGenericCreate+0x214>)
  402c72:	6811      	ldr	r1, [r2, #0]
  402c74:	2301      	movs	r3, #1
  402c76:	4083      	lsls	r3, r0
  402c78:	430b      	orrs	r3, r1
  402c7a:	6013      	str	r3, [r2, #0]
  402c7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c80:	4649      	mov	r1, r9
  402c82:	4b26      	ldr	r3, [pc, #152]	; (402d1c <xTaskGenericCreate+0x1f0>)
  402c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c88:	4b2e      	ldr	r3, [pc, #184]	; (402d44 <xTaskGenericCreate+0x218>)
  402c8a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402c8c:	4b2e      	ldr	r3, [pc, #184]	; (402d48 <xTaskGenericCreate+0x21c>)
  402c8e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402c90:	4b2e      	ldr	r3, [pc, #184]	; (402d4c <xTaskGenericCreate+0x220>)
  402c92:	681b      	ldr	r3, [r3, #0]
  402c94:	2b00      	cmp	r3, #0
  402c96:	d031      	beq.n	402cfc <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402c98:	4b1f      	ldr	r3, [pc, #124]	; (402d18 <xTaskGenericCreate+0x1ec>)
  402c9a:	681b      	ldr	r3, [r3, #0]
  402c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c9e:	429d      	cmp	r5, r3
  402ca0:	d92e      	bls.n	402d00 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402ca6:	4b2a      	ldr	r3, [pc, #168]	; (402d50 <xTaskGenericCreate+0x224>)
  402ca8:	601a      	str	r2, [r3, #0]
  402caa:	f3bf 8f4f 	dsb	sy
  402cae:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402cb2:	2001      	movs	r0, #1
}
  402cb4:	b003      	add	sp, #12
  402cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402cba:	4630      	mov	r0, r6
  402cbc:	4b25      	ldr	r3, [pc, #148]	; (402d54 <xTaskGenericCreate+0x228>)
  402cbe:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402cc0:	f04f 30ff 	mov.w	r0, #4294967295
  402cc4:	e7f6      	b.n	402cb4 <xTaskGenericCreate+0x188>
  402cc6:	463b      	mov	r3, r7
  402cc8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402ccc:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402cce:	7859      	ldrb	r1, [r3, #1]
  402cd0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402cd4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402cd8:	2900      	cmp	r1, #0
  402cda:	f43f af70 	beq.w	402bbe <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402cde:	42bb      	cmp	r3, r7
  402ce0:	d1f5      	bne.n	402cce <xTaskGenericCreate+0x1a2>
  402ce2:	e76c      	b.n	402bbe <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402ce4:	4b19      	ldr	r3, [pc, #100]	; (402d4c <xTaskGenericCreate+0x220>)
  402ce6:	681b      	ldr	r3, [r3, #0]
  402ce8:	2b00      	cmp	r3, #0
  402cea:	d1bb      	bne.n	402c64 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402cec:	4b0a      	ldr	r3, [pc, #40]	; (402d18 <xTaskGenericCreate+0x1ec>)
  402cee:	681b      	ldr	r3, [r3, #0]
  402cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cf2:	429d      	cmp	r5, r3
  402cf4:	d3b6      	bcc.n	402c64 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402cf6:	4b08      	ldr	r3, [pc, #32]	; (402d18 <xTaskGenericCreate+0x1ec>)
  402cf8:	601c      	str	r4, [r3, #0]
  402cfa:	e7b3      	b.n	402c64 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402cfc:	2001      	movs	r0, #1
  402cfe:	e7d9      	b.n	402cb4 <xTaskGenericCreate+0x188>
  402d00:	2001      	movs	r0, #1
	return xReturn;
  402d02:	e7d7      	b.n	402cb4 <xTaskGenericCreate+0x188>
  402d04:	00402229 	.word	0x00402229
  402d08:	00407469 	.word	0x00407469
  402d0c:	00401f81 	.word	0x00401f81
  402d10:	00401fcd 	.word	0x00401fcd
  402d14:	20400cec 	.word	0x20400cec
  402d18:	20400c7c 	.word	0x20400c7c
  402d1c:	20400c88 	.word	0x20400c88
  402d20:	00401e81 	.word	0x00401e81
  402d24:	20400d18 	.word	0x20400d18
  402d28:	20400d34 	.word	0x20400d34
  402d2c:	20400d60 	.word	0x20400d60
  402d30:	20400d4c 	.word	0x20400d4c
  402d34:	20400c80 	.word	0x20400c80
  402d38:	20400c84 	.word	0x20400c84
  402d3c:	20400cf8 	.word	0x20400cf8
  402d40:	20400d00 	.word	0x20400d00
  402d44:	00401e9d 	.word	0x00401e9d
  402d48:	00402019 	.word	0x00402019
  402d4c:	20400d48 	.word	0x20400d48
  402d50:	e000ed04 	.word	0xe000ed04
  402d54:	00402259 	.word	0x00402259
  402d58:	00401e97 	.word	0x00401e97
  402d5c:	20400d04 	.word	0x20400d04

00402d60 <vTaskStartScheduler>:
{
  402d60:	b510      	push	{r4, lr}
  402d62:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402d64:	2300      	movs	r3, #0
  402d66:	9303      	str	r3, [sp, #12]
  402d68:	9302      	str	r3, [sp, #8]
  402d6a:	9301      	str	r3, [sp, #4]
  402d6c:	9300      	str	r3, [sp, #0]
  402d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402d72:	4917      	ldr	r1, [pc, #92]	; (402dd0 <vTaskStartScheduler+0x70>)
  402d74:	4817      	ldr	r0, [pc, #92]	; (402dd4 <vTaskStartScheduler+0x74>)
  402d76:	4c18      	ldr	r4, [pc, #96]	; (402dd8 <vTaskStartScheduler+0x78>)
  402d78:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402d7a:	2801      	cmp	r0, #1
  402d7c:	d00b      	beq.n	402d96 <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  402d7e:	bb20      	cbnz	r0, 402dca <vTaskStartScheduler+0x6a>
  402d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d84:	b672      	cpsid	i
  402d86:	f383 8811 	msr	BASEPRI, r3
  402d8a:	f3bf 8f6f 	isb	sy
  402d8e:	f3bf 8f4f 	dsb	sy
  402d92:	b662      	cpsie	i
  402d94:	e7fe      	b.n	402d94 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  402d96:	4b11      	ldr	r3, [pc, #68]	; (402ddc <vTaskStartScheduler+0x7c>)
  402d98:	4798      	blx	r3
	if( xReturn == pdPASS )
  402d9a:	2801      	cmp	r0, #1
  402d9c:	d1ef      	bne.n	402d7e <vTaskStartScheduler+0x1e>
  402d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402da2:	b672      	cpsid	i
  402da4:	f383 8811 	msr	BASEPRI, r3
  402da8:	f3bf 8f6f 	isb	sy
  402dac:	f3bf 8f4f 	dsb	sy
  402db0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402db2:	f04f 32ff 	mov.w	r2, #4294967295
  402db6:	4b0a      	ldr	r3, [pc, #40]	; (402de0 <vTaskStartScheduler+0x80>)
  402db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402dba:	2201      	movs	r2, #1
  402dbc:	4b09      	ldr	r3, [pc, #36]	; (402de4 <vTaskStartScheduler+0x84>)
  402dbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402dc0:	2200      	movs	r2, #0
  402dc2:	4b09      	ldr	r3, [pc, #36]	; (402de8 <vTaskStartScheduler+0x88>)
  402dc4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402dc6:	4b09      	ldr	r3, [pc, #36]	; (402dec <vTaskStartScheduler+0x8c>)
  402dc8:	4798      	blx	r3
}
  402dca:	b004      	add	sp, #16
  402dcc:	bd10      	pop	{r4, pc}
  402dce:	bf00      	nop
  402dd0:	0040bf54 	.word	0x0040bf54
  402dd4:	00403109 	.word	0x00403109
  402dd8:	00402b2d 	.word	0x00402b2d
  402ddc:	00403749 	.word	0x00403749
  402de0:	20400d2c 	.word	0x20400d2c
  402de4:	20400d48 	.word	0x20400d48
  402de8:	20400d74 	.word	0x20400d74
  402dec:	00402101 	.word	0x00402101

00402df0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402df0:	4a02      	ldr	r2, [pc, #8]	; (402dfc <vTaskSuspendAll+0xc>)
  402df2:	6813      	ldr	r3, [r2, #0]
  402df4:	3301      	adds	r3, #1
  402df6:	6013      	str	r3, [r2, #0]
  402df8:	4770      	bx	lr
  402dfa:	bf00      	nop
  402dfc:	20400cf4 	.word	0x20400cf4

00402e00 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402e00:	4b01      	ldr	r3, [pc, #4]	; (402e08 <xTaskGetTickCount+0x8>)
  402e02:	6818      	ldr	r0, [r3, #0]
}
  402e04:	4770      	bx	lr
  402e06:	bf00      	nop
  402e08:	20400d74 	.word	0x20400d74

00402e0c <xTaskIncrementTick>:
{
  402e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402e10:	4b42      	ldr	r3, [pc, #264]	; (402f1c <xTaskIncrementTick+0x110>)
  402e12:	681b      	ldr	r3, [r3, #0]
  402e14:	2b00      	cmp	r3, #0
  402e16:	d178      	bne.n	402f0a <xTaskIncrementTick+0xfe>
		++xTickCount;
  402e18:	4b41      	ldr	r3, [pc, #260]	; (402f20 <xTaskIncrementTick+0x114>)
  402e1a:	681a      	ldr	r2, [r3, #0]
  402e1c:	3201      	adds	r2, #1
  402e1e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402e20:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402e22:	b9d6      	cbnz	r6, 402e5a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402e24:	4b3f      	ldr	r3, [pc, #252]	; (402f24 <xTaskIncrementTick+0x118>)
  402e26:	681b      	ldr	r3, [r3, #0]
  402e28:	681b      	ldr	r3, [r3, #0]
  402e2a:	b153      	cbz	r3, 402e42 <xTaskIncrementTick+0x36>
  402e2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e30:	b672      	cpsid	i
  402e32:	f383 8811 	msr	BASEPRI, r3
  402e36:	f3bf 8f6f 	isb	sy
  402e3a:	f3bf 8f4f 	dsb	sy
  402e3e:	b662      	cpsie	i
  402e40:	e7fe      	b.n	402e40 <xTaskIncrementTick+0x34>
  402e42:	4a38      	ldr	r2, [pc, #224]	; (402f24 <xTaskIncrementTick+0x118>)
  402e44:	6811      	ldr	r1, [r2, #0]
  402e46:	4b38      	ldr	r3, [pc, #224]	; (402f28 <xTaskIncrementTick+0x11c>)
  402e48:	6818      	ldr	r0, [r3, #0]
  402e4a:	6010      	str	r0, [r2, #0]
  402e4c:	6019      	str	r1, [r3, #0]
  402e4e:	4a37      	ldr	r2, [pc, #220]	; (402f2c <xTaskIncrementTick+0x120>)
  402e50:	6813      	ldr	r3, [r2, #0]
  402e52:	3301      	adds	r3, #1
  402e54:	6013      	str	r3, [r2, #0]
  402e56:	4b36      	ldr	r3, [pc, #216]	; (402f30 <xTaskIncrementTick+0x124>)
  402e58:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402e5a:	4b36      	ldr	r3, [pc, #216]	; (402f34 <xTaskIncrementTick+0x128>)
  402e5c:	681b      	ldr	r3, [r3, #0]
  402e5e:	429e      	cmp	r6, r3
  402e60:	d218      	bcs.n	402e94 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402e62:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402e64:	4b34      	ldr	r3, [pc, #208]	; (402f38 <xTaskIncrementTick+0x12c>)
  402e66:	681b      	ldr	r3, [r3, #0]
  402e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e6e:	4a33      	ldr	r2, [pc, #204]	; (402f3c <xTaskIncrementTick+0x130>)
  402e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402e74:	2b02      	cmp	r3, #2
  402e76:	bf28      	it	cs
  402e78:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402e7a:	4b31      	ldr	r3, [pc, #196]	; (402f40 <xTaskIncrementTick+0x134>)
  402e7c:	681b      	ldr	r3, [r3, #0]
  402e7e:	b90b      	cbnz	r3, 402e84 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402e80:	4b30      	ldr	r3, [pc, #192]	; (402f44 <xTaskIncrementTick+0x138>)
  402e82:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402e84:	4b30      	ldr	r3, [pc, #192]	; (402f48 <xTaskIncrementTick+0x13c>)
  402e86:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402e88:	2b00      	cmp	r3, #0
}
  402e8a:	bf0c      	ite	eq
  402e8c:	4620      	moveq	r0, r4
  402e8e:	2001      	movne	r0, #1
  402e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e94:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402e96:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402f24 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402e9a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402f54 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402e9e:	4f2b      	ldr	r7, [pc, #172]	; (402f4c <xTaskIncrementTick+0x140>)
  402ea0:	e01f      	b.n	402ee2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402ea2:	f04f 32ff 	mov.w	r2, #4294967295
  402ea6:	4b23      	ldr	r3, [pc, #140]	; (402f34 <xTaskIncrementTick+0x128>)
  402ea8:	601a      	str	r2, [r3, #0]
						break;
  402eaa:	e7db      	b.n	402e64 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402eac:	4a21      	ldr	r2, [pc, #132]	; (402f34 <xTaskIncrementTick+0x128>)
  402eae:	6013      	str	r3, [r2, #0]
							break;
  402eb0:	e7d8      	b.n	402e64 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402eb2:	f105 0018 	add.w	r0, r5, #24
  402eb6:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402eb8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402eba:	683a      	ldr	r2, [r7, #0]
  402ebc:	2301      	movs	r3, #1
  402ebe:	4083      	lsls	r3, r0
  402ec0:	4313      	orrs	r3, r2
  402ec2:	603b      	str	r3, [r7, #0]
  402ec4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ec8:	4651      	mov	r1, sl
  402eca:	4b1c      	ldr	r3, [pc, #112]	; (402f3c <xTaskIncrementTick+0x130>)
  402ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ed0:	4b1f      	ldr	r3, [pc, #124]	; (402f50 <xTaskIncrementTick+0x144>)
  402ed2:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402ed4:	4b18      	ldr	r3, [pc, #96]	; (402f38 <xTaskIncrementTick+0x12c>)
  402ed6:	681b      	ldr	r3, [r3, #0]
  402ed8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402edc:	429a      	cmp	r2, r3
  402ede:	bf28      	it	cs
  402ee0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402ee2:	f8d9 3000 	ldr.w	r3, [r9]
  402ee6:	681b      	ldr	r3, [r3, #0]
  402ee8:	2b00      	cmp	r3, #0
  402eea:	d0da      	beq.n	402ea2 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402eec:	f8d9 3000 	ldr.w	r3, [r9]
  402ef0:	68db      	ldr	r3, [r3, #12]
  402ef2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402ef4:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402ef6:	429e      	cmp	r6, r3
  402ef8:	d3d8      	bcc.n	402eac <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402efa:	f105 0a04 	add.w	sl, r5, #4
  402efe:	4650      	mov	r0, sl
  402f00:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402f02:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402f04:	2b00      	cmp	r3, #0
  402f06:	d1d4      	bne.n	402eb2 <xTaskIncrementTick+0xa6>
  402f08:	e7d6      	b.n	402eb8 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402f0a:	4a0d      	ldr	r2, [pc, #52]	; (402f40 <xTaskIncrementTick+0x134>)
  402f0c:	6813      	ldr	r3, [r2, #0]
  402f0e:	3301      	adds	r3, #1
  402f10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402f12:	4b0c      	ldr	r3, [pc, #48]	; (402f44 <xTaskIncrementTick+0x138>)
  402f14:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402f16:	2400      	movs	r4, #0
  402f18:	e7b4      	b.n	402e84 <xTaskIncrementTick+0x78>
  402f1a:	bf00      	nop
  402f1c:	20400cf4 	.word	0x20400cf4
  402f20:	20400d74 	.word	0x20400d74
  402f24:	20400c80 	.word	0x20400c80
  402f28:	20400c84 	.word	0x20400c84
  402f2c:	20400d30 	.word	0x20400d30
  402f30:	00402aa9 	.word	0x00402aa9
  402f34:	20400d2c 	.word	0x20400d2c
  402f38:	20400c7c 	.word	0x20400c7c
  402f3c:	20400c88 	.word	0x20400c88
  402f40:	20400cf0 	.word	0x20400cf0
  402f44:	00403db9 	.word	0x00403db9
  402f48:	20400d78 	.word	0x20400d78
  402f4c:	20400d00 	.word	0x20400d00
  402f50:	00401e9d 	.word	0x00401e9d
  402f54:	00401ee9 	.word	0x00401ee9

00402f58 <xTaskResumeAll>:
{
  402f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402f5c:	4b38      	ldr	r3, [pc, #224]	; (403040 <xTaskResumeAll+0xe8>)
  402f5e:	681b      	ldr	r3, [r3, #0]
  402f60:	b953      	cbnz	r3, 402f78 <xTaskResumeAll+0x20>
  402f62:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f66:	b672      	cpsid	i
  402f68:	f383 8811 	msr	BASEPRI, r3
  402f6c:	f3bf 8f6f 	isb	sy
  402f70:	f3bf 8f4f 	dsb	sy
  402f74:	b662      	cpsie	i
  402f76:	e7fe      	b.n	402f76 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402f78:	4b32      	ldr	r3, [pc, #200]	; (403044 <xTaskResumeAll+0xec>)
  402f7a:	4798      	blx	r3
		--uxSchedulerSuspended;
  402f7c:	4b30      	ldr	r3, [pc, #192]	; (403040 <xTaskResumeAll+0xe8>)
  402f7e:	681a      	ldr	r2, [r3, #0]
  402f80:	3a01      	subs	r2, #1
  402f82:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f84:	681b      	ldr	r3, [r3, #0]
  402f86:	2b00      	cmp	r3, #0
  402f88:	d155      	bne.n	403036 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402f8a:	4b2f      	ldr	r3, [pc, #188]	; (403048 <xTaskResumeAll+0xf0>)
  402f8c:	681b      	ldr	r3, [r3, #0]
  402f8e:	2b00      	cmp	r3, #0
  402f90:	d132      	bne.n	402ff8 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402f92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402f94:	4b2d      	ldr	r3, [pc, #180]	; (40304c <xTaskResumeAll+0xf4>)
  402f96:	4798      	blx	r3
}
  402f98:	4620      	mov	r0, r4
  402f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402f9e:	68fb      	ldr	r3, [r7, #12]
  402fa0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402fa2:	f104 0018 	add.w	r0, r4, #24
  402fa6:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402fa8:	f104 0804 	add.w	r8, r4, #4
  402fac:	4640      	mov	r0, r8
  402fae:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402fb0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402fb2:	682a      	ldr	r2, [r5, #0]
  402fb4:	2301      	movs	r3, #1
  402fb6:	4083      	lsls	r3, r0
  402fb8:	4313      	orrs	r3, r2
  402fba:	602b      	str	r3, [r5, #0]
  402fbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402fc0:	4641      	mov	r1, r8
  402fc2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402fc6:	4b22      	ldr	r3, [pc, #136]	; (403050 <xTaskResumeAll+0xf8>)
  402fc8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402fca:	4b22      	ldr	r3, [pc, #136]	; (403054 <xTaskResumeAll+0xfc>)
  402fcc:	681b      	ldr	r3, [r3, #0]
  402fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fd2:	429a      	cmp	r2, r3
  402fd4:	d20c      	bcs.n	402ff0 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402fd6:	683b      	ldr	r3, [r7, #0]
  402fd8:	2b00      	cmp	r3, #0
  402fda:	d1e0      	bne.n	402f9e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402fdc:	4b1e      	ldr	r3, [pc, #120]	; (403058 <xTaskResumeAll+0x100>)
  402fde:	681b      	ldr	r3, [r3, #0]
  402fe0:	b1db      	cbz	r3, 40301a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402fe2:	4b1d      	ldr	r3, [pc, #116]	; (403058 <xTaskResumeAll+0x100>)
  402fe4:	681b      	ldr	r3, [r3, #0]
  402fe6:	b1c3      	cbz	r3, 40301a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402fe8:	4e1c      	ldr	r6, [pc, #112]	; (40305c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402fea:	4d1d      	ldr	r5, [pc, #116]	; (403060 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402fec:	4c1a      	ldr	r4, [pc, #104]	; (403058 <xTaskResumeAll+0x100>)
  402fee:	e00e      	b.n	40300e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402ff0:	2201      	movs	r2, #1
  402ff2:	4b1b      	ldr	r3, [pc, #108]	; (403060 <xTaskResumeAll+0x108>)
  402ff4:	601a      	str	r2, [r3, #0]
  402ff6:	e7ee      	b.n	402fd6 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402ff8:	4f1a      	ldr	r7, [pc, #104]	; (403064 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402ffa:	4e1b      	ldr	r6, [pc, #108]	; (403068 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402ffc:	4d1b      	ldr	r5, [pc, #108]	; (40306c <xTaskResumeAll+0x114>)
  402ffe:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403074 <xTaskResumeAll+0x11c>
  403002:	e7e8      	b.n	402fd6 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  403004:	6823      	ldr	r3, [r4, #0]
  403006:	3b01      	subs	r3, #1
  403008:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40300a:	6823      	ldr	r3, [r4, #0]
  40300c:	b12b      	cbz	r3, 40301a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40300e:	47b0      	blx	r6
  403010:	2800      	cmp	r0, #0
  403012:	d0f7      	beq.n	403004 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  403014:	2301      	movs	r3, #1
  403016:	602b      	str	r3, [r5, #0]
  403018:	e7f4      	b.n	403004 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40301a:	4b11      	ldr	r3, [pc, #68]	; (403060 <xTaskResumeAll+0x108>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	2b01      	cmp	r3, #1
  403020:	d10b      	bne.n	40303a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  403022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403026:	4b12      	ldr	r3, [pc, #72]	; (403070 <xTaskResumeAll+0x118>)
  403028:	601a      	str	r2, [r3, #0]
  40302a:	f3bf 8f4f 	dsb	sy
  40302e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  403032:	2401      	movs	r4, #1
  403034:	e7ae      	b.n	402f94 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  403036:	2400      	movs	r4, #0
  403038:	e7ac      	b.n	402f94 <xTaskResumeAll+0x3c>
  40303a:	2400      	movs	r4, #0
  40303c:	e7aa      	b.n	402f94 <xTaskResumeAll+0x3c>
  40303e:	bf00      	nop
  403040:	20400cf4 	.word	0x20400cf4
  403044:	00401fcd 	.word	0x00401fcd
  403048:	20400cec 	.word	0x20400cec
  40304c:	00402019 	.word	0x00402019
  403050:	00401e9d 	.word	0x00401e9d
  403054:	20400c7c 	.word	0x20400c7c
  403058:	20400cf0 	.word	0x20400cf0
  40305c:	00402e0d 	.word	0x00402e0d
  403060:	20400d78 	.word	0x20400d78
  403064:	20400d34 	.word	0x20400d34
  403068:	00401ee9 	.word	0x00401ee9
  40306c:	20400d00 	.word	0x20400d00
  403070:	e000ed04 	.word	0xe000ed04
  403074:	20400c88 	.word	0x20400c88

00403078 <vTaskDelay>:
	{
  403078:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40307a:	2800      	cmp	r0, #0
  40307c:	d029      	beq.n	4030d2 <vTaskDelay+0x5a>
  40307e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403080:	4b18      	ldr	r3, [pc, #96]	; (4030e4 <vTaskDelay+0x6c>)
  403082:	681b      	ldr	r3, [r3, #0]
  403084:	b153      	cbz	r3, 40309c <vTaskDelay+0x24>
  403086:	f04f 0380 	mov.w	r3, #128	; 0x80
  40308a:	b672      	cpsid	i
  40308c:	f383 8811 	msr	BASEPRI, r3
  403090:	f3bf 8f6f 	isb	sy
  403094:	f3bf 8f4f 	dsb	sy
  403098:	b662      	cpsie	i
  40309a:	e7fe      	b.n	40309a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40309c:	4b12      	ldr	r3, [pc, #72]	; (4030e8 <vTaskDelay+0x70>)
  40309e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4030a0:	4b12      	ldr	r3, [pc, #72]	; (4030ec <vTaskDelay+0x74>)
  4030a2:	681b      	ldr	r3, [r3, #0]
  4030a4:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4030a6:	4b12      	ldr	r3, [pc, #72]	; (4030f0 <vTaskDelay+0x78>)
  4030a8:	6818      	ldr	r0, [r3, #0]
  4030aa:	3004      	adds	r0, #4
  4030ac:	4b11      	ldr	r3, [pc, #68]	; (4030f4 <vTaskDelay+0x7c>)
  4030ae:	4798      	blx	r3
  4030b0:	b948      	cbnz	r0, 4030c6 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4030b2:	4b0f      	ldr	r3, [pc, #60]	; (4030f0 <vTaskDelay+0x78>)
  4030b4:	681a      	ldr	r2, [r3, #0]
  4030b6:	4910      	ldr	r1, [pc, #64]	; (4030f8 <vTaskDelay+0x80>)
  4030b8:	680b      	ldr	r3, [r1, #0]
  4030ba:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4030bc:	2201      	movs	r2, #1
  4030be:	4082      	lsls	r2, r0
  4030c0:	ea23 0302 	bic.w	r3, r3, r2
  4030c4:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4030c6:	4620      	mov	r0, r4
  4030c8:	4b0c      	ldr	r3, [pc, #48]	; (4030fc <vTaskDelay+0x84>)
  4030ca:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4030cc:	4b0c      	ldr	r3, [pc, #48]	; (403100 <vTaskDelay+0x88>)
  4030ce:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4030d0:	b938      	cbnz	r0, 4030e2 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4030d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4030d6:	4b0b      	ldr	r3, [pc, #44]	; (403104 <vTaskDelay+0x8c>)
  4030d8:	601a      	str	r2, [r3, #0]
  4030da:	f3bf 8f4f 	dsb	sy
  4030de:	f3bf 8f6f 	isb	sy
  4030e2:	bd10      	pop	{r4, pc}
  4030e4:	20400cf4 	.word	0x20400cf4
  4030e8:	00402df1 	.word	0x00402df1
  4030ec:	20400d74 	.word	0x20400d74
  4030f0:	20400c7c 	.word	0x20400c7c
  4030f4:	00401ee9 	.word	0x00401ee9
  4030f8:	20400d00 	.word	0x20400d00
  4030fc:	00402ad5 	.word	0x00402ad5
  403100:	00402f59 	.word	0x00402f59
  403104:	e000ed04 	.word	0xe000ed04

00403108 <prvIdleTask>:
{
  403108:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40310a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403194 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40310e:	4e19      	ldr	r6, [pc, #100]	; (403174 <prvIdleTask+0x6c>)
				taskYIELD();
  403110:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403198 <prvIdleTask+0x90>
  403114:	e02a      	b.n	40316c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  403116:	4b18      	ldr	r3, [pc, #96]	; (403178 <prvIdleTask+0x70>)
  403118:	681b      	ldr	r3, [r3, #0]
  40311a:	2b01      	cmp	r3, #1
  40311c:	d81e      	bhi.n	40315c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40311e:	682b      	ldr	r3, [r5, #0]
  403120:	2b00      	cmp	r3, #0
  403122:	d0f8      	beq.n	403116 <prvIdleTask+0xe>
			vTaskSuspendAll();
  403124:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403126:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  403128:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40312a:	2c00      	cmp	r4, #0
  40312c:	d0f7      	beq.n	40311e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40312e:	4b13      	ldr	r3, [pc, #76]	; (40317c <prvIdleTask+0x74>)
  403130:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  403132:	68f3      	ldr	r3, [r6, #12]
  403134:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403136:	1d20      	adds	r0, r4, #4
  403138:	4b11      	ldr	r3, [pc, #68]	; (403180 <prvIdleTask+0x78>)
  40313a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40313c:	4a11      	ldr	r2, [pc, #68]	; (403184 <prvIdleTask+0x7c>)
  40313e:	6813      	ldr	r3, [r2, #0]
  403140:	3b01      	subs	r3, #1
  403142:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  403144:	682b      	ldr	r3, [r5, #0]
  403146:	3b01      	subs	r3, #1
  403148:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40314a:	4b0f      	ldr	r3, [pc, #60]	; (403188 <prvIdleTask+0x80>)
  40314c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40314e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403150:	f8df a048 	ldr.w	sl, [pc, #72]	; 40319c <prvIdleTask+0x94>
  403154:	47d0      	blx	sl
		vPortFree( pxTCB );
  403156:	4620      	mov	r0, r4
  403158:	47d0      	blx	sl
  40315a:	e7e0      	b.n	40311e <prvIdleTask+0x16>
				taskYIELD();
  40315c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403160:	f8c9 3000 	str.w	r3, [r9]
  403164:	f3bf 8f4f 	dsb	sy
  403168:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40316c:	4d07      	ldr	r5, [pc, #28]	; (40318c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40316e:	4f08      	ldr	r7, [pc, #32]	; (403190 <prvIdleTask+0x88>)
  403170:	e7d5      	b.n	40311e <prvIdleTask+0x16>
  403172:	bf00      	nop
  403174:	20400d60 	.word	0x20400d60
  403178:	20400c88 	.word	0x20400c88
  40317c:	00401fcd 	.word	0x00401fcd
  403180:	00401ee9 	.word	0x00401ee9
  403184:	20400cec 	.word	0x20400cec
  403188:	00402019 	.word	0x00402019
  40318c:	20400cfc 	.word	0x20400cfc
  403190:	00402f59 	.word	0x00402f59
  403194:	00402df1 	.word	0x00402df1
  403198:	e000ed04 	.word	0xe000ed04
  40319c:	00402259 	.word	0x00402259

004031a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4031a0:	4b2d      	ldr	r3, [pc, #180]	; (403258 <vTaskSwitchContext+0xb8>)
  4031a2:	681b      	ldr	r3, [r3, #0]
  4031a4:	2b00      	cmp	r3, #0
  4031a6:	d12c      	bne.n	403202 <vTaskSwitchContext+0x62>
{
  4031a8:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4031aa:	2200      	movs	r2, #0
  4031ac:	4b2b      	ldr	r3, [pc, #172]	; (40325c <vTaskSwitchContext+0xbc>)
  4031ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4031b0:	4b2b      	ldr	r3, [pc, #172]	; (403260 <vTaskSwitchContext+0xc0>)
  4031b2:	681b      	ldr	r3, [r3, #0]
  4031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031b6:	681a      	ldr	r2, [r3, #0]
  4031b8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4031bc:	d103      	bne.n	4031c6 <vTaskSwitchContext+0x26>
  4031be:	685a      	ldr	r2, [r3, #4]
  4031c0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4031c4:	d021      	beq.n	40320a <vTaskSwitchContext+0x6a>
  4031c6:	4b26      	ldr	r3, [pc, #152]	; (403260 <vTaskSwitchContext+0xc0>)
  4031c8:	6818      	ldr	r0, [r3, #0]
  4031ca:	6819      	ldr	r1, [r3, #0]
  4031cc:	3134      	adds	r1, #52	; 0x34
  4031ce:	4b25      	ldr	r3, [pc, #148]	; (403264 <vTaskSwitchContext+0xc4>)
  4031d0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4031d2:	4b25      	ldr	r3, [pc, #148]	; (403268 <vTaskSwitchContext+0xc8>)
  4031d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4031d6:	fab3 f383 	clz	r3, r3
  4031da:	b2db      	uxtb	r3, r3
  4031dc:	f1c3 031f 	rsb	r3, r3, #31
  4031e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4031e4:	4a21      	ldr	r2, [pc, #132]	; (40326c <vTaskSwitchContext+0xcc>)
  4031e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4031ea:	b9ba      	cbnz	r2, 40321c <vTaskSwitchContext+0x7c>
	__asm volatile
  4031ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031f0:	b672      	cpsid	i
  4031f2:	f383 8811 	msr	BASEPRI, r3
  4031f6:	f3bf 8f6f 	isb	sy
  4031fa:	f3bf 8f4f 	dsb	sy
  4031fe:	b662      	cpsie	i
  403200:	e7fe      	b.n	403200 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  403202:	2201      	movs	r2, #1
  403204:	4b15      	ldr	r3, [pc, #84]	; (40325c <vTaskSwitchContext+0xbc>)
  403206:	601a      	str	r2, [r3, #0]
  403208:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40320a:	689a      	ldr	r2, [r3, #8]
  40320c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403210:	d1d9      	bne.n	4031c6 <vTaskSwitchContext+0x26>
  403212:	68db      	ldr	r3, [r3, #12]
  403214:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403218:	d1d5      	bne.n	4031c6 <vTaskSwitchContext+0x26>
  40321a:	e7da      	b.n	4031d2 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40321c:	4a13      	ldr	r2, [pc, #76]	; (40326c <vTaskSwitchContext+0xcc>)
  40321e:	0099      	lsls	r1, r3, #2
  403220:	18c8      	adds	r0, r1, r3
  403222:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403226:	6844      	ldr	r4, [r0, #4]
  403228:	6864      	ldr	r4, [r4, #4]
  40322a:	6044      	str	r4, [r0, #4]
  40322c:	4419      	add	r1, r3
  40322e:	4602      	mov	r2, r0
  403230:	3208      	adds	r2, #8
  403232:	4294      	cmp	r4, r2
  403234:	d009      	beq.n	40324a <vTaskSwitchContext+0xaa>
  403236:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40323a:	4a0c      	ldr	r2, [pc, #48]	; (40326c <vTaskSwitchContext+0xcc>)
  40323c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403240:	685b      	ldr	r3, [r3, #4]
  403242:	68da      	ldr	r2, [r3, #12]
  403244:	4b06      	ldr	r3, [pc, #24]	; (403260 <vTaskSwitchContext+0xc0>)
  403246:	601a      	str	r2, [r3, #0]
  403248:	bd10      	pop	{r4, pc}
  40324a:	6860      	ldr	r0, [r4, #4]
  40324c:	4a07      	ldr	r2, [pc, #28]	; (40326c <vTaskSwitchContext+0xcc>)
  40324e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403252:	6050      	str	r0, [r2, #4]
  403254:	e7ef      	b.n	403236 <vTaskSwitchContext+0x96>
  403256:	bf00      	nop
  403258:	20400cf4 	.word	0x20400cf4
  40325c:	20400d78 	.word	0x20400d78
  403260:	20400c7c 	.word	0x20400c7c
  403264:	00403da1 	.word	0x00403da1
  403268:	20400d00 	.word	0x20400d00
  40326c:	20400c88 	.word	0x20400c88

00403270 <vTaskPlaceOnEventList>:
{
  403270:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  403272:	b1e0      	cbz	r0, 4032ae <vTaskPlaceOnEventList+0x3e>
  403274:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403276:	4d17      	ldr	r5, [pc, #92]	; (4032d4 <vTaskPlaceOnEventList+0x64>)
  403278:	6829      	ldr	r1, [r5, #0]
  40327a:	3118      	adds	r1, #24
  40327c:	4b16      	ldr	r3, [pc, #88]	; (4032d8 <vTaskPlaceOnEventList+0x68>)
  40327e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403280:	6828      	ldr	r0, [r5, #0]
  403282:	3004      	adds	r0, #4
  403284:	4b15      	ldr	r3, [pc, #84]	; (4032dc <vTaskPlaceOnEventList+0x6c>)
  403286:	4798      	blx	r3
  403288:	b940      	cbnz	r0, 40329c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40328a:	682a      	ldr	r2, [r5, #0]
  40328c:	4914      	ldr	r1, [pc, #80]	; (4032e0 <vTaskPlaceOnEventList+0x70>)
  40328e:	680b      	ldr	r3, [r1, #0]
  403290:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403292:	2201      	movs	r2, #1
  403294:	4082      	lsls	r2, r0
  403296:	ea23 0302 	bic.w	r3, r3, r2
  40329a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40329c:	f1b4 3fff 	cmp.w	r4, #4294967295
  4032a0:	d010      	beq.n	4032c4 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4032a2:	4b10      	ldr	r3, [pc, #64]	; (4032e4 <vTaskPlaceOnEventList+0x74>)
  4032a4:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4032a6:	4420      	add	r0, r4
  4032a8:	4b0f      	ldr	r3, [pc, #60]	; (4032e8 <vTaskPlaceOnEventList+0x78>)
  4032aa:	4798      	blx	r3
  4032ac:	bd38      	pop	{r3, r4, r5, pc}
  4032ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032b2:	b672      	cpsid	i
  4032b4:	f383 8811 	msr	BASEPRI, r3
  4032b8:	f3bf 8f6f 	isb	sy
  4032bc:	f3bf 8f4f 	dsb	sy
  4032c0:	b662      	cpsie	i
  4032c2:	e7fe      	b.n	4032c2 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4032c4:	4b03      	ldr	r3, [pc, #12]	; (4032d4 <vTaskPlaceOnEventList+0x64>)
  4032c6:	6819      	ldr	r1, [r3, #0]
  4032c8:	3104      	adds	r1, #4
  4032ca:	4808      	ldr	r0, [pc, #32]	; (4032ec <vTaskPlaceOnEventList+0x7c>)
  4032cc:	4b08      	ldr	r3, [pc, #32]	; (4032f0 <vTaskPlaceOnEventList+0x80>)
  4032ce:	4798      	blx	r3
  4032d0:	bd38      	pop	{r3, r4, r5, pc}
  4032d2:	bf00      	nop
  4032d4:	20400c7c 	.word	0x20400c7c
  4032d8:	00401eb5 	.word	0x00401eb5
  4032dc:	00401ee9 	.word	0x00401ee9
  4032e0:	20400d00 	.word	0x20400d00
  4032e4:	20400d74 	.word	0x20400d74
  4032e8:	00402ad5 	.word	0x00402ad5
  4032ec:	20400d4c 	.word	0x20400d4c
  4032f0:	00401e9d 	.word	0x00401e9d

004032f4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4032f4:	b1e8      	cbz	r0, 403332 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4032f6:	b570      	push	{r4, r5, r6, lr}
  4032f8:	4615      	mov	r5, r2
  4032fa:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4032fc:	4e16      	ldr	r6, [pc, #88]	; (403358 <vTaskPlaceOnEventListRestricted+0x64>)
  4032fe:	6831      	ldr	r1, [r6, #0]
  403300:	3118      	adds	r1, #24
  403302:	4b16      	ldr	r3, [pc, #88]	; (40335c <vTaskPlaceOnEventListRestricted+0x68>)
  403304:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403306:	6830      	ldr	r0, [r6, #0]
  403308:	3004      	adds	r0, #4
  40330a:	4b15      	ldr	r3, [pc, #84]	; (403360 <vTaskPlaceOnEventListRestricted+0x6c>)
  40330c:	4798      	blx	r3
  40330e:	b940      	cbnz	r0, 403322 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403310:	6832      	ldr	r2, [r6, #0]
  403312:	4914      	ldr	r1, [pc, #80]	; (403364 <vTaskPlaceOnEventListRestricted+0x70>)
  403314:	680b      	ldr	r3, [r1, #0]
  403316:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403318:	2201      	movs	r2, #1
  40331a:	4082      	lsls	r2, r0
  40331c:	ea23 0302 	bic.w	r3, r3, r2
  403320:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  403322:	2d01      	cmp	r5, #1
  403324:	d010      	beq.n	403348 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  403326:	4b10      	ldr	r3, [pc, #64]	; (403368 <vTaskPlaceOnEventListRestricted+0x74>)
  403328:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40332a:	4420      	add	r0, r4
  40332c:	4b0f      	ldr	r3, [pc, #60]	; (40336c <vTaskPlaceOnEventListRestricted+0x78>)
  40332e:	4798      	blx	r3
  403330:	bd70      	pop	{r4, r5, r6, pc}
  403332:	f04f 0380 	mov.w	r3, #128	; 0x80
  403336:	b672      	cpsid	i
  403338:	f383 8811 	msr	BASEPRI, r3
  40333c:	f3bf 8f6f 	isb	sy
  403340:	f3bf 8f4f 	dsb	sy
  403344:	b662      	cpsie	i
  403346:	e7fe      	b.n	403346 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403348:	4b03      	ldr	r3, [pc, #12]	; (403358 <vTaskPlaceOnEventListRestricted+0x64>)
  40334a:	6819      	ldr	r1, [r3, #0]
  40334c:	3104      	adds	r1, #4
  40334e:	4808      	ldr	r0, [pc, #32]	; (403370 <vTaskPlaceOnEventListRestricted+0x7c>)
  403350:	4b02      	ldr	r3, [pc, #8]	; (40335c <vTaskPlaceOnEventListRestricted+0x68>)
  403352:	4798      	blx	r3
  403354:	bd70      	pop	{r4, r5, r6, pc}
  403356:	bf00      	nop
  403358:	20400c7c 	.word	0x20400c7c
  40335c:	00401e9d 	.word	0x00401e9d
  403360:	00401ee9 	.word	0x00401ee9
  403364:	20400d00 	.word	0x20400d00
  403368:	20400d74 	.word	0x20400d74
  40336c:	00402ad5 	.word	0x00402ad5
  403370:	20400d4c 	.word	0x20400d4c

00403374 <xTaskRemoveFromEventList>:
{
  403374:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  403376:	68c3      	ldr	r3, [r0, #12]
  403378:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40337a:	b324      	cbz	r4, 4033c6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40337c:	f104 0518 	add.w	r5, r4, #24
  403380:	4628      	mov	r0, r5
  403382:	4b1a      	ldr	r3, [pc, #104]	; (4033ec <xTaskRemoveFromEventList+0x78>)
  403384:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403386:	4b1a      	ldr	r3, [pc, #104]	; (4033f0 <xTaskRemoveFromEventList+0x7c>)
  403388:	681b      	ldr	r3, [r3, #0]
  40338a:	bb3b      	cbnz	r3, 4033dc <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40338c:	1d25      	adds	r5, r4, #4
  40338e:	4628      	mov	r0, r5
  403390:	4b16      	ldr	r3, [pc, #88]	; (4033ec <xTaskRemoveFromEventList+0x78>)
  403392:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403394:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403396:	4a17      	ldr	r2, [pc, #92]	; (4033f4 <xTaskRemoveFromEventList+0x80>)
  403398:	6811      	ldr	r1, [r2, #0]
  40339a:	2301      	movs	r3, #1
  40339c:	4083      	lsls	r3, r0
  40339e:	430b      	orrs	r3, r1
  4033a0:	6013      	str	r3, [r2, #0]
  4033a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4033a6:	4629      	mov	r1, r5
  4033a8:	4b13      	ldr	r3, [pc, #76]	; (4033f8 <xTaskRemoveFromEventList+0x84>)
  4033aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4033ae:	4b13      	ldr	r3, [pc, #76]	; (4033fc <xTaskRemoveFromEventList+0x88>)
  4033b0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4033b2:	4b13      	ldr	r3, [pc, #76]	; (403400 <xTaskRemoveFromEventList+0x8c>)
  4033b4:	681b      	ldr	r3, [r3, #0]
  4033b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4033ba:	429a      	cmp	r2, r3
  4033bc:	d913      	bls.n	4033e6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4033be:	2001      	movs	r0, #1
  4033c0:	4b10      	ldr	r3, [pc, #64]	; (403404 <xTaskRemoveFromEventList+0x90>)
  4033c2:	6018      	str	r0, [r3, #0]
  4033c4:	bd38      	pop	{r3, r4, r5, pc}
  4033c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033ca:	b672      	cpsid	i
  4033cc:	f383 8811 	msr	BASEPRI, r3
  4033d0:	f3bf 8f6f 	isb	sy
  4033d4:	f3bf 8f4f 	dsb	sy
  4033d8:	b662      	cpsie	i
  4033da:	e7fe      	b.n	4033da <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4033dc:	4629      	mov	r1, r5
  4033de:	480a      	ldr	r0, [pc, #40]	; (403408 <xTaskRemoveFromEventList+0x94>)
  4033e0:	4b06      	ldr	r3, [pc, #24]	; (4033fc <xTaskRemoveFromEventList+0x88>)
  4033e2:	4798      	blx	r3
  4033e4:	e7e5      	b.n	4033b2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4033e6:	2000      	movs	r0, #0
}
  4033e8:	bd38      	pop	{r3, r4, r5, pc}
  4033ea:	bf00      	nop
  4033ec:	00401ee9 	.word	0x00401ee9
  4033f0:	20400cf4 	.word	0x20400cf4
  4033f4:	20400d00 	.word	0x20400d00
  4033f8:	20400c88 	.word	0x20400c88
  4033fc:	00401e9d 	.word	0x00401e9d
  403400:	20400c7c 	.word	0x20400c7c
  403404:	20400d78 	.word	0x20400d78
  403408:	20400d34 	.word	0x20400d34

0040340c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40340c:	b130      	cbz	r0, 40341c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40340e:	4a09      	ldr	r2, [pc, #36]	; (403434 <vTaskSetTimeOutState+0x28>)
  403410:	6812      	ldr	r2, [r2, #0]
  403412:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403414:	4a08      	ldr	r2, [pc, #32]	; (403438 <vTaskSetTimeOutState+0x2c>)
  403416:	6812      	ldr	r2, [r2, #0]
  403418:	6042      	str	r2, [r0, #4]
  40341a:	4770      	bx	lr
  40341c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403420:	b672      	cpsid	i
  403422:	f383 8811 	msr	BASEPRI, r3
  403426:	f3bf 8f6f 	isb	sy
  40342a:	f3bf 8f4f 	dsb	sy
  40342e:	b662      	cpsie	i
  403430:	e7fe      	b.n	403430 <vTaskSetTimeOutState+0x24>
  403432:	bf00      	nop
  403434:	20400d30 	.word	0x20400d30
  403438:	20400d74 	.word	0x20400d74

0040343c <xTaskCheckForTimeOut>:
{
  40343c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40343e:	b1c0      	cbz	r0, 403472 <xTaskCheckForTimeOut+0x36>
  403440:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403442:	b309      	cbz	r1, 403488 <xTaskCheckForTimeOut+0x4c>
  403444:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  403446:	4b1d      	ldr	r3, [pc, #116]	; (4034bc <xTaskCheckForTimeOut+0x80>)
  403448:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40344a:	4b1d      	ldr	r3, [pc, #116]	; (4034c0 <xTaskCheckForTimeOut+0x84>)
  40344c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40344e:	682b      	ldr	r3, [r5, #0]
  403450:	f1b3 3fff 	cmp.w	r3, #4294967295
  403454:	d02e      	beq.n	4034b4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  403456:	491b      	ldr	r1, [pc, #108]	; (4034c4 <xTaskCheckForTimeOut+0x88>)
  403458:	6809      	ldr	r1, [r1, #0]
  40345a:	6820      	ldr	r0, [r4, #0]
  40345c:	4288      	cmp	r0, r1
  40345e:	d002      	beq.n	403466 <xTaskCheckForTimeOut+0x2a>
  403460:	6861      	ldr	r1, [r4, #4]
  403462:	428a      	cmp	r2, r1
  403464:	d228      	bcs.n	4034b8 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  403466:	6861      	ldr	r1, [r4, #4]
  403468:	1a50      	subs	r0, r2, r1
  40346a:	4283      	cmp	r3, r0
  40346c:	d817      	bhi.n	40349e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40346e:	2401      	movs	r4, #1
  403470:	e01c      	b.n	4034ac <xTaskCheckForTimeOut+0x70>
  403472:	f04f 0380 	mov.w	r3, #128	; 0x80
  403476:	b672      	cpsid	i
  403478:	f383 8811 	msr	BASEPRI, r3
  40347c:	f3bf 8f6f 	isb	sy
  403480:	f3bf 8f4f 	dsb	sy
  403484:	b662      	cpsie	i
  403486:	e7fe      	b.n	403486 <xTaskCheckForTimeOut+0x4a>
  403488:	f04f 0380 	mov.w	r3, #128	; 0x80
  40348c:	b672      	cpsid	i
  40348e:	f383 8811 	msr	BASEPRI, r3
  403492:	f3bf 8f6f 	isb	sy
  403496:	f3bf 8f4f 	dsb	sy
  40349a:	b662      	cpsie	i
  40349c:	e7fe      	b.n	40349c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40349e:	1a9b      	subs	r3, r3, r2
  4034a0:	440b      	add	r3, r1
  4034a2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4034a4:	4620      	mov	r0, r4
  4034a6:	4b08      	ldr	r3, [pc, #32]	; (4034c8 <xTaskCheckForTimeOut+0x8c>)
  4034a8:	4798      	blx	r3
			xReturn = pdFALSE;
  4034aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4034ac:	4b07      	ldr	r3, [pc, #28]	; (4034cc <xTaskCheckForTimeOut+0x90>)
  4034ae:	4798      	blx	r3
}
  4034b0:	4620      	mov	r0, r4
  4034b2:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4034b4:	2400      	movs	r4, #0
  4034b6:	e7f9      	b.n	4034ac <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4034b8:	2401      	movs	r4, #1
  4034ba:	e7f7      	b.n	4034ac <xTaskCheckForTimeOut+0x70>
  4034bc:	00401fcd 	.word	0x00401fcd
  4034c0:	20400d74 	.word	0x20400d74
  4034c4:	20400d30 	.word	0x20400d30
  4034c8:	0040340d 	.word	0x0040340d
  4034cc:	00402019 	.word	0x00402019

004034d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4034d0:	2201      	movs	r2, #1
  4034d2:	4b01      	ldr	r3, [pc, #4]	; (4034d8 <vTaskMissedYield+0x8>)
  4034d4:	601a      	str	r2, [r3, #0]
  4034d6:	4770      	bx	lr
  4034d8:	20400d78 	.word	0x20400d78

004034dc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4034dc:	4b05      	ldr	r3, [pc, #20]	; (4034f4 <xTaskGetSchedulerState+0x18>)
  4034de:	681b      	ldr	r3, [r3, #0]
  4034e0:	b133      	cbz	r3, 4034f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4034e2:	4b05      	ldr	r3, [pc, #20]	; (4034f8 <xTaskGetSchedulerState+0x1c>)
  4034e4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4034e6:	2b00      	cmp	r3, #0
  4034e8:	bf0c      	ite	eq
  4034ea:	2002      	moveq	r0, #2
  4034ec:	2000      	movne	r0, #0
  4034ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4034f0:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4034f2:	4770      	bx	lr
  4034f4:	20400d48 	.word	0x20400d48
  4034f8:	20400cf4 	.word	0x20400cf4

004034fc <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4034fc:	2800      	cmp	r0, #0
  4034fe:	d044      	beq.n	40358a <vTaskPriorityInherit+0x8e>
	{
  403500:	b538      	push	{r3, r4, r5, lr}
  403502:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403504:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403506:	4921      	ldr	r1, [pc, #132]	; (40358c <vTaskPriorityInherit+0x90>)
  403508:	6809      	ldr	r1, [r1, #0]
  40350a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40350c:	428a      	cmp	r2, r1
  40350e:	d214      	bcs.n	40353a <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403510:	6981      	ldr	r1, [r0, #24]
  403512:	2900      	cmp	r1, #0
  403514:	db05      	blt.n	403522 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403516:	491d      	ldr	r1, [pc, #116]	; (40358c <vTaskPriorityInherit+0x90>)
  403518:	6809      	ldr	r1, [r1, #0]
  40351a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40351c:	f1c1 0105 	rsb	r1, r1, #5
  403520:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  403522:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403526:	491a      	ldr	r1, [pc, #104]	; (403590 <vTaskPriorityInherit+0x94>)
  403528:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40352c:	6961      	ldr	r1, [r4, #20]
  40352e:	4291      	cmp	r1, r2
  403530:	d004      	beq.n	40353c <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403532:	4a16      	ldr	r2, [pc, #88]	; (40358c <vTaskPriorityInherit+0x90>)
  403534:	6812      	ldr	r2, [r2, #0]
  403536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403538:	62e2      	str	r2, [r4, #44]	; 0x2c
  40353a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40353c:	1d25      	adds	r5, r4, #4
  40353e:	4628      	mov	r0, r5
  403540:	4b14      	ldr	r3, [pc, #80]	; (403594 <vTaskPriorityInherit+0x98>)
  403542:	4798      	blx	r3
  403544:	b970      	cbnz	r0, 403564 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403548:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40354c:	4a10      	ldr	r2, [pc, #64]	; (403590 <vTaskPriorityInherit+0x94>)
  40354e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403552:	b93a      	cbnz	r2, 403564 <vTaskPriorityInherit+0x68>
  403554:	4810      	ldr	r0, [pc, #64]	; (403598 <vTaskPriorityInherit+0x9c>)
  403556:	6802      	ldr	r2, [r0, #0]
  403558:	2101      	movs	r1, #1
  40355a:	fa01 f303 	lsl.w	r3, r1, r3
  40355e:	ea22 0303 	bic.w	r3, r2, r3
  403562:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403564:	4b09      	ldr	r3, [pc, #36]	; (40358c <vTaskPriorityInherit+0x90>)
  403566:	681b      	ldr	r3, [r3, #0]
  403568:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40356a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40356c:	4a0a      	ldr	r2, [pc, #40]	; (403598 <vTaskPriorityInherit+0x9c>)
  40356e:	6811      	ldr	r1, [r2, #0]
  403570:	2301      	movs	r3, #1
  403572:	4083      	lsls	r3, r0
  403574:	430b      	orrs	r3, r1
  403576:	6013      	str	r3, [r2, #0]
  403578:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40357c:	4629      	mov	r1, r5
  40357e:	4b04      	ldr	r3, [pc, #16]	; (403590 <vTaskPriorityInherit+0x94>)
  403580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403584:	4b05      	ldr	r3, [pc, #20]	; (40359c <vTaskPriorityInherit+0xa0>)
  403586:	4798      	blx	r3
  403588:	bd38      	pop	{r3, r4, r5, pc}
  40358a:	4770      	bx	lr
  40358c:	20400c7c 	.word	0x20400c7c
  403590:	20400c88 	.word	0x20400c88
  403594:	00401ee9 	.word	0x00401ee9
  403598:	20400d00 	.word	0x20400d00
  40359c:	00401e9d 	.word	0x00401e9d

004035a0 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4035a0:	2800      	cmp	r0, #0
  4035a2:	d04d      	beq.n	403640 <xTaskPriorityDisinherit+0xa0>
	{
  4035a4:	b538      	push	{r3, r4, r5, lr}
  4035a6:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4035a8:	4a27      	ldr	r2, [pc, #156]	; (403648 <xTaskPriorityDisinherit+0xa8>)
  4035aa:	6812      	ldr	r2, [r2, #0]
  4035ac:	4290      	cmp	r0, r2
  4035ae:	d00a      	beq.n	4035c6 <xTaskPriorityDisinherit+0x26>
  4035b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035b4:	b672      	cpsid	i
  4035b6:	f383 8811 	msr	BASEPRI, r3
  4035ba:	f3bf 8f6f 	isb	sy
  4035be:	f3bf 8f4f 	dsb	sy
  4035c2:	b662      	cpsie	i
  4035c4:	e7fe      	b.n	4035c4 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4035c6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4035c8:	b952      	cbnz	r2, 4035e0 <xTaskPriorityDisinherit+0x40>
  4035ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ce:	b672      	cpsid	i
  4035d0:	f383 8811 	msr	BASEPRI, r3
  4035d4:	f3bf 8f6f 	isb	sy
  4035d8:	f3bf 8f4f 	dsb	sy
  4035dc:	b662      	cpsie	i
  4035de:	e7fe      	b.n	4035de <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4035e0:	3a01      	subs	r2, #1
  4035e2:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4035e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4035e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4035e8:	4288      	cmp	r0, r1
  4035ea:	d02b      	beq.n	403644 <xTaskPriorityDisinherit+0xa4>
  4035ec:	bb52      	cbnz	r2, 403644 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4035ee:	1d25      	adds	r5, r4, #4
  4035f0:	4628      	mov	r0, r5
  4035f2:	4b16      	ldr	r3, [pc, #88]	; (40364c <xTaskPriorityDisinherit+0xac>)
  4035f4:	4798      	blx	r3
  4035f6:	b968      	cbnz	r0, 403614 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4035f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4035fa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4035fe:	4b14      	ldr	r3, [pc, #80]	; (403650 <xTaskPriorityDisinherit+0xb0>)
  403600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403604:	b933      	cbnz	r3, 403614 <xTaskPriorityDisinherit+0x74>
  403606:	4813      	ldr	r0, [pc, #76]	; (403654 <xTaskPriorityDisinherit+0xb4>)
  403608:	6803      	ldr	r3, [r0, #0]
  40360a:	2201      	movs	r2, #1
  40360c:	408a      	lsls	r2, r1
  40360e:	ea23 0302 	bic.w	r3, r3, r2
  403612:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403614:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403616:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403618:	f1c0 0305 	rsb	r3, r0, #5
  40361c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40361e:	4a0d      	ldr	r2, [pc, #52]	; (403654 <xTaskPriorityDisinherit+0xb4>)
  403620:	6811      	ldr	r1, [r2, #0]
  403622:	2401      	movs	r4, #1
  403624:	fa04 f300 	lsl.w	r3, r4, r0
  403628:	430b      	orrs	r3, r1
  40362a:	6013      	str	r3, [r2, #0]
  40362c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403630:	4629      	mov	r1, r5
  403632:	4b07      	ldr	r3, [pc, #28]	; (403650 <xTaskPriorityDisinherit+0xb0>)
  403634:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403638:	4b07      	ldr	r3, [pc, #28]	; (403658 <xTaskPriorityDisinherit+0xb8>)
  40363a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  40363c:	4620      	mov	r0, r4
  40363e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403640:	2000      	movs	r0, #0
  403642:	4770      	bx	lr
  403644:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403646:	bd38      	pop	{r3, r4, r5, pc}
  403648:	20400c7c 	.word	0x20400c7c
  40364c:	00401ee9 	.word	0x00401ee9
  403650:	20400c88 	.word	0x20400c88
  403654:	20400d00 	.word	0x20400d00
  403658:	00401e9d 	.word	0x00401e9d

0040365c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  40365c:	4b05      	ldr	r3, [pc, #20]	; (403674 <pvTaskIncrementMutexHeldCount+0x18>)
  40365e:	681b      	ldr	r3, [r3, #0]
  403660:	b123      	cbz	r3, 40366c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403662:	4b04      	ldr	r3, [pc, #16]	; (403674 <pvTaskIncrementMutexHeldCount+0x18>)
  403664:	681a      	ldr	r2, [r3, #0]
  403666:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403668:	3301      	adds	r3, #1
  40366a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  40366c:	4b01      	ldr	r3, [pc, #4]	; (403674 <pvTaskIncrementMutexHeldCount+0x18>)
  40366e:	6818      	ldr	r0, [r3, #0]
	}
  403670:	4770      	bx	lr
  403672:	bf00      	nop
  403674:	20400c7c 	.word	0x20400c7c

00403678 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403678:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40367a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40367c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40367e:	4291      	cmp	r1, r2
  403680:	d80c      	bhi.n	40369c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403682:	1ad2      	subs	r2, r2, r3
  403684:	6983      	ldr	r3, [r0, #24]
  403686:	429a      	cmp	r2, r3
  403688:	d301      	bcc.n	40368e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40368a:	2001      	movs	r0, #1
  40368c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40368e:	1d01      	adds	r1, r0, #4
  403690:	4b09      	ldr	r3, [pc, #36]	; (4036b8 <prvInsertTimerInActiveList+0x40>)
  403692:	6818      	ldr	r0, [r3, #0]
  403694:	4b09      	ldr	r3, [pc, #36]	; (4036bc <prvInsertTimerInActiveList+0x44>)
  403696:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403698:	2000      	movs	r0, #0
  40369a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40369c:	429a      	cmp	r2, r3
  40369e:	d203      	bcs.n	4036a8 <prvInsertTimerInActiveList+0x30>
  4036a0:	4299      	cmp	r1, r3
  4036a2:	d301      	bcc.n	4036a8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4036a4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4036a6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4036a8:	1d01      	adds	r1, r0, #4
  4036aa:	4b05      	ldr	r3, [pc, #20]	; (4036c0 <prvInsertTimerInActiveList+0x48>)
  4036ac:	6818      	ldr	r0, [r3, #0]
  4036ae:	4b03      	ldr	r3, [pc, #12]	; (4036bc <prvInsertTimerInActiveList+0x44>)
  4036b0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4036b2:	2000      	movs	r0, #0
  4036b4:	bd08      	pop	{r3, pc}
  4036b6:	bf00      	nop
  4036b8:	20400d80 	.word	0x20400d80
  4036bc:	00401eb5 	.word	0x00401eb5
  4036c0:	20400d7c 	.word	0x20400d7c

004036c4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4036c4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4036c6:	4b15      	ldr	r3, [pc, #84]	; (40371c <prvCheckForValidListAndQueue+0x58>)
  4036c8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4036ca:	4b15      	ldr	r3, [pc, #84]	; (403720 <prvCheckForValidListAndQueue+0x5c>)
  4036cc:	681b      	ldr	r3, [r3, #0]
  4036ce:	b113      	cbz	r3, 4036d6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4036d0:	4b14      	ldr	r3, [pc, #80]	; (403724 <prvCheckForValidListAndQueue+0x60>)
  4036d2:	4798      	blx	r3
  4036d4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4036d6:	4d14      	ldr	r5, [pc, #80]	; (403728 <prvCheckForValidListAndQueue+0x64>)
  4036d8:	4628      	mov	r0, r5
  4036da:	4e14      	ldr	r6, [pc, #80]	; (40372c <prvCheckForValidListAndQueue+0x68>)
  4036dc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4036de:	4c14      	ldr	r4, [pc, #80]	; (403730 <prvCheckForValidListAndQueue+0x6c>)
  4036e0:	4620      	mov	r0, r4
  4036e2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4036e4:	4b13      	ldr	r3, [pc, #76]	; (403734 <prvCheckForValidListAndQueue+0x70>)
  4036e6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4036e8:	4b13      	ldr	r3, [pc, #76]	; (403738 <prvCheckForValidListAndQueue+0x74>)
  4036ea:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4036ec:	2200      	movs	r2, #0
  4036ee:	2110      	movs	r1, #16
  4036f0:	2005      	movs	r0, #5
  4036f2:	4b12      	ldr	r3, [pc, #72]	; (40373c <prvCheckForValidListAndQueue+0x78>)
  4036f4:	4798      	blx	r3
  4036f6:	4b0a      	ldr	r3, [pc, #40]	; (403720 <prvCheckForValidListAndQueue+0x5c>)
  4036f8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4036fa:	b118      	cbz	r0, 403704 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4036fc:	4910      	ldr	r1, [pc, #64]	; (403740 <prvCheckForValidListAndQueue+0x7c>)
  4036fe:	4b11      	ldr	r3, [pc, #68]	; (403744 <prvCheckForValidListAndQueue+0x80>)
  403700:	4798      	blx	r3
  403702:	e7e5      	b.n	4036d0 <prvCheckForValidListAndQueue+0xc>
  403704:	f04f 0380 	mov.w	r3, #128	; 0x80
  403708:	b672      	cpsid	i
  40370a:	f383 8811 	msr	BASEPRI, r3
  40370e:	f3bf 8f6f 	isb	sy
  403712:	f3bf 8f4f 	dsb	sy
  403716:	b662      	cpsie	i
  403718:	e7fe      	b.n	403718 <prvCheckForValidListAndQueue+0x54>
  40371a:	bf00      	nop
  40371c:	00401fcd 	.word	0x00401fcd
  403720:	20400db0 	.word	0x20400db0
  403724:	00402019 	.word	0x00402019
  403728:	20400d84 	.word	0x20400d84
  40372c:	00401e81 	.word	0x00401e81
  403730:	20400d98 	.word	0x20400d98
  403734:	20400d7c 	.word	0x20400d7c
  403738:	20400d80 	.word	0x20400d80
  40373c:	004024ed 	.word	0x004024ed
  403740:	0040bf5c 	.word	0x0040bf5c
  403744:	00402a1d 	.word	0x00402a1d

00403748 <xTimerCreateTimerTask>:
{
  403748:	b510      	push	{r4, lr}
  40374a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40374c:	4b0f      	ldr	r3, [pc, #60]	; (40378c <xTimerCreateTimerTask+0x44>)
  40374e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403750:	4b0f      	ldr	r3, [pc, #60]	; (403790 <xTimerCreateTimerTask+0x48>)
  403752:	681b      	ldr	r3, [r3, #0]
  403754:	b173      	cbz	r3, 403774 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403756:	2300      	movs	r3, #0
  403758:	9303      	str	r3, [sp, #12]
  40375a:	9302      	str	r3, [sp, #8]
  40375c:	9301      	str	r3, [sp, #4]
  40375e:	2204      	movs	r2, #4
  403760:	9200      	str	r2, [sp, #0]
  403762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403766:	490b      	ldr	r1, [pc, #44]	; (403794 <xTimerCreateTimerTask+0x4c>)
  403768:	480b      	ldr	r0, [pc, #44]	; (403798 <xTimerCreateTimerTask+0x50>)
  40376a:	4c0c      	ldr	r4, [pc, #48]	; (40379c <xTimerCreateTimerTask+0x54>)
  40376c:	47a0      	blx	r4
	configASSERT( xReturn );
  40376e:	b108      	cbz	r0, 403774 <xTimerCreateTimerTask+0x2c>
}
  403770:	b004      	add	sp, #16
  403772:	bd10      	pop	{r4, pc}
  403774:	f04f 0380 	mov.w	r3, #128	; 0x80
  403778:	b672      	cpsid	i
  40377a:	f383 8811 	msr	BASEPRI, r3
  40377e:	f3bf 8f6f 	isb	sy
  403782:	f3bf 8f4f 	dsb	sy
  403786:	b662      	cpsie	i
  403788:	e7fe      	b.n	403788 <xTimerCreateTimerTask+0x40>
  40378a:	bf00      	nop
  40378c:	004036c5 	.word	0x004036c5
  403790:	20400db0 	.word	0x20400db0
  403794:	0040bf64 	.word	0x0040bf64
  403798:	004038c9 	.word	0x004038c9
  40379c:	00402b2d 	.word	0x00402b2d

004037a0 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4037a0:	b1d8      	cbz	r0, 4037da <xTimerGenericCommand+0x3a>
{
  4037a2:	b530      	push	{r4, r5, lr}
  4037a4:	b085      	sub	sp, #20
  4037a6:	4615      	mov	r5, r2
  4037a8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4037aa:	4a15      	ldr	r2, [pc, #84]	; (403800 <xTimerGenericCommand+0x60>)
  4037ac:	6810      	ldr	r0, [r2, #0]
  4037ae:	b320      	cbz	r0, 4037fa <xTimerGenericCommand+0x5a>
  4037b0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4037b2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4037b4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4037b6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4037b8:	2905      	cmp	r1, #5
  4037ba:	dc19      	bgt.n	4037f0 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4037bc:	4b11      	ldr	r3, [pc, #68]	; (403804 <xTimerGenericCommand+0x64>)
  4037be:	4798      	blx	r3
  4037c0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4037c2:	f04f 0300 	mov.w	r3, #0
  4037c6:	bf0c      	ite	eq
  4037c8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4037ca:	461a      	movne	r2, r3
  4037cc:	4669      	mov	r1, sp
  4037ce:	480c      	ldr	r0, [pc, #48]	; (403800 <xTimerGenericCommand+0x60>)
  4037d0:	6800      	ldr	r0, [r0, #0]
  4037d2:	4c0d      	ldr	r4, [pc, #52]	; (403808 <xTimerGenericCommand+0x68>)
  4037d4:	47a0      	blx	r4
}
  4037d6:	b005      	add	sp, #20
  4037d8:	bd30      	pop	{r4, r5, pc}
  4037da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037de:	b672      	cpsid	i
  4037e0:	f383 8811 	msr	BASEPRI, r3
  4037e4:	f3bf 8f6f 	isb	sy
  4037e8:	f3bf 8f4f 	dsb	sy
  4037ec:	b662      	cpsie	i
  4037ee:	e7fe      	b.n	4037ee <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4037f0:	2300      	movs	r3, #0
  4037f2:	4669      	mov	r1, sp
  4037f4:	4c05      	ldr	r4, [pc, #20]	; (40380c <xTimerGenericCommand+0x6c>)
  4037f6:	47a0      	blx	r4
  4037f8:	e7ed      	b.n	4037d6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4037fa:	2000      	movs	r0, #0
	return xReturn;
  4037fc:	e7eb      	b.n	4037d6 <xTimerGenericCommand+0x36>
  4037fe:	bf00      	nop
  403800:	20400db0 	.word	0x20400db0
  403804:	004034dd 	.word	0x004034dd
  403808:	00402569 	.word	0x00402569
  40380c:	0040274d 	.word	0x0040274d

00403810 <prvSampleTimeNow>:
{
  403810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403814:	b082      	sub	sp, #8
  403816:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403818:	4b24      	ldr	r3, [pc, #144]	; (4038ac <prvSampleTimeNow+0x9c>)
  40381a:	4798      	blx	r3
  40381c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40381e:	4b24      	ldr	r3, [pc, #144]	; (4038b0 <prvSampleTimeNow+0xa0>)
  403820:	681b      	ldr	r3, [r3, #0]
  403822:	4298      	cmp	r0, r3
  403824:	d31b      	bcc.n	40385e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403826:	2300      	movs	r3, #0
  403828:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  40382c:	4b20      	ldr	r3, [pc, #128]	; (4038b0 <prvSampleTimeNow+0xa0>)
  40382e:	601f      	str	r7, [r3, #0]
}
  403830:	4638      	mov	r0, r7
  403832:	b002      	add	sp, #8
  403834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403838:	2100      	movs	r1, #0
  40383a:	9100      	str	r1, [sp, #0]
  40383c:	460b      	mov	r3, r1
  40383e:	4652      	mov	r2, sl
  403840:	4620      	mov	r0, r4
  403842:	4c1c      	ldr	r4, [pc, #112]	; (4038b4 <prvSampleTimeNow+0xa4>)
  403844:	47a0      	blx	r4
				configASSERT( xResult );
  403846:	b960      	cbnz	r0, 403862 <prvSampleTimeNow+0x52>
  403848:	f04f 0380 	mov.w	r3, #128	; 0x80
  40384c:	b672      	cpsid	i
  40384e:	f383 8811 	msr	BASEPRI, r3
  403852:	f3bf 8f6f 	isb	sy
  403856:	f3bf 8f4f 	dsb	sy
  40385a:	b662      	cpsie	i
  40385c:	e7fe      	b.n	40385c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40385e:	4d16      	ldr	r5, [pc, #88]	; (4038b8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403860:	4e16      	ldr	r6, [pc, #88]	; (4038bc <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403862:	682b      	ldr	r3, [r5, #0]
  403864:	681a      	ldr	r2, [r3, #0]
  403866:	b1c2      	cbz	r2, 40389a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403868:	68db      	ldr	r3, [r3, #12]
  40386a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40386e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403870:	f104 0904 	add.w	r9, r4, #4
  403874:	4648      	mov	r0, r9
  403876:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403878:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40387a:	4620      	mov	r0, r4
  40387c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40387e:	69e3      	ldr	r3, [r4, #28]
  403880:	2b01      	cmp	r3, #1
  403882:	d1ee      	bne.n	403862 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403884:	69a3      	ldr	r3, [r4, #24]
  403886:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403888:	459a      	cmp	sl, r3
  40388a:	d2d5      	bcs.n	403838 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40388c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40388e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403890:	4649      	mov	r1, r9
  403892:	6828      	ldr	r0, [r5, #0]
  403894:	4b0a      	ldr	r3, [pc, #40]	; (4038c0 <prvSampleTimeNow+0xb0>)
  403896:	4798      	blx	r3
  403898:	e7e3      	b.n	403862 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40389a:	4a0a      	ldr	r2, [pc, #40]	; (4038c4 <prvSampleTimeNow+0xb4>)
  40389c:	6810      	ldr	r0, [r2, #0]
  40389e:	4906      	ldr	r1, [pc, #24]	; (4038b8 <prvSampleTimeNow+0xa8>)
  4038a0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4038a2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4038a4:	2301      	movs	r3, #1
  4038a6:	f8c8 3000 	str.w	r3, [r8]
  4038aa:	e7bf      	b.n	40382c <prvSampleTimeNow+0x1c>
  4038ac:	00402e01 	.word	0x00402e01
  4038b0:	20400dac 	.word	0x20400dac
  4038b4:	004037a1 	.word	0x004037a1
  4038b8:	20400d7c 	.word	0x20400d7c
  4038bc:	00401ee9 	.word	0x00401ee9
  4038c0:	00401eb5 	.word	0x00401eb5
  4038c4:	20400d80 	.word	0x20400d80

004038c8 <prvTimerTask>:
{
  4038c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038cc:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4038ce:	4e75      	ldr	r6, [pc, #468]	; (403aa4 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4038d0:	4f75      	ldr	r7, [pc, #468]	; (403aa8 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4038d2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403ad0 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4038d6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403ad4 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4038da:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4038dc:	681a      	ldr	r2, [r3, #0]
  4038de:	2a00      	cmp	r2, #0
  4038e0:	f000 80ce 	beq.w	403a80 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4038e4:	68db      	ldr	r3, [r3, #12]
  4038e6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4038e8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4038ea:	a804      	add	r0, sp, #16
  4038ec:	4b6f      	ldr	r3, [pc, #444]	; (403aac <prvTimerTask+0x1e4>)
  4038ee:	4798      	blx	r3
  4038f0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4038f2:	9b04      	ldr	r3, [sp, #16]
  4038f4:	2b00      	cmp	r3, #0
  4038f6:	d144      	bne.n	403982 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4038f8:	42a0      	cmp	r0, r4
  4038fa:	d212      	bcs.n	403922 <prvTimerTask+0x5a>
  4038fc:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4038fe:	1b61      	subs	r1, r4, r5
  403900:	4b6b      	ldr	r3, [pc, #428]	; (403ab0 <prvTimerTask+0x1e8>)
  403902:	6818      	ldr	r0, [r3, #0]
  403904:	4b6b      	ldr	r3, [pc, #428]	; (403ab4 <prvTimerTask+0x1ec>)
  403906:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403908:	4b6b      	ldr	r3, [pc, #428]	; (403ab8 <prvTimerTask+0x1f0>)
  40390a:	4798      	blx	r3
  40390c:	2800      	cmp	r0, #0
  40390e:	d13a      	bne.n	403986 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403914:	f8c9 3000 	str.w	r3, [r9]
  403918:	f3bf 8f4f 	dsb	sy
  40391c:	f3bf 8f6f 	isb	sy
  403920:	e031      	b.n	403986 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403922:	4b65      	ldr	r3, [pc, #404]	; (403ab8 <prvTimerTask+0x1f0>)
  403924:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403926:	6833      	ldr	r3, [r6, #0]
  403928:	68db      	ldr	r3, [r3, #12]
  40392a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40392e:	f10a 0004 	add.w	r0, sl, #4
  403932:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403934:	f8da 301c 	ldr.w	r3, [sl, #28]
  403938:	2b01      	cmp	r3, #1
  40393a:	d004      	beq.n	403946 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40393c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403940:	4650      	mov	r0, sl
  403942:	4798      	blx	r3
  403944:	e01f      	b.n	403986 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403946:	f8da 1018 	ldr.w	r1, [sl, #24]
  40394a:	4623      	mov	r3, r4
  40394c:	462a      	mov	r2, r5
  40394e:	4421      	add	r1, r4
  403950:	4650      	mov	r0, sl
  403952:	4d5a      	ldr	r5, [pc, #360]	; (403abc <prvTimerTask+0x1f4>)
  403954:	47a8      	blx	r5
  403956:	2801      	cmp	r0, #1
  403958:	d1f0      	bne.n	40393c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40395a:	2100      	movs	r1, #0
  40395c:	9100      	str	r1, [sp, #0]
  40395e:	460b      	mov	r3, r1
  403960:	4622      	mov	r2, r4
  403962:	4650      	mov	r0, sl
  403964:	4c56      	ldr	r4, [pc, #344]	; (403ac0 <prvTimerTask+0x1f8>)
  403966:	47a0      	blx	r4
			configASSERT( xResult );
  403968:	2800      	cmp	r0, #0
  40396a:	d1e7      	bne.n	40393c <prvTimerTask+0x74>
  40396c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403970:	b672      	cpsid	i
  403972:	f383 8811 	msr	BASEPRI, r3
  403976:	f3bf 8f6f 	isb	sy
  40397a:	f3bf 8f4f 	dsb	sy
  40397e:	b662      	cpsie	i
  403980:	e7fe      	b.n	403980 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403982:	4b4d      	ldr	r3, [pc, #308]	; (403ab8 <prvTimerTask+0x1f0>)
  403984:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403986:	4d4a      	ldr	r5, [pc, #296]	; (403ab0 <prvTimerTask+0x1e8>)
  403988:	4c4e      	ldr	r4, [pc, #312]	; (403ac4 <prvTimerTask+0x1fc>)
  40398a:	e006      	b.n	40399a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40398c:	9907      	ldr	r1, [sp, #28]
  40398e:	9806      	ldr	r0, [sp, #24]
  403990:	9b05      	ldr	r3, [sp, #20]
  403992:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403994:	9b04      	ldr	r3, [sp, #16]
  403996:	2b00      	cmp	r3, #0
  403998:	da09      	bge.n	4039ae <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40399a:	2300      	movs	r3, #0
  40399c:	461a      	mov	r2, r3
  40399e:	a904      	add	r1, sp, #16
  4039a0:	6828      	ldr	r0, [r5, #0]
  4039a2:	47a0      	blx	r4
  4039a4:	2800      	cmp	r0, #0
  4039a6:	d098      	beq.n	4038da <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4039a8:	9b04      	ldr	r3, [sp, #16]
  4039aa:	2b00      	cmp	r3, #0
  4039ac:	dbee      	blt.n	40398c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4039ae:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4039b2:	f8da 3014 	ldr.w	r3, [sl, #20]
  4039b6:	b113      	cbz	r3, 4039be <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4039b8:	f10a 0004 	add.w	r0, sl, #4
  4039bc:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4039be:	a803      	add	r0, sp, #12
  4039c0:	4b3a      	ldr	r3, [pc, #232]	; (403aac <prvTimerTask+0x1e4>)
  4039c2:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4039c4:	9b04      	ldr	r3, [sp, #16]
  4039c6:	2b09      	cmp	r3, #9
  4039c8:	d8e7      	bhi.n	40399a <prvTimerTask+0xd2>
  4039ca:	a201      	add	r2, pc, #4	; (adr r2, 4039d0 <prvTimerTask+0x108>)
  4039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4039d0:	004039f9 	.word	0x004039f9
  4039d4:	004039f9 	.word	0x004039f9
  4039d8:	004039f9 	.word	0x004039f9
  4039dc:	0040399b 	.word	0x0040399b
  4039e0:	00403a4d 	.word	0x00403a4d
  4039e4:	00403a79 	.word	0x00403a79
  4039e8:	004039f9 	.word	0x004039f9
  4039ec:	004039f9 	.word	0x004039f9
  4039f0:	0040399b 	.word	0x0040399b
  4039f4:	00403a4d 	.word	0x00403a4d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4039f8:	9c05      	ldr	r4, [sp, #20]
  4039fa:	f8da 1018 	ldr.w	r1, [sl, #24]
  4039fe:	4623      	mov	r3, r4
  403a00:	4602      	mov	r2, r0
  403a02:	4421      	add	r1, r4
  403a04:	4650      	mov	r0, sl
  403a06:	4c2d      	ldr	r4, [pc, #180]	; (403abc <prvTimerTask+0x1f4>)
  403a08:	47a0      	blx	r4
  403a0a:	2801      	cmp	r0, #1
  403a0c:	d1bc      	bne.n	403988 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403a0e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403a12:	4650      	mov	r0, sl
  403a14:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403a16:	f8da 301c 	ldr.w	r3, [sl, #28]
  403a1a:	2b01      	cmp	r3, #1
  403a1c:	d1b4      	bne.n	403988 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403a1e:	f8da 2018 	ldr.w	r2, [sl, #24]
  403a22:	2100      	movs	r1, #0
  403a24:	9100      	str	r1, [sp, #0]
  403a26:	460b      	mov	r3, r1
  403a28:	9805      	ldr	r0, [sp, #20]
  403a2a:	4402      	add	r2, r0
  403a2c:	4650      	mov	r0, sl
  403a2e:	4c24      	ldr	r4, [pc, #144]	; (403ac0 <prvTimerTask+0x1f8>)
  403a30:	47a0      	blx	r4
							configASSERT( xResult );
  403a32:	2800      	cmp	r0, #0
  403a34:	d1a8      	bne.n	403988 <prvTimerTask+0xc0>
  403a36:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a3a:	b672      	cpsid	i
  403a3c:	f383 8811 	msr	BASEPRI, r3
  403a40:	f3bf 8f6f 	isb	sy
  403a44:	f3bf 8f4f 	dsb	sy
  403a48:	b662      	cpsie	i
  403a4a:	e7fe      	b.n	403a4a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403a4c:	9905      	ldr	r1, [sp, #20]
  403a4e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403a52:	b131      	cbz	r1, 403a62 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403a54:	4603      	mov	r3, r0
  403a56:	4602      	mov	r2, r0
  403a58:	4401      	add	r1, r0
  403a5a:	4650      	mov	r0, sl
  403a5c:	4c17      	ldr	r4, [pc, #92]	; (403abc <prvTimerTask+0x1f4>)
  403a5e:	47a0      	blx	r4
  403a60:	e792      	b.n	403988 <prvTimerTask+0xc0>
  403a62:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a66:	b672      	cpsid	i
  403a68:	f383 8811 	msr	BASEPRI, r3
  403a6c:	f3bf 8f6f 	isb	sy
  403a70:	f3bf 8f4f 	dsb	sy
  403a74:	b662      	cpsie	i
  403a76:	e7fe      	b.n	403a76 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403a78:	4650      	mov	r0, sl
  403a7a:	4b13      	ldr	r3, [pc, #76]	; (403ac8 <prvTimerTask+0x200>)
  403a7c:	4798      	blx	r3
  403a7e:	e783      	b.n	403988 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403a80:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403a82:	a804      	add	r0, sp, #16
  403a84:	4b09      	ldr	r3, [pc, #36]	; (403aac <prvTimerTask+0x1e4>)
  403a86:	4798      	blx	r3
  403a88:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403a8a:	9b04      	ldr	r3, [sp, #16]
  403a8c:	2b00      	cmp	r3, #0
  403a8e:	f47f af78 	bne.w	403982 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403a92:	4b0e      	ldr	r3, [pc, #56]	; (403acc <prvTimerTask+0x204>)
  403a94:	681b      	ldr	r3, [r3, #0]
  403a96:	681a      	ldr	r2, [r3, #0]
  403a98:	fab2 f282 	clz	r2, r2
  403a9c:	0952      	lsrs	r2, r2, #5
  403a9e:	2400      	movs	r4, #0
  403aa0:	e72d      	b.n	4038fe <prvTimerTask+0x36>
  403aa2:	bf00      	nop
  403aa4:	20400d7c 	.word	0x20400d7c
  403aa8:	00402df1 	.word	0x00402df1
  403aac:	00403811 	.word	0x00403811
  403ab0:	20400db0 	.word	0x20400db0
  403ab4:	00402a51 	.word	0x00402a51
  403ab8:	00402f59 	.word	0x00402f59
  403abc:	00403679 	.word	0x00403679
  403ac0:	004037a1 	.word	0x004037a1
  403ac4:	0040284d 	.word	0x0040284d
  403ac8:	00402259 	.word	0x00402259
  403acc:	20400d80 	.word	0x20400d80
  403ad0:	e000ed04 	.word	0xe000ed04
  403ad4:	00401ee9 	.word	0x00401ee9

00403ad8 <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  403ad8:	4770      	bx	lr
	...

00403adc <task_orientacao>:

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

static void task_orientacao(void *pvParameters) {
  403adc:	b580      	push	{r7, lr}
  403ade:	b082      	sub	sp, #8
	int orientacao;

	for (;;)  {
		if (xQueueReceive(xQueueOrientation, &orientacao, 50)) {
  403ae0:	4d22      	ldr	r5, [pc, #136]	; (403b6c <task_orientacao+0x90>)
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
			
			} else {
			
				// Apaga todos os LEDs
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403ae2:	4e23      	ldr	r6, [pc, #140]	; (403b70 <task_orientacao+0x94>)
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403ae4:	4f23      	ldr	r7, [pc, #140]	; (403b74 <task_orientacao+0x98>)
  403ae6:	e00a      	b.n	403afe <task_orientacao+0x22>
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  403ae8:	2101      	movs	r1, #1
  403aea:	4630      	mov	r0, r6
  403aec:	4b22      	ldr	r3, [pc, #136]	; (403b78 <task_orientacao+0x9c>)
  403aee:	4798      	blx	r3
				vTaskDelay(10);
  403af0:	200a      	movs	r0, #10
  403af2:	4b22      	ldr	r3, [pc, #136]	; (403b7c <task_orientacao+0xa0>)
  403af4:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403af6:	2101      	movs	r1, #1
  403af8:	4630      	mov	r0, r6
  403afa:	4b21      	ldr	r3, [pc, #132]	; (403b80 <task_orientacao+0xa4>)
  403afc:	4798      	blx	r3
		if (xQueueReceive(xQueueOrientation, &orientacao, 50)) {
  403afe:	4c21      	ldr	r4, [pc, #132]	; (403b84 <task_orientacao+0xa8>)
  403b00:	2300      	movs	r3, #0
  403b02:	2232      	movs	r2, #50	; 0x32
  403b04:	a901      	add	r1, sp, #4
  403b06:	6828      	ldr	r0, [r5, #0]
  403b08:	47a0      	blx	r4
  403b0a:	2800      	cmp	r0, #0
  403b0c:	d0f8      	beq.n	403b00 <task_orientacao+0x24>
			if (orientacao == ESQUERDA) {
  403b0e:	9b01      	ldr	r3, [sp, #4]
  403b10:	2b00      	cmp	r3, #0
  403b12:	d0e9      	beq.n	403ae8 <task_orientacao+0xc>
			} else if (orientacao == FRENTE) {
  403b14:	2b01      	cmp	r3, #1
  403b16:	d00d      	beq.n	403b34 <task_orientacao+0x58>
			} else if (orientacao == DIREITA) {
  403b18:	2b02      	cmp	r3, #2
  403b1a:	d019      	beq.n	403b50 <task_orientacao+0x74>
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403b1c:	2101      	movs	r1, #1
  403b1e:	4630      	mov	r0, r6
  403b20:	4c17      	ldr	r4, [pc, #92]	; (403b80 <task_orientacao+0xa4>)
  403b22:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403b24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b28:	4638      	mov	r0, r7
  403b2a:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403b2c:	2104      	movs	r1, #4
  403b2e:	4816      	ldr	r0, [pc, #88]	; (403b88 <task_orientacao+0xac>)
  403b30:	47a0      	blx	r4
  403b32:	e7e4      	b.n	403afe <task_orientacao+0x22>
				pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  403b34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b38:	4638      	mov	r0, r7
  403b3a:	4b0f      	ldr	r3, [pc, #60]	; (403b78 <task_orientacao+0x9c>)
  403b3c:	4798      	blx	r3
				vTaskDelay(10);
  403b3e:	200a      	movs	r0, #10
  403b40:	4b0e      	ldr	r3, [pc, #56]	; (403b7c <task_orientacao+0xa0>)
  403b42:	4798      	blx	r3
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403b44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b48:	4638      	mov	r0, r7
  403b4a:	4b0d      	ldr	r3, [pc, #52]	; (403b80 <task_orientacao+0xa4>)
  403b4c:	4798      	blx	r3
  403b4e:	e7d6      	b.n	403afe <task_orientacao+0x22>
				pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  403b50:	4c0d      	ldr	r4, [pc, #52]	; (403b88 <task_orientacao+0xac>)
  403b52:	2104      	movs	r1, #4
  403b54:	4620      	mov	r0, r4
  403b56:	4b08      	ldr	r3, [pc, #32]	; (403b78 <task_orientacao+0x9c>)
  403b58:	4798      	blx	r3
				vTaskDelay(10);
  403b5a:	200a      	movs	r0, #10
  403b5c:	4b07      	ldr	r3, [pc, #28]	; (403b7c <task_orientacao+0xa0>)
  403b5e:	4798      	blx	r3
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403b60:	2104      	movs	r1, #4
  403b62:	4620      	mov	r0, r4
  403b64:	4b06      	ldr	r3, [pc, #24]	; (403b80 <task_orientacao+0xa4>)
  403b66:	4798      	blx	r3
  403b68:	e7c9      	b.n	403afe <task_orientacao+0x22>
  403b6a:	bf00      	nop
  403b6c:	20400e38 	.word	0x20400e38
  403b70:	400e0e00 	.word	0x400e0e00
  403b74:	400e1200 	.word	0x400e1200
  403b78:	0040163b 	.word	0x0040163b
  403b7c:	00403079 	.word	0x00403079
  403b80:	00401637 	.word	0x00401637
  403b84:	0040284d 	.word	0x0040284d
  403b88:	400e1000 	.word	0x400e1000

00403b8c <task_house_down>:

		}
	}
}

static void task_house_down(void *pvParameters) {
  403b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	for (;;)  {
		
		if (xSemaphoreTake(xSemaphoreHouseDown, 1000)) {
  403b90:	f8df 9050 	ldr.w	r9, [pc, #80]	; 403be4 <task_house_down+0x58>
  403b94:	4f10      	ldr	r7, [pc, #64]	; (403bd8 <task_house_down+0x4c>)

			for (int i = 0; i < 10; i++) {
				// Pisca o led da placa
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  403b96:	f8df 8050 	ldr.w	r8, [pc, #80]	; 403be8 <task_house_down+0x5c>
		if (xSemaphoreTake(xSemaphoreHouseDown, 1000)) {
  403b9a:	2400      	movs	r4, #0
  403b9c:	4623      	mov	r3, r4
  403b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403ba2:	4621      	mov	r1, r4
  403ba4:	f8d9 0000 	ldr.w	r0, [r9]
  403ba8:	47b8      	blx	r7
  403baa:	2800      	cmp	r0, #0
  403bac:	d0f6      	beq.n	403b9c <task_house_down+0x10>
  403bae:	240a      	movs	r4, #10
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  403bb0:	f44f 7680 	mov.w	r6, #256	; 0x100
  403bb4:	f8df a034 	ldr.w	sl, [pc, #52]	; 403bec <task_house_down+0x60>
  403bb8:	4631      	mov	r1, r6
  403bba:	4640      	mov	r0, r8
  403bbc:	47d0      	blx	sl
				vTaskDelay(100);
  403bbe:	2064      	movs	r0, #100	; 0x64
  403bc0:	4d06      	ldr	r5, [pc, #24]	; (403bdc <task_house_down+0x50>)
  403bc2:	47a8      	blx	r5
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  403bc4:	4631      	mov	r1, r6
  403bc6:	4640      	mov	r0, r8
  403bc8:	4b05      	ldr	r3, [pc, #20]	; (403be0 <task_house_down+0x54>)
  403bca:	4798      	blx	r3
				vTaskDelay(100);
  403bcc:	2064      	movs	r0, #100	; 0x64
  403bce:	47a8      	blx	r5
			for (int i = 0; i < 10; i++) {
  403bd0:	3c01      	subs	r4, #1
  403bd2:	d1f1      	bne.n	403bb8 <task_house_down+0x2c>
  403bd4:	e7e1      	b.n	403b9a <task_house_down+0xe>
  403bd6:	bf00      	nop
  403bd8:	0040284d 	.word	0x0040284d
  403bdc:	00403079 	.word	0x00403079
  403be0:	00401637 	.word	0x00401637
  403be4:	20400e34 	.word	0x20400e34
  403be8:	400e1200 	.word	0x400e1200
  403bec:	0040163b 	.word	0x0040163b

00403bf0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bf2:	b083      	sub	sp, #12
  403bf4:	4605      	mov	r5, r0
  403bf6:	460c      	mov	r4, r1
	uint32_t val = 0;
  403bf8:	2300      	movs	r3, #0
  403bfa:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403bfc:	4b2a      	ldr	r3, [pc, #168]	; (403ca8 <usart_serial_getchar+0xb8>)
  403bfe:	4298      	cmp	r0, r3
  403c00:	d013      	beq.n	403c2a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403c02:	4b2a      	ldr	r3, [pc, #168]	; (403cac <usart_serial_getchar+0xbc>)
  403c04:	4298      	cmp	r0, r3
  403c06:	d018      	beq.n	403c3a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403c08:	4b29      	ldr	r3, [pc, #164]	; (403cb0 <usart_serial_getchar+0xc0>)
  403c0a:	4298      	cmp	r0, r3
  403c0c:	d01d      	beq.n	403c4a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403c0e:	4b29      	ldr	r3, [pc, #164]	; (403cb4 <usart_serial_getchar+0xc4>)
  403c10:	429d      	cmp	r5, r3
  403c12:	d022      	beq.n	403c5a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403c14:	4b28      	ldr	r3, [pc, #160]	; (403cb8 <usart_serial_getchar+0xc8>)
  403c16:	429d      	cmp	r5, r3
  403c18:	d027      	beq.n	403c6a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403c1a:	4b28      	ldr	r3, [pc, #160]	; (403cbc <usart_serial_getchar+0xcc>)
  403c1c:	429d      	cmp	r5, r3
  403c1e:	d02e      	beq.n	403c7e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c20:	4b27      	ldr	r3, [pc, #156]	; (403cc0 <usart_serial_getchar+0xd0>)
  403c22:	429d      	cmp	r5, r3
  403c24:	d035      	beq.n	403c92 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c26:	b003      	add	sp, #12
  403c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403c2a:	461f      	mov	r7, r3
  403c2c:	4e25      	ldr	r6, [pc, #148]	; (403cc4 <usart_serial_getchar+0xd4>)
  403c2e:	4621      	mov	r1, r4
  403c30:	4638      	mov	r0, r7
  403c32:	47b0      	blx	r6
  403c34:	2800      	cmp	r0, #0
  403c36:	d1fa      	bne.n	403c2e <usart_serial_getchar+0x3e>
  403c38:	e7e9      	b.n	403c0e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403c3a:	461f      	mov	r7, r3
  403c3c:	4e21      	ldr	r6, [pc, #132]	; (403cc4 <usart_serial_getchar+0xd4>)
  403c3e:	4621      	mov	r1, r4
  403c40:	4638      	mov	r0, r7
  403c42:	47b0      	blx	r6
  403c44:	2800      	cmp	r0, #0
  403c46:	d1fa      	bne.n	403c3e <usart_serial_getchar+0x4e>
  403c48:	e7e4      	b.n	403c14 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403c4a:	461f      	mov	r7, r3
  403c4c:	4e1d      	ldr	r6, [pc, #116]	; (403cc4 <usart_serial_getchar+0xd4>)
  403c4e:	4621      	mov	r1, r4
  403c50:	4638      	mov	r0, r7
  403c52:	47b0      	blx	r6
  403c54:	2800      	cmp	r0, #0
  403c56:	d1fa      	bne.n	403c4e <usart_serial_getchar+0x5e>
  403c58:	e7df      	b.n	403c1a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403c5a:	461f      	mov	r7, r3
  403c5c:	4e19      	ldr	r6, [pc, #100]	; (403cc4 <usart_serial_getchar+0xd4>)
  403c5e:	4621      	mov	r1, r4
  403c60:	4638      	mov	r0, r7
  403c62:	47b0      	blx	r6
  403c64:	2800      	cmp	r0, #0
  403c66:	d1fa      	bne.n	403c5e <usart_serial_getchar+0x6e>
  403c68:	e7da      	b.n	403c20 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403c6a:	461e      	mov	r6, r3
  403c6c:	4d16      	ldr	r5, [pc, #88]	; (403cc8 <usart_serial_getchar+0xd8>)
  403c6e:	a901      	add	r1, sp, #4
  403c70:	4630      	mov	r0, r6
  403c72:	47a8      	blx	r5
  403c74:	2800      	cmp	r0, #0
  403c76:	d1fa      	bne.n	403c6e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403c78:	9b01      	ldr	r3, [sp, #4]
  403c7a:	7023      	strb	r3, [r4, #0]
  403c7c:	e7d3      	b.n	403c26 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c7e:	461e      	mov	r6, r3
  403c80:	4d11      	ldr	r5, [pc, #68]	; (403cc8 <usart_serial_getchar+0xd8>)
  403c82:	a901      	add	r1, sp, #4
  403c84:	4630      	mov	r0, r6
  403c86:	47a8      	blx	r5
  403c88:	2800      	cmp	r0, #0
  403c8a:	d1fa      	bne.n	403c82 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403c8c:	9b01      	ldr	r3, [sp, #4]
  403c8e:	7023      	strb	r3, [r4, #0]
  403c90:	e7c9      	b.n	403c26 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c92:	461e      	mov	r6, r3
  403c94:	4d0c      	ldr	r5, [pc, #48]	; (403cc8 <usart_serial_getchar+0xd8>)
  403c96:	a901      	add	r1, sp, #4
  403c98:	4630      	mov	r0, r6
  403c9a:	47a8      	blx	r5
  403c9c:	2800      	cmp	r0, #0
  403c9e:	d1fa      	bne.n	403c96 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403ca0:	9b01      	ldr	r3, [sp, #4]
  403ca2:	7023      	strb	r3, [r4, #0]
}
  403ca4:	e7bf      	b.n	403c26 <usart_serial_getchar+0x36>
  403ca6:	bf00      	nop
  403ca8:	400e0800 	.word	0x400e0800
  403cac:	400e0a00 	.word	0x400e0a00
  403cb0:	400e1a00 	.word	0x400e1a00
  403cb4:	400e1c00 	.word	0x400e1c00
  403cb8:	40024000 	.word	0x40024000
  403cbc:	40028000 	.word	0x40028000
  403cc0:	4002c000 	.word	0x4002c000
  403cc4:	00401aab 	.word	0x00401aab
  403cc8:	00401bb7 	.word	0x00401bb7

00403ccc <usart_serial_putchar>:
{
  403ccc:	b570      	push	{r4, r5, r6, lr}
  403cce:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403cd0:	4b2a      	ldr	r3, [pc, #168]	; (403d7c <usart_serial_putchar+0xb0>)
  403cd2:	4298      	cmp	r0, r3
  403cd4:	d013      	beq.n	403cfe <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403cd6:	4b2a      	ldr	r3, [pc, #168]	; (403d80 <usart_serial_putchar+0xb4>)
  403cd8:	4298      	cmp	r0, r3
  403cda:	d019      	beq.n	403d10 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403cdc:	4b29      	ldr	r3, [pc, #164]	; (403d84 <usart_serial_putchar+0xb8>)
  403cde:	4298      	cmp	r0, r3
  403ce0:	d01f      	beq.n	403d22 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403ce2:	4b29      	ldr	r3, [pc, #164]	; (403d88 <usart_serial_putchar+0xbc>)
  403ce4:	4298      	cmp	r0, r3
  403ce6:	d025      	beq.n	403d34 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403ce8:	4b28      	ldr	r3, [pc, #160]	; (403d8c <usart_serial_putchar+0xc0>)
  403cea:	4298      	cmp	r0, r3
  403cec:	d02b      	beq.n	403d46 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403cee:	4b28      	ldr	r3, [pc, #160]	; (403d90 <usart_serial_putchar+0xc4>)
  403cf0:	4298      	cmp	r0, r3
  403cf2:	d031      	beq.n	403d58 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403cf4:	4b27      	ldr	r3, [pc, #156]	; (403d94 <usart_serial_putchar+0xc8>)
  403cf6:	4298      	cmp	r0, r3
  403cf8:	d037      	beq.n	403d6a <usart_serial_putchar+0x9e>
	return 0;
  403cfa:	2000      	movs	r0, #0
}
  403cfc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cfe:	461e      	mov	r6, r3
  403d00:	4d25      	ldr	r5, [pc, #148]	; (403d98 <usart_serial_putchar+0xcc>)
  403d02:	4621      	mov	r1, r4
  403d04:	4630      	mov	r0, r6
  403d06:	47a8      	blx	r5
  403d08:	2800      	cmp	r0, #0
  403d0a:	d1fa      	bne.n	403d02 <usart_serial_putchar+0x36>
		return 1;
  403d0c:	2001      	movs	r0, #1
  403d0e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d10:	461e      	mov	r6, r3
  403d12:	4d21      	ldr	r5, [pc, #132]	; (403d98 <usart_serial_putchar+0xcc>)
  403d14:	4621      	mov	r1, r4
  403d16:	4630      	mov	r0, r6
  403d18:	47a8      	blx	r5
  403d1a:	2800      	cmp	r0, #0
  403d1c:	d1fa      	bne.n	403d14 <usart_serial_putchar+0x48>
		return 1;
  403d1e:	2001      	movs	r0, #1
  403d20:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d22:	461e      	mov	r6, r3
  403d24:	4d1c      	ldr	r5, [pc, #112]	; (403d98 <usart_serial_putchar+0xcc>)
  403d26:	4621      	mov	r1, r4
  403d28:	4630      	mov	r0, r6
  403d2a:	47a8      	blx	r5
  403d2c:	2800      	cmp	r0, #0
  403d2e:	d1fa      	bne.n	403d26 <usart_serial_putchar+0x5a>
		return 1;
  403d30:	2001      	movs	r0, #1
  403d32:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d34:	461e      	mov	r6, r3
  403d36:	4d18      	ldr	r5, [pc, #96]	; (403d98 <usart_serial_putchar+0xcc>)
  403d38:	4621      	mov	r1, r4
  403d3a:	4630      	mov	r0, r6
  403d3c:	47a8      	blx	r5
  403d3e:	2800      	cmp	r0, #0
  403d40:	d1fa      	bne.n	403d38 <usart_serial_putchar+0x6c>
		return 1;
  403d42:	2001      	movs	r0, #1
  403d44:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d46:	461e      	mov	r6, r3
  403d48:	4d14      	ldr	r5, [pc, #80]	; (403d9c <usart_serial_putchar+0xd0>)
  403d4a:	4621      	mov	r1, r4
  403d4c:	4630      	mov	r0, r6
  403d4e:	47a8      	blx	r5
  403d50:	2800      	cmp	r0, #0
  403d52:	d1fa      	bne.n	403d4a <usart_serial_putchar+0x7e>
		return 1;
  403d54:	2001      	movs	r0, #1
  403d56:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d58:	461e      	mov	r6, r3
  403d5a:	4d10      	ldr	r5, [pc, #64]	; (403d9c <usart_serial_putchar+0xd0>)
  403d5c:	4621      	mov	r1, r4
  403d5e:	4630      	mov	r0, r6
  403d60:	47a8      	blx	r5
  403d62:	2800      	cmp	r0, #0
  403d64:	d1fa      	bne.n	403d5c <usart_serial_putchar+0x90>
		return 1;
  403d66:	2001      	movs	r0, #1
  403d68:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d6a:	461e      	mov	r6, r3
  403d6c:	4d0b      	ldr	r5, [pc, #44]	; (403d9c <usart_serial_putchar+0xd0>)
  403d6e:	4621      	mov	r1, r4
  403d70:	4630      	mov	r0, r6
  403d72:	47a8      	blx	r5
  403d74:	2800      	cmp	r0, #0
  403d76:	d1fa      	bne.n	403d6e <usart_serial_putchar+0xa2>
		return 1;
  403d78:	2001      	movs	r0, #1
  403d7a:	bd70      	pop	{r4, r5, r6, pc}
  403d7c:	400e0800 	.word	0x400e0800
  403d80:	400e0a00 	.word	0x400e0a00
  403d84:	400e1a00 	.word	0x400e1a00
  403d88:	400e1c00 	.word	0x400e1c00
  403d8c:	40024000 	.word	0x40024000
  403d90:	40028000 	.word	0x40028000
  403d94:	4002c000 	.word	0x4002c000
  403d98:	00401a99 	.word	0x00401a99
  403d9c:	00401ba1 	.word	0x00401ba1

00403da0 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403da0:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403da2:	460a      	mov	r2, r1
  403da4:	4601      	mov	r1, r0
  403da6:	4802      	ldr	r0, [pc, #8]	; (403db0 <vApplicationStackOverflowHook+0x10>)
  403da8:	4b02      	ldr	r3, [pc, #8]	; (403db4 <vApplicationStackOverflowHook+0x14>)
  403daa:	4798      	blx	r3
  403dac:	e7fe      	b.n	403dac <vApplicationStackOverflowHook+0xc>
  403dae:	bf00      	nop
  403db0:	0040c0bc 	.word	0x0040c0bc
  403db4:	0040751d 	.word	0x0040751d

00403db8 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403db8:	4770      	bx	lr

00403dba <vApplicationMallocFailedHook>:
  403dba:	f04f 0380 	mov.w	r3, #128	; 0x80
  403dbe:	b672      	cpsid	i
  403dc0:	f383 8811 	msr	BASEPRI, r3
  403dc4:	f3bf 8f6f 	isb	sy
  403dc8:	f3bf 8f4f 	dsb	sy
  403dcc:	b662      	cpsie	i
  403dce:	e7fe      	b.n	403dce <vApplicationMallocFailedHook+0x14>

00403dd0 <mcu6050_i2c_bus_write>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/
int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  403dd0:	b500      	push	{lr}
  403dd2:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  403dd4:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  403dd8:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  403ddc:	2101      	movs	r1, #1
  403dde:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403de0:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  403de2:	9304      	str	r3, [sp, #16]

    ierror = twihs_master_write(TWIHS2, &p_packet);
  403de4:	a901      	add	r1, sp, #4
  403de6:	4803      	ldr	r0, [pc, #12]	; (403df4 <mcu6050_i2c_bus_write+0x24>)
  403de8:	4b03      	ldr	r3, [pc, #12]	; (403df8 <mcu6050_i2c_bus_write+0x28>)
  403dea:	4798      	blx	r3

    return (int8_t)ierror;
}
  403dec:	b240      	sxtb	r0, r0
  403dee:	b007      	add	sp, #28
  403df0:	f85d fb04 	ldr.w	pc, [sp], #4
  403df4:	40060000 	.word	0x40060000
  403df8:	00400d51 	.word	0x00400d51

00403dfc <mcu6050_i2c_bus_read>:

int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  403dfc:	b500      	push	{lr}
  403dfe:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  403e00:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  403e04:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  403e08:	2101      	movs	r1, #1
  403e0a:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403e0c:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  403e0e:	9304      	str	r3, [sp, #16]

// TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para
//       conseguirmos pegar o valor correto.
    ierror = twihs_master_read(TWIHS2, &p_packet);
  403e10:	a901      	add	r1, sp, #4
  403e12:	4803      	ldr	r0, [pc, #12]	; (403e20 <mcu6050_i2c_bus_read+0x24>)
  403e14:	4b03      	ldr	r3, [pc, #12]	; (403e24 <mcu6050_i2c_bus_read+0x28>)
  403e16:	4798      	blx	r3

    return (int8_t)ierror;
}
  403e18:	b240      	sxtb	r0, r0
  403e1a:	b007      	add	sp, #28
  403e1c:	f85d fb04 	ldr.w	pc, [sp], #4
  403e20:	40060000 	.word	0x40060000
  403e24:	00400ca5 	.word	0x00400ca5

00403e28 <task_imu>:
static void task_imu(void *pvParameters) {
  403e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e2c:	ed2d 8b0c 	vpush	{d8-d13}
  403e30:	b0b9      	sub	sp, #228	; 0xe4

void mcu6050_i2c_bus_init(void)
{
    twihs_options_t mcu6050_option;
    pmc_enable_periph_clk(ID_TWIHS2);
  403e32:	2029      	movs	r0, #41	; 0x29
  403e34:	4e45      	ldr	r6, [pc, #276]	; (403f4c <task_imu+0x124>)
  403e36:	47b0      	blx	r6

    /* Configure the options of TWI driver */
    mcu6050_option.master_clk = sysclk_get_cpu_hz();
  403e38:	4b45      	ldr	r3, [pc, #276]	; (403f50 <task_imu+0x128>)
  403e3a:	930f      	str	r3, [sp, #60]	; 0x3c
    mcu6050_option.speed      = 40000;
  403e3c:	f649 4340 	movw	r3, #40000	; 0x9c40
  403e40:	9310      	str	r3, [sp, #64]	; 0x40
    twihs_master_init(TWIHS2, &mcu6050_option);
  403e42:	a90f      	add	r1, sp, #60	; 0x3c
  403e44:	4843      	ldr	r0, [pc, #268]	; (403f54 <task_imu+0x12c>)
  403e46:	4b44      	ldr	r3, [pc, #272]	; (403f58 <task_imu+0x130>)
  403e48:	4798      	blx	r3

	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  403e4a:	2010      	movs	r0, #16
  403e4c:	47b0      	blx	r6
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403e4e:	4d43      	ldr	r5, [pc, #268]	; (403f5c <task_imu+0x134>)
  403e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e54:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403e58:	4628      	mov	r0, r5
  403e5a:	4c41      	ldr	r4, [pc, #260]	; (403f60 <task_imu+0x138>)
  403e5c:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  403e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403e62:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403e66:	4628      	mov	r0, r5
  403e68:	47a0      	blx	r4

	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  403e6a:	2010      	movs	r0, #16
  403e6c:	47b0      	blx	r6
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e72:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403e76:	4628      	mov	r0, r5
  403e78:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  403e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403e7e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403e82:	4628      	mov	r0, r5
  403e84:	47a0      	blx	r4
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  403e86:	2301      	movs	r3, #1
  403e88:	aa2e      	add	r2, sp, #184	; 0xb8
  403e8a:	2175      	movs	r1, #117	; 0x75
  403e8c:	2068      	movs	r0, #104	; 0x68
  403e8e:	4c35      	ldr	r4, [pc, #212]	; (403f64 <task_imu+0x13c>)
  403e90:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS){
  403e92:	2800      	cmp	r0, #0
  403e94:	d035      	beq.n	403f02 <task_imu+0xda>
		printf("[ERRO] [i2c] [read] \n");
  403e96:	4834      	ldr	r0, [pc, #208]	; (403f68 <task_imu+0x140>)
  403e98:	4b34      	ldr	r3, [pc, #208]	; (403f6c <task_imu+0x144>)
  403e9a:	4798      	blx	r3
	if (bufferRX[0] == 0x68) {
  403e9c:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
  403ea0:	2b68      	cmp	r3, #104	; 0x68
		printf(" - MPU6050 encontrado\n");
  403ea2:	bf0c      	ite	eq
  403ea4:	4832      	ldreq	r0, [pc, #200]	; (403f70 <task_imu+0x148>)
		printf(" - MPU6050 nao encontrado\n");
  403ea6:	4833      	ldrne	r0, [pc, #204]	; (403f74 <task_imu+0x14c>)
  403ea8:	4b30      	ldr	r3, [pc, #192]	; (403f6c <task_imu+0x144>)
  403eaa:	4798      	blx	r3
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  403eac:	2301      	movs	r3, #1
  403eae:	aa38      	add	r2, sp, #224	; 0xe0
  403eb0:	f802 3d34 	strb.w	r3, [r2, #-52]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403eb4:	216b      	movs	r1, #107	; 0x6b
  403eb6:	2068      	movs	r0, #104	; 0x68
  403eb8:	4c2f      	ldr	r4, [pc, #188]	; (403f78 <task_imu+0x150>)
  403eba:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ebc:	bb40      	cbnz	r0, 403f10 <task_imu+0xe8>
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT; 
  403ebe:	aa38      	add	r2, sp, #224	; 0xe0
  403ec0:	2300      	movs	r3, #0
  403ec2:	f802 3d34 	strb.w	r3, [r2, #-52]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  403ec6:	2301      	movs	r3, #1
  403ec8:	211c      	movs	r1, #28
  403eca:	2068      	movs	r0, #104	; 0x68
  403ecc:	4c2a      	ldr	r4, [pc, #168]	; (403f78 <task_imu+0x150>)
  403ece:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ed0:	bb10      	cbnz	r0, 403f18 <task_imu+0xf0>
	bufferTX[0] = 0x00; // 250 °/s
  403ed2:	aa38      	add	r2, sp, #224	; 0xe0
  403ed4:	2300      	movs	r3, #0
  403ed6:	f802 3d34 	strb.w	r3, [r2, #-52]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  403eda:	2301      	movs	r3, #1
  403edc:	211b      	movs	r1, #27
  403ede:	2068      	movs	r0, #104	; 0x68
  403ee0:	4c25      	ldr	r4, [pc, #148]	; (403f78 <task_imu+0x150>)
  403ee2:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ee4:	b9e0      	cbnz	r0, 403f20 <task_imu+0xf8>
	FusionAhrsInitialise(&ahrs); 
  403ee6:	a812      	add	r0, sp, #72	; 0x48
  403ee8:	4b24      	ldr	r3, [pc, #144]	; (403f7c <task_imu+0x154>)
  403eea:	4798      	blx	r3
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  403eec:	4d24      	ldr	r5, [pc, #144]	; (403f80 <task_imu+0x158>)
    return radians * (180.0f / (float) M_PI);
  403eee:	ed9f ba25 	vldr	s22, [pc, #148]	; 403f84 <task_imu+0x15c>
        return (float) M_PI / -2.0f;
  403ef2:	eddf ba25 	vldr	s23, [pc, #148]	; 403f88 <task_imu+0x160>
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403ef6:	f04f 0901 	mov.w	r9, #1
  403efa:	f04f 0868 	mov.w	r8, #104	; 0x68
		float modulo = sqrt(pow(proc_acc_x,2) + pow(proc_acc_y,2) + pow(proc_acc_z,2));
  403efe:	4f23      	ldr	r7, [pc, #140]	; (403f8c <task_imu+0x164>)
  403f00:	e05e      	b.n	403fc0 <task_imu+0x198>
		printf("[DADO] [i2c] %x:%x", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  403f02:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
  403f06:	2175      	movs	r1, #117	; 0x75
  403f08:	4821      	ldr	r0, [pc, #132]	; (403f90 <task_imu+0x168>)
  403f0a:	4b22      	ldr	r3, [pc, #136]	; (403f94 <task_imu+0x16c>)
  403f0c:	4798      	blx	r3
  403f0e:	e7c5      	b.n	403e9c <task_imu+0x74>
		printf("[ERRO] [i2c] [write] \n");
  403f10:	4821      	ldr	r0, [pc, #132]	; (403f98 <task_imu+0x170>)
  403f12:	4b16      	ldr	r3, [pc, #88]	; (403f6c <task_imu+0x144>)
  403f14:	4798      	blx	r3
  403f16:	e7d2      	b.n	403ebe <task_imu+0x96>
		printf("[ERRO] [i2c] [write] \n");
  403f18:	481f      	ldr	r0, [pc, #124]	; (403f98 <task_imu+0x170>)
  403f1a:	4b14      	ldr	r3, [pc, #80]	; (403f6c <task_imu+0x144>)
  403f1c:	4798      	blx	r3
  403f1e:	e7d8      	b.n	403ed2 <task_imu+0xaa>
		printf("[ERRO] [i2c] [write] \n");
  403f20:	481d      	ldr	r0, [pc, #116]	; (403f98 <task_imu+0x170>)
  403f22:	4b12      	ldr	r3, [pc, #72]	; (403f6c <task_imu+0x144>)
  403f24:	4798      	blx	r3
  403f26:	e7de      	b.n	403ee6 <task_imu+0xbe>
    return asinf(value);
  403f28:	ee17 0a90 	vmov	r0, s15
  403f2c:	4b1b      	ldr	r3, [pc, #108]	; (403f9c <task_imu+0x174>)
  403f2e:	4798      	blx	r3
  403f30:	ee0a 0a10 	vmov	s20, r0
  403f34:	e08f      	b.n	404056 <task_imu+0x22e>
        return (float) M_PI / -2.0f;
  403f36:	eeb0 aa6b 	vmov.f32	s20, s23
  403f3a:	e08c      	b.n	404056 <task_imu+0x22e>
			xSemaphoreGive(xSemaphoreHouseDown);
  403f3c:	2300      	movs	r3, #0
  403f3e:	461a      	mov	r2, r3
  403f40:	4619      	mov	r1, r3
  403f42:	4817      	ldr	r0, [pc, #92]	; (403fa0 <task_imu+0x178>)
  403f44:	6800      	ldr	r0, [r0, #0]
  403f46:	4c17      	ldr	r4, [pc, #92]	; (403fa4 <task_imu+0x17c>)
  403f48:	47a0      	blx	r4
  403f4a:	e16d      	b.n	404228 <task_imu+0x400>
  403f4c:	00401a45 	.word	0x00401a45
  403f50:	11e1a300 	.word	0x11e1a300
  403f54:	40060000 	.word	0x40060000
  403f58:	00400c71 	.word	0x00400c71
  403f5c:	400e1400 	.word	0x400e1400
  403f60:	0040163f 	.word	0x0040163f
  403f64:	00403dfd 	.word	0x00403dfd
  403f68:	0040c014 	.word	0x0040c014
  403f6c:	004075e1 	.word	0x004075e1
  403f70:	0040c040 	.word	0x0040c040
  403f74:	0040c058 	.word	0x0040c058
  403f78:	00403dd1 	.word	0x00403dd1
  403f7c:	004002b5 	.word	0x004002b5
  403f80:	00404805 	.word	0x00404805
  403f84:	42652ee0 	.word	0x42652ee0
  403f88:	bfc90fdb 	.word	0xbfc90fdb
  403f8c:	00406091 	.word	0x00406091
  403f90:	0040c02c 	.word	0x0040c02c
  403f94:	0040751d 	.word	0x0040751d
  403f98:	0040c074 	.word	0x0040c074
  403f9c:	00404765 	.word	0x00404765
  403fa0:	20400e34 	.word	0x20400e34
  403fa4:	00402569 	.word	0x00402569
			orientacao = FRENTE;
  403fa8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
			xQueueSend(xQueueOrientation, &orientacao, &xHigherPriorityTaskWoken);       
  403fac:	2300      	movs	r3, #0
  403fae:	aa0b      	add	r2, sp, #44	; 0x2c
  403fb0:	a90a      	add	r1, sp, #40	; 0x28
  403fb2:	48c8      	ldr	r0, [pc, #800]	; (4042d4 <task_imu+0x4ac>)
  403fb4:	6800      	ldr	r0, [r0, #0]
  403fb6:	4cc8      	ldr	r4, [pc, #800]	; (4042d8 <task_imu+0x4b0>)
  403fb8:	47a0      	blx	r4
		vTaskDelay(50);
  403fba:	2032      	movs	r0, #50	; 0x32
  403fbc:	4bc7      	ldr	r3, [pc, #796]	; (4042dc <task_imu+0x4b4>)
  403fbe:	4798      	blx	r3
		const FusionVector gyroscope = {proc_gyr_x, proc_gyr_y, proc_gyr_z}; 
  403fc0:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
  403fc4:	ed8d da0d 	vstr	s26, [sp, #52]	; 0x34
  403fc8:	edcd da0e 	vstr	s27, [sp, #56]	; 0x38
		const FusionVector accelerometer = {proc_acc_x, proc_acc_y, proc_acc_z};    
  403fcc:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
  403fd0:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
  403fd4:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
  403fd8:	a912      	add	r1, sp, #72	; 0x48
  403fda:	a834      	add	r0, sp, #208	; 0xd0
  403fdc:	4bc0      	ldr	r3, [pc, #768]	; (4042e0 <task_imu+0x4b8>)
  403fde:	4798      	blx	r3
  403fe0:	eddd 9a34 	vldr	s19, [sp, #208]	; 0xd0
  403fe4:	eddd 8a35 	vldr	s17, [sp, #212]	; 0xd4
  403fe8:	ed9d 8a36 	vldr	s16, [sp, #216]	; 0xd8
  403fec:	ed9d 9a37 	vldr	s18, [sp, #220]	; 0xdc
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
  403ff0:	ee68 7a08 	vmul.f32	s15, s16, s16
  403ff4:	eeb6 ca00 	vmov.f32	s24, #96	; 0x3f000000  0.5
  403ff8:	ee3c ca67 	vsub.f32	s24, s24, s15
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  403ffc:	ee68 6aa8 	vmul.f32	s13, s17, s17
  404000:	ee29 7aa8 	vmul.f32	s14, s19, s17
  404004:	ee69 7a08 	vmul.f32	s15, s18, s16
  404008:	ee7c 6a66 	vsub.f32	s13, s24, s13
  40400c:	ee16 1a90 	vmov	r1, s13
  404010:	ee77 7a27 	vadd.f32	s15, s14, s15
  404014:	ee17 0a90 	vmov	r0, s15
  404018:	47a8      	blx	r5
    return radians * (180.0f / (float) M_PI);
  40401a:	ee07 0a90 	vmov	s15, r0
  40401e:	ee67 aa8b 	vmul.f32	s21, s15, s22
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
  404022:	ee29 7a88 	vmul.f32	s14, s19, s16
  404026:	ee69 7a28 	vmul.f32	s15, s18, s17
  40402a:	ee77 7a67 	vsub.f32	s15, s14, s15
  40402e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (value <= -1.0f) {
  404032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  404036:	eef4 7ac7 	vcmpe.f32	s15, s14
  40403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40403e:	f67f af7a 	bls.w	403f36 <task_imu+0x10e>
    if (value >= 1.0f) {
  404042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  404046:	eef4 7ac7 	vcmpe.f32	s15, s14
  40404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40404e:	f6ff af6b 	blt.w	403f28 <task_imu+0x100>
        return (float) M_PI / 2.0f;
  404052:	ed9f aaa4 	vldr	s20, [pc, #656]	; 4042e4 <task_imu+0x4bc>
    return radians * (180.0f / (float) M_PI);
  404056:	ee2a aa0b 	vmul.f32	s20, s20, s22
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  40405a:	ee69 7a09 	vmul.f32	s15, s18, s18
  40405e:	ee29 9a29 	vmul.f32	s18, s18, s19
  404062:	ee28 8a88 	vmul.f32	s16, s17, s16
  404066:	ee7c 7a67 	vsub.f32	s15, s24, s15
  40406a:	ee17 1a90 	vmov	r1, s15
  40406e:	ee79 7a08 	vadd.f32	s15, s18, s16
  404072:	ee17 0a90 	vmov	r0, s15
  404076:	47a8      	blx	r5
    return radians * (180.0f / (float) M_PI);
  404078:	ee07 0a90 	vmov	s15, r0
  40407c:	ee27 9a8b 	vmul.f32	s18, s15, s22
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  404080:	464b      	mov	r3, r9
  404082:	f10d 02cf 	add.w	r2, sp, #207	; 0xcf
  404086:	213b      	movs	r1, #59	; 0x3b
  404088:	4640      	mov	r0, r8
  40408a:	4c97      	ldr	r4, [pc, #604]	; (4042e8 <task_imu+0x4c0>)
  40408c:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  40408e:	464b      	mov	r3, r9
  404090:	aa33      	add	r2, sp, #204	; 0xcc
  404092:	213c      	movs	r1, #60	; 0x3c
  404094:	4640      	mov	r0, r8
  404096:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  404098:	464b      	mov	r3, r9
  40409a:	f10d 02ce 	add.w	r2, sp, #206	; 0xce
  40409e:	213d      	movs	r1, #61	; 0x3d
  4040a0:	4640      	mov	r0, r8
  4040a2:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  4040a4:	464b      	mov	r3, r9
  4040a6:	f10d 02cb 	add.w	r2, sp, #203	; 0xcb
  4040aa:	2140      	movs	r1, #64	; 0x40
  4040ac:	4640      	mov	r0, r8
  4040ae:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  4040b0:	464b      	mov	r3, r9
  4040b2:	f10d 02cd 	add.w	r2, sp, #205	; 0xcd
  4040b6:	213f      	movs	r1, #63	; 0x3f
  4040b8:	4640      	mov	r0, r8
  4040ba:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  4040bc:	464b      	mov	r3, r9
  4040be:	f10d 02ca 	add.w	r2, sp, #202	; 0xca
  4040c2:	2140      	movs	r1, #64	; 0x40
  4040c4:	4640      	mov	r0, r8
  4040c6:	47a0      	blx	r4
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  4040c8:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
  4040cc:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
  4040d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4040d4:	b21b      	sxth	r3, r3
  4040d6:	ee08 3a10 	vmov	s16, r3
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  4040da:	f89d 20ce 	ldrb.w	r2, [sp, #206]	; 0xce
  4040de:	f89d 30cb 	ldrb.w	r3, [sp, #203]	; 0xcb
  4040e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4040e6:	b21b      	sxth	r3, r3
  4040e8:	ee08 3a90 	vmov	s17, r3
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  4040ec:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
  4040f0:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
  4040f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4040f8:	b21e      	sxth	r6, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  4040fa:	464b      	mov	r3, r9
  4040fc:	f10d 02c9 	add.w	r2, sp, #201	; 0xc9
  404100:	2143      	movs	r1, #67	; 0x43
  404102:	4640      	mov	r0, r8
  404104:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  404106:	464b      	mov	r3, r9
  404108:	f10d 02c6 	add.w	r2, sp, #198	; 0xc6
  40410c:	2144      	movs	r1, #68	; 0x44
  40410e:	4640      	mov	r0, r8
  404110:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  404112:	464b      	mov	r3, r9
  404114:	aa32      	add	r2, sp, #200	; 0xc8
  404116:	2145      	movs	r1, #69	; 0x45
  404118:	4640      	mov	r0, r8
  40411a:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  40411c:	464b      	mov	r3, r9
  40411e:	f10d 02c5 	add.w	r2, sp, #197	; 0xc5
  404122:	2148      	movs	r1, #72	; 0x48
  404124:	4640      	mov	r0, r8
  404126:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  404128:	464b      	mov	r3, r9
  40412a:	f10d 02c7 	add.w	r2, sp, #199	; 0xc7
  40412e:	2147      	movs	r1, #71	; 0x47
  404130:	4640      	mov	r0, r8
  404132:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  404134:	464b      	mov	r3, r9
  404136:	aa31      	add	r2, sp, #196	; 0xc4
  404138:	2148      	movs	r1, #72	; 0x48
  40413a:	4640      	mov	r0, r8
  40413c:	47a0      	blx	r4
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  40413e:	f89d e0c9 	ldrb.w	lr, [sp, #201]	; 0xc9
  404142:	f89d 10c6 	ldrb.w	r1, [sp, #198]	; 0xc6
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  404146:	f89d 40c8 	ldrb.w	r4, [sp, #200]	; 0xc8
  40414a:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  40414e:	f89d 00c7 	ldrb.w	r0, [sp, #199]	; 0xc7
  404152:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
		proc_acc_x = (float)raw_acc_x/16384;
  404156:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  40415a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 4042ec <task_imu+0x4c4>
  40415e:	ee28 8a07 	vmul.f32	s16, s16, s14
		proc_acc_y = (float)raw_acc_y/16384;
  404162:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  404166:	ee68 8a87 	vmul.f32	s17, s17, s14
		proc_acc_z = (float)raw_acc_z/16384;
  40416a:	ee07 6a90 	vmov	s15, r6
  40416e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404172:	ee67 9a87 	vmul.f32	s19, s15, s14
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  404176:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		proc_gyr_x = (float)raw_gyr_x/131;
  40417a:	b209      	sxth	r1, r1
  40417c:	ee07 1a90 	vmov	s15, r1
  404180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404184:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 4042f0 <task_imu+0x4c8>
  404188:	eec7 ca87 	vdiv.f32	s25, s15, s14
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  40418c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
		proc_gyr_y = (float)raw_gyr_y/131;
  404190:	b212      	sxth	r2, r2
  404192:	ee07 2a90 	vmov	s15, r2
  404196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40419a:	ee87 da87 	vdiv.f32	s26, s15, s14
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  40419e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		proc_gyr_z = (float)raw_gyr_z/131;
  4041a2:	b21b      	sxth	r3, r3
  4041a4:	ee07 3a90 	vmov	s15, r3
  4041a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4041ac:	eec7 da87 	vdiv.f32	s27, s15, s14
		float modulo = sqrt(pow(proc_acc_x,2) + pow(proc_acc_y,2) + pow(proc_acc_z,2));
  4041b0:	ee18 0a10 	vmov	r0, s16
  4041b4:	47b8      	blx	r7
  4041b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4041ba:	ee18 0a90 	vmov	r0, s17
  4041be:	47b8      	blx	r7
  4041c0:	4682      	mov	sl, r0
  4041c2:	468b      	mov	fp, r1
  4041c4:	ee19 0a90 	vmov	r0, s19
  4041c8:	47b8      	blx	r7
  4041ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4041ce:	4c49      	ldr	r4, [pc, #292]	; (4042f4 <task_imu+0x4cc>)
  4041d0:	4652      	mov	r2, sl
  4041d2:	465b      	mov	r3, fp
  4041d4:	4650      	mov	r0, sl
  4041d6:	4659      	mov	r1, fp
  4041d8:	47a0      	blx	r4
  4041da:	4682      	mov	sl, r0
  4041dc:	468b      	mov	fp, r1
  4041de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4041e2:	4602      	mov	r2, r0
  4041e4:	460b      	mov	r3, r1
  4041e6:	47a0      	blx	r4
  4041e8:	4e43      	ldr	r6, [pc, #268]	; (4042f8 <task_imu+0x4d0>)
  4041ea:	4602      	mov	r2, r0
  4041ec:	460b      	mov	r3, r1
  4041ee:	4650      	mov	r0, sl
  4041f0:	4659      	mov	r1, fp
  4041f2:	47b0      	blx	r6
  4041f4:	4682      	mov	sl, r0
  4041f6:	468b      	mov	fp, r1
  4041f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4041fc:	4602      	mov	r2, r0
  4041fe:	460b      	mov	r3, r1
  404200:	47a0      	blx	r4
  404202:	4602      	mov	r2, r0
  404204:	460b      	mov	r3, r1
  404206:	4650      	mov	r0, sl
  404208:	4659      	mov	r1, fp
  40420a:	47b0      	blx	r6
  40420c:	4b3b      	ldr	r3, [pc, #236]	; (4042fc <task_imu+0x4d4>)
  40420e:	4798      	blx	r3
  404210:	4b3b      	ldr	r3, [pc, #236]	; (404300 <task_imu+0x4d8>)
  404212:	4798      	blx	r3
  404214:	ee0c 0a10 	vmov	s24, r0
		if (modulo < (float)0.5) {
  404218:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  40421c:	eeb4 cae7 	vcmpe.f32	s24, s15
  404220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404224:	f53f ae8a 	bmi.w	403f3c <task_imu+0x114>
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);
  404228:	4b36      	ldr	r3, [pc, #216]	; (404304 <task_imu+0x4dc>)
  40422a:	9303      	str	r3, [sp, #12]
  40422c:	ab0f      	add	r3, sp, #60	; 0x3c
  40422e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404232:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  404236:	ab0c      	add	r3, sp, #48	; 0x30
  404238:	cb0e      	ldmia	r3, {r1, r2, r3}
  40423a:	a812      	add	r0, sp, #72	; 0x48
  40423c:	4c32      	ldr	r4, [pc, #200]	; (404308 <task_imu+0x4e0>)
  40423e:	47a0      	blx	r4
		printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f, Acc %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw, modulo); 
  404240:	ee1a 0a90 	vmov	r0, s21
  404244:	47b8      	blx	r7
  404246:	4682      	mov	sl, r0
  404248:	468b      	mov	fp, r1
  40424a:	ee1c 0a10 	vmov	r0, s24
  40424e:	47b8      	blx	r7
  404250:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404254:	ee19 0a10 	vmov	r0, s18
  404258:	47b8      	blx	r7
  40425a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40425e:	ee1a 0a10 	vmov	r0, s20
  404262:	47b8      	blx	r7
  404264:	e9cd 0100 	strd	r0, r1, [sp]
  404268:	4652      	mov	r2, sl
  40426a:	465b      	mov	r3, fp
  40426c:	4827      	ldr	r0, [pc, #156]	; (40430c <task_imu+0x4e4>)
  40426e:	4928      	ldr	r1, [pc, #160]	; (404310 <task_imu+0x4e8>)
  404270:	4788      	blx	r1
		BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  404272:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
		if (euler.angle.pitch > 70) {
  404276:	eddf 7a27 	vldr	s15, [pc, #156]	; 404314 <task_imu+0x4ec>
  40427a:	eeb4 aae7 	vcmpe.f32	s20, s15
  40427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404282:	f73f ae91 	bgt.w	403fa8 <task_imu+0x180>
		else if (euler.angle.roll < -80 && (euler.angle.pitch > -10 && euler.angle.pitch < 10)) {
  404286:	eddf 7a24 	vldr	s15, [pc, #144]	; 404318 <task_imu+0x4f0>
  40428a:	eef4 aae7 	vcmpe.f32	s21, s15
  40428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404292:	d545      	bpl.n	404320 <task_imu+0x4f8>
  404294:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
  404298:	eeb4 aae7 	vcmpe.f32	s20, s15
  40429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4042a0:	dd3e      	ble.n	404320 <task_imu+0x4f8>
  4042a2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  4042a6:	eeb4 aae7 	vcmpe.f32	s20, s15
  4042aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4042ae:	d407      	bmi.n	4042c0 <task_imu+0x498>
		else if (euler.angle.roll > 60 && (euler.angle.pitch > -10 && euler.angle.pitch < 10)) {
  4042b0:	eddf 7a1a 	vldr	s15, [pc, #104]	; 40431c <task_imu+0x4f4>
  4042b4:	eef4 aae7 	vcmpe.f32	s21, s15
  4042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4042bc:	dc40      	bgt.n	404340 <task_imu+0x518>
  4042be:	e67c      	b.n	403fba <task_imu+0x192>
			orientacao = ESQUERDA;
  4042c0:	2300      	movs	r3, #0
  4042c2:	930a      	str	r3, [sp, #40]	; 0x28
			xQueueSend(xQueueOrientation, &orientacao, &xHigherPriorityTaskWoken);
  4042c4:	aa0b      	add	r2, sp, #44	; 0x2c
  4042c6:	a90a      	add	r1, sp, #40	; 0x28
  4042c8:	4802      	ldr	r0, [pc, #8]	; (4042d4 <task_imu+0x4ac>)
  4042ca:	6800      	ldr	r0, [r0, #0]
  4042cc:	4c02      	ldr	r4, [pc, #8]	; (4042d8 <task_imu+0x4b0>)
  4042ce:	47a0      	blx	r4
  4042d0:	e673      	b.n	403fba <task_imu+0x192>
  4042d2:	bf00      	nop
  4042d4:	20400e38 	.word	0x20400e38
  4042d8:	00402569 	.word	0x00402569
  4042dc:	00403079 	.word	0x00403079
  4042e0:	004002e1 	.word	0x004002e1
  4042e4:	3fc90fdb 	.word	0x3fc90fdb
  4042e8:	00403dfd 	.word	0x00403dfd
  4042ec:	38800000 	.word	0x38800000
  4042f0:	43030000 	.word	0x43030000
  4042f4:	00406139 	.word	0x00406139
  4042f8:	00405dd5 	.word	0x00405dd5
  4042fc:	004046a9 	.word	0x004046a9
  404300:	00406699 	.word	0x00406699
  404304:	3dcccccd 	.word	0x3dcccccd
  404308:	004008ed 	.word	0x004008ed
  40430c:	0040c08c 	.word	0x0040c08c
  404310:	0040751d 	.word	0x0040751d
  404314:	428c0000 	.word	0x428c0000
  404318:	c2a00000 	.word	0xc2a00000
  40431c:	42700000 	.word	0x42700000
		else if (euler.angle.roll > 60 && (euler.angle.pitch > -10 && euler.angle.pitch < 10)) {
  404320:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 40431c <task_imu+0x4f4>
  404324:	eef4 aae7 	vcmpe.f32	s21, s15
  404328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40432c:	f77f ae45 	ble.w	403fba <task_imu+0x192>
  404330:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
  404334:	eeb4 aae7 	vcmpe.f32	s20, s15
  404338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40433c:	f77f ae3d 	ble.w	403fba <task_imu+0x192>
  404340:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  404344:	eeb4 aae7 	vcmpe.f32	s20, s15
  404348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40434c:	f57f ae35 	bpl.w	403fba <task_imu+0x192>
			orientacao = DIREITA;
  404350:	2302      	movs	r3, #2
  404352:	930a      	str	r3, [sp, #40]	; 0x28
			xQueueSend(xQueueOrientation, &orientacao, &xHigherPriorityTaskWoken);
  404354:	2300      	movs	r3, #0
  404356:	aa0b      	add	r2, sp, #44	; 0x2c
  404358:	a90a      	add	r1, sp, #40	; 0x28
  40435a:	4802      	ldr	r0, [pc, #8]	; (404364 <task_imu+0x53c>)
  40435c:	6800      	ldr	r0, [r0, #0]
  40435e:	4c02      	ldr	r4, [pc, #8]	; (404368 <task_imu+0x540>)
  404360:	47a0      	blx	r4
  404362:	e62a      	b.n	403fba <task_imu+0x192>
  404364:	20400e38 	.word	0x20400e38
  404368:	00402569 	.word	0x00402569

0040436c <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  40436c:	b580      	push	{r7, lr}
  40436e:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  404370:	4b63      	ldr	r3, [pc, #396]	; (404500 <main+0x194>)
  404372:	4798      	blx	r3
	board_init();
  404374:	4b63      	ldr	r3, [pc, #396]	; (404504 <main+0x198>)
  404376:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404378:	4b63      	ldr	r3, [pc, #396]	; (404508 <main+0x19c>)
  40437a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40437e:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404380:	2780      	movs	r7, #128	; 0x80
  404382:	f883 730a 	strb.w	r7, [r3, #778]	; 0x30a
	pmc_enable_periph_clk(LED1_PIO_ID);
  404386:	200a      	movs	r0, #10
  404388:	4e60      	ldr	r6, [pc, #384]	; (40450c <main+0x1a0>)
  40438a:	47b0      	blx	r6
	pmc_enable_periph_clk(LED2_PIO_ID);
  40438c:	200c      	movs	r0, #12
  40438e:	47b0      	blx	r6
	pmc_enable_periph_clk(LED3_PIO_ID);
  404390:	200b      	movs	r0, #11
  404392:	47b0      	blx	r6
	pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  404394:	4c5e      	ldr	r4, [pc, #376]	; (404510 <main+0x1a4>)
  404396:	2309      	movs	r3, #9
  404398:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40439c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4043a0:	4620      	mov	r0, r4
  4043a2:	4d5c      	ldr	r5, [pc, #368]	; (404514 <main+0x1a8>)
  4043a4:	47a8      	blx	r5
	pio_set_debounce_filter(BUT_PIO, BUT_PIO_PIN_MASK, 60);
  4043a6:	223c      	movs	r2, #60	; 0x3c
  4043a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4043ac:	4620      	mov	r0, r4
  4043ae:	4b5a      	ldr	r3, [pc, #360]	; (404518 <main+0x1ac>)
  4043b0:	4798      	blx	r3
	pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  4043b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4043b6:	4620      	mov	r0, r4
  4043b8:	4b58      	ldr	r3, [pc, #352]	; (40451c <main+0x1b0>)
  4043ba:	4798      	blx	r3
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_IT_FALL_EDGE , but_callback);
  4043bc:	4b58      	ldr	r3, [pc, #352]	; (404520 <main+0x1b4>)
  4043be:	9300      	str	r3, [sp, #0]
  4043c0:	2350      	movs	r3, #80	; 0x50
  4043c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4043c6:	210a      	movs	r1, #10
  4043c8:	4620      	mov	r0, r4
  4043ca:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 4045b0 <main+0x244>
  4043ce:	47c0      	blx	r8
	pio_configure(LED1_PIO, PIO_OUTPUT_1, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  4043d0:	2300      	movs	r3, #0
  4043d2:	2201      	movs	r2, #1
  4043d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4043d8:	4620      	mov	r0, r4
  4043da:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_1, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  4043dc:	2300      	movs	r3, #0
  4043de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4043e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4043e6:	484f      	ldr	r0, [pc, #316]	; (404524 <main+0x1b8>)
  4043e8:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_1, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  4043ea:	2300      	movs	r3, #0
  4043ec:	2204      	movs	r2, #4
  4043ee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4043f2:	484d      	ldr	r0, [pc, #308]	; (404528 <main+0x1bc>)
  4043f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4043f6:	4d4d      	ldr	r5, [pc, #308]	; (40452c <main+0x1c0>)
  4043f8:	4b4d      	ldr	r3, [pc, #308]	; (404530 <main+0x1c4>)
  4043fa:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4043fc:	4a4d      	ldr	r2, [pc, #308]	; (404534 <main+0x1c8>)
  4043fe:	4b4e      	ldr	r3, [pc, #312]	; (404538 <main+0x1cc>)
  404400:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404402:	4a4e      	ldr	r2, [pc, #312]	; (40453c <main+0x1d0>)
  404404:	4b4e      	ldr	r3, [pc, #312]	; (404540 <main+0x1d4>)
  404406:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404408:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40440c:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40440e:	23c0      	movs	r3, #192	; 0xc0
  404410:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  404412:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404416:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  404418:	2400      	movs	r4, #0
  40441a:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40441c:	9408      	str	r4, [sp, #32]
  40441e:	200e      	movs	r0, #14
  404420:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  404422:	4a48      	ldr	r2, [pc, #288]	; (404544 <main+0x1d8>)
  404424:	a904      	add	r1, sp, #16
  404426:	4628      	mov	r0, r5
  404428:	4b47      	ldr	r3, [pc, #284]	; (404548 <main+0x1dc>)
  40442a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40442c:	4628      	mov	r0, r5
  40442e:	4b47      	ldr	r3, [pc, #284]	; (40454c <main+0x1e0>)
  404430:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404432:	4628      	mov	r0, r5
  404434:	4b46      	ldr	r3, [pc, #280]	; (404550 <main+0x1e4>)
  404436:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404438:	4e46      	ldr	r6, [pc, #280]	; (404554 <main+0x1e8>)
  40443a:	6833      	ldr	r3, [r6, #0]
  40443c:	4621      	mov	r1, r4
  40443e:	6898      	ldr	r0, [r3, #8]
  404440:	4d45      	ldr	r5, [pc, #276]	; (404558 <main+0x1ec>)
  404442:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404444:	6833      	ldr	r3, [r6, #0]
  404446:	4621      	mov	r1, r4
  404448:	6858      	ldr	r0, [r3, #4]
  40444a:	47a8      	blx	r5
	setbuf(stdout, NULL);
  40444c:	6833      	ldr	r3, [r6, #0]
  40444e:	4621      	mov	r1, r4
  404450:	6898      	ldr	r0, [r3, #8]
  404452:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	// Clear OLED
	gfx_mono_ssd1306_init();
  404454:	4b41      	ldr	r3, [pc, #260]	; (40455c <main+0x1f0>)
  404456:	4798      	blx	r3
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
  404458:	9400      	str	r4, [sp, #0]
  40445a:	2320      	movs	r3, #32
  40445c:	463a      	mov	r2, r7
  40445e:	4621      	mov	r1, r4
  404460:	4620      	mov	r0, r4
  404462:	4d3f      	ldr	r5, [pc, #252]	; (404560 <main+0x1f4>)
  404464:	47a8      	blx	r5
	gfx_mono_draw_string("Lab 6 - RTOS - imu", 0, 5, &sysfont);
  404466:	4b3f      	ldr	r3, [pc, #252]	; (404564 <main+0x1f8>)
  404468:	2205      	movs	r2, #5
  40446a:	4621      	mov	r1, r4
  40446c:	483e      	ldr	r0, [pc, #248]	; (404568 <main+0x1fc>)
  40446e:	4d3f      	ldr	r5, [pc, #252]	; (40456c <main+0x200>)
  404470:	47a8      	blx	r5

	/* Iniciar FILA */
	xQueueOrientation = xQueueCreate(100, sizeof(float));
  404472:	4622      	mov	r2, r4
  404474:	2104      	movs	r1, #4
  404476:	2064      	movs	r0, #100	; 0x64
  404478:	4d3d      	ldr	r5, [pc, #244]	; (404570 <main+0x204>)
  40447a:	47a8      	blx	r5
  40447c:	4b3d      	ldr	r3, [pc, #244]	; (404574 <main+0x208>)
  40447e:	6018      	str	r0, [r3, #0]

	/* Attempt to create a semaphore. */
	xSemaphoreHouseDown = xSemaphoreCreateBinary();
  404480:	2203      	movs	r2, #3
  404482:	4621      	mov	r1, r4
  404484:	2001      	movs	r0, #1
  404486:	47a8      	blx	r5
  404488:	4b3b      	ldr	r3, [pc, #236]	; (404578 <main+0x20c>)
  40448a:	6018      	str	r0, [r3, #0]
	if (xSemaphoreHouseDown == NULL)
  40448c:	2800      	cmp	r0, #0
  40448e:	d032      	beq.n	4044f6 <main+0x18a>
		printf("falha em criar o semaforo \n");

	/* Create task to control oled */
	if (xTaskCreate(task_house_down, "house_down", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  404490:	2300      	movs	r3, #0
  404492:	9303      	str	r3, [sp, #12]
  404494:	9302      	str	r3, [sp, #8]
  404496:	9301      	str	r3, [sp, #4]
  404498:	9300      	str	r3, [sp, #0]
  40449a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40449e:	4937      	ldr	r1, [pc, #220]	; (40457c <main+0x210>)
  4044a0:	4837      	ldr	r0, [pc, #220]	; (404580 <main+0x214>)
  4044a2:	4c38      	ldr	r4, [pc, #224]	; (404584 <main+0x218>)
  4044a4:	47a0      	blx	r4
  4044a6:	2801      	cmp	r0, #1
  4044a8:	d002      	beq.n	4044b0 <main+0x144>
	  printf("Failed to create oled task\r\n");
  4044aa:	4837      	ldr	r0, [pc, #220]	; (404588 <main+0x21c>)
  4044ac:	4b37      	ldr	r3, [pc, #220]	; (40458c <main+0x220>)
  4044ae:	4798      	blx	r3
	}

	if (xTaskCreate(task_imu, "imu", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4044b0:	2300      	movs	r3, #0
  4044b2:	9303      	str	r3, [sp, #12]
  4044b4:	9302      	str	r3, [sp, #8]
  4044b6:	9301      	str	r3, [sp, #4]
  4044b8:	9300      	str	r3, [sp, #0]
  4044ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4044be:	4934      	ldr	r1, [pc, #208]	; (404590 <main+0x224>)
  4044c0:	4834      	ldr	r0, [pc, #208]	; (404594 <main+0x228>)
  4044c2:	4c30      	ldr	r4, [pc, #192]	; (404584 <main+0x218>)
  4044c4:	47a0      	blx	r4
  4044c6:	2801      	cmp	r0, #1
  4044c8:	d002      	beq.n	4044d0 <main+0x164>
	  printf("Failed to create imu task\r\n");
  4044ca:	4833      	ldr	r0, [pc, #204]	; (404598 <main+0x22c>)
  4044cc:	4b2f      	ldr	r3, [pc, #188]	; (40458c <main+0x220>)
  4044ce:	4798      	blx	r3
	}

	if (xTaskCreate(task_orientacao, "orientacao", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4044d0:	2300      	movs	r3, #0
  4044d2:	9303      	str	r3, [sp, #12]
  4044d4:	9302      	str	r3, [sp, #8]
  4044d6:	9301      	str	r3, [sp, #4]
  4044d8:	9300      	str	r3, [sp, #0]
  4044da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4044de:	492f      	ldr	r1, [pc, #188]	; (40459c <main+0x230>)
  4044e0:	482f      	ldr	r0, [pc, #188]	; (4045a0 <main+0x234>)
  4044e2:	4c28      	ldr	r4, [pc, #160]	; (404584 <main+0x218>)
  4044e4:	47a0      	blx	r4
  4044e6:	2801      	cmp	r0, #1
  4044e8:	d002      	beq.n	4044f0 <main+0x184>
	  printf("Failed to create orientacao task\r\n");
  4044ea:	482e      	ldr	r0, [pc, #184]	; (4045a4 <main+0x238>)
  4044ec:	4b27      	ldr	r3, [pc, #156]	; (40458c <main+0x220>)
  4044ee:	4798      	blx	r3
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  4044f0:	4b2d      	ldr	r3, [pc, #180]	; (4045a8 <main+0x23c>)
  4044f2:	4798      	blx	r3
  4044f4:	e7fe      	b.n	4044f4 <main+0x188>
		printf("falha em criar o semaforo \n");
  4044f6:	482d      	ldr	r0, [pc, #180]	; (4045ac <main+0x240>)
  4044f8:	4b24      	ldr	r3, [pc, #144]	; (40458c <main+0x220>)
  4044fa:	4798      	blx	r3
  4044fc:	e7c8      	b.n	404490 <main+0x124>
  4044fe:	bf00      	nop
  404500:	00401389 	.word	0x00401389
  404504:	00401485 	.word	0x00401485
  404508:	e000e100 	.word	0xe000e100
  40450c:	00401a45 	.word	0x00401a45
  404510:	400e0e00 	.word	0x400e0e00
  404514:	00401731 	.word	0x00401731
  404518:	0040161d 	.word	0x0040161d
  40451c:	004017f3 	.word	0x004017f3
  404520:	00403ad9 	.word	0x00403ad9
  404524:	400e1200 	.word	0x400e1200
  404528:	400e1000 	.word	0x400e1000
  40452c:	40028000 	.word	0x40028000
  404530:	20400df0 	.word	0x20400df0
  404534:	00403ccd 	.word	0x00403ccd
  404538:	20400dec 	.word	0x20400dec
  40453c:	00403bf1 	.word	0x00403bf1
  404540:	20400de8 	.word	0x20400de8
  404544:	08f0d180 	.word	0x08f0d180
  404548:	00401b41 	.word	0x00401b41
  40454c:	00401b95 	.word	0x00401b95
  404550:	00401b9b 	.word	0x00401b9b
  404554:	20400028 	.word	0x20400028
  404558:	00407615 	.word	0x00407615
  40455c:	00401069 	.word	0x00401069
  404560:	00400eed 	.word	0x00400eed
  404564:	2040000c 	.word	0x2040000c
  404568:	0040bf6c 	.word	0x0040bf6c
  40456c:	00400fd1 	.word	0x00400fd1
  404570:	004024ed 	.word	0x004024ed
  404574:	20400e38 	.word	0x20400e38
  404578:	20400e34 	.word	0x20400e34
  40457c:	0040bf9c 	.word	0x0040bf9c
  404580:	00403b8d 	.word	0x00403b8d
  404584:	00402b2d 	.word	0x00402b2d
  404588:	0040bfa8 	.word	0x0040bfa8
  40458c:	004075e1 	.word	0x004075e1
  404590:	0040bfc4 	.word	0x0040bfc4
  404594:	00403e29 	.word	0x00403e29
  404598:	0040bfc8 	.word	0x0040bfc8
  40459c:	0040bfe4 	.word	0x0040bfe4
  4045a0:	00403add 	.word	0x00403add
  4045a4:	0040bff0 	.word	0x0040bff0
  4045a8:	00402d61 	.word	0x00402d61
  4045ac:	0040bf80 	.word	0x0040bf80
  4045b0:	00401851 	.word	0x00401851

004045b4 <cosf>:
  4045b4:	b500      	push	{lr}
  4045b6:	4a1c      	ldr	r2, [pc, #112]	; (404628 <cosf+0x74>)
  4045b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4045bc:	4293      	cmp	r3, r2
  4045be:	b083      	sub	sp, #12
  4045c0:	dd18      	ble.n	4045f4 <cosf+0x40>
  4045c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  4045c6:	db05      	blt.n	4045d4 <cosf+0x20>
  4045c8:	4601      	mov	r1, r0
  4045ca:	f002 f8b9 	bl	406740 <__aeabi_fsub>
  4045ce:	b003      	add	sp, #12
  4045d0:	f85d fb04 	ldr.w	pc, [sp], #4
  4045d4:	4669      	mov	r1, sp
  4045d6:	f000 fbaf 	bl	404d38 <__ieee754_rem_pio2f>
  4045da:	f000 0203 	and.w	r2, r0, #3
  4045de:	2a01      	cmp	r2, #1
  4045e0:	d015      	beq.n	40460e <cosf+0x5a>
  4045e2:	2a02      	cmp	r2, #2
  4045e4:	d00c      	beq.n	404600 <cosf+0x4c>
  4045e6:	b1ca      	cbz	r2, 40461c <cosf+0x68>
  4045e8:	2201      	movs	r2, #1
  4045ea:	9901      	ldr	r1, [sp, #4]
  4045ec:	9800      	ldr	r0, [sp, #0]
  4045ee:	f001 f9af 	bl	405950 <__kernel_sinf>
  4045f2:	e7ec      	b.n	4045ce <cosf+0x1a>
  4045f4:	2100      	movs	r1, #0
  4045f6:	f000 fd61 	bl	4050bc <__kernel_cosf>
  4045fa:	b003      	add	sp, #12
  4045fc:	f85d fb04 	ldr.w	pc, [sp], #4
  404600:	9901      	ldr	r1, [sp, #4]
  404602:	9800      	ldr	r0, [sp, #0]
  404604:	f000 fd5a 	bl	4050bc <__kernel_cosf>
  404608:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40460c:	e7df      	b.n	4045ce <cosf+0x1a>
  40460e:	9901      	ldr	r1, [sp, #4]
  404610:	9800      	ldr	r0, [sp, #0]
  404612:	f001 f99d 	bl	405950 <__kernel_sinf>
  404616:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40461a:	e7d8      	b.n	4045ce <cosf+0x1a>
  40461c:	9901      	ldr	r1, [sp, #4]
  40461e:	9800      	ldr	r0, [sp, #0]
  404620:	f000 fd4c 	bl	4050bc <__kernel_cosf>
  404624:	e7d3      	b.n	4045ce <cosf+0x1a>
  404626:	bf00      	nop
  404628:	3f490fd8 	.word	0x3f490fd8

0040462c <sinf>:
  40462c:	b500      	push	{lr}
  40462e:	4a1d      	ldr	r2, [pc, #116]	; (4046a4 <sinf+0x78>)
  404630:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404634:	4293      	cmp	r3, r2
  404636:	b083      	sub	sp, #12
  404638:	dd19      	ble.n	40466e <sinf+0x42>
  40463a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  40463e:	db05      	blt.n	40464c <sinf+0x20>
  404640:	4601      	mov	r1, r0
  404642:	f002 f87d 	bl	406740 <__aeabi_fsub>
  404646:	b003      	add	sp, #12
  404648:	f85d fb04 	ldr.w	pc, [sp], #4
  40464c:	4669      	mov	r1, sp
  40464e:	f000 fb73 	bl	404d38 <__ieee754_rem_pio2f>
  404652:	f000 0003 	and.w	r0, r0, #3
  404656:	2801      	cmp	r0, #1
  404658:	d018      	beq.n	40468c <sinf+0x60>
  40465a:	2802      	cmp	r0, #2
  40465c:	d00e      	beq.n	40467c <sinf+0x50>
  40465e:	b1d0      	cbz	r0, 404696 <sinf+0x6a>
  404660:	9901      	ldr	r1, [sp, #4]
  404662:	9800      	ldr	r0, [sp, #0]
  404664:	f000 fd2a 	bl	4050bc <__kernel_cosf>
  404668:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40466c:	e7eb      	b.n	404646 <sinf+0x1a>
  40466e:	2200      	movs	r2, #0
  404670:	2100      	movs	r1, #0
  404672:	f001 f96d 	bl	405950 <__kernel_sinf>
  404676:	b003      	add	sp, #12
  404678:	f85d fb04 	ldr.w	pc, [sp], #4
  40467c:	2201      	movs	r2, #1
  40467e:	9901      	ldr	r1, [sp, #4]
  404680:	9800      	ldr	r0, [sp, #0]
  404682:	f001 f965 	bl	405950 <__kernel_sinf>
  404686:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40468a:	e7dc      	b.n	404646 <sinf+0x1a>
  40468c:	9901      	ldr	r1, [sp, #4]
  40468e:	9800      	ldr	r0, [sp, #0]
  404690:	f000 fd14 	bl	4050bc <__kernel_cosf>
  404694:	e7d7      	b.n	404646 <sinf+0x1a>
  404696:	2201      	movs	r2, #1
  404698:	9901      	ldr	r1, [sp, #4]
  40469a:	9800      	ldr	r0, [sp, #0]
  40469c:	f001 f958 	bl	405950 <__kernel_sinf>
  4046a0:	e7d1      	b.n	404646 <sinf+0x1a>
  4046a2:	bf00      	nop
  4046a4:	3f490fd8 	.word	0x3f490fd8

004046a8 <sqrt>:
  4046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046ac:	b08b      	sub	sp, #44	; 0x2c
  4046ae:	4604      	mov	r4, r0
  4046b0:	460d      	mov	r5, r1
  4046b2:	f000 f8a9 	bl	404808 <__ieee754_sqrt>
  4046b6:	4b29      	ldr	r3, [pc, #164]	; (40475c <sqrt+0xb4>)
  4046b8:	f993 a000 	ldrsb.w	sl, [r3]
  4046bc:	f1ba 3fff 	cmp.w	sl, #4294967295
  4046c0:	4606      	mov	r6, r0
  4046c2:	460f      	mov	r7, r1
  4046c4:	d012      	beq.n	4046ec <sqrt+0x44>
  4046c6:	4622      	mov	r2, r4
  4046c8:	462b      	mov	r3, r5
  4046ca:	4620      	mov	r0, r4
  4046cc:	4629      	mov	r1, r5
  4046ce:	f001 ffcd 	bl	40666c <__aeabi_dcmpun>
  4046d2:	4683      	mov	fp, r0
  4046d4:	b950      	cbnz	r0, 4046ec <sqrt+0x44>
  4046d6:	f04f 0800 	mov.w	r8, #0
  4046da:	f04f 0900 	mov.w	r9, #0
  4046de:	4642      	mov	r2, r8
  4046e0:	464b      	mov	r3, r9
  4046e2:	4620      	mov	r0, r4
  4046e4:	4629      	mov	r1, r5
  4046e6:	f001 ff99 	bl	40661c <__aeabi_dcmplt>
  4046ea:	b920      	cbnz	r0, 4046f6 <sqrt+0x4e>
  4046ec:	4630      	mov	r0, r6
  4046ee:	4639      	mov	r1, r7
  4046f0:	b00b      	add	sp, #44	; 0x2c
  4046f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046f6:	4b1a      	ldr	r3, [pc, #104]	; (404760 <sqrt+0xb8>)
  4046f8:	f8cd b020 	str.w	fp, [sp, #32]
  4046fc:	2201      	movs	r2, #1
  4046fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404702:	e9cd 4502 	strd	r4, r5, [sp, #8]
  404706:	e88d 000c 	stmia.w	sp, {r2, r3}
  40470a:	f1ba 0f00 	cmp.w	sl, #0
  40470e:	d017      	beq.n	404740 <sqrt+0x98>
  404710:	4642      	mov	r2, r8
  404712:	464b      	mov	r3, r9
  404714:	4640      	mov	r0, r8
  404716:	4649      	mov	r1, r9
  404718:	f001 fe38 	bl	40638c <__aeabi_ddiv>
  40471c:	f1ba 0f02 	cmp.w	sl, #2
  404720:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404724:	d10e      	bne.n	404744 <sqrt+0x9c>
  404726:	f002 fb17 	bl	406d58 <__errno>
  40472a:	2321      	movs	r3, #33	; 0x21
  40472c:	6003      	str	r3, [r0, #0]
  40472e:	9b08      	ldr	r3, [sp, #32]
  404730:	b973      	cbnz	r3, 404750 <sqrt+0xa8>
  404732:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  404736:	4630      	mov	r0, r6
  404738:	4639      	mov	r1, r7
  40473a:	b00b      	add	sp, #44	; 0x2c
  40473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404740:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404744:	4668      	mov	r0, sp
  404746:	f001 f979 	bl	405a3c <matherr>
  40474a:	2800      	cmp	r0, #0
  40474c:	d1ef      	bne.n	40472e <sqrt+0x86>
  40474e:	e7ea      	b.n	404726 <sqrt+0x7e>
  404750:	f002 fb02 	bl	406d58 <__errno>
  404754:	9b08      	ldr	r3, [sp, #32]
  404756:	6003      	str	r3, [r0, #0]
  404758:	e7eb      	b.n	404732 <sqrt+0x8a>
  40475a:	bf00      	nop
  40475c:	20400024 	.word	0x20400024
  404760:	0040c0d4 	.word	0x0040c0d4

00404764 <asinf>:
  404764:	b5f0      	push	{r4, r5, r6, r7, lr}
  404766:	4e24      	ldr	r6, [pc, #144]	; (4047f8 <asinf+0x94>)
  404768:	b08b      	sub	sp, #44	; 0x2c
  40476a:	4604      	mov	r4, r0
  40476c:	f000 f908 	bl	404980 <__ieee754_asinf>
  404770:	f996 3000 	ldrsb.w	r3, [r6]
  404774:	3301      	adds	r3, #1
  404776:	4605      	mov	r5, r0
  404778:	d02f      	beq.n	4047da <asinf+0x76>
  40477a:	4621      	mov	r1, r4
  40477c:	4620      	mov	r0, r4
  40477e:	f002 faaf 	bl	406ce0 <__aeabi_fcmpun>
  404782:	4607      	mov	r7, r0
  404784:	bb48      	cbnz	r0, 4047da <asinf+0x76>
  404786:	4620      	mov	r0, r4
  404788:	f001 fa76 	bl	405c78 <fabsf>
  40478c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404790:	f002 fa9c 	bl	406ccc <__aeabi_fcmpgt>
  404794:	b308      	cbz	r0, 4047da <asinf+0x76>
  404796:	4b19      	ldr	r3, [pc, #100]	; (4047fc <asinf+0x98>)
  404798:	9708      	str	r7, [sp, #32]
  40479a:	2201      	movs	r2, #1
  40479c:	4620      	mov	r0, r4
  40479e:	e88d 000c 	stmia.w	sp, {r2, r3}
  4047a2:	f001 fc75 	bl	406090 <__aeabi_f2d>
  4047a6:	4602      	mov	r2, r0
  4047a8:	460b      	mov	r3, r1
  4047aa:	4815      	ldr	r0, [pc, #84]	; (404800 <asinf+0x9c>)
  4047ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4047b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4047b4:	f001 f944 	bl	405a40 <nan>
  4047b8:	f996 3000 	ldrsb.w	r3, [r6]
  4047bc:	2b02      	cmp	r3, #2
  4047be:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4047c2:	d00d      	beq.n	4047e0 <asinf+0x7c>
  4047c4:	4668      	mov	r0, sp
  4047c6:	f001 f939 	bl	405a3c <matherr>
  4047ca:	b148      	cbz	r0, 4047e0 <asinf+0x7c>
  4047cc:	9b08      	ldr	r3, [sp, #32]
  4047ce:	b973      	cbnz	r3, 4047ee <asinf+0x8a>
  4047d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4047d4:	f001 ff60 	bl	406698 <__aeabi_d2f>
  4047d8:	4605      	mov	r5, r0
  4047da:	4628      	mov	r0, r5
  4047dc:	b00b      	add	sp, #44	; 0x2c
  4047de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047e0:	f002 faba 	bl	406d58 <__errno>
  4047e4:	2321      	movs	r3, #33	; 0x21
  4047e6:	6003      	str	r3, [r0, #0]
  4047e8:	9b08      	ldr	r3, [sp, #32]
  4047ea:	2b00      	cmp	r3, #0
  4047ec:	d0f0      	beq.n	4047d0 <asinf+0x6c>
  4047ee:	f002 fab3 	bl	406d58 <__errno>
  4047f2:	9b08      	ldr	r3, [sp, #32]
  4047f4:	6003      	str	r3, [r0, #0]
  4047f6:	e7eb      	b.n	4047d0 <asinf+0x6c>
  4047f8:	20400024 	.word	0x20400024
  4047fc:	0040c0dc 	.word	0x0040c0dc
  404800:	0040c028 	.word	0x0040c028

00404804 <atan2f>:
  404804:	f000 ba06 	b.w	404c14 <__ieee754_atan2f>

00404808 <__ieee754_sqrt>:
  404808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40480c:	4f5b      	ldr	r7, [pc, #364]	; (40497c <__ieee754_sqrt+0x174>)
  40480e:	438f      	bics	r7, r1
  404810:	4605      	mov	r5, r0
  404812:	460c      	mov	r4, r1
  404814:	f000 8092 	beq.w	40493c <__ieee754_sqrt+0x134>
  404818:	2900      	cmp	r1, #0
  40481a:	460b      	mov	r3, r1
  40481c:	4602      	mov	r2, r0
  40481e:	dd6f      	ble.n	404900 <__ieee754_sqrt+0xf8>
  404820:	150f      	asrs	r7, r1, #20
  404822:	d07b      	beq.n	40491c <__ieee754_sqrt+0x114>
  404824:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  404828:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40482c:	07f8      	lsls	r0, r7, #31
  40482e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404832:	d45c      	bmi.n	4048ee <__ieee754_sqrt+0xe6>
  404834:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  404838:	2600      	movs	r6, #0
  40483a:	440b      	add	r3, r1
  40483c:	107f      	asrs	r7, r7, #1
  40483e:	0052      	lsls	r2, r2, #1
  404840:	46b6      	mov	lr, r6
  404842:	2016      	movs	r0, #22
  404844:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  404848:	eb0e 0401 	add.w	r4, lr, r1
  40484c:	429c      	cmp	r4, r3
  40484e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  404852:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404856:	dc03      	bgt.n	404860 <__ieee754_sqrt+0x58>
  404858:	1b1b      	subs	r3, r3, r4
  40485a:	eb04 0e01 	add.w	lr, r4, r1
  40485e:	440e      	add	r6, r1
  404860:	3801      	subs	r0, #1
  404862:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  404866:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40486a:	d1ed      	bne.n	404848 <__ieee754_sqrt+0x40>
  40486c:	4684      	mov	ip, r0
  40486e:	2420      	movs	r4, #32
  404870:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404874:	e009      	b.n	40488a <__ieee754_sqrt+0x82>
  404876:	d020      	beq.n	4048ba <__ieee754_sqrt+0xb2>
  404878:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40487c:	3c01      	subs	r4, #1
  40487e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  404882:	442b      	add	r3, r5
  404884:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404888:	d020      	beq.n	4048cc <__ieee754_sqrt+0xc4>
  40488a:	4573      	cmp	r3, lr
  40488c:	eb01 050c 	add.w	r5, r1, ip
  404890:	ddf1      	ble.n	404876 <__ieee754_sqrt+0x6e>
  404892:	2d00      	cmp	r5, #0
  404894:	eb05 0c01 	add.w	ip, r5, r1
  404898:	db09      	blt.n	4048ae <__ieee754_sqrt+0xa6>
  40489a:	46f0      	mov	r8, lr
  40489c:	4295      	cmp	r5, r2
  40489e:	eba3 030e 	sub.w	r3, r3, lr
  4048a2:	d900      	bls.n	4048a6 <__ieee754_sqrt+0x9e>
  4048a4:	3b01      	subs	r3, #1
  4048a6:	1b52      	subs	r2, r2, r5
  4048a8:	4408      	add	r0, r1
  4048aa:	46c6      	mov	lr, r8
  4048ac:	e7e4      	b.n	404878 <__ieee754_sqrt+0x70>
  4048ae:	f1bc 0f00 	cmp.w	ip, #0
  4048b2:	dbf2      	blt.n	40489a <__ieee754_sqrt+0x92>
  4048b4:	f10e 0801 	add.w	r8, lr, #1
  4048b8:	e7f0      	b.n	40489c <__ieee754_sqrt+0x94>
  4048ba:	4295      	cmp	r5, r2
  4048bc:	d8dc      	bhi.n	404878 <__ieee754_sqrt+0x70>
  4048be:	2d00      	cmp	r5, #0
  4048c0:	eb05 0c01 	add.w	ip, r5, r1
  4048c4:	db44      	blt.n	404950 <__ieee754_sqrt+0x148>
  4048c6:	4698      	mov	r8, r3
  4048c8:	2300      	movs	r3, #0
  4048ca:	e7ec      	b.n	4048a6 <__ieee754_sqrt+0x9e>
  4048cc:	4313      	orrs	r3, r2
  4048ce:	d113      	bne.n	4048f8 <__ieee754_sqrt+0xf0>
  4048d0:	0840      	lsrs	r0, r0, #1
  4048d2:	1073      	asrs	r3, r6, #1
  4048d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  4048d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4048dc:	07f2      	lsls	r2, r6, #31
  4048de:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4048e2:	bf48      	it	mi
  4048e4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4048e8:	4649      	mov	r1, r9
  4048ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048ee:	005b      	lsls	r3, r3, #1
  4048f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4048f4:	0052      	lsls	r2, r2, #1
  4048f6:	e79d      	b.n	404834 <__ieee754_sqrt+0x2c>
  4048f8:	1c41      	adds	r1, r0, #1
  4048fa:	d02d      	beq.n	404958 <__ieee754_sqrt+0x150>
  4048fc:	3001      	adds	r0, #1
  4048fe:	e7e7      	b.n	4048d0 <__ieee754_sqrt+0xc8>
  404900:	4606      	mov	r6, r0
  404902:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404906:	433e      	orrs	r6, r7
  404908:	d0ef      	beq.n	4048ea <__ieee754_sqrt+0xe2>
  40490a:	bb69      	cbnz	r1, 404968 <__ieee754_sqrt+0x160>
  40490c:	460f      	mov	r7, r1
  40490e:	0ad3      	lsrs	r3, r2, #11
  404910:	3f15      	subs	r7, #21
  404912:	0552      	lsls	r2, r2, #21
  404914:	2b00      	cmp	r3, #0
  404916:	d0fa      	beq.n	40490e <__ieee754_sqrt+0x106>
  404918:	02de      	lsls	r6, r3, #11
  40491a:	d420      	bmi.n	40495e <__ieee754_sqrt+0x156>
  40491c:	2400      	movs	r4, #0
  40491e:	e000      	b.n	404922 <__ieee754_sqrt+0x11a>
  404920:	4604      	mov	r4, r0
  404922:	005b      	lsls	r3, r3, #1
  404924:	02dd      	lsls	r5, r3, #11
  404926:	f104 0001 	add.w	r0, r4, #1
  40492a:	d5f9      	bpl.n	404920 <__ieee754_sqrt+0x118>
  40492c:	f1c0 0120 	rsb	r1, r0, #32
  404930:	fa22 f101 	lsr.w	r1, r2, r1
  404934:	430b      	orrs	r3, r1
  404936:	1b3f      	subs	r7, r7, r4
  404938:	4082      	lsls	r2, r0
  40493a:	e773      	b.n	404824 <__ieee754_sqrt+0x1c>
  40493c:	4602      	mov	r2, r0
  40493e:	460b      	mov	r3, r1
  404940:	f001 fbfa 	bl	406138 <__aeabi_dmul>
  404944:	462a      	mov	r2, r5
  404946:	4623      	mov	r3, r4
  404948:	f001 fa44 	bl	405dd4 <__adddf3>
  40494c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404950:	f1bc 0f00 	cmp.w	ip, #0
  404954:	daae      	bge.n	4048b4 <__ieee754_sqrt+0xac>
  404956:	e7b6      	b.n	4048c6 <__ieee754_sqrt+0xbe>
  404958:	3601      	adds	r6, #1
  40495a:	4620      	mov	r0, r4
  40495c:	e7b9      	b.n	4048d2 <__ieee754_sqrt+0xca>
  40495e:	2000      	movs	r0, #0
  404960:	2120      	movs	r1, #32
  404962:	f04f 34ff 	mov.w	r4, #4294967295
  404966:	e7e3      	b.n	404930 <__ieee754_sqrt+0x128>
  404968:	4602      	mov	r2, r0
  40496a:	460b      	mov	r3, r1
  40496c:	f001 fa30 	bl	405dd0 <__aeabi_dsub>
  404970:	4602      	mov	r2, r0
  404972:	460b      	mov	r3, r1
  404974:	f001 fd0a 	bl	40638c <__aeabi_ddiv>
  404978:	e7b7      	b.n	4048ea <__ieee754_sqrt+0xe2>
  40497a:	bf00      	nop
  40497c:	7ff00000 	.word	0x7ff00000

00404980 <__ieee754_asinf>:
  404980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404984:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404988:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
  40498c:	4604      	mov	r4, r0
  40498e:	f000 80c6 	beq.w	404b1e <__ieee754_asinf+0x19e>
  404992:	dc12      	bgt.n	4049ba <__ieee754_asinf+0x3a>
  404994:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
  404998:	4606      	mov	r6, r0
  40499a:	da16      	bge.n	4049ca <__ieee754_asinf+0x4a>
  40499c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
  4049a0:	f280 80cb 	bge.w	404b3a <__ieee754_asinf+0x1ba>
  4049a4:	498b      	ldr	r1, [pc, #556]	; (404bd4 <__ieee754_asinf+0x254>)
  4049a6:	f001 fecd 	bl	406744 <__addsf3>
  4049aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4049ae:	f002 f98d 	bl	406ccc <__aeabi_fcmpgt>
  4049b2:	b150      	cbz	r0, 4049ca <__ieee754_asinf+0x4a>
  4049b4:	4620      	mov	r0, r4
  4049b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4049ba:	4601      	mov	r1, r0
  4049bc:	f001 fec0 	bl	406740 <__aeabi_fsub>
  4049c0:	4601      	mov	r1, r0
  4049c2:	f002 f87b 	bl	406abc <__aeabi_fdiv>
  4049c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4049ca:	4620      	mov	r0, r4
  4049cc:	f001 f954 	bl	405c78 <fabsf>
  4049d0:	4601      	mov	r1, r0
  4049d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4049d6:	f001 feb3 	bl	406740 <__aeabi_fsub>
  4049da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4049de:	f001 ffb9 	bl	406954 <__aeabi_fmul>
  4049e2:	497d      	ldr	r1, [pc, #500]	; (404bd8 <__ieee754_asinf+0x258>)
  4049e4:	4604      	mov	r4, r0
  4049e6:	f001 ffb5 	bl	406954 <__aeabi_fmul>
  4049ea:	497c      	ldr	r1, [pc, #496]	; (404bdc <__ieee754_asinf+0x25c>)
  4049ec:	f001 feaa 	bl	406744 <__addsf3>
  4049f0:	4621      	mov	r1, r4
  4049f2:	f001 ffaf 	bl	406954 <__aeabi_fmul>
  4049f6:	497a      	ldr	r1, [pc, #488]	; (404be0 <__ieee754_asinf+0x260>)
  4049f8:	f001 fea2 	bl	406740 <__aeabi_fsub>
  4049fc:	4621      	mov	r1, r4
  4049fe:	f001 ffa9 	bl	406954 <__aeabi_fmul>
  404a02:	4978      	ldr	r1, [pc, #480]	; (404be4 <__ieee754_asinf+0x264>)
  404a04:	f001 fe9e 	bl	406744 <__addsf3>
  404a08:	4621      	mov	r1, r4
  404a0a:	f001 ffa3 	bl	406954 <__aeabi_fmul>
  404a0e:	4976      	ldr	r1, [pc, #472]	; (404be8 <__ieee754_asinf+0x268>)
  404a10:	f001 fe96 	bl	406740 <__aeabi_fsub>
  404a14:	4621      	mov	r1, r4
  404a16:	f001 ff9d 	bl	406954 <__aeabi_fmul>
  404a1a:	4974      	ldr	r1, [pc, #464]	; (404bec <__ieee754_asinf+0x26c>)
  404a1c:	f001 fe92 	bl	406744 <__addsf3>
  404a20:	4621      	mov	r1, r4
  404a22:	f001 ff97 	bl	406954 <__aeabi_fmul>
  404a26:	4972      	ldr	r1, [pc, #456]	; (404bf0 <__ieee754_asinf+0x270>)
  404a28:	4680      	mov	r8, r0
  404a2a:	4620      	mov	r0, r4
  404a2c:	f001 ff92 	bl	406954 <__aeabi_fmul>
  404a30:	4970      	ldr	r1, [pc, #448]	; (404bf4 <__ieee754_asinf+0x274>)
  404a32:	f001 fe85 	bl	406740 <__aeabi_fsub>
  404a36:	4621      	mov	r1, r4
  404a38:	f001 ff8c 	bl	406954 <__aeabi_fmul>
  404a3c:	496e      	ldr	r1, [pc, #440]	; (404bf8 <__ieee754_asinf+0x278>)
  404a3e:	f001 fe81 	bl	406744 <__addsf3>
  404a42:	4621      	mov	r1, r4
  404a44:	f001 ff86 	bl	406954 <__aeabi_fmul>
  404a48:	496c      	ldr	r1, [pc, #432]	; (404bfc <__ieee754_asinf+0x27c>)
  404a4a:	f001 fe79 	bl	406740 <__aeabi_fsub>
  404a4e:	4621      	mov	r1, r4
  404a50:	f001 ff80 	bl	406954 <__aeabi_fmul>
  404a54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404a58:	f001 fe74 	bl	406744 <__addsf3>
  404a5c:	4681      	mov	r9, r0
  404a5e:	4620      	mov	r0, r4
  404a60:	f000 fad8 	bl	405014 <__ieee754_sqrtf>
  404a64:	4b66      	ldr	r3, [pc, #408]	; (404c00 <__ieee754_asinf+0x280>)
  404a66:	429d      	cmp	r5, r3
  404a68:	4607      	mov	r7, r0
  404a6a:	4649      	mov	r1, r9
  404a6c:	4640      	mov	r0, r8
  404a6e:	dc43      	bgt.n	404af8 <__ieee754_asinf+0x178>
  404a70:	f002 f824 	bl	406abc <__aeabi_fdiv>
  404a74:	4639      	mov	r1, r7
  404a76:	4680      	mov	r8, r0
  404a78:	4638      	mov	r0, r7
  404a7a:	f001 fe63 	bl	406744 <__addsf3>
  404a7e:	4601      	mov	r1, r0
  404a80:	4640      	mov	r0, r8
  404a82:	f001 ff67 	bl	406954 <__aeabi_fmul>
  404a86:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
  404a8a:	f025 050f 	bic.w	r5, r5, #15
  404a8e:	4680      	mov	r8, r0
  404a90:	4629      	mov	r1, r5
  404a92:	4628      	mov	r0, r5
  404a94:	f001 ff5e 	bl	406954 <__aeabi_fmul>
  404a98:	4601      	mov	r1, r0
  404a9a:	4620      	mov	r0, r4
  404a9c:	f001 fe50 	bl	406740 <__aeabi_fsub>
  404aa0:	4639      	mov	r1, r7
  404aa2:	4604      	mov	r4, r0
  404aa4:	4628      	mov	r0, r5
  404aa6:	f001 fe4d 	bl	406744 <__addsf3>
  404aaa:	4601      	mov	r1, r0
  404aac:	4620      	mov	r0, r4
  404aae:	f002 f805 	bl	406abc <__aeabi_fdiv>
  404ab2:	4601      	mov	r1, r0
  404ab4:	f001 fe46 	bl	406744 <__addsf3>
  404ab8:	4601      	mov	r1, r0
  404aba:	4852      	ldr	r0, [pc, #328]	; (404c04 <__ieee754_asinf+0x284>)
  404abc:	f001 fe40 	bl	406740 <__aeabi_fsub>
  404ac0:	4601      	mov	r1, r0
  404ac2:	4640      	mov	r0, r8
  404ac4:	f001 fe3c 	bl	406740 <__aeabi_fsub>
  404ac8:	4629      	mov	r1, r5
  404aca:	4604      	mov	r4, r0
  404acc:	4628      	mov	r0, r5
  404ace:	f001 fe39 	bl	406744 <__addsf3>
  404ad2:	4601      	mov	r1, r0
  404ad4:	484c      	ldr	r0, [pc, #304]	; (404c08 <__ieee754_asinf+0x288>)
  404ad6:	f001 fe33 	bl	406740 <__aeabi_fsub>
  404ada:	4601      	mov	r1, r0
  404adc:	4620      	mov	r0, r4
  404ade:	f001 fe2f 	bl	406740 <__aeabi_fsub>
  404ae2:	4601      	mov	r1, r0
  404ae4:	4848      	ldr	r0, [pc, #288]	; (404c08 <__ieee754_asinf+0x288>)
  404ae6:	f001 fe2b 	bl	406740 <__aeabi_fsub>
  404aea:	2e00      	cmp	r6, #0
  404aec:	f73f af63 	bgt.w	4049b6 <__ieee754_asinf+0x36>
  404af0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404af8:	f001 ffe0 	bl	406abc <__aeabi_fdiv>
  404afc:	4639      	mov	r1, r7
  404afe:	f001 ff29 	bl	406954 <__aeabi_fmul>
  404b02:	4639      	mov	r1, r7
  404b04:	f001 fe1e 	bl	406744 <__addsf3>
  404b08:	4601      	mov	r1, r0
  404b0a:	f001 fe1b 	bl	406744 <__addsf3>
  404b0e:	493f      	ldr	r1, [pc, #252]	; (404c0c <__ieee754_asinf+0x28c>)
  404b10:	f001 fe18 	bl	406744 <__addsf3>
  404b14:	4601      	mov	r1, r0
  404b16:	483e      	ldr	r0, [pc, #248]	; (404c10 <__ieee754_asinf+0x290>)
  404b18:	f001 fe12 	bl	406740 <__aeabi_fsub>
  404b1c:	e7e5      	b.n	404aea <__ieee754_asinf+0x16a>
  404b1e:	493c      	ldr	r1, [pc, #240]	; (404c10 <__ieee754_asinf+0x290>)
  404b20:	f001 ff18 	bl	406954 <__aeabi_fmul>
  404b24:	4937      	ldr	r1, [pc, #220]	; (404c04 <__ieee754_asinf+0x284>)
  404b26:	4605      	mov	r5, r0
  404b28:	4620      	mov	r0, r4
  404b2a:	f001 ff13 	bl	406954 <__aeabi_fmul>
  404b2e:	4601      	mov	r1, r0
  404b30:	4628      	mov	r0, r5
  404b32:	f001 fe07 	bl	406744 <__addsf3>
  404b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b3a:	4601      	mov	r1, r0
  404b3c:	f001 ff0a 	bl	406954 <__aeabi_fmul>
  404b40:	4925      	ldr	r1, [pc, #148]	; (404bd8 <__ieee754_asinf+0x258>)
  404b42:	4605      	mov	r5, r0
  404b44:	f001 ff06 	bl	406954 <__aeabi_fmul>
  404b48:	4924      	ldr	r1, [pc, #144]	; (404bdc <__ieee754_asinf+0x25c>)
  404b4a:	f001 fdfb 	bl	406744 <__addsf3>
  404b4e:	4629      	mov	r1, r5
  404b50:	f001 ff00 	bl	406954 <__aeabi_fmul>
  404b54:	4922      	ldr	r1, [pc, #136]	; (404be0 <__ieee754_asinf+0x260>)
  404b56:	f001 fdf3 	bl	406740 <__aeabi_fsub>
  404b5a:	4629      	mov	r1, r5
  404b5c:	f001 fefa 	bl	406954 <__aeabi_fmul>
  404b60:	4920      	ldr	r1, [pc, #128]	; (404be4 <__ieee754_asinf+0x264>)
  404b62:	f001 fdef 	bl	406744 <__addsf3>
  404b66:	4629      	mov	r1, r5
  404b68:	f001 fef4 	bl	406954 <__aeabi_fmul>
  404b6c:	491e      	ldr	r1, [pc, #120]	; (404be8 <__ieee754_asinf+0x268>)
  404b6e:	f001 fde7 	bl	406740 <__aeabi_fsub>
  404b72:	4629      	mov	r1, r5
  404b74:	f001 feee 	bl	406954 <__aeabi_fmul>
  404b78:	491c      	ldr	r1, [pc, #112]	; (404bec <__ieee754_asinf+0x26c>)
  404b7a:	f001 fde3 	bl	406744 <__addsf3>
  404b7e:	4629      	mov	r1, r5
  404b80:	f001 fee8 	bl	406954 <__aeabi_fmul>
  404b84:	491a      	ldr	r1, [pc, #104]	; (404bf0 <__ieee754_asinf+0x270>)
  404b86:	4606      	mov	r6, r0
  404b88:	4628      	mov	r0, r5
  404b8a:	f001 fee3 	bl	406954 <__aeabi_fmul>
  404b8e:	4919      	ldr	r1, [pc, #100]	; (404bf4 <__ieee754_asinf+0x274>)
  404b90:	f001 fdd6 	bl	406740 <__aeabi_fsub>
  404b94:	4629      	mov	r1, r5
  404b96:	f001 fedd 	bl	406954 <__aeabi_fmul>
  404b9a:	4917      	ldr	r1, [pc, #92]	; (404bf8 <__ieee754_asinf+0x278>)
  404b9c:	f001 fdd2 	bl	406744 <__addsf3>
  404ba0:	4629      	mov	r1, r5
  404ba2:	f001 fed7 	bl	406954 <__aeabi_fmul>
  404ba6:	4915      	ldr	r1, [pc, #84]	; (404bfc <__ieee754_asinf+0x27c>)
  404ba8:	f001 fdca 	bl	406740 <__aeabi_fsub>
  404bac:	4629      	mov	r1, r5
  404bae:	f001 fed1 	bl	406954 <__aeabi_fmul>
  404bb2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404bb6:	f001 fdc5 	bl	406744 <__addsf3>
  404bba:	4601      	mov	r1, r0
  404bbc:	4630      	mov	r0, r6
  404bbe:	f001 ff7d 	bl	406abc <__aeabi_fdiv>
  404bc2:	4621      	mov	r1, r4
  404bc4:	f001 fec6 	bl	406954 <__aeabi_fmul>
  404bc8:	4621      	mov	r1, r4
  404bca:	f001 fdbb 	bl	406744 <__addsf3>
  404bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bd2:	bf00      	nop
  404bd4:	7149f2ca 	.word	0x7149f2ca
  404bd8:	3811ef08 	.word	0x3811ef08
  404bdc:	3a4f7f04 	.word	0x3a4f7f04
  404be0:	3d241146 	.word	0x3d241146
  404be4:	3e4e0aa8 	.word	0x3e4e0aa8
  404be8:	3ea6b090 	.word	0x3ea6b090
  404bec:	3e2aaaab 	.word	0x3e2aaaab
  404bf0:	3d9dc62e 	.word	0x3d9dc62e
  404bf4:	3f303361 	.word	0x3f303361
  404bf8:	4001572d 	.word	0x4001572d
  404bfc:	4019d139 	.word	0x4019d139
  404c00:	3f799999 	.word	0x3f799999
  404c04:	b33bbd2e 	.word	0xb33bbd2e
  404c08:	3f490fdb 	.word	0x3f490fdb
  404c0c:	333bbd2e 	.word	0x333bbd2e
  404c10:	3fc90fdb 	.word	0x3fc90fdb

00404c14 <__ieee754_atan2f>:
  404c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c16:	460c      	mov	r4, r1
  404c18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404c1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  404c20:	4603      	mov	r3, r0
  404c22:	dc14      	bgt.n	404c4e <__ieee754_atan2f+0x3a>
  404c24:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
  404c28:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404c2c:	4607      	mov	r7, r0
  404c2e:	dc0e      	bgt.n	404c4e <__ieee754_atan2f+0x3a>
  404c30:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  404c34:	d03d      	beq.n	404cb2 <__ieee754_atan2f+0x9e>
  404c36:	17a5      	asrs	r5, r4, #30
  404c38:	f005 0502 	and.w	r5, r5, #2
  404c3c:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
  404c40:	b956      	cbnz	r6, 404c58 <__ieee754_atan2f+0x44>
  404c42:	2d02      	cmp	r5, #2
  404c44:	d030      	beq.n	404ca8 <__ieee754_atan2f+0x94>
  404c46:	2d03      	cmp	r5, #3
  404c48:	d130      	bne.n	404cac <__ieee754_atan2f+0x98>
  404c4a:	4832      	ldr	r0, [pc, #200]	; (404d14 <__ieee754_atan2f+0x100>)
  404c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c4e:	4619      	mov	r1, r3
  404c50:	4620      	mov	r0, r4
  404c52:	f001 fd77 	bl	406744 <__addsf3>
  404c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c58:	b301      	cbz	r1, 404c9c <__ieee754_atan2f+0x88>
  404c5a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  404c5e:	d02c      	beq.n	404cba <__ieee754_atan2f+0xa6>
  404c60:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404c64:	d01a      	beq.n	404c9c <__ieee754_atan2f+0x88>
  404c66:	1a71      	subs	r1, r6, r1
  404c68:	15c9      	asrs	r1, r1, #23
  404c6a:	293c      	cmp	r1, #60	; 0x3c
  404c6c:	dc1a      	bgt.n	404ca4 <__ieee754_atan2f+0x90>
  404c6e:	2c00      	cmp	r4, #0
  404c70:	db39      	blt.n	404ce6 <__ieee754_atan2f+0xd2>
  404c72:	4621      	mov	r1, r4
  404c74:	4618      	mov	r0, r3
  404c76:	f001 ff21 	bl	406abc <__aeabi_fdiv>
  404c7a:	f000 fffd 	bl	405c78 <fabsf>
  404c7e:	f000 fee5 	bl	405a4c <atanf>
  404c82:	2d01      	cmp	r5, #1
  404c84:	d02c      	beq.n	404ce0 <__ieee754_atan2f+0xcc>
  404c86:	2d02      	cmp	r5, #2
  404c88:	d022      	beq.n	404cd0 <__ieee754_atan2f+0xbc>
  404c8a:	2d00      	cmp	r5, #0
  404c8c:	d02f      	beq.n	404cee <__ieee754_atan2f+0xda>
  404c8e:	4922      	ldr	r1, [pc, #136]	; (404d18 <__ieee754_atan2f+0x104>)
  404c90:	f001 fd58 	bl	406744 <__addsf3>
  404c94:	4921      	ldr	r1, [pc, #132]	; (404d1c <__ieee754_atan2f+0x108>)
  404c96:	f001 fd53 	bl	406740 <__aeabi_fsub>
  404c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c9c:	2f00      	cmp	r7, #0
  404c9e:	db06      	blt.n	404cae <__ieee754_atan2f+0x9a>
  404ca0:	481f      	ldr	r0, [pc, #124]	; (404d20 <__ieee754_atan2f+0x10c>)
  404ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ca4:	481e      	ldr	r0, [pc, #120]	; (404d20 <__ieee754_atan2f+0x10c>)
  404ca6:	e7ec      	b.n	404c82 <__ieee754_atan2f+0x6e>
  404ca8:	481c      	ldr	r0, [pc, #112]	; (404d1c <__ieee754_atan2f+0x108>)
  404caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cae:	481d      	ldr	r0, [pc, #116]	; (404d24 <__ieee754_atan2f+0x110>)
  404cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  404cb6:	f000 bec9 	b.w	405a4c <atanf>
  404cba:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404cbe:	d017      	beq.n	404cf0 <__ieee754_atan2f+0xdc>
  404cc0:	2d02      	cmp	r5, #2
  404cc2:	d0f1      	beq.n	404ca8 <__ieee754_atan2f+0x94>
  404cc4:	2d03      	cmp	r5, #3
  404cc6:	d0c0      	beq.n	404c4a <__ieee754_atan2f+0x36>
  404cc8:	2d01      	cmp	r5, #1
  404cca:	d019      	beq.n	404d00 <__ieee754_atan2f+0xec>
  404ccc:	2000      	movs	r0, #0
  404cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cd0:	4911      	ldr	r1, [pc, #68]	; (404d18 <__ieee754_atan2f+0x104>)
  404cd2:	f001 fd37 	bl	406744 <__addsf3>
  404cd6:	4601      	mov	r1, r0
  404cd8:	4810      	ldr	r0, [pc, #64]	; (404d1c <__ieee754_atan2f+0x108>)
  404cda:	f001 fd31 	bl	406740 <__aeabi_fsub>
  404cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ce0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ce6:	313c      	adds	r1, #60	; 0x3c
  404ce8:	dac3      	bge.n	404c72 <__ieee754_atan2f+0x5e>
  404cea:	2000      	movs	r0, #0
  404cec:	e7c9      	b.n	404c82 <__ieee754_atan2f+0x6e>
  404cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cf0:	2d02      	cmp	r5, #2
  404cf2:	d00c      	beq.n	404d0e <__ieee754_atan2f+0xfa>
  404cf4:	2d03      	cmp	r5, #3
  404cf6:	d008      	beq.n	404d0a <__ieee754_atan2f+0xf6>
  404cf8:	2d01      	cmp	r5, #1
  404cfa:	d004      	beq.n	404d06 <__ieee754_atan2f+0xf2>
  404cfc:	480a      	ldr	r0, [pc, #40]	; (404d28 <__ieee754_atan2f+0x114>)
  404cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  404d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d06:	4809      	ldr	r0, [pc, #36]	; (404d2c <__ieee754_atan2f+0x118>)
  404d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d0a:	4809      	ldr	r0, [pc, #36]	; (404d30 <__ieee754_atan2f+0x11c>)
  404d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d0e:	4809      	ldr	r0, [pc, #36]	; (404d34 <__ieee754_atan2f+0x120>)
  404d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d12:	bf00      	nop
  404d14:	c0490fdb 	.word	0xc0490fdb
  404d18:	33bbbd2e 	.word	0x33bbbd2e
  404d1c:	40490fdb 	.word	0x40490fdb
  404d20:	3fc90fdb 	.word	0x3fc90fdb
  404d24:	bfc90fdb 	.word	0xbfc90fdb
  404d28:	3f490fdb 	.word	0x3f490fdb
  404d2c:	bf490fdb 	.word	0xbf490fdb
  404d30:	c016cbe4 	.word	0xc016cbe4
  404d34:	4016cbe4 	.word	0x4016cbe4

00404d38 <__ieee754_rem_pio2f>:
  404d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d3c:	4aa8      	ldr	r2, [pc, #672]	; (404fe0 <__ieee754_rem_pio2f+0x2a8>)
  404d3e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404d42:	4294      	cmp	r4, r2
  404d44:	b089      	sub	sp, #36	; 0x24
  404d46:	dd6e      	ble.n	404e26 <__ieee754_rem_pio2f+0xee>
  404d48:	4aa6      	ldr	r2, [pc, #664]	; (404fe4 <__ieee754_rem_pio2f+0x2ac>)
  404d4a:	4294      	cmp	r4, r2
  404d4c:	4606      	mov	r6, r0
  404d4e:	460d      	mov	r5, r1
  404d50:	dc1c      	bgt.n	404d8c <__ieee754_rem_pio2f+0x54>
  404d52:	2800      	cmp	r0, #0
  404d54:	49a4      	ldr	r1, [pc, #656]	; (404fe8 <__ieee754_rem_pio2f+0x2b0>)
  404d56:	f340 80fc 	ble.w	404f52 <__ieee754_rem_pio2f+0x21a>
  404d5a:	f001 fcf1 	bl	406740 <__aeabi_fsub>
  404d5e:	4ba3      	ldr	r3, [pc, #652]	; (404fec <__ieee754_rem_pio2f+0x2b4>)
  404d60:	f024 040f 	bic.w	r4, r4, #15
  404d64:	429c      	cmp	r4, r3
  404d66:	4606      	mov	r6, r0
  404d68:	d06c      	beq.n	404e44 <__ieee754_rem_pio2f+0x10c>
  404d6a:	49a1      	ldr	r1, [pc, #644]	; (404ff0 <__ieee754_rem_pio2f+0x2b8>)
  404d6c:	f001 fce8 	bl	406740 <__aeabi_fsub>
  404d70:	4601      	mov	r1, r0
  404d72:	6028      	str	r0, [r5, #0]
  404d74:	4630      	mov	r0, r6
  404d76:	f001 fce3 	bl	406740 <__aeabi_fsub>
  404d7a:	499d      	ldr	r1, [pc, #628]	; (404ff0 <__ieee754_rem_pio2f+0x2b8>)
  404d7c:	f001 fce0 	bl	406740 <__aeabi_fsub>
  404d80:	2701      	movs	r7, #1
  404d82:	6068      	str	r0, [r5, #4]
  404d84:	4638      	mov	r0, r7
  404d86:	b009      	add	sp, #36	; 0x24
  404d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d8c:	4a99      	ldr	r2, [pc, #612]	; (404ff4 <__ieee754_rem_pio2f+0x2bc>)
  404d8e:	4294      	cmp	r4, r2
  404d90:	dd6a      	ble.n	404e68 <__ieee754_rem_pio2f+0x130>
  404d92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  404d96:	da4e      	bge.n	404e36 <__ieee754_rem_pio2f+0xfe>
  404d98:	15e7      	asrs	r7, r4, #23
  404d9a:	3f86      	subs	r7, #134	; 0x86
  404d9c:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  404da0:	4620      	mov	r0, r4
  404da2:	f001 ffb3 	bl	406d0c <__aeabi_f2iz>
  404da6:	f001 fd81 	bl	4068ac <__aeabi_i2f>
  404daa:	4603      	mov	r3, r0
  404dac:	4601      	mov	r1, r0
  404dae:	4620      	mov	r0, r4
  404db0:	9305      	str	r3, [sp, #20]
  404db2:	f001 fcc5 	bl	406740 <__aeabi_fsub>
  404db6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404dba:	f001 fdcb 	bl	406954 <__aeabi_fmul>
  404dbe:	4680      	mov	r8, r0
  404dc0:	f001 ffa4 	bl	406d0c <__aeabi_f2iz>
  404dc4:	f001 fd72 	bl	4068ac <__aeabi_i2f>
  404dc8:	4601      	mov	r1, r0
  404dca:	4604      	mov	r4, r0
  404dcc:	4640      	mov	r0, r8
  404dce:	9406      	str	r4, [sp, #24]
  404dd0:	f001 fcb6 	bl	406740 <__aeabi_fsub>
  404dd4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404dd8:	f001 fdbc 	bl	406954 <__aeabi_fmul>
  404ddc:	2100      	movs	r1, #0
  404dde:	9007      	str	r0, [sp, #28]
  404de0:	f001 ff4c 	bl	406c7c <__aeabi_fcmpeq>
  404de4:	2800      	cmp	r0, #0
  404de6:	f000 80cb 	beq.w	404f80 <__ieee754_rem_pio2f+0x248>
  404dea:	4620      	mov	r0, r4
  404dec:	2100      	movs	r1, #0
  404dee:	f001 ff45 	bl	406c7c <__aeabi_fcmpeq>
  404df2:	2800      	cmp	r0, #0
  404df4:	bf14      	ite	ne
  404df6:	2301      	movne	r3, #1
  404df8:	2302      	moveq	r3, #2
  404dfa:	4a7f      	ldr	r2, [pc, #508]	; (404ff8 <__ieee754_rem_pio2f+0x2c0>)
  404dfc:	9201      	str	r2, [sp, #4]
  404dfe:	2102      	movs	r1, #2
  404e00:	463a      	mov	r2, r7
  404e02:	9100      	str	r1, [sp, #0]
  404e04:	a805      	add	r0, sp, #20
  404e06:	4629      	mov	r1, r5
  404e08:	f000 fa1c 	bl	405244 <__kernel_rem_pio2f>
  404e0c:	2e00      	cmp	r6, #0
  404e0e:	4607      	mov	r7, r0
  404e10:	da0d      	bge.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404e12:	e895 000c 	ldmia.w	r5, {r2, r3}
  404e16:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404e1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404e1e:	4247      	negs	r7, r0
  404e20:	602a      	str	r2, [r5, #0]
  404e22:	606b      	str	r3, [r5, #4]
  404e24:	e003      	b.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404e26:	2200      	movs	r2, #0
  404e28:	6008      	str	r0, [r1, #0]
  404e2a:	604a      	str	r2, [r1, #4]
  404e2c:	2700      	movs	r7, #0
  404e2e:	4638      	mov	r0, r7
  404e30:	b009      	add	sp, #36	; 0x24
  404e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e36:	4601      	mov	r1, r0
  404e38:	f001 fc82 	bl	406740 <__aeabi_fsub>
  404e3c:	2700      	movs	r7, #0
  404e3e:	6068      	str	r0, [r5, #4]
  404e40:	6028      	str	r0, [r5, #0]
  404e42:	e7f4      	b.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404e44:	496d      	ldr	r1, [pc, #436]	; (404ffc <__ieee754_rem_pio2f+0x2c4>)
  404e46:	f001 fc7b 	bl	406740 <__aeabi_fsub>
  404e4a:	496d      	ldr	r1, [pc, #436]	; (405000 <__ieee754_rem_pio2f+0x2c8>)
  404e4c:	4604      	mov	r4, r0
  404e4e:	f001 fc77 	bl	406740 <__aeabi_fsub>
  404e52:	4601      	mov	r1, r0
  404e54:	6028      	str	r0, [r5, #0]
  404e56:	4620      	mov	r0, r4
  404e58:	f001 fc72 	bl	406740 <__aeabi_fsub>
  404e5c:	4968      	ldr	r1, [pc, #416]	; (405000 <__ieee754_rem_pio2f+0x2c8>)
  404e5e:	f001 fc6f 	bl	406740 <__aeabi_fsub>
  404e62:	2701      	movs	r7, #1
  404e64:	6068      	str	r0, [r5, #4]
  404e66:	e7e2      	b.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404e68:	f000 ff06 	bl	405c78 <fabsf>
  404e6c:	4965      	ldr	r1, [pc, #404]	; (405004 <__ieee754_rem_pio2f+0x2cc>)
  404e6e:	4680      	mov	r8, r0
  404e70:	f001 fd70 	bl	406954 <__aeabi_fmul>
  404e74:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404e78:	f001 fc64 	bl	406744 <__addsf3>
  404e7c:	f001 ff46 	bl	406d0c <__aeabi_f2iz>
  404e80:	4607      	mov	r7, r0
  404e82:	f001 fd13 	bl	4068ac <__aeabi_i2f>
  404e86:	4958      	ldr	r1, [pc, #352]	; (404fe8 <__ieee754_rem_pio2f+0x2b0>)
  404e88:	4683      	mov	fp, r0
  404e8a:	f001 fd63 	bl	406954 <__aeabi_fmul>
  404e8e:	4601      	mov	r1, r0
  404e90:	4640      	mov	r0, r8
  404e92:	f001 fc55 	bl	406740 <__aeabi_fsub>
  404e96:	4956      	ldr	r1, [pc, #344]	; (404ff0 <__ieee754_rem_pio2f+0x2b8>)
  404e98:	4681      	mov	r9, r0
  404e9a:	4658      	mov	r0, fp
  404e9c:	f001 fd5a 	bl	406954 <__aeabi_fmul>
  404ea0:	2f1f      	cmp	r7, #31
  404ea2:	4682      	mov	sl, r0
  404ea4:	dc21      	bgt.n	404eea <__ieee754_rem_pio2f+0x1b2>
  404ea6:	4a58      	ldr	r2, [pc, #352]	; (405008 <__ieee754_rem_pio2f+0x2d0>)
  404ea8:	1e79      	subs	r1, r7, #1
  404eaa:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  404eae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  404eb2:	4293      	cmp	r3, r2
  404eb4:	d019      	beq.n	404eea <__ieee754_rem_pio2f+0x1b2>
  404eb6:	4651      	mov	r1, sl
  404eb8:	4648      	mov	r0, r9
  404eba:	f001 fc41 	bl	406740 <__aeabi_fsub>
  404ebe:	4680      	mov	r8, r0
  404ec0:	f8c5 8000 	str.w	r8, [r5]
  404ec4:	4641      	mov	r1, r8
  404ec6:	4648      	mov	r0, r9
  404ec8:	f001 fc3a 	bl	406740 <__aeabi_fsub>
  404ecc:	4651      	mov	r1, sl
  404ece:	f001 fc37 	bl	406740 <__aeabi_fsub>
  404ed2:	2e00      	cmp	r6, #0
  404ed4:	6068      	str	r0, [r5, #4]
  404ed6:	daaa      	bge.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404ed8:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  404edc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404ee0:	f8c5 8000 	str.w	r8, [r5]
  404ee4:	6068      	str	r0, [r5, #4]
  404ee6:	427f      	negs	r7, r7
  404ee8:	e7a1      	b.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404eea:	4651      	mov	r1, sl
  404eec:	4648      	mov	r0, r9
  404eee:	f001 fc27 	bl	406740 <__aeabi_fsub>
  404ef2:	15e2      	asrs	r2, r4, #23
  404ef4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404ef8:	1ad3      	subs	r3, r2, r3
  404efa:	2b08      	cmp	r3, #8
  404efc:	4680      	mov	r8, r0
  404efe:	dddf      	ble.n	404ec0 <__ieee754_rem_pio2f+0x188>
  404f00:	493e      	ldr	r1, [pc, #248]	; (404ffc <__ieee754_rem_pio2f+0x2c4>)
  404f02:	9203      	str	r2, [sp, #12]
  404f04:	4658      	mov	r0, fp
  404f06:	f001 fd25 	bl	406954 <__aeabi_fmul>
  404f0a:	4680      	mov	r8, r0
  404f0c:	4601      	mov	r1, r0
  404f0e:	4648      	mov	r0, r9
  404f10:	f001 fc16 	bl	406740 <__aeabi_fsub>
  404f14:	4601      	mov	r1, r0
  404f16:	4604      	mov	r4, r0
  404f18:	4648      	mov	r0, r9
  404f1a:	f001 fc11 	bl	406740 <__aeabi_fsub>
  404f1e:	4641      	mov	r1, r8
  404f20:	f001 fc0e 	bl	406740 <__aeabi_fsub>
  404f24:	4936      	ldr	r1, [pc, #216]	; (405000 <__ieee754_rem_pio2f+0x2c8>)
  404f26:	4680      	mov	r8, r0
  404f28:	4658      	mov	r0, fp
  404f2a:	f001 fd13 	bl	406954 <__aeabi_fmul>
  404f2e:	4641      	mov	r1, r8
  404f30:	f001 fc06 	bl	406740 <__aeabi_fsub>
  404f34:	4601      	mov	r1, r0
  404f36:	4682      	mov	sl, r0
  404f38:	4620      	mov	r0, r4
  404f3a:	f001 fc01 	bl	406740 <__aeabi_fsub>
  404f3e:	9a03      	ldr	r2, [sp, #12]
  404f40:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404f44:	1ad2      	subs	r2, r2, r3
  404f46:	2a19      	cmp	r2, #25
  404f48:	4680      	mov	r8, r0
  404f4a:	dc2e      	bgt.n	404faa <__ieee754_rem_pio2f+0x272>
  404f4c:	6028      	str	r0, [r5, #0]
  404f4e:	46a1      	mov	r9, r4
  404f50:	e7b8      	b.n	404ec4 <__ieee754_rem_pio2f+0x18c>
  404f52:	f001 fbf7 	bl	406744 <__addsf3>
  404f56:	4b25      	ldr	r3, [pc, #148]	; (404fec <__ieee754_rem_pio2f+0x2b4>)
  404f58:	f024 040f 	bic.w	r4, r4, #15
  404f5c:	429c      	cmp	r4, r3
  404f5e:	4606      	mov	r6, r0
  404f60:	d010      	beq.n	404f84 <__ieee754_rem_pio2f+0x24c>
  404f62:	4923      	ldr	r1, [pc, #140]	; (404ff0 <__ieee754_rem_pio2f+0x2b8>)
  404f64:	f001 fbee 	bl	406744 <__addsf3>
  404f68:	4601      	mov	r1, r0
  404f6a:	6028      	str	r0, [r5, #0]
  404f6c:	4630      	mov	r0, r6
  404f6e:	f001 fbe7 	bl	406740 <__aeabi_fsub>
  404f72:	491f      	ldr	r1, [pc, #124]	; (404ff0 <__ieee754_rem_pio2f+0x2b8>)
  404f74:	f001 fbe6 	bl	406744 <__addsf3>
  404f78:	f04f 37ff 	mov.w	r7, #4294967295
  404f7c:	6068      	str	r0, [r5, #4]
  404f7e:	e756      	b.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404f80:	2303      	movs	r3, #3
  404f82:	e73a      	b.n	404dfa <__ieee754_rem_pio2f+0xc2>
  404f84:	491d      	ldr	r1, [pc, #116]	; (404ffc <__ieee754_rem_pio2f+0x2c4>)
  404f86:	f001 fbdd 	bl	406744 <__addsf3>
  404f8a:	491d      	ldr	r1, [pc, #116]	; (405000 <__ieee754_rem_pio2f+0x2c8>)
  404f8c:	4604      	mov	r4, r0
  404f8e:	f001 fbd9 	bl	406744 <__addsf3>
  404f92:	4601      	mov	r1, r0
  404f94:	6028      	str	r0, [r5, #0]
  404f96:	4620      	mov	r0, r4
  404f98:	f001 fbd2 	bl	406740 <__aeabi_fsub>
  404f9c:	4918      	ldr	r1, [pc, #96]	; (405000 <__ieee754_rem_pio2f+0x2c8>)
  404f9e:	f001 fbd1 	bl	406744 <__addsf3>
  404fa2:	f04f 37ff 	mov.w	r7, #4294967295
  404fa6:	6068      	str	r0, [r5, #4]
  404fa8:	e741      	b.n	404e2e <__ieee754_rem_pio2f+0xf6>
  404faa:	4918      	ldr	r1, [pc, #96]	; (40500c <__ieee754_rem_pio2f+0x2d4>)
  404fac:	4658      	mov	r0, fp
  404fae:	f001 fcd1 	bl	406954 <__aeabi_fmul>
  404fb2:	4601      	mov	r1, r0
  404fb4:	4680      	mov	r8, r0
  404fb6:	4620      	mov	r0, r4
  404fb8:	f001 fbc2 	bl	406740 <__aeabi_fsub>
  404fbc:	4601      	mov	r1, r0
  404fbe:	4681      	mov	r9, r0
  404fc0:	4620      	mov	r0, r4
  404fc2:	f001 fbbd 	bl	406740 <__aeabi_fsub>
  404fc6:	4641      	mov	r1, r8
  404fc8:	f001 fbba 	bl	406740 <__aeabi_fsub>
  404fcc:	4910      	ldr	r1, [pc, #64]	; (405010 <__ieee754_rem_pio2f+0x2d8>)
  404fce:	4604      	mov	r4, r0
  404fd0:	4658      	mov	r0, fp
  404fd2:	f001 fcbf 	bl	406954 <__aeabi_fmul>
  404fd6:	4621      	mov	r1, r4
  404fd8:	f001 fbb2 	bl	406740 <__aeabi_fsub>
  404fdc:	4682      	mov	sl, r0
  404fde:	e76a      	b.n	404eb6 <__ieee754_rem_pio2f+0x17e>
  404fe0:	3f490fd8 	.word	0x3f490fd8
  404fe4:	4016cbe3 	.word	0x4016cbe3
  404fe8:	3fc90f80 	.word	0x3fc90f80
  404fec:	3fc90fd0 	.word	0x3fc90fd0
  404ff0:	37354443 	.word	0x37354443
  404ff4:	43490f80 	.word	0x43490f80
  404ff8:	0040c164 	.word	0x0040c164
  404ffc:	37354400 	.word	0x37354400
  405000:	2e85a308 	.word	0x2e85a308
  405004:	3f22f984 	.word	0x3f22f984
  405008:	0040c0e4 	.word	0x0040c0e4
  40500c:	2e85a300 	.word	0x2e85a300
  405010:	248d3132 	.word	0x248d3132

00405014 <__ieee754_sqrtf>:
  405014:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  405018:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  40501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40501e:	4604      	mov	r4, r0
  405020:	d22e      	bcs.n	405080 <__ieee754_sqrtf+0x6c>
  405022:	b362      	cbz	r2, 40507e <__ieee754_sqrtf+0x6a>
  405024:	2800      	cmp	r0, #0
  405026:	4603      	mov	r3, r0
  405028:	db3d      	blt.n	4050a6 <__ieee754_sqrtf+0x92>
  40502a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  40502e:	ea4f 50e0 	mov.w	r0, r0, asr #23
  405032:	d32c      	bcc.n	40508e <__ieee754_sqrtf+0x7a>
  405034:	387f      	subs	r0, #127	; 0x7f
  405036:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40503a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40503e:	07c2      	lsls	r2, r0, #31
  405040:	bf48      	it	mi
  405042:	005b      	lslmi	r3, r3, #1
  405044:	2600      	movs	r6, #0
  405046:	1047      	asrs	r7, r0, #1
  405048:	005b      	lsls	r3, r3, #1
  40504a:	4631      	mov	r1, r6
  40504c:	2419      	movs	r4, #25
  40504e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  405052:	188d      	adds	r5, r1, r2
  405054:	429d      	cmp	r5, r3
  405056:	dc02      	bgt.n	40505e <__ieee754_sqrtf+0x4a>
  405058:	1b5b      	subs	r3, r3, r5
  40505a:	18a9      	adds	r1, r5, r2
  40505c:	4416      	add	r6, r2
  40505e:	3c01      	subs	r4, #1
  405060:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405064:	ea4f 0252 	mov.w	r2, r2, lsr #1
  405068:	d1f3      	bne.n	405052 <__ieee754_sqrtf+0x3e>
  40506a:	b113      	cbz	r3, 405072 <__ieee754_sqrtf+0x5e>
  40506c:	3601      	adds	r6, #1
  40506e:	f026 0601 	bic.w	r6, r6, #1
  405072:	1070      	asrs	r0, r6, #1
  405074:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  405078:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  40507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405080:	4601      	mov	r1, r0
  405082:	f001 fc67 	bl	406954 <__aeabi_fmul>
  405086:	4621      	mov	r1, r4
  405088:	f001 fb5c 	bl	406744 <__addsf3>
  40508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40508e:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  405092:	d001      	beq.n	405098 <__ieee754_sqrtf+0x84>
  405094:	e00e      	b.n	4050b4 <__ieee754_sqrtf+0xa0>
  405096:	460a      	mov	r2, r1
  405098:	005b      	lsls	r3, r3, #1
  40509a:	021c      	lsls	r4, r3, #8
  40509c:	f102 0101 	add.w	r1, r2, #1
  4050a0:	d5f9      	bpl.n	405096 <__ieee754_sqrtf+0x82>
  4050a2:	1a80      	subs	r0, r0, r2
  4050a4:	e7c6      	b.n	405034 <__ieee754_sqrtf+0x20>
  4050a6:	4601      	mov	r1, r0
  4050a8:	f001 fb4a 	bl	406740 <__aeabi_fsub>
  4050ac:	4601      	mov	r1, r0
  4050ae:	f001 fd05 	bl	406abc <__aeabi_fdiv>
  4050b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050b4:	f04f 32ff 	mov.w	r2, #4294967295
  4050b8:	e7f3      	b.n	4050a2 <__ieee754_sqrtf+0x8e>
  4050ba:	bf00      	nop

004050bc <__kernel_cosf>:
  4050bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4050c0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  4050c4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  4050c8:	4606      	mov	r6, r0
  4050ca:	460f      	mov	r7, r1
  4050cc:	da49      	bge.n	405162 <__kernel_cosf+0xa6>
  4050ce:	f001 fe1d 	bl	406d0c <__aeabi_f2iz>
  4050d2:	2800      	cmp	r0, #0
  4050d4:	f000 809d 	beq.w	405212 <__kernel_cosf+0x156>
  4050d8:	4631      	mov	r1, r6
  4050da:	4630      	mov	r0, r6
  4050dc:	f001 fc3a 	bl	406954 <__aeabi_fmul>
  4050e0:	494e      	ldr	r1, [pc, #312]	; (40521c <__kernel_cosf+0x160>)
  4050e2:	4605      	mov	r5, r0
  4050e4:	f001 fc36 	bl	406954 <__aeabi_fmul>
  4050e8:	494d      	ldr	r1, [pc, #308]	; (405220 <__kernel_cosf+0x164>)
  4050ea:	f001 fb2b 	bl	406744 <__addsf3>
  4050ee:	4629      	mov	r1, r5
  4050f0:	f001 fc30 	bl	406954 <__aeabi_fmul>
  4050f4:	494b      	ldr	r1, [pc, #300]	; (405224 <__kernel_cosf+0x168>)
  4050f6:	f001 fb23 	bl	406740 <__aeabi_fsub>
  4050fa:	4629      	mov	r1, r5
  4050fc:	f001 fc2a 	bl	406954 <__aeabi_fmul>
  405100:	4949      	ldr	r1, [pc, #292]	; (405228 <__kernel_cosf+0x16c>)
  405102:	f001 fb1f 	bl	406744 <__addsf3>
  405106:	4629      	mov	r1, r5
  405108:	f001 fc24 	bl	406954 <__aeabi_fmul>
  40510c:	4947      	ldr	r1, [pc, #284]	; (40522c <__kernel_cosf+0x170>)
  40510e:	f001 fb17 	bl	406740 <__aeabi_fsub>
  405112:	4629      	mov	r1, r5
  405114:	f001 fc1e 	bl	406954 <__aeabi_fmul>
  405118:	4945      	ldr	r1, [pc, #276]	; (405230 <__kernel_cosf+0x174>)
  40511a:	f001 fb13 	bl	406744 <__addsf3>
  40511e:	4629      	mov	r1, r5
  405120:	f001 fc18 	bl	406954 <__aeabi_fmul>
  405124:	4680      	mov	r8, r0
  405126:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40512a:	4628      	mov	r0, r5
  40512c:	f001 fc12 	bl	406954 <__aeabi_fmul>
  405130:	4641      	mov	r1, r8
  405132:	4604      	mov	r4, r0
  405134:	4628      	mov	r0, r5
  405136:	f001 fc0d 	bl	406954 <__aeabi_fmul>
  40513a:	4639      	mov	r1, r7
  40513c:	4605      	mov	r5, r0
  40513e:	4630      	mov	r0, r6
  405140:	f001 fc08 	bl	406954 <__aeabi_fmul>
  405144:	4601      	mov	r1, r0
  405146:	4628      	mov	r0, r5
  405148:	f001 fafa 	bl	406740 <__aeabi_fsub>
  40514c:	4601      	mov	r1, r0
  40514e:	4620      	mov	r0, r4
  405150:	f001 faf6 	bl	406740 <__aeabi_fsub>
  405154:	4601      	mov	r1, r0
  405156:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40515a:	f001 faf1 	bl	406740 <__aeabi_fsub>
  40515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405162:	4601      	mov	r1, r0
  405164:	f001 fbf6 	bl	406954 <__aeabi_fmul>
  405168:	492c      	ldr	r1, [pc, #176]	; (40521c <__kernel_cosf+0x160>)
  40516a:	4605      	mov	r5, r0
  40516c:	f001 fbf2 	bl	406954 <__aeabi_fmul>
  405170:	492b      	ldr	r1, [pc, #172]	; (405220 <__kernel_cosf+0x164>)
  405172:	f001 fae7 	bl	406744 <__addsf3>
  405176:	4629      	mov	r1, r5
  405178:	f001 fbec 	bl	406954 <__aeabi_fmul>
  40517c:	4929      	ldr	r1, [pc, #164]	; (405224 <__kernel_cosf+0x168>)
  40517e:	f001 fadf 	bl	406740 <__aeabi_fsub>
  405182:	4629      	mov	r1, r5
  405184:	f001 fbe6 	bl	406954 <__aeabi_fmul>
  405188:	4927      	ldr	r1, [pc, #156]	; (405228 <__kernel_cosf+0x16c>)
  40518a:	f001 fadb 	bl	406744 <__addsf3>
  40518e:	4629      	mov	r1, r5
  405190:	f001 fbe0 	bl	406954 <__aeabi_fmul>
  405194:	4925      	ldr	r1, [pc, #148]	; (40522c <__kernel_cosf+0x170>)
  405196:	f001 fad3 	bl	406740 <__aeabi_fsub>
  40519a:	4629      	mov	r1, r5
  40519c:	f001 fbda 	bl	406954 <__aeabi_fmul>
  4051a0:	4923      	ldr	r1, [pc, #140]	; (405230 <__kernel_cosf+0x174>)
  4051a2:	f001 facf 	bl	406744 <__addsf3>
  4051a6:	4629      	mov	r1, r5
  4051a8:	f001 fbd4 	bl	406954 <__aeabi_fmul>
  4051ac:	4b21      	ldr	r3, [pc, #132]	; (405234 <__kernel_cosf+0x178>)
  4051ae:	429c      	cmp	r4, r3
  4051b0:	4680      	mov	r8, r0
  4051b2:	ddb8      	ble.n	405126 <__kernel_cosf+0x6a>
  4051b4:	4b20      	ldr	r3, [pc, #128]	; (405238 <__kernel_cosf+0x17c>)
  4051b6:	429c      	cmp	r4, r3
  4051b8:	dc27      	bgt.n	40520a <__kernel_cosf+0x14e>
  4051ba:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  4051be:	4621      	mov	r1, r4
  4051c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4051c4:	f001 fabc 	bl	406740 <__aeabi_fsub>
  4051c8:	4681      	mov	r9, r0
  4051ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4051ce:	4628      	mov	r0, r5
  4051d0:	f001 fbc0 	bl	406954 <__aeabi_fmul>
  4051d4:	4621      	mov	r1, r4
  4051d6:	f001 fab3 	bl	406740 <__aeabi_fsub>
  4051da:	4641      	mov	r1, r8
  4051dc:	4604      	mov	r4, r0
  4051de:	4628      	mov	r0, r5
  4051e0:	f001 fbb8 	bl	406954 <__aeabi_fmul>
  4051e4:	4639      	mov	r1, r7
  4051e6:	4605      	mov	r5, r0
  4051e8:	4630      	mov	r0, r6
  4051ea:	f001 fbb3 	bl	406954 <__aeabi_fmul>
  4051ee:	4601      	mov	r1, r0
  4051f0:	4628      	mov	r0, r5
  4051f2:	f001 faa5 	bl	406740 <__aeabi_fsub>
  4051f6:	4601      	mov	r1, r0
  4051f8:	4620      	mov	r0, r4
  4051fa:	f001 faa1 	bl	406740 <__aeabi_fsub>
  4051fe:	4601      	mov	r1, r0
  405200:	4648      	mov	r0, r9
  405202:	f001 fa9d 	bl	406740 <__aeabi_fsub>
  405206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40520a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405240 <__kernel_cosf+0x184>
  40520e:	4c0b      	ldr	r4, [pc, #44]	; (40523c <__kernel_cosf+0x180>)
  405210:	e7db      	b.n	4051ca <__kernel_cosf+0x10e>
  405212:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40521a:	bf00      	nop
  40521c:	ad47d74e 	.word	0xad47d74e
  405220:	310f74f6 	.word	0x310f74f6
  405224:	3493f27c 	.word	0x3493f27c
  405228:	37d00d01 	.word	0x37d00d01
  40522c:	3ab60b61 	.word	0x3ab60b61
  405230:	3d2aaaab 	.word	0x3d2aaaab
  405234:	3e999999 	.word	0x3e999999
  405238:	3f480000 	.word	0x3f480000
  40523c:	3e900000 	.word	0x3e900000
  405240:	3f380000 	.word	0x3f380000

00405244 <__kernel_rem_pio2f>:
  405244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405248:	b0dd      	sub	sp, #372	; 0x174
  40524a:	4c90      	ldr	r4, [pc, #576]	; (40548c <__kernel_rem_pio2f+0x248>)
  40524c:	9308      	str	r3, [sp, #32]
  40524e:	3b01      	subs	r3, #1
  405250:	9301      	str	r3, [sp, #4]
  405252:	1ed3      	subs	r3, r2, #3
  405254:	bf48      	it	mi
  405256:	1d13      	addmi	r3, r2, #4
  405258:	9d66      	ldr	r5, [sp, #408]	; 0x198
  40525a:	9107      	str	r1, [sp, #28]
  40525c:	10db      	asrs	r3, r3, #3
  40525e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405262:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  405266:	9309      	str	r3, [sp, #36]	; 0x24
  405268:	4619      	mov	r1, r3
  40526a:	3301      	adds	r3, #1
  40526c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  405270:	9405      	str	r4, [sp, #20]
  405272:	9a01      	ldr	r2, [sp, #4]
  405274:	9304      	str	r3, [sp, #16]
  405276:	9b05      	ldr	r3, [sp, #20]
  405278:	9002      	str	r0, [sp, #8]
  40527a:	189c      	adds	r4, r3, r2
  40527c:	eba1 0602 	sub.w	r6, r1, r2
  405280:	d417      	bmi.n	4052b2 <__kernel_rem_pio2f+0x6e>
  405282:	4434      	add	r4, r6
  405284:	2500      	movs	r5, #0
  405286:	3401      	adds	r4, #1
  405288:	af1f      	add	r7, sp, #124	; 0x7c
  40528a:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  40528e:	e008      	b.n	4052a2 <__kernel_rem_pio2f+0x5e>
  405290:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  405294:	f001 fb0a 	bl	4068ac <__aeabi_i2f>
  405298:	3601      	adds	r6, #1
  40529a:	42a6      	cmp	r6, r4
  40529c:	f847 0f04 	str.w	r0, [r7, #4]!
  4052a0:	d007      	beq.n	4052b2 <__kernel_rem_pio2f+0x6e>
  4052a2:	2e00      	cmp	r6, #0
  4052a4:	daf4      	bge.n	405290 <__kernel_rem_pio2f+0x4c>
  4052a6:	3601      	adds	r6, #1
  4052a8:	4628      	mov	r0, r5
  4052aa:	42a6      	cmp	r6, r4
  4052ac:	f847 0f04 	str.w	r0, [r7, #4]!
  4052b0:	d1f7      	bne.n	4052a2 <__kernel_rem_pio2f+0x5e>
  4052b2:	9b05      	ldr	r3, [sp, #20]
  4052b4:	2b00      	cmp	r3, #0
  4052b6:	db28      	blt.n	40530a <__kernel_rem_pio2f+0xc6>
  4052b8:	9b08      	ldr	r3, [sp, #32]
  4052ba:	009e      	lsls	r6, r3, #2
  4052bc:	9b02      	ldr	r3, [sp, #8]
  4052be:	1f35      	subs	r5, r6, #4
  4052c0:	441d      	add	r5, r3
  4052c2:	ab20      	add	r3, sp, #128	; 0x80
  4052c4:	441e      	add	r6, r3
  4052c6:	9b05      	ldr	r3, [sp, #20]
  4052c8:	aa48      	add	r2, sp, #288	; 0x120
  4052ca:	f04f 0900 	mov.w	r9, #0
  4052ce:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  4052d2:	af47      	add	r7, sp, #284	; 0x11c
  4052d4:	9b01      	ldr	r3, [sp, #4]
  4052d6:	2b00      	cmp	r3, #0
  4052d8:	f2c0 82b9 	blt.w	40584e <__kernel_rem_pio2f+0x60a>
  4052dc:	9b02      	ldr	r3, [sp, #8]
  4052de:	46b3      	mov	fp, r6
  4052e0:	1f1c      	subs	r4, r3, #4
  4052e2:	46ca      	mov	sl, r9
  4052e4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  4052e8:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4052ec:	f001 fb32 	bl	406954 <__aeabi_fmul>
  4052f0:	4601      	mov	r1, r0
  4052f2:	4650      	mov	r0, sl
  4052f4:	f001 fa26 	bl	406744 <__addsf3>
  4052f8:	42ac      	cmp	r4, r5
  4052fa:	4682      	mov	sl, r0
  4052fc:	d1f2      	bne.n	4052e4 <__kernel_rem_pio2f+0xa0>
  4052fe:	f847 af04 	str.w	sl, [r7, #4]!
  405302:	4547      	cmp	r7, r8
  405304:	f106 0604 	add.w	r6, r6, #4
  405308:	d1e4      	bne.n	4052d4 <__kernel_rem_pio2f+0x90>
  40530a:	9805      	ldr	r0, [sp, #20]
  40530c:	9908      	ldr	r1, [sp, #32]
  40530e:	9c02      	ldr	r4, [sp, #8]
  405310:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  405314:	4603      	mov	r3, r0
  405316:	4413      	add	r3, r2
  405318:	009b      	lsls	r3, r3, #2
  40531a:	440a      	add	r2, r1
  40531c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  405320:	1f19      	subs	r1, r3, #4
  405322:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  405326:	4453      	add	r3, sl
  405328:	eb0a 0201 	add.w	r2, sl, r1
  40532c:	920a      	str	r2, [sp, #40]	; 0x28
  40532e:	930b      	str	r3, [sp, #44]	; 0x2c
  405330:	4680      	mov	r8, r0
  405332:	ea4f 0388 	mov.w	r3, r8, lsl #2
  405336:	aa5c      	add	r2, sp, #368	; 0x170
  405338:	9303      	str	r3, [sp, #12]
  40533a:	18d3      	adds	r3, r2, r3
  40533c:	f1b8 0f00 	cmp.w	r8, #0
  405340:	f853 9c50 	ldr.w	r9, [r3, #-80]
  405344:	dd22      	ble.n	40538c <__kernel_rem_pio2f+0x148>
  405346:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  40534a:	3c54      	subs	r4, #84	; 0x54
  40534c:	ae0b      	add	r6, sp, #44	; 0x2c
  40534e:	af47      	add	r7, sp, #284	; 0x11c
  405350:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  405354:	4648      	mov	r0, r9
  405356:	f001 fafd 	bl	406954 <__aeabi_fmul>
  40535a:	f001 fcd7 	bl	406d0c <__aeabi_f2iz>
  40535e:	f001 faa5 	bl	4068ac <__aeabi_i2f>
  405362:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  405366:	4683      	mov	fp, r0
  405368:	f001 faf4 	bl	406954 <__aeabi_fmul>
  40536c:	4601      	mov	r1, r0
  40536e:	4648      	mov	r0, r9
  405370:	f001 f9e6 	bl	406740 <__aeabi_fsub>
  405374:	f001 fcca 	bl	406d0c <__aeabi_f2iz>
  405378:	f854 1904 	ldr.w	r1, [r4], #-4
  40537c:	f846 0f04 	str.w	r0, [r6, #4]!
  405380:	4658      	mov	r0, fp
  405382:	f001 f9df 	bl	406744 <__addsf3>
  405386:	42bc      	cmp	r4, r7
  405388:	4681      	mov	r9, r0
  40538a:	d1e1      	bne.n	405350 <__kernel_rem_pio2f+0x10c>
  40538c:	9e04      	ldr	r6, [sp, #16]
  40538e:	4648      	mov	r0, r9
  405390:	4631      	mov	r1, r6
  405392:	f000 fcbb 	bl	405d0c <scalbnf>
  405396:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  40539a:	4604      	mov	r4, r0
  40539c:	f001 fada 	bl	406954 <__aeabi_fmul>
  4053a0:	f000 fc6e 	bl	405c80 <floorf>
  4053a4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  4053a8:	f001 fad4 	bl	406954 <__aeabi_fmul>
  4053ac:	4601      	mov	r1, r0
  4053ae:	4620      	mov	r0, r4
  4053b0:	f001 f9c6 	bl	406740 <__aeabi_fsub>
  4053b4:	4604      	mov	r4, r0
  4053b6:	f001 fca9 	bl	406d0c <__aeabi_f2iz>
  4053ba:	4681      	mov	r9, r0
  4053bc:	9006      	str	r0, [sp, #24]
  4053be:	f001 fa75 	bl	4068ac <__aeabi_i2f>
  4053c2:	4601      	mov	r1, r0
  4053c4:	4620      	mov	r0, r4
  4053c6:	f001 f9bb 	bl	406740 <__aeabi_fsub>
  4053ca:	2e00      	cmp	r6, #0
  4053cc:	4607      	mov	r7, r0
  4053ce:	f340 80e6 	ble.w	40559e <__kernel_rem_pio2f+0x35a>
  4053d2:	f108 31ff 	add.w	r1, r8, #4294967295
  4053d6:	f1c6 0308 	rsb	r3, r6, #8
  4053da:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  4053de:	fa42 f003 	asr.w	r0, r2, r3
  4053e2:	fa00 f303 	lsl.w	r3, r0, r3
  4053e6:	1ad3      	subs	r3, r2, r3
  4053e8:	464a      	mov	r2, r9
  4053ea:	f1c6 0407 	rsb	r4, r6, #7
  4053ee:	4402      	add	r2, r0
  4053f0:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  4053f4:	9206      	str	r2, [sp, #24]
  4053f6:	fa43 f404 	asr.w	r4, r3, r4
  4053fa:	2c00      	cmp	r4, #0
  4053fc:	dd5b      	ble.n	4054b6 <__kernel_rem_pio2f+0x272>
  4053fe:	9b06      	ldr	r3, [sp, #24]
  405400:	f1b8 0f00 	cmp.w	r8, #0
  405404:	f103 0301 	add.w	r3, r3, #1
  405408:	9306      	str	r3, [sp, #24]
  40540a:	f340 823b 	ble.w	405884 <__kernel_rem_pio2f+0x640>
  40540e:	f8da 6000 	ldr.w	r6, [sl]
  405412:	2e00      	cmp	r6, #0
  405414:	f040 8294 	bne.w	405940 <__kernel_rem_pio2f+0x6fc>
  405418:	f1b8 0f01 	cmp.w	r8, #1
  40541c:	f340 8255 	ble.w	4058ca <__kernel_rem_pio2f+0x686>
  405420:	4652      	mov	r2, sl
  405422:	2301      	movs	r3, #1
  405424:	f852 6f04 	ldr.w	r6, [r2, #4]!
  405428:	2e00      	cmp	r6, #0
  40542a:	f000 824a 	beq.w	4058c2 <__kernel_rem_pio2f+0x67e>
  40542e:	1c59      	adds	r1, r3, #1
  405430:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  405434:	4588      	cmp	r8, r1
  405436:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  40543a:	dd14      	ble.n	405466 <__kernel_rem_pio2f+0x222>
  40543c:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  405440:	3302      	adds	r3, #2
  405442:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  405446:	4598      	cmp	r8, r3
  405448:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  40544c:	dd0b      	ble.n	405466 <__kernel_rem_pio2f+0x222>
  40544e:	9a03      	ldr	r2, [sp, #12]
  405450:	4452      	add	r2, sl
  405452:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  405456:	4691      	mov	r9, r2
  405458:	681a      	ldr	r2, [r3, #0]
  40545a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40545e:	f843 2b04 	str.w	r2, [r3], #4
  405462:	454b      	cmp	r3, r9
  405464:	d1f8      	bne.n	405458 <__kernel_rem_pio2f+0x214>
  405466:	9b04      	ldr	r3, [sp, #16]
  405468:	2b00      	cmp	r3, #0
  40546a:	dd11      	ble.n	405490 <__kernel_rem_pio2f+0x24c>
  40546c:	9b04      	ldr	r3, [sp, #16]
  40546e:	2b01      	cmp	r3, #1
  405470:	f04f 0601 	mov.w	r6, #1
  405474:	f040 820e 	bne.w	405894 <__kernel_rem_pio2f+0x650>
  405478:	f108 32ff 	add.w	r2, r8, #4294967295
  40547c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405484:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  405488:	e20e      	b.n	4058a8 <__kernel_rem_pio2f+0x664>
  40548a:	bf00      	nop
  40548c:	0040c4a8 	.word	0x0040c4a8
  405490:	2c02      	cmp	r4, #2
  405492:	d110      	bne.n	4054b6 <__kernel_rem_pio2f+0x272>
  405494:	4639      	mov	r1, r7
  405496:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40549a:	f001 f951 	bl	406740 <__aeabi_fsub>
  40549e:	4607      	mov	r7, r0
  4054a0:	9904      	ldr	r1, [sp, #16]
  4054a2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4054a6:	f000 fc31 	bl	405d0c <scalbnf>
  4054aa:	4601      	mov	r1, r0
  4054ac:	4638      	mov	r0, r7
  4054ae:	f001 f947 	bl	406740 <__aeabi_fsub>
  4054b2:	2402      	movs	r4, #2
  4054b4:	4607      	mov	r7, r0
  4054b6:	2100      	movs	r1, #0
  4054b8:	4638      	mov	r0, r7
  4054ba:	f001 fbdf 	bl	406c7c <__aeabi_fcmpeq>
  4054be:	2800      	cmp	r0, #0
  4054c0:	f000 8083 	beq.w	4055ca <__kernel_rem_pio2f+0x386>
  4054c4:	9b05      	ldr	r3, [sp, #20]
  4054c6:	f108 37ff 	add.w	r7, r8, #4294967295
  4054ca:	42bb      	cmp	r3, r7
  4054cc:	dc0f      	bgt.n	4054ee <__kernel_rem_pio2f+0x2aa>
  4054ce:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  4054d2:	3b01      	subs	r3, #1
  4054d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4054d6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4054da:	2200      	movs	r2, #0
  4054dc:	f853 1904 	ldr.w	r1, [r3], #-4
  4054e0:	4283      	cmp	r3, r0
  4054e2:	ea42 0201 	orr.w	r2, r2, r1
  4054e6:	d1f9      	bne.n	4054dc <__kernel_rem_pio2f+0x298>
  4054e8:	2a00      	cmp	r2, #0
  4054ea:	f040 809d 	bne.w	405628 <__kernel_rem_pio2f+0x3e4>
  4054ee:	9b05      	ldr	r3, [sp, #20]
  4054f0:	3b01      	subs	r3, #1
  4054f2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  4054f6:	2b00      	cmp	r3, #0
  4054f8:	f040 81f4 	bne.w	4058e4 <__kernel_rem_pio2f+0x6a0>
  4054fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4054fe:	2301      	movs	r3, #1
  405500:	f852 1904 	ldr.w	r1, [r2], #-4
  405504:	3301      	adds	r3, #1
  405506:	2900      	cmp	r1, #0
  405508:	d0fa      	beq.n	405500 <__kernel_rem_pio2f+0x2bc>
  40550a:	4443      	add	r3, r8
  40550c:	461a      	mov	r2, r3
  40550e:	9306      	str	r3, [sp, #24]
  405510:	f108 0301 	add.w	r3, r8, #1
  405514:	4293      	cmp	r3, r2
  405516:	dc37      	bgt.n	405588 <__kernel_rem_pio2f+0x344>
  405518:	9908      	ldr	r1, [sp, #32]
  40551a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40551c:	eb01 0708 	add.w	r7, r1, r8
  405520:	a920      	add	r1, sp, #128	; 0x80
  405522:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405526:	9906      	ldr	r1, [sp, #24]
  405528:	189e      	adds	r6, r3, r2
  40552a:	eb01 0902 	add.w	r9, r1, r2
  40552e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  405532:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  405534:	3e01      	subs	r6, #1
  405536:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40553a:	aa48      	add	r2, sp, #288	; 0x120
  40553c:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  405540:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  405542:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  405546:	9303      	str	r3, [sp, #12]
  405548:	f856 0f04 	ldr.w	r0, [r6, #4]!
  40554c:	f001 f9ae 	bl	4068ac <__aeabi_i2f>
  405550:	9b01      	ldr	r3, [sp, #4]
  405552:	f847 0b04 	str.w	r0, [r7], #4
  405556:	2b00      	cmp	r3, #0
  405558:	db19      	blt.n	40558e <__kernel_rem_pio2f+0x34a>
  40555a:	9b02      	ldr	r3, [sp, #8]
  40555c:	46bb      	mov	fp, r7
  40555e:	1f1c      	subs	r4, r3, #4
  405560:	f04f 0900 	mov.w	r9, #0
  405564:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  405568:	f854 0f04 	ldr.w	r0, [r4, #4]!
  40556c:	f001 f9f2 	bl	406954 <__aeabi_fmul>
  405570:	4601      	mov	r1, r0
  405572:	4648      	mov	r0, r9
  405574:	f001 f8e6 	bl	406744 <__addsf3>
  405578:	42ac      	cmp	r4, r5
  40557a:	4681      	mov	r9, r0
  40557c:	d1f2      	bne.n	405564 <__kernel_rem_pio2f+0x320>
  40557e:	9b03      	ldr	r3, [sp, #12]
  405580:	f848 9b04 	str.w	r9, [r8], #4
  405584:	429e      	cmp	r6, r3
  405586:	d1df      	bne.n	405548 <__kernel_rem_pio2f+0x304>
  405588:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40558c:	e6d1      	b.n	405332 <__kernel_rem_pio2f+0xee>
  40558e:	9b03      	ldr	r3, [sp, #12]
  405590:	f04f 0900 	mov.w	r9, #0
  405594:	429e      	cmp	r6, r3
  405596:	f848 9b04 	str.w	r9, [r8], #4
  40559a:	d1d5      	bne.n	405548 <__kernel_rem_pio2f+0x304>
  40559c:	e7f4      	b.n	405588 <__kernel_rem_pio2f+0x344>
  40559e:	d105      	bne.n	4055ac <__kernel_rem_pio2f+0x368>
  4055a0:	f108 33ff 	add.w	r3, r8, #4294967295
  4055a4:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  4055a8:	1224      	asrs	r4, r4, #8
  4055aa:	e726      	b.n	4053fa <__kernel_rem_pio2f+0x1b6>
  4055ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4055b0:	f001 fb82 	bl	406cb8 <__aeabi_fcmpge>
  4055b4:	2800      	cmp	r0, #0
  4055b6:	f040 8153 	bne.w	405860 <__kernel_rem_pio2f+0x61c>
  4055ba:	4604      	mov	r4, r0
  4055bc:	2100      	movs	r1, #0
  4055be:	4638      	mov	r0, r7
  4055c0:	f001 fb5c 	bl	406c7c <__aeabi_fcmpeq>
  4055c4:	2800      	cmp	r0, #0
  4055c6:	f47f af7d 	bne.w	4054c4 <__kernel_rem_pio2f+0x280>
  4055ca:	9e04      	ldr	r6, [sp, #16]
  4055cc:	4638      	mov	r0, r7
  4055ce:	4271      	negs	r1, r6
  4055d0:	f000 fb9c 	bl	405d0c <scalbnf>
  4055d4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4055d8:	46a1      	mov	r9, r4
  4055da:	4604      	mov	r4, r0
  4055dc:	f001 fb6c 	bl	406cb8 <__aeabi_fcmpge>
  4055e0:	2800      	cmp	r0, #0
  4055e2:	f000 818d 	beq.w	405900 <__kernel_rem_pio2f+0x6bc>
  4055e6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  4055ea:	4620      	mov	r0, r4
  4055ec:	f001 f9b2 	bl	406954 <__aeabi_fmul>
  4055f0:	f001 fb8c 	bl	406d0c <__aeabi_f2iz>
  4055f4:	f001 f95a 	bl	4068ac <__aeabi_i2f>
  4055f8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4055fc:	4605      	mov	r5, r0
  4055fe:	f001 f9a9 	bl	406954 <__aeabi_fmul>
  405602:	4601      	mov	r1, r0
  405604:	4620      	mov	r0, r4
  405606:	f001 f89b 	bl	406740 <__aeabi_fsub>
  40560a:	f001 fb7f 	bl	406d0c <__aeabi_f2iz>
  40560e:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  405612:	4628      	mov	r0, r5
  405614:	f001 fb7a 	bl	406d0c <__aeabi_f2iz>
  405618:	f108 0701 	add.w	r7, r8, #1
  40561c:	4633      	mov	r3, r6
  40561e:	3308      	adds	r3, #8
  405620:	9304      	str	r3, [sp, #16]
  405622:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  405626:	e012      	b.n	40564e <__kernel_rem_pio2f+0x40a>
  405628:	9a04      	ldr	r2, [sp, #16]
  40562a:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40562e:	3a08      	subs	r2, #8
  405630:	46a1      	mov	r9, r4
  405632:	9204      	str	r2, [sp, #16]
  405634:	b95b      	cbnz	r3, 40564e <__kernel_rem_pio2f+0x40a>
  405636:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  40563a:	3b01      	subs	r3, #1
  40563c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  405640:	f853 1904 	ldr.w	r1, [r3], #-4
  405644:	3f01      	subs	r7, #1
  405646:	3a08      	subs	r2, #8
  405648:	2900      	cmp	r1, #0
  40564a:	d0f9      	beq.n	405640 <__kernel_rem_pio2f+0x3fc>
  40564c:	9204      	str	r2, [sp, #16]
  40564e:	9904      	ldr	r1, [sp, #16]
  405650:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405654:	f000 fb5a 	bl	405d0c <scalbnf>
  405658:	2f00      	cmp	r7, #0
  40565a:	4604      	mov	r4, r0
  40565c:	f2c0 815c 	blt.w	405918 <__kernel_rem_pio2f+0x6d4>
  405660:	00bb      	lsls	r3, r7, #2
  405662:	a948      	add	r1, sp, #288	; 0x120
  405664:	1d1a      	adds	r2, r3, #4
  405666:	eb01 0803 	add.w	r8, r1, r3
  40566a:	9301      	str	r3, [sp, #4]
  40566c:	9202      	str	r2, [sp, #8]
  40566e:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  405672:	eb0a 0b02 	add.w	fp, sl, r2
  405676:	f108 0504 	add.w	r5, r8, #4
  40567a:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  40567e:	f001 f915 	bl	4068ac <__aeabi_i2f>
  405682:	4621      	mov	r1, r4
  405684:	f001 f966 	bl	406954 <__aeabi_fmul>
  405688:	4631      	mov	r1, r6
  40568a:	f845 0d04 	str.w	r0, [r5, #-4]!
  40568e:	4620      	mov	r0, r4
  405690:	f001 f960 	bl	406954 <__aeabi_fmul>
  405694:	45d3      	cmp	fp, sl
  405696:	4604      	mov	r4, r0
  405698:	d1ef      	bne.n	40567a <__kernel_rem_pio2f+0x436>
  40569a:	2600      	movs	r6, #0
  40569c:	f8dd b014 	ldr.w	fp, [sp, #20]
  4056a0:	9703      	str	r7, [sp, #12]
  4056a2:	f1a8 0804 	sub.w	r8, r8, #4
  4056a6:	46b2      	mov	sl, r6
  4056a8:	f1bb 0f00 	cmp.w	fp, #0
  4056ac:	bfb8      	it	lt
  4056ae:	2500      	movlt	r5, #0
  4056b0:	db15      	blt.n	4056de <__kernel_rem_pio2f+0x49a>
  4056b2:	4ea5      	ldr	r6, [pc, #660]	; (405948 <__kernel_rem_pio2f+0x704>)
  4056b4:	48a5      	ldr	r0, [pc, #660]	; (40594c <__kernel_rem_pio2f+0x708>)
  4056b6:	4647      	mov	r7, r8
  4056b8:	2500      	movs	r5, #0
  4056ba:	2400      	movs	r4, #0
  4056bc:	e003      	b.n	4056c6 <__kernel_rem_pio2f+0x482>
  4056be:	4554      	cmp	r4, sl
  4056c0:	dc0d      	bgt.n	4056de <__kernel_rem_pio2f+0x49a>
  4056c2:	f856 0f04 	ldr.w	r0, [r6, #4]!
  4056c6:	f857 1f04 	ldr.w	r1, [r7, #4]!
  4056ca:	f001 f943 	bl	406954 <__aeabi_fmul>
  4056ce:	4601      	mov	r1, r0
  4056d0:	4628      	mov	r0, r5
  4056d2:	f001 f837 	bl	406744 <__addsf3>
  4056d6:	3401      	adds	r4, #1
  4056d8:	45a3      	cmp	fp, r4
  4056da:	4605      	mov	r5, r0
  4056dc:	daef      	bge.n	4056be <__kernel_rem_pio2f+0x47a>
  4056de:	ab5c      	add	r3, sp, #368	; 0x170
  4056e0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4056e4:	f1a8 0804 	sub.w	r8, r8, #4
  4056e8:	f843 5ca0 	str.w	r5, [r3, #-160]
  4056ec:	ab46      	add	r3, sp, #280	; 0x118
  4056ee:	4543      	cmp	r3, r8
  4056f0:	f10a 0a01 	add.w	sl, sl, #1
  4056f4:	d1d8      	bne.n	4056a8 <__kernel_rem_pio2f+0x464>
  4056f6:	9b66      	ldr	r3, [sp, #408]	; 0x198
  4056f8:	9f03      	ldr	r7, [sp, #12]
  4056fa:	2b03      	cmp	r3, #3
  4056fc:	d85a      	bhi.n	4057b4 <__kernel_rem_pio2f+0x570>
  4056fe:	e8df f003 	tbb	[pc, r3]
  405702:	5f8e      	.short	0x5f8e
  405704:	025f      	.short	0x025f
  405706:	2f00      	cmp	r7, #0
  405708:	f340 8104 	ble.w	405914 <__kernel_rem_pio2f+0x6d0>
  40570c:	9a01      	ldr	r2, [sp, #4]
  40570e:	a95c      	add	r1, sp, #368	; 0x170
  405710:	188b      	adds	r3, r1, r2
  405712:	ac34      	add	r4, sp, #208	; 0xd0
  405714:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  405718:	18a5      	adds	r5, r4, r2
  40571a:	f855 ac04 	ldr.w	sl, [r5, #-4]
  40571e:	4631      	mov	r1, r6
  405720:	4650      	mov	r0, sl
  405722:	f001 f80f 	bl	406744 <__addsf3>
  405726:	4680      	mov	r8, r0
  405728:	4601      	mov	r1, r0
  40572a:	4650      	mov	r0, sl
  40572c:	f001 f808 	bl	406740 <__aeabi_fsub>
  405730:	4631      	mov	r1, r6
  405732:	f001 f807 	bl	406744 <__addsf3>
  405736:	6028      	str	r0, [r5, #0]
  405738:	f845 8d04 	str.w	r8, [r5, #-4]!
  40573c:	42ac      	cmp	r4, r5
  40573e:	4646      	mov	r6, r8
  405740:	d1eb      	bne.n	40571a <__kernel_rem_pio2f+0x4d6>
  405742:	2f01      	cmp	r7, #1
  405744:	f340 80e6 	ble.w	405914 <__kernel_rem_pio2f+0x6d0>
  405748:	9a01      	ldr	r2, [sp, #4]
  40574a:	a95c      	add	r1, sp, #368	; 0x170
  40574c:	188b      	adds	r3, r1, r2
  40574e:	4414      	add	r4, r2
  405750:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  405754:	4625      	mov	r5, r4
  405756:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  40575a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40575e:	4631      	mov	r1, r6
  405760:	4640      	mov	r0, r8
  405762:	f000 ffef 	bl	406744 <__addsf3>
  405766:	4607      	mov	r7, r0
  405768:	4601      	mov	r1, r0
  40576a:	4640      	mov	r0, r8
  40576c:	f000 ffe8 	bl	406740 <__aeabi_fsub>
  405770:	4631      	mov	r1, r6
  405772:	f000 ffe7 	bl	406744 <__addsf3>
  405776:	6028      	str	r0, [r5, #0]
  405778:	f845 7d04 	str.w	r7, [r5, #-4]!
  40577c:	45aa      	cmp	sl, r5
  40577e:	463e      	mov	r6, r7
  405780:	d1eb      	bne.n	40575a <__kernel_rem_pio2f+0x516>
  405782:	2000      	movs	r0, #0
  405784:	3404      	adds	r4, #4
  405786:	ad36      	add	r5, sp, #216	; 0xd8
  405788:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  40578c:	f000 ffda 	bl	406744 <__addsf3>
  405790:	42a5      	cmp	r5, r4
  405792:	d1f9      	bne.n	405788 <__kernel_rem_pio2f+0x544>
  405794:	f1b9 0f00 	cmp.w	r9, #0
  405798:	f000 80b9 	beq.w	40590e <__kernel_rem_pio2f+0x6ca>
  40579c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  40579e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  4057a0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4057a4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4057a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4057ac:	9c07      	ldr	r4, [sp, #28]
  4057ae:	60a0      	str	r0, [r4, #8]
  4057b0:	6022      	str	r2, [r4, #0]
  4057b2:	6063      	str	r3, [r4, #4]
  4057b4:	9b06      	ldr	r3, [sp, #24]
  4057b6:	f003 0007 	and.w	r0, r3, #7
  4057ba:	b05d      	add	sp, #372	; 0x174
  4057bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057c0:	9c01      	ldr	r4, [sp, #4]
  4057c2:	ad34      	add	r5, sp, #208	; 0xd0
  4057c4:	3404      	adds	r4, #4
  4057c6:	442c      	add	r4, r5
  4057c8:	2000      	movs	r0, #0
  4057ca:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  4057ce:	f000 ffb9 	bl	406744 <__addsf3>
  4057d2:	42ac      	cmp	r4, r5
  4057d4:	d1f9      	bne.n	4057ca <__kernel_rem_pio2f+0x586>
  4057d6:	f1b9 0f00 	cmp.w	r9, #0
  4057da:	f000 8085 	beq.w	4058e8 <__kernel_rem_pio2f+0x6a4>
  4057de:	9a07      	ldr	r2, [sp, #28]
  4057e0:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  4057e4:	4601      	mov	r1, r0
  4057e6:	6013      	str	r3, [r2, #0]
  4057e8:	9834      	ldr	r0, [sp, #208]	; 0xd0
  4057ea:	f000 ffa9 	bl	406740 <__aeabi_fsub>
  4057ee:	2f00      	cmp	r7, #0
  4057f0:	dd0b      	ble.n	40580a <__kernel_rem_pio2f+0x5c6>
  4057f2:	ad34      	add	r5, sp, #208	; 0xd0
  4057f4:	2401      	movs	r4, #1
  4057f6:	3401      	adds	r4, #1
  4057f8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4057fc:	f000 ffa2 	bl	406744 <__addsf3>
  405800:	42a7      	cmp	r7, r4
  405802:	daf8      	bge.n	4057f6 <__kernel_rem_pio2f+0x5b2>
  405804:	f1b9 0f00 	cmp.w	r9, #0
  405808:	d001      	beq.n	40580e <__kernel_rem_pio2f+0x5ca>
  40580a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40580e:	9b07      	ldr	r3, [sp, #28]
  405810:	6058      	str	r0, [r3, #4]
  405812:	9b06      	ldr	r3, [sp, #24]
  405814:	f003 0007 	and.w	r0, r3, #7
  405818:	b05d      	add	sp, #372	; 0x174
  40581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40581e:	9b02      	ldr	r3, [sp, #8]
  405820:	ad34      	add	r5, sp, #208	; 0xd0
  405822:	442b      	add	r3, r5
  405824:	2000      	movs	r0, #0
  405826:	461c      	mov	r4, r3
  405828:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  40582c:	f000 ff8a 	bl	406744 <__addsf3>
  405830:	42a5      	cmp	r5, r4
  405832:	d1f9      	bne.n	405828 <__kernel_rem_pio2f+0x5e4>
  405834:	f1b9 0f00 	cmp.w	r9, #0
  405838:	d001      	beq.n	40583e <__kernel_rem_pio2f+0x5fa>
  40583a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40583e:	9b07      	ldr	r3, [sp, #28]
  405840:	6018      	str	r0, [r3, #0]
  405842:	9b06      	ldr	r3, [sp, #24]
  405844:	f003 0007 	and.w	r0, r3, #7
  405848:	b05d      	add	sp, #372	; 0x174
  40584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40584e:	46ca      	mov	sl, r9
  405850:	f847 af04 	str.w	sl, [r7, #4]!
  405854:	4547      	cmp	r7, r8
  405856:	f106 0604 	add.w	r6, r6, #4
  40585a:	f47f ad3b 	bne.w	4052d4 <__kernel_rem_pio2f+0x90>
  40585e:	e554      	b.n	40530a <__kernel_rem_pio2f+0xc6>
  405860:	9b06      	ldr	r3, [sp, #24]
  405862:	f1b8 0f00 	cmp.w	r8, #0
  405866:	f103 0301 	add.w	r3, r3, #1
  40586a:	9306      	str	r3, [sp, #24]
  40586c:	bfc8      	it	gt
  40586e:	2402      	movgt	r4, #2
  405870:	f73f adcd 	bgt.w	40540e <__kernel_rem_pio2f+0x1ca>
  405874:	4639      	mov	r1, r7
  405876:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40587a:	f000 ff61 	bl	406740 <__aeabi_fsub>
  40587e:	2402      	movs	r4, #2
  405880:	4607      	mov	r7, r0
  405882:	e618      	b.n	4054b6 <__kernel_rem_pio2f+0x272>
  405884:	9b04      	ldr	r3, [sp, #16]
  405886:	2b00      	cmp	r3, #0
  405888:	dd22      	ble.n	4058d0 <__kernel_rem_pio2f+0x68c>
  40588a:	2600      	movs	r6, #0
  40588c:	9b04      	ldr	r3, [sp, #16]
  40588e:	2b01      	cmp	r3, #1
  405890:	f43f adf2 	beq.w	405478 <__kernel_rem_pio2f+0x234>
  405894:	2b02      	cmp	r3, #2
  405896:	d107      	bne.n	4058a8 <__kernel_rem_pio2f+0x664>
  405898:	f108 32ff 	add.w	r2, r8, #4294967295
  40589c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  4058a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4058a4:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  4058a8:	2c02      	cmp	r4, #2
  4058aa:	f47f ae04 	bne.w	4054b6 <__kernel_rem_pio2f+0x272>
  4058ae:	4639      	mov	r1, r7
  4058b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4058b4:	f000 ff44 	bl	406740 <__aeabi_fsub>
  4058b8:	4607      	mov	r7, r0
  4058ba:	2e00      	cmp	r6, #0
  4058bc:	f43f adfb 	beq.w	4054b6 <__kernel_rem_pio2f+0x272>
  4058c0:	e5ee      	b.n	4054a0 <__kernel_rem_pio2f+0x25c>
  4058c2:	3301      	adds	r3, #1
  4058c4:	4598      	cmp	r8, r3
  4058c6:	f47f adad 	bne.w	405424 <__kernel_rem_pio2f+0x1e0>
  4058ca:	9b04      	ldr	r3, [sp, #16]
  4058cc:	2b00      	cmp	r3, #0
  4058ce:	dcdd      	bgt.n	40588c <__kernel_rem_pio2f+0x648>
  4058d0:	2c02      	cmp	r4, #2
  4058d2:	f47f adf0 	bne.w	4054b6 <__kernel_rem_pio2f+0x272>
  4058d6:	4639      	mov	r1, r7
  4058d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4058dc:	f000 ff30 	bl	406740 <__aeabi_fsub>
  4058e0:	4607      	mov	r7, r0
  4058e2:	e5e8      	b.n	4054b6 <__kernel_rem_pio2f+0x272>
  4058e4:	2301      	movs	r3, #1
  4058e6:	e610      	b.n	40550a <__kernel_rem_pio2f+0x2c6>
  4058e8:	9b07      	ldr	r3, [sp, #28]
  4058ea:	4601      	mov	r1, r0
  4058ec:	6018      	str	r0, [r3, #0]
  4058ee:	9834      	ldr	r0, [sp, #208]	; 0xd0
  4058f0:	f000 ff26 	bl	406740 <__aeabi_fsub>
  4058f4:	2f00      	cmp	r7, #0
  4058f6:	f73f af7c 	bgt.w	4057f2 <__kernel_rem_pio2f+0x5ae>
  4058fa:	9b07      	ldr	r3, [sp, #28]
  4058fc:	6058      	str	r0, [r3, #4]
  4058fe:	e788      	b.n	405812 <__kernel_rem_pio2f+0x5ce>
  405900:	4620      	mov	r0, r4
  405902:	f001 fa03 	bl	406d0c <__aeabi_f2iz>
  405906:	4647      	mov	r7, r8
  405908:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  40590c:	e69f      	b.n	40564e <__kernel_rem_pio2f+0x40a>
  40590e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  405910:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  405912:	e74b      	b.n	4057ac <__kernel_rem_pio2f+0x568>
  405914:	2000      	movs	r0, #0
  405916:	e73d      	b.n	405794 <__kernel_rem_pio2f+0x550>
  405918:	9b66      	ldr	r3, [sp, #408]	; 0x198
  40591a:	2b03      	cmp	r3, #3
  40591c:	f63f af4a 	bhi.w	4057b4 <__kernel_rem_pio2f+0x570>
  405920:	a201      	add	r2, pc, #4	; (adr r2, 405928 <__kernel_rem_pio2f+0x6e4>)
  405922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405926:	bf00      	nop
  405928:	0040593d 	.word	0x0040593d
  40592c:	00405939 	.word	0x00405939
  405930:	00405939 	.word	0x00405939
  405934:	00405915 	.word	0x00405915
  405938:	2000      	movs	r0, #0
  40593a:	e74c      	b.n	4057d6 <__kernel_rem_pio2f+0x592>
  40593c:	2000      	movs	r0, #0
  40593e:	e779      	b.n	405834 <__kernel_rem_pio2f+0x5f0>
  405940:	2101      	movs	r1, #1
  405942:	2300      	movs	r3, #0
  405944:	e574      	b.n	405430 <__kernel_rem_pio2f+0x1ec>
  405946:	bf00      	nop
  405948:	0040c47c 	.word	0x0040c47c
  40594c:	3fc90000 	.word	0x3fc90000

00405950 <__kernel_sinf>:
  405950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405954:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  405958:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  40595c:	4604      	mov	r4, r0
  40595e:	460f      	mov	r7, r1
  405960:	4690      	mov	r8, r2
  405962:	da03      	bge.n	40596c <__kernel_sinf+0x1c>
  405964:	f001 f9d2 	bl	406d0c <__aeabi_f2iz>
  405968:	2800      	cmp	r0, #0
  40596a:	d058      	beq.n	405a1e <__kernel_sinf+0xce>
  40596c:	4621      	mov	r1, r4
  40596e:	4620      	mov	r0, r4
  405970:	f000 fff0 	bl	406954 <__aeabi_fmul>
  405974:	4605      	mov	r5, r0
  405976:	4601      	mov	r1, r0
  405978:	4620      	mov	r0, r4
  40597a:	f000 ffeb 	bl	406954 <__aeabi_fmul>
  40597e:	4929      	ldr	r1, [pc, #164]	; (405a24 <__kernel_sinf+0xd4>)
  405980:	4606      	mov	r6, r0
  405982:	4628      	mov	r0, r5
  405984:	f000 ffe6 	bl	406954 <__aeabi_fmul>
  405988:	4927      	ldr	r1, [pc, #156]	; (405a28 <__kernel_sinf+0xd8>)
  40598a:	f000 fed9 	bl	406740 <__aeabi_fsub>
  40598e:	4629      	mov	r1, r5
  405990:	f000 ffe0 	bl	406954 <__aeabi_fmul>
  405994:	4925      	ldr	r1, [pc, #148]	; (405a2c <__kernel_sinf+0xdc>)
  405996:	f000 fed5 	bl	406744 <__addsf3>
  40599a:	4629      	mov	r1, r5
  40599c:	f000 ffda 	bl	406954 <__aeabi_fmul>
  4059a0:	4923      	ldr	r1, [pc, #140]	; (405a30 <__kernel_sinf+0xe0>)
  4059a2:	f000 fecd 	bl	406740 <__aeabi_fsub>
  4059a6:	4629      	mov	r1, r5
  4059a8:	f000 ffd4 	bl	406954 <__aeabi_fmul>
  4059ac:	4921      	ldr	r1, [pc, #132]	; (405a34 <__kernel_sinf+0xe4>)
  4059ae:	f000 fec9 	bl	406744 <__addsf3>
  4059b2:	4681      	mov	r9, r0
  4059b4:	f1b8 0f00 	cmp.w	r8, #0
  4059b8:	d022      	beq.n	405a00 <__kernel_sinf+0xb0>
  4059ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4059be:	4638      	mov	r0, r7
  4059c0:	f000 ffc8 	bl	406954 <__aeabi_fmul>
  4059c4:	4649      	mov	r1, r9
  4059c6:	4680      	mov	r8, r0
  4059c8:	4630      	mov	r0, r6
  4059ca:	f000 ffc3 	bl	406954 <__aeabi_fmul>
  4059ce:	4601      	mov	r1, r0
  4059d0:	4640      	mov	r0, r8
  4059d2:	f000 feb5 	bl	406740 <__aeabi_fsub>
  4059d6:	4629      	mov	r1, r5
  4059d8:	f000 ffbc 	bl	406954 <__aeabi_fmul>
  4059dc:	4639      	mov	r1, r7
  4059de:	f000 feaf 	bl	406740 <__aeabi_fsub>
  4059e2:	4915      	ldr	r1, [pc, #84]	; (405a38 <__kernel_sinf+0xe8>)
  4059e4:	4605      	mov	r5, r0
  4059e6:	4630      	mov	r0, r6
  4059e8:	f000 ffb4 	bl	406954 <__aeabi_fmul>
  4059ec:	4601      	mov	r1, r0
  4059ee:	4628      	mov	r0, r5
  4059f0:	f000 fea8 	bl	406744 <__addsf3>
  4059f4:	4601      	mov	r1, r0
  4059f6:	4620      	mov	r0, r4
  4059f8:	f000 fea2 	bl	406740 <__aeabi_fsub>
  4059fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a00:	4601      	mov	r1, r0
  405a02:	4628      	mov	r0, r5
  405a04:	f000 ffa6 	bl	406954 <__aeabi_fmul>
  405a08:	490b      	ldr	r1, [pc, #44]	; (405a38 <__kernel_sinf+0xe8>)
  405a0a:	f000 fe99 	bl	406740 <__aeabi_fsub>
  405a0e:	4631      	mov	r1, r6
  405a10:	f000 ffa0 	bl	406954 <__aeabi_fmul>
  405a14:	4621      	mov	r1, r4
  405a16:	f000 fe95 	bl	406744 <__addsf3>
  405a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a1e:	4620      	mov	r0, r4
  405a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a24:	2f2ec9d3 	.word	0x2f2ec9d3
  405a28:	32d72f34 	.word	0x32d72f34
  405a2c:	3638ef1b 	.word	0x3638ef1b
  405a30:	39500d01 	.word	0x39500d01
  405a34:	3c088889 	.word	0x3c088889
  405a38:	3e2aaaab 	.word	0x3e2aaaab

00405a3c <matherr>:
  405a3c:	2000      	movs	r0, #0
  405a3e:	4770      	bx	lr

00405a40 <nan>:
  405a40:	2000      	movs	r0, #0
  405a42:	4901      	ldr	r1, [pc, #4]	; (405a48 <nan+0x8>)
  405a44:	4770      	bx	lr
  405a46:	bf00      	nop
  405a48:	7ff80000 	.word	0x7ff80000

00405a4c <atanf>:
  405a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a50:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  405a54:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  405a58:	4604      	mov	r4, r0
  405a5a:	4606      	mov	r6, r0
  405a5c:	db08      	blt.n	405a70 <atanf+0x24>
  405a5e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  405a62:	dc6f      	bgt.n	405b44 <atanf+0xf8>
  405a64:	2800      	cmp	r0, #0
  405a66:	f340 80a0 	ble.w	405baa <atanf+0x15e>
  405a6a:	486f      	ldr	r0, [pc, #444]	; (405c28 <atanf+0x1dc>)
  405a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a70:	4b6e      	ldr	r3, [pc, #440]	; (405c2c <atanf+0x1e0>)
  405a72:	429d      	cmp	r5, r3
  405a74:	dc77      	bgt.n	405b66 <atanf+0x11a>
  405a76:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  405a7a:	db68      	blt.n	405b4e <atanf+0x102>
  405a7c:	f04f 37ff 	mov.w	r7, #4294967295
  405a80:	4621      	mov	r1, r4
  405a82:	4620      	mov	r0, r4
  405a84:	f000 ff66 	bl	406954 <__aeabi_fmul>
  405a88:	4601      	mov	r1, r0
  405a8a:	4680      	mov	r8, r0
  405a8c:	f000 ff62 	bl	406954 <__aeabi_fmul>
  405a90:	4967      	ldr	r1, [pc, #412]	; (405c30 <atanf+0x1e4>)
  405a92:	4605      	mov	r5, r0
  405a94:	f000 ff5e 	bl	406954 <__aeabi_fmul>
  405a98:	4966      	ldr	r1, [pc, #408]	; (405c34 <atanf+0x1e8>)
  405a9a:	f000 fe53 	bl	406744 <__addsf3>
  405a9e:	4629      	mov	r1, r5
  405aa0:	f000 ff58 	bl	406954 <__aeabi_fmul>
  405aa4:	4964      	ldr	r1, [pc, #400]	; (405c38 <atanf+0x1ec>)
  405aa6:	f000 fe4d 	bl	406744 <__addsf3>
  405aaa:	4629      	mov	r1, r5
  405aac:	f000 ff52 	bl	406954 <__aeabi_fmul>
  405ab0:	4962      	ldr	r1, [pc, #392]	; (405c3c <atanf+0x1f0>)
  405ab2:	f000 fe47 	bl	406744 <__addsf3>
  405ab6:	4629      	mov	r1, r5
  405ab8:	f000 ff4c 	bl	406954 <__aeabi_fmul>
  405abc:	4960      	ldr	r1, [pc, #384]	; (405c40 <atanf+0x1f4>)
  405abe:	f000 fe41 	bl	406744 <__addsf3>
  405ac2:	4629      	mov	r1, r5
  405ac4:	f000 ff46 	bl	406954 <__aeabi_fmul>
  405ac8:	495e      	ldr	r1, [pc, #376]	; (405c44 <atanf+0x1f8>)
  405aca:	f000 fe3b 	bl	406744 <__addsf3>
  405ace:	4641      	mov	r1, r8
  405ad0:	f000 ff40 	bl	406954 <__aeabi_fmul>
  405ad4:	495c      	ldr	r1, [pc, #368]	; (405c48 <atanf+0x1fc>)
  405ad6:	4680      	mov	r8, r0
  405ad8:	4628      	mov	r0, r5
  405ada:	f000 ff3b 	bl	406954 <__aeabi_fmul>
  405ade:	495b      	ldr	r1, [pc, #364]	; (405c4c <atanf+0x200>)
  405ae0:	f000 fe2e 	bl	406740 <__aeabi_fsub>
  405ae4:	4629      	mov	r1, r5
  405ae6:	f000 ff35 	bl	406954 <__aeabi_fmul>
  405aea:	4959      	ldr	r1, [pc, #356]	; (405c50 <atanf+0x204>)
  405aec:	f000 fe28 	bl	406740 <__aeabi_fsub>
  405af0:	4629      	mov	r1, r5
  405af2:	f000 ff2f 	bl	406954 <__aeabi_fmul>
  405af6:	4957      	ldr	r1, [pc, #348]	; (405c54 <atanf+0x208>)
  405af8:	f000 fe22 	bl	406740 <__aeabi_fsub>
  405afc:	4629      	mov	r1, r5
  405afe:	f000 ff29 	bl	406954 <__aeabi_fmul>
  405b02:	4955      	ldr	r1, [pc, #340]	; (405c58 <atanf+0x20c>)
  405b04:	f000 fe1c 	bl	406740 <__aeabi_fsub>
  405b08:	4629      	mov	r1, r5
  405b0a:	f000 ff23 	bl	406954 <__aeabi_fmul>
  405b0e:	1c7b      	adds	r3, r7, #1
  405b10:	4601      	mov	r1, r0
  405b12:	4640      	mov	r0, r8
  405b14:	d04c      	beq.n	405bb0 <atanf+0x164>
  405b16:	f000 fe15 	bl	406744 <__addsf3>
  405b1a:	4621      	mov	r1, r4
  405b1c:	f000 ff1a 	bl	406954 <__aeabi_fmul>
  405b20:	4b4e      	ldr	r3, [pc, #312]	; (405c5c <atanf+0x210>)
  405b22:	4d4f      	ldr	r5, [pc, #316]	; (405c60 <atanf+0x214>)
  405b24:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  405b28:	f000 fe0a 	bl	406740 <__aeabi_fsub>
  405b2c:	4621      	mov	r1, r4
  405b2e:	f000 fe07 	bl	406740 <__aeabi_fsub>
  405b32:	4601      	mov	r1, r0
  405b34:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  405b38:	f000 fe02 	bl	406740 <__aeabi_fsub>
  405b3c:	2e00      	cmp	r6, #0
  405b3e:	db30      	blt.n	405ba2 <atanf+0x156>
  405b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b44:	4601      	mov	r1, r0
  405b46:	f000 fdfd 	bl	406744 <__addsf3>
  405b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b4e:	4945      	ldr	r1, [pc, #276]	; (405c64 <atanf+0x218>)
  405b50:	f000 fdf8 	bl	406744 <__addsf3>
  405b54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405b58:	f001 f8b8 	bl	406ccc <__aeabi_fcmpgt>
  405b5c:	2800      	cmp	r0, #0
  405b5e:	d08d      	beq.n	405a7c <atanf+0x30>
  405b60:	4620      	mov	r0, r4
  405b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b66:	f000 f887 	bl	405c78 <fabsf>
  405b6a:	4b3f      	ldr	r3, [pc, #252]	; (405c68 <atanf+0x21c>)
  405b6c:	429d      	cmp	r5, r3
  405b6e:	4604      	mov	r4, r0
  405b70:	dc29      	bgt.n	405bc6 <atanf+0x17a>
  405b72:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  405b76:	429d      	cmp	r5, r3
  405b78:	dc44      	bgt.n	405c04 <atanf+0x1b8>
  405b7a:	4601      	mov	r1, r0
  405b7c:	f000 fde2 	bl	406744 <__addsf3>
  405b80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405b84:	f000 fddc 	bl	406740 <__aeabi_fsub>
  405b88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  405b8c:	4605      	mov	r5, r0
  405b8e:	4620      	mov	r0, r4
  405b90:	f000 fdd8 	bl	406744 <__addsf3>
  405b94:	4601      	mov	r1, r0
  405b96:	4628      	mov	r0, r5
  405b98:	f000 ff90 	bl	406abc <__aeabi_fdiv>
  405b9c:	2700      	movs	r7, #0
  405b9e:	4604      	mov	r4, r0
  405ba0:	e76e      	b.n	405a80 <atanf+0x34>
  405ba2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405baa:	4830      	ldr	r0, [pc, #192]	; (405c6c <atanf+0x220>)
  405bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405bb0:	f000 fdc8 	bl	406744 <__addsf3>
  405bb4:	4621      	mov	r1, r4
  405bb6:	f000 fecd 	bl	406954 <__aeabi_fmul>
  405bba:	4601      	mov	r1, r0
  405bbc:	4620      	mov	r0, r4
  405bbe:	f000 fdbf 	bl	406740 <__aeabi_fsub>
  405bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405bc6:	4b2a      	ldr	r3, [pc, #168]	; (405c70 <atanf+0x224>)
  405bc8:	429d      	cmp	r5, r3
  405bca:	dc14      	bgt.n	405bf6 <atanf+0x1aa>
  405bcc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405bd0:	f000 fdb6 	bl	406740 <__aeabi_fsub>
  405bd4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405bd8:	4605      	mov	r5, r0
  405bda:	4620      	mov	r0, r4
  405bdc:	f000 feba 	bl	406954 <__aeabi_fmul>
  405be0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405be4:	f000 fdae 	bl	406744 <__addsf3>
  405be8:	4601      	mov	r1, r0
  405bea:	4628      	mov	r0, r5
  405bec:	f000 ff66 	bl	406abc <__aeabi_fdiv>
  405bf0:	2702      	movs	r7, #2
  405bf2:	4604      	mov	r4, r0
  405bf4:	e744      	b.n	405a80 <atanf+0x34>
  405bf6:	4601      	mov	r1, r0
  405bf8:	481e      	ldr	r0, [pc, #120]	; (405c74 <atanf+0x228>)
  405bfa:	f000 ff5f 	bl	406abc <__aeabi_fdiv>
  405bfe:	2703      	movs	r7, #3
  405c00:	4604      	mov	r4, r0
  405c02:	e73d      	b.n	405a80 <atanf+0x34>
  405c04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405c08:	f000 fd9a 	bl	406740 <__aeabi_fsub>
  405c0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405c10:	4605      	mov	r5, r0
  405c12:	4620      	mov	r0, r4
  405c14:	f000 fd96 	bl	406744 <__addsf3>
  405c18:	4601      	mov	r1, r0
  405c1a:	4628      	mov	r0, r5
  405c1c:	f000 ff4e 	bl	406abc <__aeabi_fdiv>
  405c20:	2701      	movs	r7, #1
  405c22:	4604      	mov	r4, r0
  405c24:	e72c      	b.n	405a80 <atanf+0x34>
  405c26:	bf00      	nop
  405c28:	3fc90fdb 	.word	0x3fc90fdb
  405c2c:	3edfffff 	.word	0x3edfffff
  405c30:	3c8569d7 	.word	0x3c8569d7
  405c34:	3d4bda59 	.word	0x3d4bda59
  405c38:	3d886b35 	.word	0x3d886b35
  405c3c:	3dba2e6e 	.word	0x3dba2e6e
  405c40:	3e124925 	.word	0x3e124925
  405c44:	3eaaaaab 	.word	0x3eaaaaab
  405c48:	bd15a221 	.word	0xbd15a221
  405c4c:	3d6ef16b 	.word	0x3d6ef16b
  405c50:	3d9d8795 	.word	0x3d9d8795
  405c54:	3de38e38 	.word	0x3de38e38
  405c58:	3e4ccccd 	.word	0x3e4ccccd
  405c5c:	0040c4c4 	.word	0x0040c4c4
  405c60:	0040c4b4 	.word	0x0040c4b4
  405c64:	7149f2ca 	.word	0x7149f2ca
  405c68:	3f97ffff 	.word	0x3f97ffff
  405c6c:	bfc90fdb 	.word	0xbfc90fdb
  405c70:	401bffff 	.word	0x401bffff
  405c74:	bf800000 	.word	0xbf800000

00405c78 <fabsf>:
  405c78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405c7c:	4770      	bx	lr
  405c7e:	bf00      	nop

00405c80 <floorf>:
  405c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c84:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  405c88:	0dfc      	lsrs	r4, r7, #23
  405c8a:	3c7f      	subs	r4, #127	; 0x7f
  405c8c:	2c16      	cmp	r4, #22
  405c8e:	4605      	mov	r5, r0
  405c90:	dc13      	bgt.n	405cba <floorf+0x3a>
  405c92:	2c00      	cmp	r4, #0
  405c94:	4680      	mov	r8, r0
  405c96:	db1b      	blt.n	405cd0 <floorf+0x50>
  405c98:	4f19      	ldr	r7, [pc, #100]	; (405d00 <floorf+0x80>)
  405c9a:	4127      	asrs	r7, r4
  405c9c:	4238      	tst	r0, r7
  405c9e:	d014      	beq.n	405cca <floorf+0x4a>
  405ca0:	4918      	ldr	r1, [pc, #96]	; (405d04 <floorf+0x84>)
  405ca2:	f000 fd4f 	bl	406744 <__addsf3>
  405ca6:	2100      	movs	r1, #0
  405ca8:	f001 f810 	bl	406ccc <__aeabi_fcmpgt>
  405cac:	b168      	cbz	r0, 405cca <floorf+0x4a>
  405cae:	2d00      	cmp	r5, #0
  405cb0:	db1b      	blt.n	405cea <floorf+0x6a>
  405cb2:	ea28 0007 	bic.w	r0, r8, r7
  405cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  405cbe:	d304      	bcc.n	405cca <floorf+0x4a>
  405cc0:	4601      	mov	r1, r0
  405cc2:	f000 fd3f 	bl	406744 <__addsf3>
  405cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cca:	4628      	mov	r0, r5
  405ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cd0:	490c      	ldr	r1, [pc, #48]	; (405d04 <floorf+0x84>)
  405cd2:	f000 fd37 	bl	406744 <__addsf3>
  405cd6:	2100      	movs	r1, #0
  405cd8:	f000 fff8 	bl	406ccc <__aeabi_fcmpgt>
  405cdc:	2800      	cmp	r0, #0
  405cde:	d0f4      	beq.n	405cca <floorf+0x4a>
  405ce0:	2d00      	cmp	r5, #0
  405ce2:	db08      	blt.n	405cf6 <floorf+0x76>
  405ce4:	2000      	movs	r0, #0
  405ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  405cee:	fa43 f404 	asr.w	r4, r3, r4
  405cf2:	44a0      	add	r8, r4
  405cf4:	e7dd      	b.n	405cb2 <floorf+0x32>
  405cf6:	2f00      	cmp	r7, #0
  405cf8:	d0e7      	beq.n	405cca <floorf+0x4a>
  405cfa:	4803      	ldr	r0, [pc, #12]	; (405d08 <floorf+0x88>)
  405cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d00:	007fffff 	.word	0x007fffff
  405d04:	7149f2ca 	.word	0x7149f2ca
  405d08:	bf800000 	.word	0xbf800000

00405d0c <scalbnf>:
  405d0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405d10:	b538      	push	{r3, r4, r5, lr}
  405d12:	4603      	mov	r3, r0
  405d14:	d016      	beq.n	405d44 <scalbnf+0x38>
  405d16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  405d1a:	d20f      	bcs.n	405d3c <scalbnf+0x30>
  405d1c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  405d20:	460d      	mov	r5, r1
  405d22:	d310      	bcc.n	405d46 <scalbnf+0x3a>
  405d24:	4604      	mov	r4, r0
  405d26:	0dd0      	lsrs	r0, r2, #23
  405d28:	4428      	add	r0, r5
  405d2a:	28fe      	cmp	r0, #254	; 0xfe
  405d2c:	dc2e      	bgt.n	405d8c <scalbnf+0x80>
  405d2e:	2800      	cmp	r0, #0
  405d30:	dd1d      	ble.n	405d6e <scalbnf+0x62>
  405d32:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405d36:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405d3a:	bd38      	pop	{r3, r4, r5, pc}
  405d3c:	4601      	mov	r1, r0
  405d3e:	f000 fd01 	bl	406744 <__addsf3>
  405d42:	bd38      	pop	{r3, r4, r5, pc}
  405d44:	bd38      	pop	{r3, r4, r5, pc}
  405d46:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  405d4a:	f000 fe03 	bl	406954 <__aeabi_fmul>
  405d4e:	4a18      	ldr	r2, [pc, #96]	; (405db0 <scalbnf+0xa4>)
  405d50:	4295      	cmp	r5, r2
  405d52:	4603      	mov	r3, r0
  405d54:	db07      	blt.n	405d66 <scalbnf+0x5a>
  405d56:	4604      	mov	r4, r0
  405d58:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  405d5c:	3819      	subs	r0, #25
  405d5e:	e7e3      	b.n	405d28 <scalbnf+0x1c>
  405d60:	4814      	ldr	r0, [pc, #80]	; (405db4 <scalbnf+0xa8>)
  405d62:	f000 f82b 	bl	405dbc <copysignf>
  405d66:	4913      	ldr	r1, [pc, #76]	; (405db4 <scalbnf+0xa8>)
  405d68:	f000 fdf4 	bl	406954 <__aeabi_fmul>
  405d6c:	bd38      	pop	{r3, r4, r5, pc}
  405d6e:	f110 0f16 	cmn.w	r0, #22
  405d72:	da13      	bge.n	405d9c <scalbnf+0x90>
  405d74:	f24c 3250 	movw	r2, #50000	; 0xc350
  405d78:	4295      	cmp	r5, r2
  405d7a:	4619      	mov	r1, r3
  405d7c:	ddf0      	ble.n	405d60 <scalbnf+0x54>
  405d7e:	480e      	ldr	r0, [pc, #56]	; (405db8 <scalbnf+0xac>)
  405d80:	f000 f81c 	bl	405dbc <copysignf>
  405d84:	490c      	ldr	r1, [pc, #48]	; (405db8 <scalbnf+0xac>)
  405d86:	f000 fde5 	bl	406954 <__aeabi_fmul>
  405d8a:	bd38      	pop	{r3, r4, r5, pc}
  405d8c:	4619      	mov	r1, r3
  405d8e:	480a      	ldr	r0, [pc, #40]	; (405db8 <scalbnf+0xac>)
  405d90:	f000 f814 	bl	405dbc <copysignf>
  405d94:	4908      	ldr	r1, [pc, #32]	; (405db8 <scalbnf+0xac>)
  405d96:	f000 fddd 	bl	406954 <__aeabi_fmul>
  405d9a:	bd38      	pop	{r3, r4, r5, pc}
  405d9c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405da0:	3019      	adds	r0, #25
  405da2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405da6:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  405daa:	f000 fdd3 	bl	406954 <__aeabi_fmul>
  405dae:	bd38      	pop	{r3, r4, r5, pc}
  405db0:	ffff3cb0 	.word	0xffff3cb0
  405db4:	0da24260 	.word	0x0da24260
  405db8:	7149f2ca 	.word	0x7149f2ca

00405dbc <copysignf>:
  405dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405dc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405dc4:	4308      	orrs	r0, r1
  405dc6:	4770      	bx	lr

00405dc8 <__aeabi_drsub>:
  405dc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405dcc:	e002      	b.n	405dd4 <__adddf3>
  405dce:	bf00      	nop

00405dd0 <__aeabi_dsub>:
  405dd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405dd4 <__adddf3>:
  405dd4:	b530      	push	{r4, r5, lr}
  405dd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405dda:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405dde:	ea94 0f05 	teq	r4, r5
  405de2:	bf08      	it	eq
  405de4:	ea90 0f02 	teqeq	r0, r2
  405de8:	bf1f      	itttt	ne
  405dea:	ea54 0c00 	orrsne.w	ip, r4, r0
  405dee:	ea55 0c02 	orrsne.w	ip, r5, r2
  405df2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405df6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405dfa:	f000 80e2 	beq.w	405fc2 <__adddf3+0x1ee>
  405dfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405e02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405e06:	bfb8      	it	lt
  405e08:	426d      	neglt	r5, r5
  405e0a:	dd0c      	ble.n	405e26 <__adddf3+0x52>
  405e0c:	442c      	add	r4, r5
  405e0e:	ea80 0202 	eor.w	r2, r0, r2
  405e12:	ea81 0303 	eor.w	r3, r1, r3
  405e16:	ea82 0000 	eor.w	r0, r2, r0
  405e1a:	ea83 0101 	eor.w	r1, r3, r1
  405e1e:	ea80 0202 	eor.w	r2, r0, r2
  405e22:	ea81 0303 	eor.w	r3, r1, r3
  405e26:	2d36      	cmp	r5, #54	; 0x36
  405e28:	bf88      	it	hi
  405e2a:	bd30      	pophi	{r4, r5, pc}
  405e2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405e30:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405e34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405e38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405e3c:	d002      	beq.n	405e44 <__adddf3+0x70>
  405e3e:	4240      	negs	r0, r0
  405e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405e44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405e48:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405e4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405e50:	d002      	beq.n	405e58 <__adddf3+0x84>
  405e52:	4252      	negs	r2, r2
  405e54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405e58:	ea94 0f05 	teq	r4, r5
  405e5c:	f000 80a7 	beq.w	405fae <__adddf3+0x1da>
  405e60:	f1a4 0401 	sub.w	r4, r4, #1
  405e64:	f1d5 0e20 	rsbs	lr, r5, #32
  405e68:	db0d      	blt.n	405e86 <__adddf3+0xb2>
  405e6a:	fa02 fc0e 	lsl.w	ip, r2, lr
  405e6e:	fa22 f205 	lsr.w	r2, r2, r5
  405e72:	1880      	adds	r0, r0, r2
  405e74:	f141 0100 	adc.w	r1, r1, #0
  405e78:	fa03 f20e 	lsl.w	r2, r3, lr
  405e7c:	1880      	adds	r0, r0, r2
  405e7e:	fa43 f305 	asr.w	r3, r3, r5
  405e82:	4159      	adcs	r1, r3
  405e84:	e00e      	b.n	405ea4 <__adddf3+0xd0>
  405e86:	f1a5 0520 	sub.w	r5, r5, #32
  405e8a:	f10e 0e20 	add.w	lr, lr, #32
  405e8e:	2a01      	cmp	r2, #1
  405e90:	fa03 fc0e 	lsl.w	ip, r3, lr
  405e94:	bf28      	it	cs
  405e96:	f04c 0c02 	orrcs.w	ip, ip, #2
  405e9a:	fa43 f305 	asr.w	r3, r3, r5
  405e9e:	18c0      	adds	r0, r0, r3
  405ea0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ea8:	d507      	bpl.n	405eba <__adddf3+0xe6>
  405eaa:	f04f 0e00 	mov.w	lr, #0
  405eae:	f1dc 0c00 	rsbs	ip, ip, #0
  405eb2:	eb7e 0000 	sbcs.w	r0, lr, r0
  405eb6:	eb6e 0101 	sbc.w	r1, lr, r1
  405eba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405ebe:	d31b      	bcc.n	405ef8 <__adddf3+0x124>
  405ec0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405ec4:	d30c      	bcc.n	405ee0 <__adddf3+0x10c>
  405ec6:	0849      	lsrs	r1, r1, #1
  405ec8:	ea5f 0030 	movs.w	r0, r0, rrx
  405ecc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405ed0:	f104 0401 	add.w	r4, r4, #1
  405ed4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405ed8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405edc:	f080 809a 	bcs.w	406014 <__adddf3+0x240>
  405ee0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405ee4:	bf08      	it	eq
  405ee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405eea:	f150 0000 	adcs.w	r0, r0, #0
  405eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405ef2:	ea41 0105 	orr.w	r1, r1, r5
  405ef6:	bd30      	pop	{r4, r5, pc}
  405ef8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405efc:	4140      	adcs	r0, r0
  405efe:	eb41 0101 	adc.w	r1, r1, r1
  405f02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f06:	f1a4 0401 	sub.w	r4, r4, #1
  405f0a:	d1e9      	bne.n	405ee0 <__adddf3+0x10c>
  405f0c:	f091 0f00 	teq	r1, #0
  405f10:	bf04      	itt	eq
  405f12:	4601      	moveq	r1, r0
  405f14:	2000      	moveq	r0, #0
  405f16:	fab1 f381 	clz	r3, r1
  405f1a:	bf08      	it	eq
  405f1c:	3320      	addeq	r3, #32
  405f1e:	f1a3 030b 	sub.w	r3, r3, #11
  405f22:	f1b3 0220 	subs.w	r2, r3, #32
  405f26:	da0c      	bge.n	405f42 <__adddf3+0x16e>
  405f28:	320c      	adds	r2, #12
  405f2a:	dd08      	ble.n	405f3e <__adddf3+0x16a>
  405f2c:	f102 0c14 	add.w	ip, r2, #20
  405f30:	f1c2 020c 	rsb	r2, r2, #12
  405f34:	fa01 f00c 	lsl.w	r0, r1, ip
  405f38:	fa21 f102 	lsr.w	r1, r1, r2
  405f3c:	e00c      	b.n	405f58 <__adddf3+0x184>
  405f3e:	f102 0214 	add.w	r2, r2, #20
  405f42:	bfd8      	it	le
  405f44:	f1c2 0c20 	rsble	ip, r2, #32
  405f48:	fa01 f102 	lsl.w	r1, r1, r2
  405f4c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405f50:	bfdc      	itt	le
  405f52:	ea41 010c 	orrle.w	r1, r1, ip
  405f56:	4090      	lslle	r0, r2
  405f58:	1ae4      	subs	r4, r4, r3
  405f5a:	bfa2      	ittt	ge
  405f5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405f60:	4329      	orrge	r1, r5
  405f62:	bd30      	popge	{r4, r5, pc}
  405f64:	ea6f 0404 	mvn.w	r4, r4
  405f68:	3c1f      	subs	r4, #31
  405f6a:	da1c      	bge.n	405fa6 <__adddf3+0x1d2>
  405f6c:	340c      	adds	r4, #12
  405f6e:	dc0e      	bgt.n	405f8e <__adddf3+0x1ba>
  405f70:	f104 0414 	add.w	r4, r4, #20
  405f74:	f1c4 0220 	rsb	r2, r4, #32
  405f78:	fa20 f004 	lsr.w	r0, r0, r4
  405f7c:	fa01 f302 	lsl.w	r3, r1, r2
  405f80:	ea40 0003 	orr.w	r0, r0, r3
  405f84:	fa21 f304 	lsr.w	r3, r1, r4
  405f88:	ea45 0103 	orr.w	r1, r5, r3
  405f8c:	bd30      	pop	{r4, r5, pc}
  405f8e:	f1c4 040c 	rsb	r4, r4, #12
  405f92:	f1c4 0220 	rsb	r2, r4, #32
  405f96:	fa20 f002 	lsr.w	r0, r0, r2
  405f9a:	fa01 f304 	lsl.w	r3, r1, r4
  405f9e:	ea40 0003 	orr.w	r0, r0, r3
  405fa2:	4629      	mov	r1, r5
  405fa4:	bd30      	pop	{r4, r5, pc}
  405fa6:	fa21 f004 	lsr.w	r0, r1, r4
  405faa:	4629      	mov	r1, r5
  405fac:	bd30      	pop	{r4, r5, pc}
  405fae:	f094 0f00 	teq	r4, #0
  405fb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405fb6:	bf06      	itte	eq
  405fb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405fbc:	3401      	addeq	r4, #1
  405fbe:	3d01      	subne	r5, #1
  405fc0:	e74e      	b.n	405e60 <__adddf3+0x8c>
  405fc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405fc6:	bf18      	it	ne
  405fc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405fcc:	d029      	beq.n	406022 <__adddf3+0x24e>
  405fce:	ea94 0f05 	teq	r4, r5
  405fd2:	bf08      	it	eq
  405fd4:	ea90 0f02 	teqeq	r0, r2
  405fd8:	d005      	beq.n	405fe6 <__adddf3+0x212>
  405fda:	ea54 0c00 	orrs.w	ip, r4, r0
  405fde:	bf04      	itt	eq
  405fe0:	4619      	moveq	r1, r3
  405fe2:	4610      	moveq	r0, r2
  405fe4:	bd30      	pop	{r4, r5, pc}
  405fe6:	ea91 0f03 	teq	r1, r3
  405fea:	bf1e      	ittt	ne
  405fec:	2100      	movne	r1, #0
  405fee:	2000      	movne	r0, #0
  405ff0:	bd30      	popne	{r4, r5, pc}
  405ff2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405ff6:	d105      	bne.n	406004 <__adddf3+0x230>
  405ff8:	0040      	lsls	r0, r0, #1
  405ffa:	4149      	adcs	r1, r1
  405ffc:	bf28      	it	cs
  405ffe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406002:	bd30      	pop	{r4, r5, pc}
  406004:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406008:	bf3c      	itt	cc
  40600a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40600e:	bd30      	popcc	{r4, r5, pc}
  406010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406014:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406018:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40601c:	f04f 0000 	mov.w	r0, #0
  406020:	bd30      	pop	{r4, r5, pc}
  406022:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406026:	bf1a      	itte	ne
  406028:	4619      	movne	r1, r3
  40602a:	4610      	movne	r0, r2
  40602c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406030:	bf1c      	itt	ne
  406032:	460b      	movne	r3, r1
  406034:	4602      	movne	r2, r0
  406036:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40603a:	bf06      	itte	eq
  40603c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406040:	ea91 0f03 	teqeq	r1, r3
  406044:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406048:	bd30      	pop	{r4, r5, pc}
  40604a:	bf00      	nop

0040604c <__aeabi_ui2d>:
  40604c:	f090 0f00 	teq	r0, #0
  406050:	bf04      	itt	eq
  406052:	2100      	moveq	r1, #0
  406054:	4770      	bxeq	lr
  406056:	b530      	push	{r4, r5, lr}
  406058:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40605c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406060:	f04f 0500 	mov.w	r5, #0
  406064:	f04f 0100 	mov.w	r1, #0
  406068:	e750      	b.n	405f0c <__adddf3+0x138>
  40606a:	bf00      	nop

0040606c <__aeabi_i2d>:
  40606c:	f090 0f00 	teq	r0, #0
  406070:	bf04      	itt	eq
  406072:	2100      	moveq	r1, #0
  406074:	4770      	bxeq	lr
  406076:	b530      	push	{r4, r5, lr}
  406078:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40607c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406080:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406084:	bf48      	it	mi
  406086:	4240      	negmi	r0, r0
  406088:	f04f 0100 	mov.w	r1, #0
  40608c:	e73e      	b.n	405f0c <__adddf3+0x138>
  40608e:	bf00      	nop

00406090 <__aeabi_f2d>:
  406090:	0042      	lsls	r2, r0, #1
  406092:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406096:	ea4f 0131 	mov.w	r1, r1, rrx
  40609a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40609e:	bf1f      	itttt	ne
  4060a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4060a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4060a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4060ac:	4770      	bxne	lr
  4060ae:	f092 0f00 	teq	r2, #0
  4060b2:	bf14      	ite	ne
  4060b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4060b8:	4770      	bxeq	lr
  4060ba:	b530      	push	{r4, r5, lr}
  4060bc:	f44f 7460 	mov.w	r4, #896	; 0x380
  4060c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4060c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4060c8:	e720      	b.n	405f0c <__adddf3+0x138>
  4060ca:	bf00      	nop

004060cc <__aeabi_ul2d>:
  4060cc:	ea50 0201 	orrs.w	r2, r0, r1
  4060d0:	bf08      	it	eq
  4060d2:	4770      	bxeq	lr
  4060d4:	b530      	push	{r4, r5, lr}
  4060d6:	f04f 0500 	mov.w	r5, #0
  4060da:	e00a      	b.n	4060f2 <__aeabi_l2d+0x16>

004060dc <__aeabi_l2d>:
  4060dc:	ea50 0201 	orrs.w	r2, r0, r1
  4060e0:	bf08      	it	eq
  4060e2:	4770      	bxeq	lr
  4060e4:	b530      	push	{r4, r5, lr}
  4060e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4060ea:	d502      	bpl.n	4060f2 <__aeabi_l2d+0x16>
  4060ec:	4240      	negs	r0, r0
  4060ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4060f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4060f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4060fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4060fe:	f43f aedc 	beq.w	405eba <__adddf3+0xe6>
  406102:	f04f 0203 	mov.w	r2, #3
  406106:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40610a:	bf18      	it	ne
  40610c:	3203      	addne	r2, #3
  40610e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406112:	bf18      	it	ne
  406114:	3203      	addne	r2, #3
  406116:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40611a:	f1c2 0320 	rsb	r3, r2, #32
  40611e:	fa00 fc03 	lsl.w	ip, r0, r3
  406122:	fa20 f002 	lsr.w	r0, r0, r2
  406126:	fa01 fe03 	lsl.w	lr, r1, r3
  40612a:	ea40 000e 	orr.w	r0, r0, lr
  40612e:	fa21 f102 	lsr.w	r1, r1, r2
  406132:	4414      	add	r4, r2
  406134:	e6c1      	b.n	405eba <__adddf3+0xe6>
  406136:	bf00      	nop

00406138 <__aeabi_dmul>:
  406138:	b570      	push	{r4, r5, r6, lr}
  40613a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40613e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406142:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406146:	bf1d      	ittte	ne
  406148:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40614c:	ea94 0f0c 	teqne	r4, ip
  406150:	ea95 0f0c 	teqne	r5, ip
  406154:	f000 f8de 	bleq	406314 <__aeabi_dmul+0x1dc>
  406158:	442c      	add	r4, r5
  40615a:	ea81 0603 	eor.w	r6, r1, r3
  40615e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406162:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406166:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40616a:	bf18      	it	ne
  40616c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  406170:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406178:	d038      	beq.n	4061ec <__aeabi_dmul+0xb4>
  40617a:	fba0 ce02 	umull	ip, lr, r0, r2
  40617e:	f04f 0500 	mov.w	r5, #0
  406182:	fbe1 e502 	umlal	lr, r5, r1, r2
  406186:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40618a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40618e:	f04f 0600 	mov.w	r6, #0
  406192:	fbe1 5603 	umlal	r5, r6, r1, r3
  406196:	f09c 0f00 	teq	ip, #0
  40619a:	bf18      	it	ne
  40619c:	f04e 0e01 	orrne.w	lr, lr, #1
  4061a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4061a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4061a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4061ac:	d204      	bcs.n	4061b8 <__aeabi_dmul+0x80>
  4061ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4061b2:	416d      	adcs	r5, r5
  4061b4:	eb46 0606 	adc.w	r6, r6, r6
  4061b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4061bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4061c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4061c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4061c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4061cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4061d0:	bf88      	it	hi
  4061d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4061d6:	d81e      	bhi.n	406216 <__aeabi_dmul+0xde>
  4061d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4061dc:	bf08      	it	eq
  4061de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4061e2:	f150 0000 	adcs.w	r0, r0, #0
  4061e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4061ea:	bd70      	pop	{r4, r5, r6, pc}
  4061ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4061f0:	ea46 0101 	orr.w	r1, r6, r1
  4061f4:	ea40 0002 	orr.w	r0, r0, r2
  4061f8:	ea81 0103 	eor.w	r1, r1, r3
  4061fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406200:	bfc2      	ittt	gt
  406202:	ebd4 050c 	rsbsgt	r5, r4, ip
  406206:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40620a:	bd70      	popgt	{r4, r5, r6, pc}
  40620c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406210:	f04f 0e00 	mov.w	lr, #0
  406214:	3c01      	subs	r4, #1
  406216:	f300 80ab 	bgt.w	406370 <__aeabi_dmul+0x238>
  40621a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40621e:	bfde      	ittt	le
  406220:	2000      	movle	r0, #0
  406222:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  406226:	bd70      	pople	{r4, r5, r6, pc}
  406228:	f1c4 0400 	rsb	r4, r4, #0
  40622c:	3c20      	subs	r4, #32
  40622e:	da35      	bge.n	40629c <__aeabi_dmul+0x164>
  406230:	340c      	adds	r4, #12
  406232:	dc1b      	bgt.n	40626c <__aeabi_dmul+0x134>
  406234:	f104 0414 	add.w	r4, r4, #20
  406238:	f1c4 0520 	rsb	r5, r4, #32
  40623c:	fa00 f305 	lsl.w	r3, r0, r5
  406240:	fa20 f004 	lsr.w	r0, r0, r4
  406244:	fa01 f205 	lsl.w	r2, r1, r5
  406248:	ea40 0002 	orr.w	r0, r0, r2
  40624c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  406250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406254:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406258:	fa21 f604 	lsr.w	r6, r1, r4
  40625c:	eb42 0106 	adc.w	r1, r2, r6
  406260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406264:	bf08      	it	eq
  406266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40626a:	bd70      	pop	{r4, r5, r6, pc}
  40626c:	f1c4 040c 	rsb	r4, r4, #12
  406270:	f1c4 0520 	rsb	r5, r4, #32
  406274:	fa00 f304 	lsl.w	r3, r0, r4
  406278:	fa20 f005 	lsr.w	r0, r0, r5
  40627c:	fa01 f204 	lsl.w	r2, r1, r4
  406280:	ea40 0002 	orr.w	r0, r0, r2
  406284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406288:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40628c:	f141 0100 	adc.w	r1, r1, #0
  406290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406294:	bf08      	it	eq
  406296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40629a:	bd70      	pop	{r4, r5, r6, pc}
  40629c:	f1c4 0520 	rsb	r5, r4, #32
  4062a0:	fa00 f205 	lsl.w	r2, r0, r5
  4062a4:	ea4e 0e02 	orr.w	lr, lr, r2
  4062a8:	fa20 f304 	lsr.w	r3, r0, r4
  4062ac:	fa01 f205 	lsl.w	r2, r1, r5
  4062b0:	ea43 0302 	orr.w	r3, r3, r2
  4062b4:	fa21 f004 	lsr.w	r0, r1, r4
  4062b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062bc:	fa21 f204 	lsr.w	r2, r1, r4
  4062c0:	ea20 0002 	bic.w	r0, r0, r2
  4062c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4062c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4062cc:	bf08      	it	eq
  4062ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4062d2:	bd70      	pop	{r4, r5, r6, pc}
  4062d4:	f094 0f00 	teq	r4, #0
  4062d8:	d10f      	bne.n	4062fa <__aeabi_dmul+0x1c2>
  4062da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4062de:	0040      	lsls	r0, r0, #1
  4062e0:	eb41 0101 	adc.w	r1, r1, r1
  4062e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4062e8:	bf08      	it	eq
  4062ea:	3c01      	subeq	r4, #1
  4062ec:	d0f7      	beq.n	4062de <__aeabi_dmul+0x1a6>
  4062ee:	ea41 0106 	orr.w	r1, r1, r6
  4062f2:	f095 0f00 	teq	r5, #0
  4062f6:	bf18      	it	ne
  4062f8:	4770      	bxne	lr
  4062fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4062fe:	0052      	lsls	r2, r2, #1
  406300:	eb43 0303 	adc.w	r3, r3, r3
  406304:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406308:	bf08      	it	eq
  40630a:	3d01      	subeq	r5, #1
  40630c:	d0f7      	beq.n	4062fe <__aeabi_dmul+0x1c6>
  40630e:	ea43 0306 	orr.w	r3, r3, r6
  406312:	4770      	bx	lr
  406314:	ea94 0f0c 	teq	r4, ip
  406318:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40631c:	bf18      	it	ne
  40631e:	ea95 0f0c 	teqne	r5, ip
  406322:	d00c      	beq.n	40633e <__aeabi_dmul+0x206>
  406324:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406328:	bf18      	it	ne
  40632a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40632e:	d1d1      	bne.n	4062d4 <__aeabi_dmul+0x19c>
  406330:	ea81 0103 	eor.w	r1, r1, r3
  406334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406338:	f04f 0000 	mov.w	r0, #0
  40633c:	bd70      	pop	{r4, r5, r6, pc}
  40633e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406342:	bf06      	itte	eq
  406344:	4610      	moveq	r0, r2
  406346:	4619      	moveq	r1, r3
  406348:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40634c:	d019      	beq.n	406382 <__aeabi_dmul+0x24a>
  40634e:	ea94 0f0c 	teq	r4, ip
  406352:	d102      	bne.n	40635a <__aeabi_dmul+0x222>
  406354:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406358:	d113      	bne.n	406382 <__aeabi_dmul+0x24a>
  40635a:	ea95 0f0c 	teq	r5, ip
  40635e:	d105      	bne.n	40636c <__aeabi_dmul+0x234>
  406360:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406364:	bf1c      	itt	ne
  406366:	4610      	movne	r0, r2
  406368:	4619      	movne	r1, r3
  40636a:	d10a      	bne.n	406382 <__aeabi_dmul+0x24a>
  40636c:	ea81 0103 	eor.w	r1, r1, r3
  406370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406374:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40637c:	f04f 0000 	mov.w	r0, #0
  406380:	bd70      	pop	{r4, r5, r6, pc}
  406382:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406386:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40638a:	bd70      	pop	{r4, r5, r6, pc}

0040638c <__aeabi_ddiv>:
  40638c:	b570      	push	{r4, r5, r6, lr}
  40638e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406392:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406396:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40639a:	bf1d      	ittte	ne
  40639c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4063a0:	ea94 0f0c 	teqne	r4, ip
  4063a4:	ea95 0f0c 	teqne	r5, ip
  4063a8:	f000 f8a7 	bleq	4064fa <__aeabi_ddiv+0x16e>
  4063ac:	eba4 0405 	sub.w	r4, r4, r5
  4063b0:	ea81 0e03 	eor.w	lr, r1, r3
  4063b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4063b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4063bc:	f000 8088 	beq.w	4064d0 <__aeabi_ddiv+0x144>
  4063c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4063c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4063c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4063cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4063d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4063d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4063d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4063dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4063e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4063e4:	429d      	cmp	r5, r3
  4063e6:	bf08      	it	eq
  4063e8:	4296      	cmpeq	r6, r2
  4063ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4063ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4063f2:	d202      	bcs.n	4063fa <__aeabi_ddiv+0x6e>
  4063f4:	085b      	lsrs	r3, r3, #1
  4063f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4063fa:	1ab6      	subs	r6, r6, r2
  4063fc:	eb65 0503 	sbc.w	r5, r5, r3
  406400:	085b      	lsrs	r3, r3, #1
  406402:	ea4f 0232 	mov.w	r2, r2, rrx
  406406:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40640a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40640e:	ebb6 0e02 	subs.w	lr, r6, r2
  406412:	eb75 0e03 	sbcs.w	lr, r5, r3
  406416:	bf22      	ittt	cs
  406418:	1ab6      	subcs	r6, r6, r2
  40641a:	4675      	movcs	r5, lr
  40641c:	ea40 000c 	orrcs.w	r0, r0, ip
  406420:	085b      	lsrs	r3, r3, #1
  406422:	ea4f 0232 	mov.w	r2, r2, rrx
  406426:	ebb6 0e02 	subs.w	lr, r6, r2
  40642a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40642e:	bf22      	ittt	cs
  406430:	1ab6      	subcs	r6, r6, r2
  406432:	4675      	movcs	r5, lr
  406434:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406438:	085b      	lsrs	r3, r3, #1
  40643a:	ea4f 0232 	mov.w	r2, r2, rrx
  40643e:	ebb6 0e02 	subs.w	lr, r6, r2
  406442:	eb75 0e03 	sbcs.w	lr, r5, r3
  406446:	bf22      	ittt	cs
  406448:	1ab6      	subcs	r6, r6, r2
  40644a:	4675      	movcs	r5, lr
  40644c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406450:	085b      	lsrs	r3, r3, #1
  406452:	ea4f 0232 	mov.w	r2, r2, rrx
  406456:	ebb6 0e02 	subs.w	lr, r6, r2
  40645a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40645e:	bf22      	ittt	cs
  406460:	1ab6      	subcs	r6, r6, r2
  406462:	4675      	movcs	r5, lr
  406464:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406468:	ea55 0e06 	orrs.w	lr, r5, r6
  40646c:	d018      	beq.n	4064a0 <__aeabi_ddiv+0x114>
  40646e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406472:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406476:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40647a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40647e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406482:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406486:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40648a:	d1c0      	bne.n	40640e <__aeabi_ddiv+0x82>
  40648c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406490:	d10b      	bne.n	4064aa <__aeabi_ddiv+0x11e>
  406492:	ea41 0100 	orr.w	r1, r1, r0
  406496:	f04f 0000 	mov.w	r0, #0
  40649a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40649e:	e7b6      	b.n	40640e <__aeabi_ddiv+0x82>
  4064a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4064a4:	bf04      	itt	eq
  4064a6:	4301      	orreq	r1, r0
  4064a8:	2000      	moveq	r0, #0
  4064aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4064ae:	bf88      	it	hi
  4064b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4064b4:	f63f aeaf 	bhi.w	406216 <__aeabi_dmul+0xde>
  4064b8:	ebb5 0c03 	subs.w	ip, r5, r3
  4064bc:	bf04      	itt	eq
  4064be:	ebb6 0c02 	subseq.w	ip, r6, r2
  4064c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4064c6:	f150 0000 	adcs.w	r0, r0, #0
  4064ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4064ce:	bd70      	pop	{r4, r5, r6, pc}
  4064d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4064d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4064d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4064dc:	bfc2      	ittt	gt
  4064de:	ebd4 050c 	rsbsgt	r5, r4, ip
  4064e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4064e6:	bd70      	popgt	{r4, r5, r6, pc}
  4064e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4064ec:	f04f 0e00 	mov.w	lr, #0
  4064f0:	3c01      	subs	r4, #1
  4064f2:	e690      	b.n	406216 <__aeabi_dmul+0xde>
  4064f4:	ea45 0e06 	orr.w	lr, r5, r6
  4064f8:	e68d      	b.n	406216 <__aeabi_dmul+0xde>
  4064fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4064fe:	ea94 0f0c 	teq	r4, ip
  406502:	bf08      	it	eq
  406504:	ea95 0f0c 	teqeq	r5, ip
  406508:	f43f af3b 	beq.w	406382 <__aeabi_dmul+0x24a>
  40650c:	ea94 0f0c 	teq	r4, ip
  406510:	d10a      	bne.n	406528 <__aeabi_ddiv+0x19c>
  406512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406516:	f47f af34 	bne.w	406382 <__aeabi_dmul+0x24a>
  40651a:	ea95 0f0c 	teq	r5, ip
  40651e:	f47f af25 	bne.w	40636c <__aeabi_dmul+0x234>
  406522:	4610      	mov	r0, r2
  406524:	4619      	mov	r1, r3
  406526:	e72c      	b.n	406382 <__aeabi_dmul+0x24a>
  406528:	ea95 0f0c 	teq	r5, ip
  40652c:	d106      	bne.n	40653c <__aeabi_ddiv+0x1b0>
  40652e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406532:	f43f aefd 	beq.w	406330 <__aeabi_dmul+0x1f8>
  406536:	4610      	mov	r0, r2
  406538:	4619      	mov	r1, r3
  40653a:	e722      	b.n	406382 <__aeabi_dmul+0x24a>
  40653c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406540:	bf18      	it	ne
  406542:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406546:	f47f aec5 	bne.w	4062d4 <__aeabi_dmul+0x19c>
  40654a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40654e:	f47f af0d 	bne.w	40636c <__aeabi_dmul+0x234>
  406552:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406556:	f47f aeeb 	bne.w	406330 <__aeabi_dmul+0x1f8>
  40655a:	e712      	b.n	406382 <__aeabi_dmul+0x24a>

0040655c <__gedf2>:
  40655c:	f04f 3cff 	mov.w	ip, #4294967295
  406560:	e006      	b.n	406570 <__cmpdf2+0x4>
  406562:	bf00      	nop

00406564 <__ledf2>:
  406564:	f04f 0c01 	mov.w	ip, #1
  406568:	e002      	b.n	406570 <__cmpdf2+0x4>
  40656a:	bf00      	nop

0040656c <__cmpdf2>:
  40656c:	f04f 0c01 	mov.w	ip, #1
  406570:	f84d cd04 	str.w	ip, [sp, #-4]!
  406574:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40657c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406580:	bf18      	it	ne
  406582:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406586:	d01b      	beq.n	4065c0 <__cmpdf2+0x54>
  406588:	b001      	add	sp, #4
  40658a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40658e:	bf0c      	ite	eq
  406590:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406594:	ea91 0f03 	teqne	r1, r3
  406598:	bf02      	ittt	eq
  40659a:	ea90 0f02 	teqeq	r0, r2
  40659e:	2000      	moveq	r0, #0
  4065a0:	4770      	bxeq	lr
  4065a2:	f110 0f00 	cmn.w	r0, #0
  4065a6:	ea91 0f03 	teq	r1, r3
  4065aa:	bf58      	it	pl
  4065ac:	4299      	cmppl	r1, r3
  4065ae:	bf08      	it	eq
  4065b0:	4290      	cmpeq	r0, r2
  4065b2:	bf2c      	ite	cs
  4065b4:	17d8      	asrcs	r0, r3, #31
  4065b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4065ba:	f040 0001 	orr.w	r0, r0, #1
  4065be:	4770      	bx	lr
  4065c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4065c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4065c8:	d102      	bne.n	4065d0 <__cmpdf2+0x64>
  4065ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4065ce:	d107      	bne.n	4065e0 <__cmpdf2+0x74>
  4065d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4065d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4065d8:	d1d6      	bne.n	406588 <__cmpdf2+0x1c>
  4065da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4065de:	d0d3      	beq.n	406588 <__cmpdf2+0x1c>
  4065e0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4065e4:	4770      	bx	lr
  4065e6:	bf00      	nop

004065e8 <__aeabi_cdrcmple>:
  4065e8:	4684      	mov	ip, r0
  4065ea:	4610      	mov	r0, r2
  4065ec:	4662      	mov	r2, ip
  4065ee:	468c      	mov	ip, r1
  4065f0:	4619      	mov	r1, r3
  4065f2:	4663      	mov	r3, ip
  4065f4:	e000      	b.n	4065f8 <__aeabi_cdcmpeq>
  4065f6:	bf00      	nop

004065f8 <__aeabi_cdcmpeq>:
  4065f8:	b501      	push	{r0, lr}
  4065fa:	f7ff ffb7 	bl	40656c <__cmpdf2>
  4065fe:	2800      	cmp	r0, #0
  406600:	bf48      	it	mi
  406602:	f110 0f00 	cmnmi.w	r0, #0
  406606:	bd01      	pop	{r0, pc}

00406608 <__aeabi_dcmpeq>:
  406608:	f84d ed08 	str.w	lr, [sp, #-8]!
  40660c:	f7ff fff4 	bl	4065f8 <__aeabi_cdcmpeq>
  406610:	bf0c      	ite	eq
  406612:	2001      	moveq	r0, #1
  406614:	2000      	movne	r0, #0
  406616:	f85d fb08 	ldr.w	pc, [sp], #8
  40661a:	bf00      	nop

0040661c <__aeabi_dcmplt>:
  40661c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406620:	f7ff ffea 	bl	4065f8 <__aeabi_cdcmpeq>
  406624:	bf34      	ite	cc
  406626:	2001      	movcc	r0, #1
  406628:	2000      	movcs	r0, #0
  40662a:	f85d fb08 	ldr.w	pc, [sp], #8
  40662e:	bf00      	nop

00406630 <__aeabi_dcmple>:
  406630:	f84d ed08 	str.w	lr, [sp, #-8]!
  406634:	f7ff ffe0 	bl	4065f8 <__aeabi_cdcmpeq>
  406638:	bf94      	ite	ls
  40663a:	2001      	movls	r0, #1
  40663c:	2000      	movhi	r0, #0
  40663e:	f85d fb08 	ldr.w	pc, [sp], #8
  406642:	bf00      	nop

00406644 <__aeabi_dcmpge>:
  406644:	f84d ed08 	str.w	lr, [sp, #-8]!
  406648:	f7ff ffce 	bl	4065e8 <__aeabi_cdrcmple>
  40664c:	bf94      	ite	ls
  40664e:	2001      	movls	r0, #1
  406650:	2000      	movhi	r0, #0
  406652:	f85d fb08 	ldr.w	pc, [sp], #8
  406656:	bf00      	nop

00406658 <__aeabi_dcmpgt>:
  406658:	f84d ed08 	str.w	lr, [sp, #-8]!
  40665c:	f7ff ffc4 	bl	4065e8 <__aeabi_cdrcmple>
  406660:	bf34      	ite	cc
  406662:	2001      	movcc	r0, #1
  406664:	2000      	movcs	r0, #0
  406666:	f85d fb08 	ldr.w	pc, [sp], #8
  40666a:	bf00      	nop

0040666c <__aeabi_dcmpun>:
  40666c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406674:	d102      	bne.n	40667c <__aeabi_dcmpun+0x10>
  406676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40667a:	d10a      	bne.n	406692 <__aeabi_dcmpun+0x26>
  40667c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406684:	d102      	bne.n	40668c <__aeabi_dcmpun+0x20>
  406686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40668a:	d102      	bne.n	406692 <__aeabi_dcmpun+0x26>
  40668c:	f04f 0000 	mov.w	r0, #0
  406690:	4770      	bx	lr
  406692:	f04f 0001 	mov.w	r0, #1
  406696:	4770      	bx	lr

00406698 <__aeabi_d2f>:
  406698:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40669c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4066a0:	bf24      	itt	cs
  4066a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4066a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4066aa:	d90d      	bls.n	4066c8 <__aeabi_d2f+0x30>
  4066ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4066b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4066b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4066b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4066bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4066c0:	bf08      	it	eq
  4066c2:	f020 0001 	biceq.w	r0, r0, #1
  4066c6:	4770      	bx	lr
  4066c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4066cc:	d121      	bne.n	406712 <__aeabi_d2f+0x7a>
  4066ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4066d2:	bfbc      	itt	lt
  4066d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4066d8:	4770      	bxlt	lr
  4066da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4066de:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4066e2:	f1c2 0218 	rsb	r2, r2, #24
  4066e6:	f1c2 0c20 	rsb	ip, r2, #32
  4066ea:	fa10 f30c 	lsls.w	r3, r0, ip
  4066ee:	fa20 f002 	lsr.w	r0, r0, r2
  4066f2:	bf18      	it	ne
  4066f4:	f040 0001 	orrne.w	r0, r0, #1
  4066f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4066fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  406700:	fa03 fc0c 	lsl.w	ip, r3, ip
  406704:	ea40 000c 	orr.w	r0, r0, ip
  406708:	fa23 f302 	lsr.w	r3, r3, r2
  40670c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  406710:	e7cc      	b.n	4066ac <__aeabi_d2f+0x14>
  406712:	ea7f 5362 	mvns.w	r3, r2, asr #21
  406716:	d107      	bne.n	406728 <__aeabi_d2f+0x90>
  406718:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40671c:	bf1e      	ittt	ne
  40671e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  406722:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  406726:	4770      	bxne	lr
  406728:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40672c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406734:	4770      	bx	lr
  406736:	bf00      	nop

00406738 <__aeabi_frsub>:
  406738:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40673c:	e002      	b.n	406744 <__addsf3>
  40673e:	bf00      	nop

00406740 <__aeabi_fsub>:
  406740:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00406744 <__addsf3>:
  406744:	0042      	lsls	r2, r0, #1
  406746:	bf1f      	itttt	ne
  406748:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40674c:	ea92 0f03 	teqne	r2, r3
  406750:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  406754:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406758:	d06a      	beq.n	406830 <__addsf3+0xec>
  40675a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40675e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  406762:	bfc1      	itttt	gt
  406764:	18d2      	addgt	r2, r2, r3
  406766:	4041      	eorgt	r1, r0
  406768:	4048      	eorgt	r0, r1
  40676a:	4041      	eorgt	r1, r0
  40676c:	bfb8      	it	lt
  40676e:	425b      	neglt	r3, r3
  406770:	2b19      	cmp	r3, #25
  406772:	bf88      	it	hi
  406774:	4770      	bxhi	lr
  406776:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40677a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40677e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  406782:	bf18      	it	ne
  406784:	4240      	negne	r0, r0
  406786:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40678a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40678e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  406792:	bf18      	it	ne
  406794:	4249      	negne	r1, r1
  406796:	ea92 0f03 	teq	r2, r3
  40679a:	d03f      	beq.n	40681c <__addsf3+0xd8>
  40679c:	f1a2 0201 	sub.w	r2, r2, #1
  4067a0:	fa41 fc03 	asr.w	ip, r1, r3
  4067a4:	eb10 000c 	adds.w	r0, r0, ip
  4067a8:	f1c3 0320 	rsb	r3, r3, #32
  4067ac:	fa01 f103 	lsl.w	r1, r1, r3
  4067b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4067b4:	d502      	bpl.n	4067bc <__addsf3+0x78>
  4067b6:	4249      	negs	r1, r1
  4067b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4067bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4067c0:	d313      	bcc.n	4067ea <__addsf3+0xa6>
  4067c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4067c6:	d306      	bcc.n	4067d6 <__addsf3+0x92>
  4067c8:	0840      	lsrs	r0, r0, #1
  4067ca:	ea4f 0131 	mov.w	r1, r1, rrx
  4067ce:	f102 0201 	add.w	r2, r2, #1
  4067d2:	2afe      	cmp	r2, #254	; 0xfe
  4067d4:	d251      	bcs.n	40687a <__addsf3+0x136>
  4067d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4067da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4067de:	bf08      	it	eq
  4067e0:	f020 0001 	biceq.w	r0, r0, #1
  4067e4:	ea40 0003 	orr.w	r0, r0, r3
  4067e8:	4770      	bx	lr
  4067ea:	0049      	lsls	r1, r1, #1
  4067ec:	eb40 0000 	adc.w	r0, r0, r0
  4067f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4067f4:	f1a2 0201 	sub.w	r2, r2, #1
  4067f8:	d1ed      	bne.n	4067d6 <__addsf3+0x92>
  4067fa:	fab0 fc80 	clz	ip, r0
  4067fe:	f1ac 0c08 	sub.w	ip, ip, #8
  406802:	ebb2 020c 	subs.w	r2, r2, ip
  406806:	fa00 f00c 	lsl.w	r0, r0, ip
  40680a:	bfaa      	itet	ge
  40680c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  406810:	4252      	neglt	r2, r2
  406812:	4318      	orrge	r0, r3
  406814:	bfbc      	itt	lt
  406816:	40d0      	lsrlt	r0, r2
  406818:	4318      	orrlt	r0, r3
  40681a:	4770      	bx	lr
  40681c:	f092 0f00 	teq	r2, #0
  406820:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  406824:	bf06      	itte	eq
  406826:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40682a:	3201      	addeq	r2, #1
  40682c:	3b01      	subne	r3, #1
  40682e:	e7b5      	b.n	40679c <__addsf3+0x58>
  406830:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406834:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406838:	bf18      	it	ne
  40683a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40683e:	d021      	beq.n	406884 <__addsf3+0x140>
  406840:	ea92 0f03 	teq	r2, r3
  406844:	d004      	beq.n	406850 <__addsf3+0x10c>
  406846:	f092 0f00 	teq	r2, #0
  40684a:	bf08      	it	eq
  40684c:	4608      	moveq	r0, r1
  40684e:	4770      	bx	lr
  406850:	ea90 0f01 	teq	r0, r1
  406854:	bf1c      	itt	ne
  406856:	2000      	movne	r0, #0
  406858:	4770      	bxne	lr
  40685a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40685e:	d104      	bne.n	40686a <__addsf3+0x126>
  406860:	0040      	lsls	r0, r0, #1
  406862:	bf28      	it	cs
  406864:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  406868:	4770      	bx	lr
  40686a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40686e:	bf3c      	itt	cc
  406870:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  406874:	4770      	bxcc	lr
  406876:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40687a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40687e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406882:	4770      	bx	lr
  406884:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406888:	bf16      	itet	ne
  40688a:	4608      	movne	r0, r1
  40688c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406890:	4601      	movne	r1, r0
  406892:	0242      	lsls	r2, r0, #9
  406894:	bf06      	itte	eq
  406896:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40689a:	ea90 0f01 	teqeq	r0, r1
  40689e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4068a2:	4770      	bx	lr

004068a4 <__aeabi_ui2f>:
  4068a4:	f04f 0300 	mov.w	r3, #0
  4068a8:	e004      	b.n	4068b4 <__aeabi_i2f+0x8>
  4068aa:	bf00      	nop

004068ac <__aeabi_i2f>:
  4068ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4068b0:	bf48      	it	mi
  4068b2:	4240      	negmi	r0, r0
  4068b4:	ea5f 0c00 	movs.w	ip, r0
  4068b8:	bf08      	it	eq
  4068ba:	4770      	bxeq	lr
  4068bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4068c0:	4601      	mov	r1, r0
  4068c2:	f04f 0000 	mov.w	r0, #0
  4068c6:	e01c      	b.n	406902 <__aeabi_l2f+0x2a>

004068c8 <__aeabi_ul2f>:
  4068c8:	ea50 0201 	orrs.w	r2, r0, r1
  4068cc:	bf08      	it	eq
  4068ce:	4770      	bxeq	lr
  4068d0:	f04f 0300 	mov.w	r3, #0
  4068d4:	e00a      	b.n	4068ec <__aeabi_l2f+0x14>
  4068d6:	bf00      	nop

004068d8 <__aeabi_l2f>:
  4068d8:	ea50 0201 	orrs.w	r2, r0, r1
  4068dc:	bf08      	it	eq
  4068de:	4770      	bxeq	lr
  4068e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4068e4:	d502      	bpl.n	4068ec <__aeabi_l2f+0x14>
  4068e6:	4240      	negs	r0, r0
  4068e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4068ec:	ea5f 0c01 	movs.w	ip, r1
  4068f0:	bf02      	ittt	eq
  4068f2:	4684      	moveq	ip, r0
  4068f4:	4601      	moveq	r1, r0
  4068f6:	2000      	moveq	r0, #0
  4068f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4068fc:	bf08      	it	eq
  4068fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  406902:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  406906:	fabc f28c 	clz	r2, ip
  40690a:	3a08      	subs	r2, #8
  40690c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  406910:	db10      	blt.n	406934 <__aeabi_l2f+0x5c>
  406912:	fa01 fc02 	lsl.w	ip, r1, r2
  406916:	4463      	add	r3, ip
  406918:	fa00 fc02 	lsl.w	ip, r0, r2
  40691c:	f1c2 0220 	rsb	r2, r2, #32
  406920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406924:	fa20 f202 	lsr.w	r2, r0, r2
  406928:	eb43 0002 	adc.w	r0, r3, r2
  40692c:	bf08      	it	eq
  40692e:	f020 0001 	biceq.w	r0, r0, #1
  406932:	4770      	bx	lr
  406934:	f102 0220 	add.w	r2, r2, #32
  406938:	fa01 fc02 	lsl.w	ip, r1, r2
  40693c:	f1c2 0220 	rsb	r2, r2, #32
  406940:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  406944:	fa21 f202 	lsr.w	r2, r1, r2
  406948:	eb43 0002 	adc.w	r0, r3, r2
  40694c:	bf08      	it	eq
  40694e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406952:	4770      	bx	lr

00406954 <__aeabi_fmul>:
  406954:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406958:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40695c:	bf1e      	ittt	ne
  40695e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406962:	ea92 0f0c 	teqne	r2, ip
  406966:	ea93 0f0c 	teqne	r3, ip
  40696a:	d06f      	beq.n	406a4c <__aeabi_fmul+0xf8>
  40696c:	441a      	add	r2, r3
  40696e:	ea80 0c01 	eor.w	ip, r0, r1
  406972:	0240      	lsls	r0, r0, #9
  406974:	bf18      	it	ne
  406976:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40697a:	d01e      	beq.n	4069ba <__aeabi_fmul+0x66>
  40697c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406980:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406984:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406988:	fba0 3101 	umull	r3, r1, r0, r1
  40698c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406990:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406994:	bf3e      	ittt	cc
  406996:	0049      	lslcc	r1, r1, #1
  406998:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40699c:	005b      	lslcc	r3, r3, #1
  40699e:	ea40 0001 	orr.w	r0, r0, r1
  4069a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4069a6:	2afd      	cmp	r2, #253	; 0xfd
  4069a8:	d81d      	bhi.n	4069e6 <__aeabi_fmul+0x92>
  4069aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4069ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4069b2:	bf08      	it	eq
  4069b4:	f020 0001 	biceq.w	r0, r0, #1
  4069b8:	4770      	bx	lr
  4069ba:	f090 0f00 	teq	r0, #0
  4069be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4069c2:	bf08      	it	eq
  4069c4:	0249      	lsleq	r1, r1, #9
  4069c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4069ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4069ce:	3a7f      	subs	r2, #127	; 0x7f
  4069d0:	bfc2      	ittt	gt
  4069d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4069d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4069da:	4770      	bxgt	lr
  4069dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4069e0:	f04f 0300 	mov.w	r3, #0
  4069e4:	3a01      	subs	r2, #1
  4069e6:	dc5d      	bgt.n	406aa4 <__aeabi_fmul+0x150>
  4069e8:	f112 0f19 	cmn.w	r2, #25
  4069ec:	bfdc      	itt	le
  4069ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4069f2:	4770      	bxle	lr
  4069f4:	f1c2 0200 	rsb	r2, r2, #0
  4069f8:	0041      	lsls	r1, r0, #1
  4069fa:	fa21 f102 	lsr.w	r1, r1, r2
  4069fe:	f1c2 0220 	rsb	r2, r2, #32
  406a02:	fa00 fc02 	lsl.w	ip, r0, r2
  406a06:	ea5f 0031 	movs.w	r0, r1, rrx
  406a0a:	f140 0000 	adc.w	r0, r0, #0
  406a0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  406a12:	bf08      	it	eq
  406a14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406a18:	4770      	bx	lr
  406a1a:	f092 0f00 	teq	r2, #0
  406a1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406a22:	bf02      	ittt	eq
  406a24:	0040      	lsleq	r0, r0, #1
  406a26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406a2a:	3a01      	subeq	r2, #1
  406a2c:	d0f9      	beq.n	406a22 <__aeabi_fmul+0xce>
  406a2e:	ea40 000c 	orr.w	r0, r0, ip
  406a32:	f093 0f00 	teq	r3, #0
  406a36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406a3a:	bf02      	ittt	eq
  406a3c:	0049      	lsleq	r1, r1, #1
  406a3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406a42:	3b01      	subeq	r3, #1
  406a44:	d0f9      	beq.n	406a3a <__aeabi_fmul+0xe6>
  406a46:	ea41 010c 	orr.w	r1, r1, ip
  406a4a:	e78f      	b.n	40696c <__aeabi_fmul+0x18>
  406a4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406a50:	ea92 0f0c 	teq	r2, ip
  406a54:	bf18      	it	ne
  406a56:	ea93 0f0c 	teqne	r3, ip
  406a5a:	d00a      	beq.n	406a72 <__aeabi_fmul+0x11e>
  406a5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406a60:	bf18      	it	ne
  406a62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406a66:	d1d8      	bne.n	406a1a <__aeabi_fmul+0xc6>
  406a68:	ea80 0001 	eor.w	r0, r0, r1
  406a6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406a70:	4770      	bx	lr
  406a72:	f090 0f00 	teq	r0, #0
  406a76:	bf17      	itett	ne
  406a78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406a7c:	4608      	moveq	r0, r1
  406a7e:	f091 0f00 	teqne	r1, #0
  406a82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  406a86:	d014      	beq.n	406ab2 <__aeabi_fmul+0x15e>
  406a88:	ea92 0f0c 	teq	r2, ip
  406a8c:	d101      	bne.n	406a92 <__aeabi_fmul+0x13e>
  406a8e:	0242      	lsls	r2, r0, #9
  406a90:	d10f      	bne.n	406ab2 <__aeabi_fmul+0x15e>
  406a92:	ea93 0f0c 	teq	r3, ip
  406a96:	d103      	bne.n	406aa0 <__aeabi_fmul+0x14c>
  406a98:	024b      	lsls	r3, r1, #9
  406a9a:	bf18      	it	ne
  406a9c:	4608      	movne	r0, r1
  406a9e:	d108      	bne.n	406ab2 <__aeabi_fmul+0x15e>
  406aa0:	ea80 0001 	eor.w	r0, r0, r1
  406aa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406ab0:	4770      	bx	lr
  406ab2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406ab6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406aba:	4770      	bx	lr

00406abc <__aeabi_fdiv>:
  406abc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406ac0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406ac4:	bf1e      	ittt	ne
  406ac6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406aca:	ea92 0f0c 	teqne	r2, ip
  406ace:	ea93 0f0c 	teqne	r3, ip
  406ad2:	d069      	beq.n	406ba8 <__aeabi_fdiv+0xec>
  406ad4:	eba2 0203 	sub.w	r2, r2, r3
  406ad8:	ea80 0c01 	eor.w	ip, r0, r1
  406adc:	0249      	lsls	r1, r1, #9
  406ade:	ea4f 2040 	mov.w	r0, r0, lsl #9
  406ae2:	d037      	beq.n	406b54 <__aeabi_fdiv+0x98>
  406ae4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406ae8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406aec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406af0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406af4:	428b      	cmp	r3, r1
  406af6:	bf38      	it	cc
  406af8:	005b      	lslcc	r3, r3, #1
  406afa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  406afe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  406b02:	428b      	cmp	r3, r1
  406b04:	bf24      	itt	cs
  406b06:	1a5b      	subcs	r3, r3, r1
  406b08:	ea40 000c 	orrcs.w	r0, r0, ip
  406b0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  406b10:	bf24      	itt	cs
  406b12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  406b16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406b1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  406b1e:	bf24      	itt	cs
  406b20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  406b24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406b28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  406b2c:	bf24      	itt	cs
  406b2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  406b32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406b36:	011b      	lsls	r3, r3, #4
  406b38:	bf18      	it	ne
  406b3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  406b3e:	d1e0      	bne.n	406b02 <__aeabi_fdiv+0x46>
  406b40:	2afd      	cmp	r2, #253	; 0xfd
  406b42:	f63f af50 	bhi.w	4069e6 <__aeabi_fmul+0x92>
  406b46:	428b      	cmp	r3, r1
  406b48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406b4c:	bf08      	it	eq
  406b4e:	f020 0001 	biceq.w	r0, r0, #1
  406b52:	4770      	bx	lr
  406b54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406b58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406b5c:	327f      	adds	r2, #127	; 0x7f
  406b5e:	bfc2      	ittt	gt
  406b60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406b64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406b68:	4770      	bxgt	lr
  406b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406b6e:	f04f 0300 	mov.w	r3, #0
  406b72:	3a01      	subs	r2, #1
  406b74:	e737      	b.n	4069e6 <__aeabi_fmul+0x92>
  406b76:	f092 0f00 	teq	r2, #0
  406b7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406b7e:	bf02      	ittt	eq
  406b80:	0040      	lsleq	r0, r0, #1
  406b82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406b86:	3a01      	subeq	r2, #1
  406b88:	d0f9      	beq.n	406b7e <__aeabi_fdiv+0xc2>
  406b8a:	ea40 000c 	orr.w	r0, r0, ip
  406b8e:	f093 0f00 	teq	r3, #0
  406b92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406b96:	bf02      	ittt	eq
  406b98:	0049      	lsleq	r1, r1, #1
  406b9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406b9e:	3b01      	subeq	r3, #1
  406ba0:	d0f9      	beq.n	406b96 <__aeabi_fdiv+0xda>
  406ba2:	ea41 010c 	orr.w	r1, r1, ip
  406ba6:	e795      	b.n	406ad4 <__aeabi_fdiv+0x18>
  406ba8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406bac:	ea92 0f0c 	teq	r2, ip
  406bb0:	d108      	bne.n	406bc4 <__aeabi_fdiv+0x108>
  406bb2:	0242      	lsls	r2, r0, #9
  406bb4:	f47f af7d 	bne.w	406ab2 <__aeabi_fmul+0x15e>
  406bb8:	ea93 0f0c 	teq	r3, ip
  406bbc:	f47f af70 	bne.w	406aa0 <__aeabi_fmul+0x14c>
  406bc0:	4608      	mov	r0, r1
  406bc2:	e776      	b.n	406ab2 <__aeabi_fmul+0x15e>
  406bc4:	ea93 0f0c 	teq	r3, ip
  406bc8:	d104      	bne.n	406bd4 <__aeabi_fdiv+0x118>
  406bca:	024b      	lsls	r3, r1, #9
  406bcc:	f43f af4c 	beq.w	406a68 <__aeabi_fmul+0x114>
  406bd0:	4608      	mov	r0, r1
  406bd2:	e76e      	b.n	406ab2 <__aeabi_fmul+0x15e>
  406bd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406bd8:	bf18      	it	ne
  406bda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406bde:	d1ca      	bne.n	406b76 <__aeabi_fdiv+0xba>
  406be0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406be4:	f47f af5c 	bne.w	406aa0 <__aeabi_fmul+0x14c>
  406be8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406bec:	f47f af3c 	bne.w	406a68 <__aeabi_fmul+0x114>
  406bf0:	e75f      	b.n	406ab2 <__aeabi_fmul+0x15e>
  406bf2:	bf00      	nop

00406bf4 <__gesf2>:
  406bf4:	f04f 3cff 	mov.w	ip, #4294967295
  406bf8:	e006      	b.n	406c08 <__cmpsf2+0x4>
  406bfa:	bf00      	nop

00406bfc <__lesf2>:
  406bfc:	f04f 0c01 	mov.w	ip, #1
  406c00:	e002      	b.n	406c08 <__cmpsf2+0x4>
  406c02:	bf00      	nop

00406c04 <__cmpsf2>:
  406c04:	f04f 0c01 	mov.w	ip, #1
  406c08:	f84d cd04 	str.w	ip, [sp, #-4]!
  406c0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406c18:	bf18      	it	ne
  406c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406c1e:	d011      	beq.n	406c44 <__cmpsf2+0x40>
  406c20:	b001      	add	sp, #4
  406c22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  406c26:	bf18      	it	ne
  406c28:	ea90 0f01 	teqne	r0, r1
  406c2c:	bf58      	it	pl
  406c2e:	ebb2 0003 	subspl.w	r0, r2, r3
  406c32:	bf88      	it	hi
  406c34:	17c8      	asrhi	r0, r1, #31
  406c36:	bf38      	it	cc
  406c38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  406c3c:	bf18      	it	ne
  406c3e:	f040 0001 	orrne.w	r0, r0, #1
  406c42:	4770      	bx	lr
  406c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406c48:	d102      	bne.n	406c50 <__cmpsf2+0x4c>
  406c4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406c4e:	d105      	bne.n	406c5c <__cmpsf2+0x58>
  406c50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406c54:	d1e4      	bne.n	406c20 <__cmpsf2+0x1c>
  406c56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406c5a:	d0e1      	beq.n	406c20 <__cmpsf2+0x1c>
  406c5c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406c60:	4770      	bx	lr
  406c62:	bf00      	nop

00406c64 <__aeabi_cfrcmple>:
  406c64:	4684      	mov	ip, r0
  406c66:	4608      	mov	r0, r1
  406c68:	4661      	mov	r1, ip
  406c6a:	e7ff      	b.n	406c6c <__aeabi_cfcmpeq>

00406c6c <__aeabi_cfcmpeq>:
  406c6c:	b50f      	push	{r0, r1, r2, r3, lr}
  406c6e:	f7ff ffc9 	bl	406c04 <__cmpsf2>
  406c72:	2800      	cmp	r0, #0
  406c74:	bf48      	it	mi
  406c76:	f110 0f00 	cmnmi.w	r0, #0
  406c7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406c7c <__aeabi_fcmpeq>:
  406c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c80:	f7ff fff4 	bl	406c6c <__aeabi_cfcmpeq>
  406c84:	bf0c      	ite	eq
  406c86:	2001      	moveq	r0, #1
  406c88:	2000      	movne	r0, #0
  406c8a:	f85d fb08 	ldr.w	pc, [sp], #8
  406c8e:	bf00      	nop

00406c90 <__aeabi_fcmplt>:
  406c90:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c94:	f7ff ffea 	bl	406c6c <__aeabi_cfcmpeq>
  406c98:	bf34      	ite	cc
  406c9a:	2001      	movcc	r0, #1
  406c9c:	2000      	movcs	r0, #0
  406c9e:	f85d fb08 	ldr.w	pc, [sp], #8
  406ca2:	bf00      	nop

00406ca4 <__aeabi_fcmple>:
  406ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
  406ca8:	f7ff ffe0 	bl	406c6c <__aeabi_cfcmpeq>
  406cac:	bf94      	ite	ls
  406cae:	2001      	movls	r0, #1
  406cb0:	2000      	movhi	r0, #0
  406cb2:	f85d fb08 	ldr.w	pc, [sp], #8
  406cb6:	bf00      	nop

00406cb8 <__aeabi_fcmpge>:
  406cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  406cbc:	f7ff ffd2 	bl	406c64 <__aeabi_cfrcmple>
  406cc0:	bf94      	ite	ls
  406cc2:	2001      	movls	r0, #1
  406cc4:	2000      	movhi	r0, #0
  406cc6:	f85d fb08 	ldr.w	pc, [sp], #8
  406cca:	bf00      	nop

00406ccc <__aeabi_fcmpgt>:
  406ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
  406cd0:	f7ff ffc8 	bl	406c64 <__aeabi_cfrcmple>
  406cd4:	bf34      	ite	cc
  406cd6:	2001      	movcc	r0, #1
  406cd8:	2000      	movcs	r0, #0
  406cda:	f85d fb08 	ldr.w	pc, [sp], #8
  406cde:	bf00      	nop

00406ce0 <__aeabi_fcmpun>:
  406ce0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406ce4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406ce8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406cec:	d102      	bne.n	406cf4 <__aeabi_fcmpun+0x14>
  406cee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406cf2:	d108      	bne.n	406d06 <__aeabi_fcmpun+0x26>
  406cf4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406cf8:	d102      	bne.n	406d00 <__aeabi_fcmpun+0x20>
  406cfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406cfe:	d102      	bne.n	406d06 <__aeabi_fcmpun+0x26>
  406d00:	f04f 0000 	mov.w	r0, #0
  406d04:	4770      	bx	lr
  406d06:	f04f 0001 	mov.w	r0, #1
  406d0a:	4770      	bx	lr

00406d0c <__aeabi_f2iz>:
  406d0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406d10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406d14:	d30f      	bcc.n	406d36 <__aeabi_f2iz+0x2a>
  406d16:	f04f 039e 	mov.w	r3, #158	; 0x9e
  406d1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406d1e:	d90d      	bls.n	406d3c <__aeabi_f2iz+0x30>
  406d20:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406d28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406d2c:	fa23 f002 	lsr.w	r0, r3, r2
  406d30:	bf18      	it	ne
  406d32:	4240      	negne	r0, r0
  406d34:	4770      	bx	lr
  406d36:	f04f 0000 	mov.w	r0, #0
  406d3a:	4770      	bx	lr
  406d3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  406d40:	d101      	bne.n	406d46 <__aeabi_f2iz+0x3a>
  406d42:	0242      	lsls	r2, r0, #9
  406d44:	d105      	bne.n	406d52 <__aeabi_f2iz+0x46>
  406d46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  406d4a:	bf08      	it	eq
  406d4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406d50:	4770      	bx	lr
  406d52:	f04f 0000 	mov.w	r0, #0
  406d56:	4770      	bx	lr

00406d58 <__errno>:
  406d58:	4b01      	ldr	r3, [pc, #4]	; (406d60 <__errno+0x8>)
  406d5a:	6818      	ldr	r0, [r3, #0]
  406d5c:	4770      	bx	lr
  406d5e:	bf00      	nop
  406d60:	20400028 	.word	0x20400028

00406d64 <__libc_init_array>:
  406d64:	b570      	push	{r4, r5, r6, lr}
  406d66:	4e0f      	ldr	r6, [pc, #60]	; (406da4 <__libc_init_array+0x40>)
  406d68:	4d0f      	ldr	r5, [pc, #60]	; (406da8 <__libc_init_array+0x44>)
  406d6a:	1b76      	subs	r6, r6, r5
  406d6c:	10b6      	asrs	r6, r6, #2
  406d6e:	bf18      	it	ne
  406d70:	2400      	movne	r4, #0
  406d72:	d005      	beq.n	406d80 <__libc_init_array+0x1c>
  406d74:	3401      	adds	r4, #1
  406d76:	f855 3b04 	ldr.w	r3, [r5], #4
  406d7a:	4798      	blx	r3
  406d7c:	42a6      	cmp	r6, r4
  406d7e:	d1f9      	bne.n	406d74 <__libc_init_array+0x10>
  406d80:	4e0a      	ldr	r6, [pc, #40]	; (406dac <__libc_init_array+0x48>)
  406d82:	4d0b      	ldr	r5, [pc, #44]	; (406db0 <__libc_init_array+0x4c>)
  406d84:	1b76      	subs	r6, r6, r5
  406d86:	f005 fceb 	bl	40c760 <_init>
  406d8a:	10b6      	asrs	r6, r6, #2
  406d8c:	bf18      	it	ne
  406d8e:	2400      	movne	r4, #0
  406d90:	d006      	beq.n	406da0 <__libc_init_array+0x3c>
  406d92:	3401      	adds	r4, #1
  406d94:	f855 3b04 	ldr.w	r3, [r5], #4
  406d98:	4798      	blx	r3
  406d9a:	42a6      	cmp	r6, r4
  406d9c:	d1f9      	bne.n	406d92 <__libc_init_array+0x2e>
  406d9e:	bd70      	pop	{r4, r5, r6, pc}
  406da0:	bd70      	pop	{r4, r5, r6, pc}
  406da2:	bf00      	nop
  406da4:	0040c76c 	.word	0x0040c76c
  406da8:	0040c76c 	.word	0x0040c76c
  406dac:	0040c774 	.word	0x0040c774
  406db0:	0040c76c 	.word	0x0040c76c

00406db4 <malloc>:
  406db4:	4b02      	ldr	r3, [pc, #8]	; (406dc0 <malloc+0xc>)
  406db6:	4601      	mov	r1, r0
  406db8:	6818      	ldr	r0, [r3, #0]
  406dba:	f000 b80b 	b.w	406dd4 <_malloc_r>
  406dbe:	bf00      	nop
  406dc0:	20400028 	.word	0x20400028

00406dc4 <free>:
  406dc4:	4b02      	ldr	r3, [pc, #8]	; (406dd0 <free+0xc>)
  406dc6:	4601      	mov	r1, r0
  406dc8:	6818      	ldr	r0, [r3, #0]
  406dca:	f003 ba21 	b.w	40a210 <_free_r>
  406dce:	bf00      	nop
  406dd0:	20400028 	.word	0x20400028

00406dd4 <_malloc_r>:
  406dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dd8:	f101 060b 	add.w	r6, r1, #11
  406ddc:	2e16      	cmp	r6, #22
  406dde:	b083      	sub	sp, #12
  406de0:	4605      	mov	r5, r0
  406de2:	f240 809e 	bls.w	406f22 <_malloc_r+0x14e>
  406de6:	f036 0607 	bics.w	r6, r6, #7
  406dea:	f100 80bd 	bmi.w	406f68 <_malloc_r+0x194>
  406dee:	42b1      	cmp	r1, r6
  406df0:	f200 80ba 	bhi.w	406f68 <_malloc_r+0x194>
  406df4:	f000 fb86 	bl	407504 <__malloc_lock>
  406df8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406dfc:	f0c0 8293 	bcc.w	407326 <_malloc_r+0x552>
  406e00:	0a73      	lsrs	r3, r6, #9
  406e02:	f000 80b8 	beq.w	406f76 <_malloc_r+0x1a2>
  406e06:	2b04      	cmp	r3, #4
  406e08:	f200 8179 	bhi.w	4070fe <_malloc_r+0x32a>
  406e0c:	09b3      	lsrs	r3, r6, #6
  406e0e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406e12:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406e16:	00c3      	lsls	r3, r0, #3
  406e18:	4fbf      	ldr	r7, [pc, #764]	; (407118 <_malloc_r+0x344>)
  406e1a:	443b      	add	r3, r7
  406e1c:	f1a3 0108 	sub.w	r1, r3, #8
  406e20:	685c      	ldr	r4, [r3, #4]
  406e22:	42a1      	cmp	r1, r4
  406e24:	d106      	bne.n	406e34 <_malloc_r+0x60>
  406e26:	e00c      	b.n	406e42 <_malloc_r+0x6e>
  406e28:	2a00      	cmp	r2, #0
  406e2a:	f280 80aa 	bge.w	406f82 <_malloc_r+0x1ae>
  406e2e:	68e4      	ldr	r4, [r4, #12]
  406e30:	42a1      	cmp	r1, r4
  406e32:	d006      	beq.n	406e42 <_malloc_r+0x6e>
  406e34:	6863      	ldr	r3, [r4, #4]
  406e36:	f023 0303 	bic.w	r3, r3, #3
  406e3a:	1b9a      	subs	r2, r3, r6
  406e3c:	2a0f      	cmp	r2, #15
  406e3e:	ddf3      	ble.n	406e28 <_malloc_r+0x54>
  406e40:	4670      	mov	r0, lr
  406e42:	693c      	ldr	r4, [r7, #16]
  406e44:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40712c <_malloc_r+0x358>
  406e48:	4574      	cmp	r4, lr
  406e4a:	f000 81ab 	beq.w	4071a4 <_malloc_r+0x3d0>
  406e4e:	6863      	ldr	r3, [r4, #4]
  406e50:	f023 0303 	bic.w	r3, r3, #3
  406e54:	1b9a      	subs	r2, r3, r6
  406e56:	2a0f      	cmp	r2, #15
  406e58:	f300 8190 	bgt.w	40717c <_malloc_r+0x3a8>
  406e5c:	2a00      	cmp	r2, #0
  406e5e:	f8c7 e014 	str.w	lr, [r7, #20]
  406e62:	f8c7 e010 	str.w	lr, [r7, #16]
  406e66:	f280 809d 	bge.w	406fa4 <_malloc_r+0x1d0>
  406e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406e6e:	f080 8161 	bcs.w	407134 <_malloc_r+0x360>
  406e72:	08db      	lsrs	r3, r3, #3
  406e74:	f103 0c01 	add.w	ip, r3, #1
  406e78:	1099      	asrs	r1, r3, #2
  406e7a:	687a      	ldr	r2, [r7, #4]
  406e7c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406e80:	f8c4 8008 	str.w	r8, [r4, #8]
  406e84:	2301      	movs	r3, #1
  406e86:	408b      	lsls	r3, r1
  406e88:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406e8c:	4313      	orrs	r3, r2
  406e8e:	3908      	subs	r1, #8
  406e90:	60e1      	str	r1, [r4, #12]
  406e92:	607b      	str	r3, [r7, #4]
  406e94:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406e98:	f8c8 400c 	str.w	r4, [r8, #12]
  406e9c:	1082      	asrs	r2, r0, #2
  406e9e:	2401      	movs	r4, #1
  406ea0:	4094      	lsls	r4, r2
  406ea2:	429c      	cmp	r4, r3
  406ea4:	f200 808b 	bhi.w	406fbe <_malloc_r+0x1ea>
  406ea8:	421c      	tst	r4, r3
  406eaa:	d106      	bne.n	406eba <_malloc_r+0xe6>
  406eac:	f020 0003 	bic.w	r0, r0, #3
  406eb0:	0064      	lsls	r4, r4, #1
  406eb2:	421c      	tst	r4, r3
  406eb4:	f100 0004 	add.w	r0, r0, #4
  406eb8:	d0fa      	beq.n	406eb0 <_malloc_r+0xdc>
  406eba:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406ebe:	46cc      	mov	ip, r9
  406ec0:	4680      	mov	r8, r0
  406ec2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406ec6:	459c      	cmp	ip, r3
  406ec8:	d107      	bne.n	406eda <_malloc_r+0x106>
  406eca:	e16d      	b.n	4071a8 <_malloc_r+0x3d4>
  406ecc:	2a00      	cmp	r2, #0
  406ece:	f280 817b 	bge.w	4071c8 <_malloc_r+0x3f4>
  406ed2:	68db      	ldr	r3, [r3, #12]
  406ed4:	459c      	cmp	ip, r3
  406ed6:	f000 8167 	beq.w	4071a8 <_malloc_r+0x3d4>
  406eda:	6859      	ldr	r1, [r3, #4]
  406edc:	f021 0103 	bic.w	r1, r1, #3
  406ee0:	1b8a      	subs	r2, r1, r6
  406ee2:	2a0f      	cmp	r2, #15
  406ee4:	ddf2      	ble.n	406ecc <_malloc_r+0xf8>
  406ee6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406eea:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406eee:	9300      	str	r3, [sp, #0]
  406ef0:	199c      	adds	r4, r3, r6
  406ef2:	4628      	mov	r0, r5
  406ef4:	f046 0601 	orr.w	r6, r6, #1
  406ef8:	f042 0501 	orr.w	r5, r2, #1
  406efc:	605e      	str	r6, [r3, #4]
  406efe:	f8c8 c00c 	str.w	ip, [r8, #12]
  406f02:	f8cc 8008 	str.w	r8, [ip, #8]
  406f06:	617c      	str	r4, [r7, #20]
  406f08:	613c      	str	r4, [r7, #16]
  406f0a:	f8c4 e00c 	str.w	lr, [r4, #12]
  406f0e:	f8c4 e008 	str.w	lr, [r4, #8]
  406f12:	6065      	str	r5, [r4, #4]
  406f14:	505a      	str	r2, [r3, r1]
  406f16:	f000 fafb 	bl	407510 <__malloc_unlock>
  406f1a:	9b00      	ldr	r3, [sp, #0]
  406f1c:	f103 0408 	add.w	r4, r3, #8
  406f20:	e01e      	b.n	406f60 <_malloc_r+0x18c>
  406f22:	2910      	cmp	r1, #16
  406f24:	d820      	bhi.n	406f68 <_malloc_r+0x194>
  406f26:	f000 faed 	bl	407504 <__malloc_lock>
  406f2a:	2610      	movs	r6, #16
  406f2c:	2318      	movs	r3, #24
  406f2e:	2002      	movs	r0, #2
  406f30:	4f79      	ldr	r7, [pc, #484]	; (407118 <_malloc_r+0x344>)
  406f32:	443b      	add	r3, r7
  406f34:	f1a3 0208 	sub.w	r2, r3, #8
  406f38:	685c      	ldr	r4, [r3, #4]
  406f3a:	4294      	cmp	r4, r2
  406f3c:	f000 813d 	beq.w	4071ba <_malloc_r+0x3e6>
  406f40:	6863      	ldr	r3, [r4, #4]
  406f42:	68e1      	ldr	r1, [r4, #12]
  406f44:	68a6      	ldr	r6, [r4, #8]
  406f46:	f023 0303 	bic.w	r3, r3, #3
  406f4a:	4423      	add	r3, r4
  406f4c:	4628      	mov	r0, r5
  406f4e:	685a      	ldr	r2, [r3, #4]
  406f50:	60f1      	str	r1, [r6, #12]
  406f52:	f042 0201 	orr.w	r2, r2, #1
  406f56:	608e      	str	r6, [r1, #8]
  406f58:	605a      	str	r2, [r3, #4]
  406f5a:	f000 fad9 	bl	407510 <__malloc_unlock>
  406f5e:	3408      	adds	r4, #8
  406f60:	4620      	mov	r0, r4
  406f62:	b003      	add	sp, #12
  406f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f68:	2400      	movs	r4, #0
  406f6a:	230c      	movs	r3, #12
  406f6c:	4620      	mov	r0, r4
  406f6e:	602b      	str	r3, [r5, #0]
  406f70:	b003      	add	sp, #12
  406f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f76:	2040      	movs	r0, #64	; 0x40
  406f78:	f44f 7300 	mov.w	r3, #512	; 0x200
  406f7c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406f80:	e74a      	b.n	406e18 <_malloc_r+0x44>
  406f82:	4423      	add	r3, r4
  406f84:	68e1      	ldr	r1, [r4, #12]
  406f86:	685a      	ldr	r2, [r3, #4]
  406f88:	68a6      	ldr	r6, [r4, #8]
  406f8a:	f042 0201 	orr.w	r2, r2, #1
  406f8e:	60f1      	str	r1, [r6, #12]
  406f90:	4628      	mov	r0, r5
  406f92:	608e      	str	r6, [r1, #8]
  406f94:	605a      	str	r2, [r3, #4]
  406f96:	f000 fabb 	bl	407510 <__malloc_unlock>
  406f9a:	3408      	adds	r4, #8
  406f9c:	4620      	mov	r0, r4
  406f9e:	b003      	add	sp, #12
  406fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fa4:	4423      	add	r3, r4
  406fa6:	4628      	mov	r0, r5
  406fa8:	685a      	ldr	r2, [r3, #4]
  406faa:	f042 0201 	orr.w	r2, r2, #1
  406fae:	605a      	str	r2, [r3, #4]
  406fb0:	f000 faae 	bl	407510 <__malloc_unlock>
  406fb4:	3408      	adds	r4, #8
  406fb6:	4620      	mov	r0, r4
  406fb8:	b003      	add	sp, #12
  406fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fbe:	68bc      	ldr	r4, [r7, #8]
  406fc0:	6863      	ldr	r3, [r4, #4]
  406fc2:	f023 0803 	bic.w	r8, r3, #3
  406fc6:	45b0      	cmp	r8, r6
  406fc8:	d304      	bcc.n	406fd4 <_malloc_r+0x200>
  406fca:	eba8 0306 	sub.w	r3, r8, r6
  406fce:	2b0f      	cmp	r3, #15
  406fd0:	f300 8085 	bgt.w	4070de <_malloc_r+0x30a>
  406fd4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407130 <_malloc_r+0x35c>
  406fd8:	4b50      	ldr	r3, [pc, #320]	; (40711c <_malloc_r+0x348>)
  406fda:	f8d9 2000 	ldr.w	r2, [r9]
  406fde:	681b      	ldr	r3, [r3, #0]
  406fe0:	3201      	adds	r2, #1
  406fe2:	4433      	add	r3, r6
  406fe4:	eb04 0a08 	add.w	sl, r4, r8
  406fe8:	f000 8155 	beq.w	407296 <_malloc_r+0x4c2>
  406fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406ff0:	330f      	adds	r3, #15
  406ff2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406ff6:	f02b 0b0f 	bic.w	fp, fp, #15
  406ffa:	4659      	mov	r1, fp
  406ffc:	4628      	mov	r0, r5
  406ffe:	f000 faf7 	bl	4075f0 <_sbrk_r>
  407002:	1c41      	adds	r1, r0, #1
  407004:	4602      	mov	r2, r0
  407006:	f000 80fc 	beq.w	407202 <_malloc_r+0x42e>
  40700a:	4582      	cmp	sl, r0
  40700c:	f200 80f7 	bhi.w	4071fe <_malloc_r+0x42a>
  407010:	4b43      	ldr	r3, [pc, #268]	; (407120 <_malloc_r+0x34c>)
  407012:	6819      	ldr	r1, [r3, #0]
  407014:	4459      	add	r1, fp
  407016:	6019      	str	r1, [r3, #0]
  407018:	f000 814d 	beq.w	4072b6 <_malloc_r+0x4e2>
  40701c:	f8d9 0000 	ldr.w	r0, [r9]
  407020:	3001      	adds	r0, #1
  407022:	bf1b      	ittet	ne
  407024:	eba2 0a0a 	subne.w	sl, r2, sl
  407028:	4451      	addne	r1, sl
  40702a:	f8c9 2000 	streq.w	r2, [r9]
  40702e:	6019      	strne	r1, [r3, #0]
  407030:	f012 0107 	ands.w	r1, r2, #7
  407034:	f000 8115 	beq.w	407262 <_malloc_r+0x48e>
  407038:	f1c1 0008 	rsb	r0, r1, #8
  40703c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407040:	4402      	add	r2, r0
  407042:	3108      	adds	r1, #8
  407044:	eb02 090b 	add.w	r9, r2, fp
  407048:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40704c:	eba1 0909 	sub.w	r9, r1, r9
  407050:	4649      	mov	r1, r9
  407052:	4628      	mov	r0, r5
  407054:	9301      	str	r3, [sp, #4]
  407056:	9200      	str	r2, [sp, #0]
  407058:	f000 faca 	bl	4075f0 <_sbrk_r>
  40705c:	1c43      	adds	r3, r0, #1
  40705e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407062:	f000 8143 	beq.w	4072ec <_malloc_r+0x518>
  407066:	1a80      	subs	r0, r0, r2
  407068:	4448      	add	r0, r9
  40706a:	f040 0001 	orr.w	r0, r0, #1
  40706e:	6819      	ldr	r1, [r3, #0]
  407070:	60ba      	str	r2, [r7, #8]
  407072:	4449      	add	r1, r9
  407074:	42bc      	cmp	r4, r7
  407076:	6050      	str	r0, [r2, #4]
  407078:	6019      	str	r1, [r3, #0]
  40707a:	d017      	beq.n	4070ac <_malloc_r+0x2d8>
  40707c:	f1b8 0f0f 	cmp.w	r8, #15
  407080:	f240 80fb 	bls.w	40727a <_malloc_r+0x4a6>
  407084:	6860      	ldr	r0, [r4, #4]
  407086:	f1a8 020c 	sub.w	r2, r8, #12
  40708a:	f022 0207 	bic.w	r2, r2, #7
  40708e:	eb04 0e02 	add.w	lr, r4, r2
  407092:	f000 0001 	and.w	r0, r0, #1
  407096:	f04f 0c05 	mov.w	ip, #5
  40709a:	4310      	orrs	r0, r2
  40709c:	2a0f      	cmp	r2, #15
  40709e:	6060      	str	r0, [r4, #4]
  4070a0:	f8ce c004 	str.w	ip, [lr, #4]
  4070a4:	f8ce c008 	str.w	ip, [lr, #8]
  4070a8:	f200 8117 	bhi.w	4072da <_malloc_r+0x506>
  4070ac:	4b1d      	ldr	r3, [pc, #116]	; (407124 <_malloc_r+0x350>)
  4070ae:	68bc      	ldr	r4, [r7, #8]
  4070b0:	681a      	ldr	r2, [r3, #0]
  4070b2:	4291      	cmp	r1, r2
  4070b4:	bf88      	it	hi
  4070b6:	6019      	strhi	r1, [r3, #0]
  4070b8:	4b1b      	ldr	r3, [pc, #108]	; (407128 <_malloc_r+0x354>)
  4070ba:	681a      	ldr	r2, [r3, #0]
  4070bc:	4291      	cmp	r1, r2
  4070be:	6862      	ldr	r2, [r4, #4]
  4070c0:	bf88      	it	hi
  4070c2:	6019      	strhi	r1, [r3, #0]
  4070c4:	f022 0203 	bic.w	r2, r2, #3
  4070c8:	4296      	cmp	r6, r2
  4070ca:	eba2 0306 	sub.w	r3, r2, r6
  4070ce:	d801      	bhi.n	4070d4 <_malloc_r+0x300>
  4070d0:	2b0f      	cmp	r3, #15
  4070d2:	dc04      	bgt.n	4070de <_malloc_r+0x30a>
  4070d4:	4628      	mov	r0, r5
  4070d6:	f000 fa1b 	bl	407510 <__malloc_unlock>
  4070da:	2400      	movs	r4, #0
  4070dc:	e740      	b.n	406f60 <_malloc_r+0x18c>
  4070de:	19a2      	adds	r2, r4, r6
  4070e0:	f043 0301 	orr.w	r3, r3, #1
  4070e4:	f046 0601 	orr.w	r6, r6, #1
  4070e8:	6066      	str	r6, [r4, #4]
  4070ea:	4628      	mov	r0, r5
  4070ec:	60ba      	str	r2, [r7, #8]
  4070ee:	6053      	str	r3, [r2, #4]
  4070f0:	f000 fa0e 	bl	407510 <__malloc_unlock>
  4070f4:	3408      	adds	r4, #8
  4070f6:	4620      	mov	r0, r4
  4070f8:	b003      	add	sp, #12
  4070fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070fe:	2b14      	cmp	r3, #20
  407100:	d971      	bls.n	4071e6 <_malloc_r+0x412>
  407102:	2b54      	cmp	r3, #84	; 0x54
  407104:	f200 80a3 	bhi.w	40724e <_malloc_r+0x47a>
  407108:	0b33      	lsrs	r3, r6, #12
  40710a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40710e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407112:	00c3      	lsls	r3, r0, #3
  407114:	e680      	b.n	406e18 <_malloc_r+0x44>
  407116:	bf00      	nop
  407118:	20400458 	.word	0x20400458
  40711c:	20400de4 	.word	0x20400de4
  407120:	20400db4 	.word	0x20400db4
  407124:	20400ddc 	.word	0x20400ddc
  407128:	20400de0 	.word	0x20400de0
  40712c:	20400460 	.word	0x20400460
  407130:	20400860 	.word	0x20400860
  407134:	0a5a      	lsrs	r2, r3, #9
  407136:	2a04      	cmp	r2, #4
  407138:	d95b      	bls.n	4071f2 <_malloc_r+0x41e>
  40713a:	2a14      	cmp	r2, #20
  40713c:	f200 80ae 	bhi.w	40729c <_malloc_r+0x4c8>
  407140:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407144:	00c9      	lsls	r1, r1, #3
  407146:	325b      	adds	r2, #91	; 0x5b
  407148:	eb07 0c01 	add.w	ip, r7, r1
  40714c:	5879      	ldr	r1, [r7, r1]
  40714e:	f1ac 0c08 	sub.w	ip, ip, #8
  407152:	458c      	cmp	ip, r1
  407154:	f000 8088 	beq.w	407268 <_malloc_r+0x494>
  407158:	684a      	ldr	r2, [r1, #4]
  40715a:	f022 0203 	bic.w	r2, r2, #3
  40715e:	4293      	cmp	r3, r2
  407160:	d273      	bcs.n	40724a <_malloc_r+0x476>
  407162:	6889      	ldr	r1, [r1, #8]
  407164:	458c      	cmp	ip, r1
  407166:	d1f7      	bne.n	407158 <_malloc_r+0x384>
  407168:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40716c:	687b      	ldr	r3, [r7, #4]
  40716e:	60e2      	str	r2, [r4, #12]
  407170:	f8c4 c008 	str.w	ip, [r4, #8]
  407174:	6094      	str	r4, [r2, #8]
  407176:	f8cc 400c 	str.w	r4, [ip, #12]
  40717a:	e68f      	b.n	406e9c <_malloc_r+0xc8>
  40717c:	19a1      	adds	r1, r4, r6
  40717e:	f046 0c01 	orr.w	ip, r6, #1
  407182:	f042 0601 	orr.w	r6, r2, #1
  407186:	f8c4 c004 	str.w	ip, [r4, #4]
  40718a:	4628      	mov	r0, r5
  40718c:	6179      	str	r1, [r7, #20]
  40718e:	6139      	str	r1, [r7, #16]
  407190:	f8c1 e00c 	str.w	lr, [r1, #12]
  407194:	f8c1 e008 	str.w	lr, [r1, #8]
  407198:	604e      	str	r6, [r1, #4]
  40719a:	50e2      	str	r2, [r4, r3]
  40719c:	f000 f9b8 	bl	407510 <__malloc_unlock>
  4071a0:	3408      	adds	r4, #8
  4071a2:	e6dd      	b.n	406f60 <_malloc_r+0x18c>
  4071a4:	687b      	ldr	r3, [r7, #4]
  4071a6:	e679      	b.n	406e9c <_malloc_r+0xc8>
  4071a8:	f108 0801 	add.w	r8, r8, #1
  4071ac:	f018 0f03 	tst.w	r8, #3
  4071b0:	f10c 0c08 	add.w	ip, ip, #8
  4071b4:	f47f ae85 	bne.w	406ec2 <_malloc_r+0xee>
  4071b8:	e02d      	b.n	407216 <_malloc_r+0x442>
  4071ba:	68dc      	ldr	r4, [r3, #12]
  4071bc:	42a3      	cmp	r3, r4
  4071be:	bf08      	it	eq
  4071c0:	3002      	addeq	r0, #2
  4071c2:	f43f ae3e 	beq.w	406e42 <_malloc_r+0x6e>
  4071c6:	e6bb      	b.n	406f40 <_malloc_r+0x16c>
  4071c8:	4419      	add	r1, r3
  4071ca:	461c      	mov	r4, r3
  4071cc:	684a      	ldr	r2, [r1, #4]
  4071ce:	68db      	ldr	r3, [r3, #12]
  4071d0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4071d4:	f042 0201 	orr.w	r2, r2, #1
  4071d8:	604a      	str	r2, [r1, #4]
  4071da:	4628      	mov	r0, r5
  4071dc:	60f3      	str	r3, [r6, #12]
  4071de:	609e      	str	r6, [r3, #8]
  4071e0:	f000 f996 	bl	407510 <__malloc_unlock>
  4071e4:	e6bc      	b.n	406f60 <_malloc_r+0x18c>
  4071e6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4071ea:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4071ee:	00c3      	lsls	r3, r0, #3
  4071f0:	e612      	b.n	406e18 <_malloc_r+0x44>
  4071f2:	099a      	lsrs	r2, r3, #6
  4071f4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4071f8:	00c9      	lsls	r1, r1, #3
  4071fa:	3238      	adds	r2, #56	; 0x38
  4071fc:	e7a4      	b.n	407148 <_malloc_r+0x374>
  4071fe:	42bc      	cmp	r4, r7
  407200:	d054      	beq.n	4072ac <_malloc_r+0x4d8>
  407202:	68bc      	ldr	r4, [r7, #8]
  407204:	6862      	ldr	r2, [r4, #4]
  407206:	f022 0203 	bic.w	r2, r2, #3
  40720a:	e75d      	b.n	4070c8 <_malloc_r+0x2f4>
  40720c:	f859 3908 	ldr.w	r3, [r9], #-8
  407210:	4599      	cmp	r9, r3
  407212:	f040 8086 	bne.w	407322 <_malloc_r+0x54e>
  407216:	f010 0f03 	tst.w	r0, #3
  40721a:	f100 30ff 	add.w	r0, r0, #4294967295
  40721e:	d1f5      	bne.n	40720c <_malloc_r+0x438>
  407220:	687b      	ldr	r3, [r7, #4]
  407222:	ea23 0304 	bic.w	r3, r3, r4
  407226:	607b      	str	r3, [r7, #4]
  407228:	0064      	lsls	r4, r4, #1
  40722a:	429c      	cmp	r4, r3
  40722c:	f63f aec7 	bhi.w	406fbe <_malloc_r+0x1ea>
  407230:	2c00      	cmp	r4, #0
  407232:	f43f aec4 	beq.w	406fbe <_malloc_r+0x1ea>
  407236:	421c      	tst	r4, r3
  407238:	4640      	mov	r0, r8
  40723a:	f47f ae3e 	bne.w	406eba <_malloc_r+0xe6>
  40723e:	0064      	lsls	r4, r4, #1
  407240:	421c      	tst	r4, r3
  407242:	f100 0004 	add.w	r0, r0, #4
  407246:	d0fa      	beq.n	40723e <_malloc_r+0x46a>
  407248:	e637      	b.n	406eba <_malloc_r+0xe6>
  40724a:	468c      	mov	ip, r1
  40724c:	e78c      	b.n	407168 <_malloc_r+0x394>
  40724e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407252:	d815      	bhi.n	407280 <_malloc_r+0x4ac>
  407254:	0bf3      	lsrs	r3, r6, #15
  407256:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40725a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40725e:	00c3      	lsls	r3, r0, #3
  407260:	e5da      	b.n	406e18 <_malloc_r+0x44>
  407262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407266:	e6ed      	b.n	407044 <_malloc_r+0x270>
  407268:	687b      	ldr	r3, [r7, #4]
  40726a:	1092      	asrs	r2, r2, #2
  40726c:	2101      	movs	r1, #1
  40726e:	fa01 f202 	lsl.w	r2, r1, r2
  407272:	4313      	orrs	r3, r2
  407274:	607b      	str	r3, [r7, #4]
  407276:	4662      	mov	r2, ip
  407278:	e779      	b.n	40716e <_malloc_r+0x39a>
  40727a:	2301      	movs	r3, #1
  40727c:	6053      	str	r3, [r2, #4]
  40727e:	e729      	b.n	4070d4 <_malloc_r+0x300>
  407280:	f240 5254 	movw	r2, #1364	; 0x554
  407284:	4293      	cmp	r3, r2
  407286:	d822      	bhi.n	4072ce <_malloc_r+0x4fa>
  407288:	0cb3      	lsrs	r3, r6, #18
  40728a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40728e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407292:	00c3      	lsls	r3, r0, #3
  407294:	e5c0      	b.n	406e18 <_malloc_r+0x44>
  407296:	f103 0b10 	add.w	fp, r3, #16
  40729a:	e6ae      	b.n	406ffa <_malloc_r+0x226>
  40729c:	2a54      	cmp	r2, #84	; 0x54
  40729e:	d829      	bhi.n	4072f4 <_malloc_r+0x520>
  4072a0:	0b1a      	lsrs	r2, r3, #12
  4072a2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4072a6:	00c9      	lsls	r1, r1, #3
  4072a8:	326e      	adds	r2, #110	; 0x6e
  4072aa:	e74d      	b.n	407148 <_malloc_r+0x374>
  4072ac:	4b20      	ldr	r3, [pc, #128]	; (407330 <_malloc_r+0x55c>)
  4072ae:	6819      	ldr	r1, [r3, #0]
  4072b0:	4459      	add	r1, fp
  4072b2:	6019      	str	r1, [r3, #0]
  4072b4:	e6b2      	b.n	40701c <_malloc_r+0x248>
  4072b6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4072ba:	2800      	cmp	r0, #0
  4072bc:	f47f aeae 	bne.w	40701c <_malloc_r+0x248>
  4072c0:	eb08 030b 	add.w	r3, r8, fp
  4072c4:	68ba      	ldr	r2, [r7, #8]
  4072c6:	f043 0301 	orr.w	r3, r3, #1
  4072ca:	6053      	str	r3, [r2, #4]
  4072cc:	e6ee      	b.n	4070ac <_malloc_r+0x2d8>
  4072ce:	207f      	movs	r0, #127	; 0x7f
  4072d0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4072d4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4072d8:	e59e      	b.n	406e18 <_malloc_r+0x44>
  4072da:	f104 0108 	add.w	r1, r4, #8
  4072de:	4628      	mov	r0, r5
  4072e0:	9300      	str	r3, [sp, #0]
  4072e2:	f002 ff95 	bl	40a210 <_free_r>
  4072e6:	9b00      	ldr	r3, [sp, #0]
  4072e8:	6819      	ldr	r1, [r3, #0]
  4072ea:	e6df      	b.n	4070ac <_malloc_r+0x2d8>
  4072ec:	2001      	movs	r0, #1
  4072ee:	f04f 0900 	mov.w	r9, #0
  4072f2:	e6bc      	b.n	40706e <_malloc_r+0x29a>
  4072f4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4072f8:	d805      	bhi.n	407306 <_malloc_r+0x532>
  4072fa:	0bda      	lsrs	r2, r3, #15
  4072fc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407300:	00c9      	lsls	r1, r1, #3
  407302:	3277      	adds	r2, #119	; 0x77
  407304:	e720      	b.n	407148 <_malloc_r+0x374>
  407306:	f240 5154 	movw	r1, #1364	; 0x554
  40730a:	428a      	cmp	r2, r1
  40730c:	d805      	bhi.n	40731a <_malloc_r+0x546>
  40730e:	0c9a      	lsrs	r2, r3, #18
  407310:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407314:	00c9      	lsls	r1, r1, #3
  407316:	327c      	adds	r2, #124	; 0x7c
  407318:	e716      	b.n	407148 <_malloc_r+0x374>
  40731a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40731e:	227e      	movs	r2, #126	; 0x7e
  407320:	e712      	b.n	407148 <_malloc_r+0x374>
  407322:	687b      	ldr	r3, [r7, #4]
  407324:	e780      	b.n	407228 <_malloc_r+0x454>
  407326:	08f0      	lsrs	r0, r6, #3
  407328:	f106 0308 	add.w	r3, r6, #8
  40732c:	e600      	b.n	406f30 <_malloc_r+0x15c>
  40732e:	bf00      	nop
  407330:	20400db4 	.word	0x20400db4

00407334 <memcpy>:
  407334:	4684      	mov	ip, r0
  407336:	ea41 0300 	orr.w	r3, r1, r0
  40733a:	f013 0303 	ands.w	r3, r3, #3
  40733e:	d16d      	bne.n	40741c <memcpy+0xe8>
  407340:	3a40      	subs	r2, #64	; 0x40
  407342:	d341      	bcc.n	4073c8 <memcpy+0x94>
  407344:	f851 3b04 	ldr.w	r3, [r1], #4
  407348:	f840 3b04 	str.w	r3, [r0], #4
  40734c:	f851 3b04 	ldr.w	r3, [r1], #4
  407350:	f840 3b04 	str.w	r3, [r0], #4
  407354:	f851 3b04 	ldr.w	r3, [r1], #4
  407358:	f840 3b04 	str.w	r3, [r0], #4
  40735c:	f851 3b04 	ldr.w	r3, [r1], #4
  407360:	f840 3b04 	str.w	r3, [r0], #4
  407364:	f851 3b04 	ldr.w	r3, [r1], #4
  407368:	f840 3b04 	str.w	r3, [r0], #4
  40736c:	f851 3b04 	ldr.w	r3, [r1], #4
  407370:	f840 3b04 	str.w	r3, [r0], #4
  407374:	f851 3b04 	ldr.w	r3, [r1], #4
  407378:	f840 3b04 	str.w	r3, [r0], #4
  40737c:	f851 3b04 	ldr.w	r3, [r1], #4
  407380:	f840 3b04 	str.w	r3, [r0], #4
  407384:	f851 3b04 	ldr.w	r3, [r1], #4
  407388:	f840 3b04 	str.w	r3, [r0], #4
  40738c:	f851 3b04 	ldr.w	r3, [r1], #4
  407390:	f840 3b04 	str.w	r3, [r0], #4
  407394:	f851 3b04 	ldr.w	r3, [r1], #4
  407398:	f840 3b04 	str.w	r3, [r0], #4
  40739c:	f851 3b04 	ldr.w	r3, [r1], #4
  4073a0:	f840 3b04 	str.w	r3, [r0], #4
  4073a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073a8:	f840 3b04 	str.w	r3, [r0], #4
  4073ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4073b0:	f840 3b04 	str.w	r3, [r0], #4
  4073b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073b8:	f840 3b04 	str.w	r3, [r0], #4
  4073bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4073c0:	f840 3b04 	str.w	r3, [r0], #4
  4073c4:	3a40      	subs	r2, #64	; 0x40
  4073c6:	d2bd      	bcs.n	407344 <memcpy+0x10>
  4073c8:	3230      	adds	r2, #48	; 0x30
  4073ca:	d311      	bcc.n	4073f0 <memcpy+0xbc>
  4073cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4073d0:	f840 3b04 	str.w	r3, [r0], #4
  4073d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073d8:	f840 3b04 	str.w	r3, [r0], #4
  4073dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4073e0:	f840 3b04 	str.w	r3, [r0], #4
  4073e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073e8:	f840 3b04 	str.w	r3, [r0], #4
  4073ec:	3a10      	subs	r2, #16
  4073ee:	d2ed      	bcs.n	4073cc <memcpy+0x98>
  4073f0:	320c      	adds	r2, #12
  4073f2:	d305      	bcc.n	407400 <memcpy+0xcc>
  4073f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073f8:	f840 3b04 	str.w	r3, [r0], #4
  4073fc:	3a04      	subs	r2, #4
  4073fe:	d2f9      	bcs.n	4073f4 <memcpy+0xc0>
  407400:	3204      	adds	r2, #4
  407402:	d008      	beq.n	407416 <memcpy+0xe2>
  407404:	07d2      	lsls	r2, r2, #31
  407406:	bf1c      	itt	ne
  407408:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40740c:	f800 3b01 	strbne.w	r3, [r0], #1
  407410:	d301      	bcc.n	407416 <memcpy+0xe2>
  407412:	880b      	ldrh	r3, [r1, #0]
  407414:	8003      	strh	r3, [r0, #0]
  407416:	4660      	mov	r0, ip
  407418:	4770      	bx	lr
  40741a:	bf00      	nop
  40741c:	2a08      	cmp	r2, #8
  40741e:	d313      	bcc.n	407448 <memcpy+0x114>
  407420:	078b      	lsls	r3, r1, #30
  407422:	d08d      	beq.n	407340 <memcpy+0xc>
  407424:	f010 0303 	ands.w	r3, r0, #3
  407428:	d08a      	beq.n	407340 <memcpy+0xc>
  40742a:	f1c3 0304 	rsb	r3, r3, #4
  40742e:	1ad2      	subs	r2, r2, r3
  407430:	07db      	lsls	r3, r3, #31
  407432:	bf1c      	itt	ne
  407434:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407438:	f800 3b01 	strbne.w	r3, [r0], #1
  40743c:	d380      	bcc.n	407340 <memcpy+0xc>
  40743e:	f831 3b02 	ldrh.w	r3, [r1], #2
  407442:	f820 3b02 	strh.w	r3, [r0], #2
  407446:	e77b      	b.n	407340 <memcpy+0xc>
  407448:	3a04      	subs	r2, #4
  40744a:	d3d9      	bcc.n	407400 <memcpy+0xcc>
  40744c:	3a01      	subs	r2, #1
  40744e:	f811 3b01 	ldrb.w	r3, [r1], #1
  407452:	f800 3b01 	strb.w	r3, [r0], #1
  407456:	d2f9      	bcs.n	40744c <memcpy+0x118>
  407458:	780b      	ldrb	r3, [r1, #0]
  40745a:	7003      	strb	r3, [r0, #0]
  40745c:	784b      	ldrb	r3, [r1, #1]
  40745e:	7043      	strb	r3, [r0, #1]
  407460:	788b      	ldrb	r3, [r1, #2]
  407462:	7083      	strb	r3, [r0, #2]
  407464:	4660      	mov	r0, ip
  407466:	4770      	bx	lr

00407468 <memset>:
  407468:	b470      	push	{r4, r5, r6}
  40746a:	0786      	lsls	r6, r0, #30
  40746c:	d046      	beq.n	4074fc <memset+0x94>
  40746e:	1e54      	subs	r4, r2, #1
  407470:	2a00      	cmp	r2, #0
  407472:	d041      	beq.n	4074f8 <memset+0x90>
  407474:	b2ca      	uxtb	r2, r1
  407476:	4603      	mov	r3, r0
  407478:	e002      	b.n	407480 <memset+0x18>
  40747a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40747e:	d33b      	bcc.n	4074f8 <memset+0x90>
  407480:	f803 2b01 	strb.w	r2, [r3], #1
  407484:	079d      	lsls	r5, r3, #30
  407486:	d1f8      	bne.n	40747a <memset+0x12>
  407488:	2c03      	cmp	r4, #3
  40748a:	d92e      	bls.n	4074ea <memset+0x82>
  40748c:	b2cd      	uxtb	r5, r1
  40748e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407492:	2c0f      	cmp	r4, #15
  407494:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407498:	d919      	bls.n	4074ce <memset+0x66>
  40749a:	f103 0210 	add.w	r2, r3, #16
  40749e:	4626      	mov	r6, r4
  4074a0:	3e10      	subs	r6, #16
  4074a2:	2e0f      	cmp	r6, #15
  4074a4:	f842 5c10 	str.w	r5, [r2, #-16]
  4074a8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4074ac:	f842 5c08 	str.w	r5, [r2, #-8]
  4074b0:	f842 5c04 	str.w	r5, [r2, #-4]
  4074b4:	f102 0210 	add.w	r2, r2, #16
  4074b8:	d8f2      	bhi.n	4074a0 <memset+0x38>
  4074ba:	f1a4 0210 	sub.w	r2, r4, #16
  4074be:	f022 020f 	bic.w	r2, r2, #15
  4074c2:	f004 040f 	and.w	r4, r4, #15
  4074c6:	3210      	adds	r2, #16
  4074c8:	2c03      	cmp	r4, #3
  4074ca:	4413      	add	r3, r2
  4074cc:	d90d      	bls.n	4074ea <memset+0x82>
  4074ce:	461e      	mov	r6, r3
  4074d0:	4622      	mov	r2, r4
  4074d2:	3a04      	subs	r2, #4
  4074d4:	2a03      	cmp	r2, #3
  4074d6:	f846 5b04 	str.w	r5, [r6], #4
  4074da:	d8fa      	bhi.n	4074d2 <memset+0x6a>
  4074dc:	1f22      	subs	r2, r4, #4
  4074de:	f022 0203 	bic.w	r2, r2, #3
  4074e2:	3204      	adds	r2, #4
  4074e4:	4413      	add	r3, r2
  4074e6:	f004 0403 	and.w	r4, r4, #3
  4074ea:	b12c      	cbz	r4, 4074f8 <memset+0x90>
  4074ec:	b2c9      	uxtb	r1, r1
  4074ee:	441c      	add	r4, r3
  4074f0:	f803 1b01 	strb.w	r1, [r3], #1
  4074f4:	429c      	cmp	r4, r3
  4074f6:	d1fb      	bne.n	4074f0 <memset+0x88>
  4074f8:	bc70      	pop	{r4, r5, r6}
  4074fa:	4770      	bx	lr
  4074fc:	4614      	mov	r4, r2
  4074fe:	4603      	mov	r3, r0
  407500:	e7c2      	b.n	407488 <memset+0x20>
  407502:	bf00      	nop

00407504 <__malloc_lock>:
  407504:	4801      	ldr	r0, [pc, #4]	; (40750c <__malloc_lock+0x8>)
  407506:	f003 b91d 	b.w	40a744 <__retarget_lock_acquire_recursive>
  40750a:	bf00      	nop
  40750c:	20400e4c 	.word	0x20400e4c

00407510 <__malloc_unlock>:
  407510:	4801      	ldr	r0, [pc, #4]	; (407518 <__malloc_unlock+0x8>)
  407512:	f003 b919 	b.w	40a748 <__retarget_lock_release_recursive>
  407516:	bf00      	nop
  407518:	20400e4c 	.word	0x20400e4c

0040751c <printf>:
  40751c:	b40f      	push	{r0, r1, r2, r3}
  40751e:	b500      	push	{lr}
  407520:	4907      	ldr	r1, [pc, #28]	; (407540 <printf+0x24>)
  407522:	b083      	sub	sp, #12
  407524:	ab04      	add	r3, sp, #16
  407526:	6808      	ldr	r0, [r1, #0]
  407528:	f853 2b04 	ldr.w	r2, [r3], #4
  40752c:	6881      	ldr	r1, [r0, #8]
  40752e:	9301      	str	r3, [sp, #4]
  407530:	f000 f9b4 	bl	40789c <_vfprintf_r>
  407534:	b003      	add	sp, #12
  407536:	f85d eb04 	ldr.w	lr, [sp], #4
  40753a:	b004      	add	sp, #16
  40753c:	4770      	bx	lr
  40753e:	bf00      	nop
  407540:	20400028 	.word	0x20400028

00407544 <_puts_r>:
  407544:	b5f0      	push	{r4, r5, r6, r7, lr}
  407546:	4605      	mov	r5, r0
  407548:	b089      	sub	sp, #36	; 0x24
  40754a:	4608      	mov	r0, r1
  40754c:	460c      	mov	r4, r1
  40754e:	f000 f937 	bl	4077c0 <strlen>
  407552:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407554:	4f21      	ldr	r7, [pc, #132]	; (4075dc <_puts_r+0x98>)
  407556:	9404      	str	r4, [sp, #16]
  407558:	2601      	movs	r6, #1
  40755a:	1c44      	adds	r4, r0, #1
  40755c:	a904      	add	r1, sp, #16
  40755e:	2202      	movs	r2, #2
  407560:	9403      	str	r4, [sp, #12]
  407562:	9005      	str	r0, [sp, #20]
  407564:	68ac      	ldr	r4, [r5, #8]
  407566:	9706      	str	r7, [sp, #24]
  407568:	9607      	str	r6, [sp, #28]
  40756a:	9101      	str	r1, [sp, #4]
  40756c:	9202      	str	r2, [sp, #8]
  40756e:	b353      	cbz	r3, 4075c6 <_puts_r+0x82>
  407570:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407572:	f013 0f01 	tst.w	r3, #1
  407576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40757a:	b29a      	uxth	r2, r3
  40757c:	d101      	bne.n	407582 <_puts_r+0x3e>
  40757e:	0590      	lsls	r0, r2, #22
  407580:	d525      	bpl.n	4075ce <_puts_r+0x8a>
  407582:	0491      	lsls	r1, r2, #18
  407584:	d406      	bmi.n	407594 <_puts_r+0x50>
  407586:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40758c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  407590:	81a3      	strh	r3, [r4, #12]
  407592:	6662      	str	r2, [r4, #100]	; 0x64
  407594:	4628      	mov	r0, r5
  407596:	aa01      	add	r2, sp, #4
  407598:	4621      	mov	r1, r4
  40759a:	f002 ff1f 	bl	40a3dc <__sfvwrite_r>
  40759e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4075a0:	2800      	cmp	r0, #0
  4075a2:	bf0c      	ite	eq
  4075a4:	250a      	moveq	r5, #10
  4075a6:	f04f 35ff 	movne.w	r5, #4294967295
  4075aa:	07da      	lsls	r2, r3, #31
  4075ac:	d402      	bmi.n	4075b4 <_puts_r+0x70>
  4075ae:	89a3      	ldrh	r3, [r4, #12]
  4075b0:	059b      	lsls	r3, r3, #22
  4075b2:	d502      	bpl.n	4075ba <_puts_r+0x76>
  4075b4:	4628      	mov	r0, r5
  4075b6:	b009      	add	sp, #36	; 0x24
  4075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4075bc:	f003 f8c4 	bl	40a748 <__retarget_lock_release_recursive>
  4075c0:	4628      	mov	r0, r5
  4075c2:	b009      	add	sp, #36	; 0x24
  4075c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075c6:	4628      	mov	r0, r5
  4075c8:	f002 fd80 	bl	40a0cc <__sinit>
  4075cc:	e7d0      	b.n	407570 <_puts_r+0x2c>
  4075ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4075d0:	f003 f8b8 	bl	40a744 <__retarget_lock_acquire_recursive>
  4075d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075d8:	b29a      	uxth	r2, r3
  4075da:	e7d2      	b.n	407582 <_puts_r+0x3e>
  4075dc:	0040c4d8 	.word	0x0040c4d8

004075e0 <puts>:
  4075e0:	4b02      	ldr	r3, [pc, #8]	; (4075ec <puts+0xc>)
  4075e2:	4601      	mov	r1, r0
  4075e4:	6818      	ldr	r0, [r3, #0]
  4075e6:	f7ff bfad 	b.w	407544 <_puts_r>
  4075ea:	bf00      	nop
  4075ec:	20400028 	.word	0x20400028

004075f0 <_sbrk_r>:
  4075f0:	b538      	push	{r3, r4, r5, lr}
  4075f2:	4c07      	ldr	r4, [pc, #28]	; (407610 <_sbrk_r+0x20>)
  4075f4:	2300      	movs	r3, #0
  4075f6:	4605      	mov	r5, r0
  4075f8:	4608      	mov	r0, r1
  4075fa:	6023      	str	r3, [r4, #0]
  4075fc:	f7fa fc18 	bl	401e30 <_sbrk>
  407600:	1c43      	adds	r3, r0, #1
  407602:	d000      	beq.n	407606 <_sbrk_r+0x16>
  407604:	bd38      	pop	{r3, r4, r5, pc}
  407606:	6823      	ldr	r3, [r4, #0]
  407608:	2b00      	cmp	r3, #0
  40760a:	d0fb      	beq.n	407604 <_sbrk_r+0x14>
  40760c:	602b      	str	r3, [r5, #0]
  40760e:	bd38      	pop	{r3, r4, r5, pc}
  407610:	20400e60 	.word	0x20400e60

00407614 <setbuf>:
  407614:	2900      	cmp	r1, #0
  407616:	bf0c      	ite	eq
  407618:	2202      	moveq	r2, #2
  40761a:	2200      	movne	r2, #0
  40761c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407620:	f000 b800 	b.w	407624 <setvbuf>

00407624 <setvbuf>:
  407624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407628:	4c61      	ldr	r4, [pc, #388]	; (4077b0 <setvbuf+0x18c>)
  40762a:	6825      	ldr	r5, [r4, #0]
  40762c:	b083      	sub	sp, #12
  40762e:	4604      	mov	r4, r0
  407630:	460f      	mov	r7, r1
  407632:	4690      	mov	r8, r2
  407634:	461e      	mov	r6, r3
  407636:	b115      	cbz	r5, 40763e <setvbuf+0x1a>
  407638:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40763a:	2b00      	cmp	r3, #0
  40763c:	d064      	beq.n	407708 <setvbuf+0xe4>
  40763e:	f1b8 0f02 	cmp.w	r8, #2
  407642:	d006      	beq.n	407652 <setvbuf+0x2e>
  407644:	f1b8 0f01 	cmp.w	r8, #1
  407648:	f200 809f 	bhi.w	40778a <setvbuf+0x166>
  40764c:	2e00      	cmp	r6, #0
  40764e:	f2c0 809c 	blt.w	40778a <setvbuf+0x166>
  407652:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407654:	07d8      	lsls	r0, r3, #31
  407656:	d534      	bpl.n	4076c2 <setvbuf+0x9e>
  407658:	4621      	mov	r1, r4
  40765a:	4628      	mov	r0, r5
  40765c:	f002 fcde 	bl	40a01c <_fflush_r>
  407660:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407662:	b141      	cbz	r1, 407676 <setvbuf+0x52>
  407664:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407668:	4299      	cmp	r1, r3
  40766a:	d002      	beq.n	407672 <setvbuf+0x4e>
  40766c:	4628      	mov	r0, r5
  40766e:	f002 fdcf 	bl	40a210 <_free_r>
  407672:	2300      	movs	r3, #0
  407674:	6323      	str	r3, [r4, #48]	; 0x30
  407676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40767a:	2200      	movs	r2, #0
  40767c:	61a2      	str	r2, [r4, #24]
  40767e:	6062      	str	r2, [r4, #4]
  407680:	061a      	lsls	r2, r3, #24
  407682:	d43a      	bmi.n	4076fa <setvbuf+0xd6>
  407684:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407688:	f023 0303 	bic.w	r3, r3, #3
  40768c:	f1b8 0f02 	cmp.w	r8, #2
  407690:	81a3      	strh	r3, [r4, #12]
  407692:	d01d      	beq.n	4076d0 <setvbuf+0xac>
  407694:	ab01      	add	r3, sp, #4
  407696:	466a      	mov	r2, sp
  407698:	4621      	mov	r1, r4
  40769a:	4628      	mov	r0, r5
  40769c:	f003 f856 	bl	40a74c <__swhatbuf_r>
  4076a0:	89a3      	ldrh	r3, [r4, #12]
  4076a2:	4318      	orrs	r0, r3
  4076a4:	81a0      	strh	r0, [r4, #12]
  4076a6:	2e00      	cmp	r6, #0
  4076a8:	d132      	bne.n	407710 <setvbuf+0xec>
  4076aa:	9e00      	ldr	r6, [sp, #0]
  4076ac:	4630      	mov	r0, r6
  4076ae:	f7ff fb81 	bl	406db4 <malloc>
  4076b2:	4607      	mov	r7, r0
  4076b4:	2800      	cmp	r0, #0
  4076b6:	d06b      	beq.n	407790 <setvbuf+0x16c>
  4076b8:	89a3      	ldrh	r3, [r4, #12]
  4076ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4076be:	81a3      	strh	r3, [r4, #12]
  4076c0:	e028      	b.n	407714 <setvbuf+0xf0>
  4076c2:	89a3      	ldrh	r3, [r4, #12]
  4076c4:	0599      	lsls	r1, r3, #22
  4076c6:	d4c7      	bmi.n	407658 <setvbuf+0x34>
  4076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4076ca:	f003 f83b 	bl	40a744 <__retarget_lock_acquire_recursive>
  4076ce:	e7c3      	b.n	407658 <setvbuf+0x34>
  4076d0:	2500      	movs	r5, #0
  4076d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4076d4:	2600      	movs	r6, #0
  4076d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4076da:	f043 0302 	orr.w	r3, r3, #2
  4076de:	2001      	movs	r0, #1
  4076e0:	60a6      	str	r6, [r4, #8]
  4076e2:	07ce      	lsls	r6, r1, #31
  4076e4:	81a3      	strh	r3, [r4, #12]
  4076e6:	6022      	str	r2, [r4, #0]
  4076e8:	6122      	str	r2, [r4, #16]
  4076ea:	6160      	str	r0, [r4, #20]
  4076ec:	d401      	bmi.n	4076f2 <setvbuf+0xce>
  4076ee:	0598      	lsls	r0, r3, #22
  4076f0:	d53e      	bpl.n	407770 <setvbuf+0x14c>
  4076f2:	4628      	mov	r0, r5
  4076f4:	b003      	add	sp, #12
  4076f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4076fa:	6921      	ldr	r1, [r4, #16]
  4076fc:	4628      	mov	r0, r5
  4076fe:	f002 fd87 	bl	40a210 <_free_r>
  407702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407706:	e7bd      	b.n	407684 <setvbuf+0x60>
  407708:	4628      	mov	r0, r5
  40770a:	f002 fcdf 	bl	40a0cc <__sinit>
  40770e:	e796      	b.n	40763e <setvbuf+0x1a>
  407710:	2f00      	cmp	r7, #0
  407712:	d0cb      	beq.n	4076ac <setvbuf+0x88>
  407714:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407716:	2b00      	cmp	r3, #0
  407718:	d033      	beq.n	407782 <setvbuf+0x15e>
  40771a:	9b00      	ldr	r3, [sp, #0]
  40771c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407720:	6027      	str	r7, [r4, #0]
  407722:	429e      	cmp	r6, r3
  407724:	bf1c      	itt	ne
  407726:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40772a:	81a2      	strhne	r2, [r4, #12]
  40772c:	f1b8 0f01 	cmp.w	r8, #1
  407730:	bf04      	itt	eq
  407732:	f042 0201 	orreq.w	r2, r2, #1
  407736:	81a2      	strheq	r2, [r4, #12]
  407738:	b292      	uxth	r2, r2
  40773a:	f012 0308 	ands.w	r3, r2, #8
  40773e:	6127      	str	r7, [r4, #16]
  407740:	6166      	str	r6, [r4, #20]
  407742:	d00e      	beq.n	407762 <setvbuf+0x13e>
  407744:	07d1      	lsls	r1, r2, #31
  407746:	d51a      	bpl.n	40777e <setvbuf+0x15a>
  407748:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40774a:	4276      	negs	r6, r6
  40774c:	2300      	movs	r3, #0
  40774e:	f015 0501 	ands.w	r5, r5, #1
  407752:	61a6      	str	r6, [r4, #24]
  407754:	60a3      	str	r3, [r4, #8]
  407756:	d009      	beq.n	40776c <setvbuf+0x148>
  407758:	2500      	movs	r5, #0
  40775a:	4628      	mov	r0, r5
  40775c:	b003      	add	sp, #12
  40775e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407762:	60a3      	str	r3, [r4, #8]
  407764:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407766:	f015 0501 	ands.w	r5, r5, #1
  40776a:	d1f5      	bne.n	407758 <setvbuf+0x134>
  40776c:	0593      	lsls	r3, r2, #22
  40776e:	d4c0      	bmi.n	4076f2 <setvbuf+0xce>
  407770:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407772:	f002 ffe9 	bl	40a748 <__retarget_lock_release_recursive>
  407776:	4628      	mov	r0, r5
  407778:	b003      	add	sp, #12
  40777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40777e:	60a6      	str	r6, [r4, #8]
  407780:	e7f0      	b.n	407764 <setvbuf+0x140>
  407782:	4628      	mov	r0, r5
  407784:	f002 fca2 	bl	40a0cc <__sinit>
  407788:	e7c7      	b.n	40771a <setvbuf+0xf6>
  40778a:	f04f 35ff 	mov.w	r5, #4294967295
  40778e:	e7b0      	b.n	4076f2 <setvbuf+0xce>
  407790:	f8dd 9000 	ldr.w	r9, [sp]
  407794:	45b1      	cmp	r9, r6
  407796:	d004      	beq.n	4077a2 <setvbuf+0x17e>
  407798:	4648      	mov	r0, r9
  40779a:	f7ff fb0b 	bl	406db4 <malloc>
  40779e:	4607      	mov	r7, r0
  4077a0:	b920      	cbnz	r0, 4077ac <setvbuf+0x188>
  4077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4077a6:	f04f 35ff 	mov.w	r5, #4294967295
  4077aa:	e792      	b.n	4076d2 <setvbuf+0xae>
  4077ac:	464e      	mov	r6, r9
  4077ae:	e783      	b.n	4076b8 <setvbuf+0x94>
  4077b0:	20400028 	.word	0x20400028
	...

004077c0 <strlen>:
  4077c0:	f890 f000 	pld	[r0]
  4077c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4077c8:	f020 0107 	bic.w	r1, r0, #7
  4077cc:	f06f 0c00 	mvn.w	ip, #0
  4077d0:	f010 0407 	ands.w	r4, r0, #7
  4077d4:	f891 f020 	pld	[r1, #32]
  4077d8:	f040 8049 	bne.w	40786e <strlen+0xae>
  4077dc:	f04f 0400 	mov.w	r4, #0
  4077e0:	f06f 0007 	mvn.w	r0, #7
  4077e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4077e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4077ec:	f100 0008 	add.w	r0, r0, #8
  4077f0:	fa82 f24c 	uadd8	r2, r2, ip
  4077f4:	faa4 f28c 	sel	r2, r4, ip
  4077f8:	fa83 f34c 	uadd8	r3, r3, ip
  4077fc:	faa2 f38c 	sel	r3, r2, ip
  407800:	bb4b      	cbnz	r3, 407856 <strlen+0x96>
  407802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407806:	fa82 f24c 	uadd8	r2, r2, ip
  40780a:	f100 0008 	add.w	r0, r0, #8
  40780e:	faa4 f28c 	sel	r2, r4, ip
  407812:	fa83 f34c 	uadd8	r3, r3, ip
  407816:	faa2 f38c 	sel	r3, r2, ip
  40781a:	b9e3      	cbnz	r3, 407856 <strlen+0x96>
  40781c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407820:	fa82 f24c 	uadd8	r2, r2, ip
  407824:	f100 0008 	add.w	r0, r0, #8
  407828:	faa4 f28c 	sel	r2, r4, ip
  40782c:	fa83 f34c 	uadd8	r3, r3, ip
  407830:	faa2 f38c 	sel	r3, r2, ip
  407834:	b97b      	cbnz	r3, 407856 <strlen+0x96>
  407836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40783a:	f101 0120 	add.w	r1, r1, #32
  40783e:	fa82 f24c 	uadd8	r2, r2, ip
  407842:	f100 0008 	add.w	r0, r0, #8
  407846:	faa4 f28c 	sel	r2, r4, ip
  40784a:	fa83 f34c 	uadd8	r3, r3, ip
  40784e:	faa2 f38c 	sel	r3, r2, ip
  407852:	2b00      	cmp	r3, #0
  407854:	d0c6      	beq.n	4077e4 <strlen+0x24>
  407856:	2a00      	cmp	r2, #0
  407858:	bf04      	itt	eq
  40785a:	3004      	addeq	r0, #4
  40785c:	461a      	moveq	r2, r3
  40785e:	ba12      	rev	r2, r2
  407860:	fab2 f282 	clz	r2, r2
  407864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40786c:	4770      	bx	lr
  40786e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407872:	f004 0503 	and.w	r5, r4, #3
  407876:	f1c4 0000 	rsb	r0, r4, #0
  40787a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40787e:	f014 0f04 	tst.w	r4, #4
  407882:	f891 f040 	pld	[r1, #64]	; 0x40
  407886:	fa0c f505 	lsl.w	r5, ip, r5
  40788a:	ea62 0205 	orn	r2, r2, r5
  40788e:	bf1c      	itt	ne
  407890:	ea63 0305 	ornne	r3, r3, r5
  407894:	4662      	movne	r2, ip
  407896:	f04f 0400 	mov.w	r4, #0
  40789a:	e7a9      	b.n	4077f0 <strlen+0x30>

0040789c <_vfprintf_r>:
  40789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078a0:	b0c1      	sub	sp, #260	; 0x104
  4078a2:	461d      	mov	r5, r3
  4078a4:	468a      	mov	sl, r1
  4078a6:	4691      	mov	r9, r2
  4078a8:	4604      	mov	r4, r0
  4078aa:	9008      	str	r0, [sp, #32]
  4078ac:	f002 ff38 	bl	40a720 <_localeconv_r>
  4078b0:	6803      	ldr	r3, [r0, #0]
  4078b2:	9315      	str	r3, [sp, #84]	; 0x54
  4078b4:	4618      	mov	r0, r3
  4078b6:	f7ff ff83 	bl	4077c0 <strlen>
  4078ba:	950e      	str	r5, [sp, #56]	; 0x38
  4078bc:	9014      	str	r0, [sp, #80]	; 0x50
  4078be:	b11c      	cbz	r4, 4078c8 <_vfprintf_r+0x2c>
  4078c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4078c2:	2b00      	cmp	r3, #0
  4078c4:	f000 825f 	beq.w	407d86 <_vfprintf_r+0x4ea>
  4078c8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4078cc:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4078d0:	f013 0f01 	tst.w	r3, #1
  4078d4:	b293      	uxth	r3, r2
  4078d6:	d102      	bne.n	4078de <_vfprintf_r+0x42>
  4078d8:	0599      	lsls	r1, r3, #22
  4078da:	f140 8275 	bpl.w	407dc8 <_vfprintf_r+0x52c>
  4078de:	049f      	lsls	r7, r3, #18
  4078e0:	d40a      	bmi.n	4078f8 <_vfprintf_r+0x5c>
  4078e2:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  4078e6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  4078ea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4078ee:	f8aa 300c 	strh.w	r3, [sl, #12]
  4078f2:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  4078f6:	b29b      	uxth	r3, r3
  4078f8:	071e      	lsls	r6, r3, #28
  4078fa:	f140 8223 	bpl.w	407d44 <_vfprintf_r+0x4a8>
  4078fe:	f8da 2010 	ldr.w	r2, [sl, #16]
  407902:	2a00      	cmp	r2, #0
  407904:	f000 821e 	beq.w	407d44 <_vfprintf_r+0x4a8>
  407908:	f003 021a 	and.w	r2, r3, #26
  40790c:	2a0a      	cmp	r2, #10
  40790e:	f000 823e 	beq.w	407d8e <_vfprintf_r+0x4f2>
  407912:	2300      	movs	r3, #0
  407914:	4618      	mov	r0, r3
  407916:	9311      	str	r3, [sp, #68]	; 0x44
  407918:	9313      	str	r3, [sp, #76]	; 0x4c
  40791a:	9312      	str	r3, [sp, #72]	; 0x48
  40791c:	9325      	str	r3, [sp, #148]	; 0x94
  40791e:	9324      	str	r3, [sp, #144]	; 0x90
  407920:	9318      	str	r3, [sp, #96]	; 0x60
  407922:	9319      	str	r3, [sp, #100]	; 0x64
  407924:	930b      	str	r3, [sp, #44]	; 0x2c
  407926:	ab30      	add	r3, sp, #192	; 0xc0
  407928:	9323      	str	r3, [sp, #140]	; 0x8c
  40792a:	4698      	mov	r8, r3
  40792c:	9016      	str	r0, [sp, #88]	; 0x58
  40792e:	9017      	str	r0, [sp, #92]	; 0x5c
  407930:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  407934:	f899 3000 	ldrb.w	r3, [r9]
  407938:	464c      	mov	r4, r9
  40793a:	b1eb      	cbz	r3, 407978 <_vfprintf_r+0xdc>
  40793c:	2b25      	cmp	r3, #37	; 0x25
  40793e:	d102      	bne.n	407946 <_vfprintf_r+0xaa>
  407940:	e01a      	b.n	407978 <_vfprintf_r+0xdc>
  407942:	2b25      	cmp	r3, #37	; 0x25
  407944:	d003      	beq.n	40794e <_vfprintf_r+0xb2>
  407946:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40794a:	2b00      	cmp	r3, #0
  40794c:	d1f9      	bne.n	407942 <_vfprintf_r+0xa6>
  40794e:	eba4 0509 	sub.w	r5, r4, r9
  407952:	b18d      	cbz	r5, 407978 <_vfprintf_r+0xdc>
  407954:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407956:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407958:	f8c8 9000 	str.w	r9, [r8]
  40795c:	3301      	adds	r3, #1
  40795e:	442a      	add	r2, r5
  407960:	2b07      	cmp	r3, #7
  407962:	f8c8 5004 	str.w	r5, [r8, #4]
  407966:	9225      	str	r2, [sp, #148]	; 0x94
  407968:	9324      	str	r3, [sp, #144]	; 0x90
  40796a:	f300 8201 	bgt.w	407d70 <_vfprintf_r+0x4d4>
  40796e:	f108 0808 	add.w	r8, r8, #8
  407972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407974:	442b      	add	r3, r5
  407976:	930b      	str	r3, [sp, #44]	; 0x2c
  407978:	7823      	ldrb	r3, [r4, #0]
  40797a:	2b00      	cmp	r3, #0
  40797c:	f000 83f0 	beq.w	408160 <_vfprintf_r+0x8c4>
  407980:	2300      	movs	r3, #0
  407982:	461a      	mov	r2, r3
  407984:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407988:	4619      	mov	r1, r3
  40798a:	930c      	str	r3, [sp, #48]	; 0x30
  40798c:	469b      	mov	fp, r3
  40798e:	7866      	ldrb	r6, [r4, #1]
  407990:	f04f 33ff 	mov.w	r3, #4294967295
  407994:	f104 0901 	add.w	r9, r4, #1
  407998:	9309      	str	r3, [sp, #36]	; 0x24
  40799a:	f109 0901 	add.w	r9, r9, #1
  40799e:	f1a6 0320 	sub.w	r3, r6, #32
  4079a2:	2b58      	cmp	r3, #88	; 0x58
  4079a4:	f200 83bf 	bhi.w	408126 <_vfprintf_r+0x88a>
  4079a8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4079ac:	03bd02e0 	.word	0x03bd02e0
  4079b0:	034f03bd 	.word	0x034f03bd
  4079b4:	03bd03bd 	.word	0x03bd03bd
  4079b8:	03bd03bd 	.word	0x03bd03bd
  4079bc:	03bd03bd 	.word	0x03bd03bd
  4079c0:	03080354 	.word	0x03080354
  4079c4:	021a03bd 	.word	0x021a03bd
  4079c8:	03bd02e8 	.word	0x03bd02e8
  4079cc:	033a0303 	.word	0x033a0303
  4079d0:	033a033a 	.word	0x033a033a
  4079d4:	033a033a 	.word	0x033a033a
  4079d8:	033a033a 	.word	0x033a033a
  4079dc:	033a033a 	.word	0x033a033a
  4079e0:	03bd03bd 	.word	0x03bd03bd
  4079e4:	03bd03bd 	.word	0x03bd03bd
  4079e8:	03bd03bd 	.word	0x03bd03bd
  4079ec:	03bd03bd 	.word	0x03bd03bd
  4079f0:	03bd03bd 	.word	0x03bd03bd
  4079f4:	03620349 	.word	0x03620349
  4079f8:	036203bd 	.word	0x036203bd
  4079fc:	03bd03bd 	.word	0x03bd03bd
  407a00:	03bd03bd 	.word	0x03bd03bd
  407a04:	03bd03a2 	.word	0x03bd03a2
  407a08:	006f03bd 	.word	0x006f03bd
  407a0c:	03bd03bd 	.word	0x03bd03bd
  407a10:	03bd03bd 	.word	0x03bd03bd
  407a14:	005903bd 	.word	0x005903bd
  407a18:	03bd03bd 	.word	0x03bd03bd
  407a1c:	03bd031e 	.word	0x03bd031e
  407a20:	03bd03bd 	.word	0x03bd03bd
  407a24:	03bd03bd 	.word	0x03bd03bd
  407a28:	03bd03bd 	.word	0x03bd03bd
  407a2c:	03bd03bd 	.word	0x03bd03bd
  407a30:	032403bd 	.word	0x032403bd
  407a34:	03620273 	.word	0x03620273
  407a38:	03620362 	.word	0x03620362
  407a3c:	027302b7 	.word	0x027302b7
  407a40:	03bd03bd 	.word	0x03bd03bd
  407a44:	03bd02bc 	.word	0x03bd02bc
  407a48:	007102c9 	.word	0x007102c9
  407a4c:	0247030d 	.word	0x0247030d
  407a50:	025203bd 	.word	0x025203bd
  407a54:	005b03bd 	.word	0x005b03bd
  407a58:	03bd03bd 	.word	0x03bd03bd
  407a5c:	021f      	.short	0x021f
  407a5e:	f04b 0b10 	orr.w	fp, fp, #16
  407a62:	f01b 0f20 	tst.w	fp, #32
  407a66:	f040 8353 	bne.w	408110 <_vfprintf_r+0x874>
  407a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407a6c:	f01b 0f10 	tst.w	fp, #16
  407a70:	4613      	mov	r3, r2
  407a72:	f040 85b4 	bne.w	4085de <_vfprintf_r+0xd42>
  407a76:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407a7a:	f000 85b0 	beq.w	4085de <_vfprintf_r+0xd42>
  407a7e:	8814      	ldrh	r4, [r2, #0]
  407a80:	3204      	adds	r2, #4
  407a82:	2500      	movs	r5, #0
  407a84:	2301      	movs	r3, #1
  407a86:	920e      	str	r2, [sp, #56]	; 0x38
  407a88:	e014      	b.n	407ab4 <_vfprintf_r+0x218>
  407a8a:	f04b 0b10 	orr.w	fp, fp, #16
  407a8e:	f01b 0320 	ands.w	r3, fp, #32
  407a92:	f040 8332 	bne.w	4080fa <_vfprintf_r+0x85e>
  407a96:	f01b 0210 	ands.w	r2, fp, #16
  407a9a:	f040 8589 	bne.w	4085b0 <_vfprintf_r+0xd14>
  407a9e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407aa2:	f000 8585 	beq.w	4085b0 <_vfprintf_r+0xd14>
  407aa6:	990e      	ldr	r1, [sp, #56]	; 0x38
  407aa8:	4613      	mov	r3, r2
  407aaa:	460a      	mov	r2, r1
  407aac:	3204      	adds	r2, #4
  407aae:	880c      	ldrh	r4, [r1, #0]
  407ab0:	920e      	str	r2, [sp, #56]	; 0x38
  407ab2:	2500      	movs	r5, #0
  407ab4:	f04f 0a00 	mov.w	sl, #0
  407ab8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407abc:	9909      	ldr	r1, [sp, #36]	; 0x24
  407abe:	1c4a      	adds	r2, r1, #1
  407ac0:	f000 820b 	beq.w	407eda <_vfprintf_r+0x63e>
  407ac4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  407ac8:	9206      	str	r2, [sp, #24]
  407aca:	ea54 0205 	orrs.w	r2, r4, r5
  407ace:	f040 820a 	bne.w	407ee6 <_vfprintf_r+0x64a>
  407ad2:	2900      	cmp	r1, #0
  407ad4:	f040 846f 	bne.w	4083b6 <_vfprintf_r+0xb1a>
  407ad8:	2b00      	cmp	r3, #0
  407ada:	f040 852d 	bne.w	408538 <_vfprintf_r+0xc9c>
  407ade:	f01b 0301 	ands.w	r3, fp, #1
  407ae2:	930d      	str	r3, [sp, #52]	; 0x34
  407ae4:	f000 8668 	beq.w	4087b8 <_vfprintf_r+0xf1c>
  407ae8:	af40      	add	r7, sp, #256	; 0x100
  407aea:	2330      	movs	r3, #48	; 0x30
  407aec:	f807 3d41 	strb.w	r3, [r7, #-65]!
  407af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407af4:	4293      	cmp	r3, r2
  407af6:	bfb8      	it	lt
  407af8:	4613      	movlt	r3, r2
  407afa:	9307      	str	r3, [sp, #28]
  407afc:	2300      	movs	r3, #0
  407afe:	9310      	str	r3, [sp, #64]	; 0x40
  407b00:	f1ba 0f00 	cmp.w	sl, #0
  407b04:	d002      	beq.n	407b0c <_vfprintf_r+0x270>
  407b06:	9b07      	ldr	r3, [sp, #28]
  407b08:	3301      	adds	r3, #1
  407b0a:	9307      	str	r3, [sp, #28]
  407b0c:	9b06      	ldr	r3, [sp, #24]
  407b0e:	f013 0302 	ands.w	r3, r3, #2
  407b12:	930f      	str	r3, [sp, #60]	; 0x3c
  407b14:	d002      	beq.n	407b1c <_vfprintf_r+0x280>
  407b16:	9b07      	ldr	r3, [sp, #28]
  407b18:	3302      	adds	r3, #2
  407b1a:	9307      	str	r3, [sp, #28]
  407b1c:	9b06      	ldr	r3, [sp, #24]
  407b1e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  407b22:	f040 831b 	bne.w	40815c <_vfprintf_r+0x8c0>
  407b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407b28:	9a07      	ldr	r2, [sp, #28]
  407b2a:	eba3 0b02 	sub.w	fp, r3, r2
  407b2e:	f1bb 0f00 	cmp.w	fp, #0
  407b32:	f340 8313 	ble.w	40815c <_vfprintf_r+0x8c0>
  407b36:	f1bb 0f10 	cmp.w	fp, #16
  407b3a:	9925      	ldr	r1, [sp, #148]	; 0x94
  407b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b3e:	dd28      	ble.n	407b92 <_vfprintf_r+0x2f6>
  407b40:	4643      	mov	r3, r8
  407b42:	2410      	movs	r4, #16
  407b44:	46a8      	mov	r8, r5
  407b46:	f8dd a020 	ldr.w	sl, [sp, #32]
  407b4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407b4c:	e006      	b.n	407b5c <_vfprintf_r+0x2c0>
  407b4e:	f1ab 0b10 	sub.w	fp, fp, #16
  407b52:	f1bb 0f10 	cmp.w	fp, #16
  407b56:	f103 0308 	add.w	r3, r3, #8
  407b5a:	dd18      	ble.n	407b8e <_vfprintf_r+0x2f2>
  407b5c:	3201      	adds	r2, #1
  407b5e:	48b9      	ldr	r0, [pc, #740]	; (407e44 <_vfprintf_r+0x5a8>)
  407b60:	9224      	str	r2, [sp, #144]	; 0x90
  407b62:	3110      	adds	r1, #16
  407b64:	2a07      	cmp	r2, #7
  407b66:	9125      	str	r1, [sp, #148]	; 0x94
  407b68:	e883 0011 	stmia.w	r3, {r0, r4}
  407b6c:	ddef      	ble.n	407b4e <_vfprintf_r+0x2b2>
  407b6e:	aa23      	add	r2, sp, #140	; 0x8c
  407b70:	4629      	mov	r1, r5
  407b72:	4650      	mov	r0, sl
  407b74:	f003 fc3c 	bl	40b3f0 <__sprint_r>
  407b78:	2800      	cmp	r0, #0
  407b7a:	f040 836a 	bne.w	408252 <_vfprintf_r+0x9b6>
  407b7e:	f1ab 0b10 	sub.w	fp, fp, #16
  407b82:	f1bb 0f10 	cmp.w	fp, #16
  407b86:	9925      	ldr	r1, [sp, #148]	; 0x94
  407b88:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b8a:	ab30      	add	r3, sp, #192	; 0xc0
  407b8c:	dce6      	bgt.n	407b5c <_vfprintf_r+0x2c0>
  407b8e:	4645      	mov	r5, r8
  407b90:	4698      	mov	r8, r3
  407b92:	3201      	adds	r2, #1
  407b94:	4bab      	ldr	r3, [pc, #684]	; (407e44 <_vfprintf_r+0x5a8>)
  407b96:	9224      	str	r2, [sp, #144]	; 0x90
  407b98:	eb0b 0401 	add.w	r4, fp, r1
  407b9c:	2a07      	cmp	r2, #7
  407b9e:	9425      	str	r4, [sp, #148]	; 0x94
  407ba0:	e888 0808 	stmia.w	r8, {r3, fp}
  407ba4:	f300 84cd 	bgt.w	408542 <_vfprintf_r+0xca6>
  407ba8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407bac:	f108 0808 	add.w	r8, r8, #8
  407bb0:	f1ba 0f00 	cmp.w	sl, #0
  407bb4:	d00e      	beq.n	407bd4 <_vfprintf_r+0x338>
  407bb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bb8:	3301      	adds	r3, #1
  407bba:	3401      	adds	r4, #1
  407bbc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407bc0:	2201      	movs	r2, #1
  407bc2:	2b07      	cmp	r3, #7
  407bc4:	9425      	str	r4, [sp, #148]	; 0x94
  407bc6:	9324      	str	r3, [sp, #144]	; 0x90
  407bc8:	e888 0006 	stmia.w	r8, {r1, r2}
  407bcc:	f300 840a 	bgt.w	4083e4 <_vfprintf_r+0xb48>
  407bd0:	f108 0808 	add.w	r8, r8, #8
  407bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407bd6:	b16b      	cbz	r3, 407bf4 <_vfprintf_r+0x358>
  407bd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bda:	3301      	adds	r3, #1
  407bdc:	3402      	adds	r4, #2
  407bde:	a91c      	add	r1, sp, #112	; 0x70
  407be0:	2202      	movs	r2, #2
  407be2:	2b07      	cmp	r3, #7
  407be4:	9425      	str	r4, [sp, #148]	; 0x94
  407be6:	9324      	str	r3, [sp, #144]	; 0x90
  407be8:	e888 0006 	stmia.w	r8, {r1, r2}
  407bec:	f300 8406 	bgt.w	4083fc <_vfprintf_r+0xb60>
  407bf0:	f108 0808 	add.w	r8, r8, #8
  407bf4:	2d80      	cmp	r5, #128	; 0x80
  407bf6:	f000 832e 	beq.w	408256 <_vfprintf_r+0x9ba>
  407bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407bfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407bfe:	eba3 0a02 	sub.w	sl, r3, r2
  407c02:	f1ba 0f00 	cmp.w	sl, #0
  407c06:	dd3b      	ble.n	407c80 <_vfprintf_r+0x3e4>
  407c08:	f1ba 0f10 	cmp.w	sl, #16
  407c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c0e:	4d8e      	ldr	r5, [pc, #568]	; (407e48 <_vfprintf_r+0x5ac>)
  407c10:	dd2b      	ble.n	407c6a <_vfprintf_r+0x3ce>
  407c12:	4642      	mov	r2, r8
  407c14:	4621      	mov	r1, r4
  407c16:	46b0      	mov	r8, r6
  407c18:	f04f 0b10 	mov.w	fp, #16
  407c1c:	462e      	mov	r6, r5
  407c1e:	9c08      	ldr	r4, [sp, #32]
  407c20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407c22:	e006      	b.n	407c32 <_vfprintf_r+0x396>
  407c24:	f1aa 0a10 	sub.w	sl, sl, #16
  407c28:	f1ba 0f10 	cmp.w	sl, #16
  407c2c:	f102 0208 	add.w	r2, r2, #8
  407c30:	dd17      	ble.n	407c62 <_vfprintf_r+0x3c6>
  407c32:	3301      	adds	r3, #1
  407c34:	3110      	adds	r1, #16
  407c36:	2b07      	cmp	r3, #7
  407c38:	9125      	str	r1, [sp, #148]	; 0x94
  407c3a:	9324      	str	r3, [sp, #144]	; 0x90
  407c3c:	e882 0840 	stmia.w	r2, {r6, fp}
  407c40:	ddf0      	ble.n	407c24 <_vfprintf_r+0x388>
  407c42:	aa23      	add	r2, sp, #140	; 0x8c
  407c44:	4629      	mov	r1, r5
  407c46:	4620      	mov	r0, r4
  407c48:	f003 fbd2 	bl	40b3f0 <__sprint_r>
  407c4c:	2800      	cmp	r0, #0
  407c4e:	f040 8300 	bne.w	408252 <_vfprintf_r+0x9b6>
  407c52:	f1aa 0a10 	sub.w	sl, sl, #16
  407c56:	f1ba 0f10 	cmp.w	sl, #16
  407c5a:	9925      	ldr	r1, [sp, #148]	; 0x94
  407c5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c5e:	aa30      	add	r2, sp, #192	; 0xc0
  407c60:	dce7      	bgt.n	407c32 <_vfprintf_r+0x396>
  407c62:	4635      	mov	r5, r6
  407c64:	460c      	mov	r4, r1
  407c66:	4646      	mov	r6, r8
  407c68:	4690      	mov	r8, r2
  407c6a:	3301      	adds	r3, #1
  407c6c:	4454      	add	r4, sl
  407c6e:	2b07      	cmp	r3, #7
  407c70:	9425      	str	r4, [sp, #148]	; 0x94
  407c72:	9324      	str	r3, [sp, #144]	; 0x90
  407c74:	e888 0420 	stmia.w	r8, {r5, sl}
  407c78:	f300 83a9 	bgt.w	4083ce <_vfprintf_r+0xb32>
  407c7c:	f108 0808 	add.w	r8, r8, #8
  407c80:	9b06      	ldr	r3, [sp, #24]
  407c82:	05db      	lsls	r3, r3, #23
  407c84:	f100 8285 	bmi.w	408192 <_vfprintf_r+0x8f6>
  407c88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
  407c8c:	f8c8 7000 	str.w	r7, [r8]
  407c90:	3301      	adds	r3, #1
  407c92:	440c      	add	r4, r1
  407c94:	2b07      	cmp	r3, #7
  407c96:	9425      	str	r4, [sp, #148]	; 0x94
  407c98:	f8c8 1004 	str.w	r1, [r8, #4]
  407c9c:	9324      	str	r3, [sp, #144]	; 0x90
  407c9e:	f300 8375 	bgt.w	40838c <_vfprintf_r+0xaf0>
  407ca2:	f108 0808 	add.w	r8, r8, #8
  407ca6:	9b06      	ldr	r3, [sp, #24]
  407ca8:	0759      	lsls	r1, r3, #29
  407caa:	d53b      	bpl.n	407d24 <_vfprintf_r+0x488>
  407cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407cae:	9a07      	ldr	r2, [sp, #28]
  407cb0:	1a9d      	subs	r5, r3, r2
  407cb2:	2d00      	cmp	r5, #0
  407cb4:	dd36      	ble.n	407d24 <_vfprintf_r+0x488>
  407cb6:	2d10      	cmp	r5, #16
  407cb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407cba:	dd21      	ble.n	407d00 <_vfprintf_r+0x464>
  407cbc:	2610      	movs	r6, #16
  407cbe:	9f08      	ldr	r7, [sp, #32]
  407cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407cc4:	e004      	b.n	407cd0 <_vfprintf_r+0x434>
  407cc6:	3d10      	subs	r5, #16
  407cc8:	2d10      	cmp	r5, #16
  407cca:	f108 0808 	add.w	r8, r8, #8
  407cce:	dd17      	ble.n	407d00 <_vfprintf_r+0x464>
  407cd0:	3301      	adds	r3, #1
  407cd2:	4a5c      	ldr	r2, [pc, #368]	; (407e44 <_vfprintf_r+0x5a8>)
  407cd4:	9324      	str	r3, [sp, #144]	; 0x90
  407cd6:	3410      	adds	r4, #16
  407cd8:	2b07      	cmp	r3, #7
  407cda:	9425      	str	r4, [sp, #148]	; 0x94
  407cdc:	e888 0044 	stmia.w	r8, {r2, r6}
  407ce0:	ddf1      	ble.n	407cc6 <_vfprintf_r+0x42a>
  407ce2:	aa23      	add	r2, sp, #140	; 0x8c
  407ce4:	4651      	mov	r1, sl
  407ce6:	4638      	mov	r0, r7
  407ce8:	f003 fb82 	bl	40b3f0 <__sprint_r>
  407cec:	2800      	cmp	r0, #0
  407cee:	f040 823f 	bne.w	408170 <_vfprintf_r+0x8d4>
  407cf2:	3d10      	subs	r5, #16
  407cf4:	2d10      	cmp	r5, #16
  407cf6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407cfa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407cfe:	dce7      	bgt.n	407cd0 <_vfprintf_r+0x434>
  407d00:	3301      	adds	r3, #1
  407d02:	4a50      	ldr	r2, [pc, #320]	; (407e44 <_vfprintf_r+0x5a8>)
  407d04:	9324      	str	r3, [sp, #144]	; 0x90
  407d06:	442c      	add	r4, r5
  407d08:	2b07      	cmp	r3, #7
  407d0a:	9425      	str	r4, [sp, #148]	; 0x94
  407d0c:	e888 0024 	stmia.w	r8, {r2, r5}
  407d10:	dd08      	ble.n	407d24 <_vfprintf_r+0x488>
  407d12:	aa23      	add	r2, sp, #140	; 0x8c
  407d14:	990a      	ldr	r1, [sp, #40]	; 0x28
  407d16:	9808      	ldr	r0, [sp, #32]
  407d18:	f003 fb6a 	bl	40b3f0 <__sprint_r>
  407d1c:	2800      	cmp	r0, #0
  407d1e:	f040 8347 	bne.w	4083b0 <_vfprintf_r+0xb14>
  407d22:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407d28:	9907      	ldr	r1, [sp, #28]
  407d2a:	428a      	cmp	r2, r1
  407d2c:	bfac      	ite	ge
  407d2e:	189b      	addge	r3, r3, r2
  407d30:	185b      	addlt	r3, r3, r1
  407d32:	930b      	str	r3, [sp, #44]	; 0x2c
  407d34:	2c00      	cmp	r4, #0
  407d36:	f040 8333 	bne.w	4083a0 <_vfprintf_r+0xb04>
  407d3a:	2300      	movs	r3, #0
  407d3c:	9324      	str	r3, [sp, #144]	; 0x90
  407d3e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407d42:	e5f7      	b.n	407934 <_vfprintf_r+0x98>
  407d44:	4651      	mov	r1, sl
  407d46:	9808      	ldr	r0, [sp, #32]
  407d48:	f001 f896 	bl	408e78 <__swsetup_r>
  407d4c:	2800      	cmp	r0, #0
  407d4e:	d038      	beq.n	407dc2 <_vfprintf_r+0x526>
  407d50:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  407d54:	07dd      	lsls	r5, r3, #31
  407d56:	d404      	bmi.n	407d62 <_vfprintf_r+0x4c6>
  407d58:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407d5c:	059c      	lsls	r4, r3, #22
  407d5e:	f140 85ca 	bpl.w	4088f6 <_vfprintf_r+0x105a>
  407d62:	f04f 33ff 	mov.w	r3, #4294967295
  407d66:	930b      	str	r3, [sp, #44]	; 0x2c
  407d68:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407d6a:	b041      	add	sp, #260	; 0x104
  407d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d70:	aa23      	add	r2, sp, #140	; 0x8c
  407d72:	990a      	ldr	r1, [sp, #40]	; 0x28
  407d74:	9808      	ldr	r0, [sp, #32]
  407d76:	f003 fb3b 	bl	40b3f0 <__sprint_r>
  407d7a:	2800      	cmp	r0, #0
  407d7c:	f040 8318 	bne.w	4083b0 <_vfprintf_r+0xb14>
  407d80:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407d84:	e5f5      	b.n	407972 <_vfprintf_r+0xd6>
  407d86:	9808      	ldr	r0, [sp, #32]
  407d88:	f002 f9a0 	bl	40a0cc <__sinit>
  407d8c:	e59c      	b.n	4078c8 <_vfprintf_r+0x2c>
  407d8e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  407d92:	2a00      	cmp	r2, #0
  407d94:	f6ff adbd 	blt.w	407912 <_vfprintf_r+0x76>
  407d98:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  407d9c:	07d0      	lsls	r0, r2, #31
  407d9e:	d405      	bmi.n	407dac <_vfprintf_r+0x510>
  407da0:	0599      	lsls	r1, r3, #22
  407da2:	d403      	bmi.n	407dac <_vfprintf_r+0x510>
  407da4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407da8:	f002 fcce 	bl	40a748 <__retarget_lock_release_recursive>
  407dac:	462b      	mov	r3, r5
  407dae:	464a      	mov	r2, r9
  407db0:	4651      	mov	r1, sl
  407db2:	9808      	ldr	r0, [sp, #32]
  407db4:	f001 f81e 	bl	408df4 <__sbprintf>
  407db8:	900b      	str	r0, [sp, #44]	; 0x2c
  407dba:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407dbc:	b041      	add	sp, #260	; 0x104
  407dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dc2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407dc6:	e59f      	b.n	407908 <_vfprintf_r+0x6c>
  407dc8:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407dcc:	f002 fcba 	bl	40a744 <__retarget_lock_acquire_recursive>
  407dd0:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  407dd4:	b293      	uxth	r3, r2
  407dd6:	e582      	b.n	4078de <_vfprintf_r+0x42>
  407dd8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407dda:	930e      	str	r3, [sp, #56]	; 0x38
  407ddc:	4240      	negs	r0, r0
  407dde:	900c      	str	r0, [sp, #48]	; 0x30
  407de0:	f04b 0b04 	orr.w	fp, fp, #4
  407de4:	f899 6000 	ldrb.w	r6, [r9]
  407de8:	e5d7      	b.n	40799a <_vfprintf_r+0xfe>
  407dea:	2a00      	cmp	r2, #0
  407dec:	f040 87df 	bne.w	408dae <_vfprintf_r+0x1512>
  407df0:	4b16      	ldr	r3, [pc, #88]	; (407e4c <_vfprintf_r+0x5b0>)
  407df2:	9318      	str	r3, [sp, #96]	; 0x60
  407df4:	f01b 0f20 	tst.w	fp, #32
  407df8:	f040 84b9 	bne.w	40876e <_vfprintf_r+0xed2>
  407dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407dfe:	f01b 0f10 	tst.w	fp, #16
  407e02:	4613      	mov	r3, r2
  407e04:	f040 83dc 	bne.w	4085c0 <_vfprintf_r+0xd24>
  407e08:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407e0c:	f000 83d8 	beq.w	4085c0 <_vfprintf_r+0xd24>
  407e10:	3304      	adds	r3, #4
  407e12:	8814      	ldrh	r4, [r2, #0]
  407e14:	930e      	str	r3, [sp, #56]	; 0x38
  407e16:	2500      	movs	r5, #0
  407e18:	f01b 0f01 	tst.w	fp, #1
  407e1c:	f000 8322 	beq.w	408464 <_vfprintf_r+0xbc8>
  407e20:	ea54 0305 	orrs.w	r3, r4, r5
  407e24:	f000 831e 	beq.w	408464 <_vfprintf_r+0xbc8>
  407e28:	2330      	movs	r3, #48	; 0x30
  407e2a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407e2e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407e32:	f04b 0b02 	orr.w	fp, fp, #2
  407e36:	2302      	movs	r3, #2
  407e38:	e63c      	b.n	407ab4 <_vfprintf_r+0x218>
  407e3a:	f04b 0b20 	orr.w	fp, fp, #32
  407e3e:	f899 6000 	ldrb.w	r6, [r9]
  407e42:	e5aa      	b.n	40799a <_vfprintf_r+0xfe>
  407e44:	0040c520 	.word	0x0040c520
  407e48:	0040c530 	.word	0x0040c530
  407e4c:	0040c500 	.word	0x0040c500
  407e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407e52:	6817      	ldr	r7, [r2, #0]
  407e54:	2400      	movs	r4, #0
  407e56:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  407e5a:	1d15      	adds	r5, r2, #4
  407e5c:	2f00      	cmp	r7, #0
  407e5e:	f000 864e 	beq.w	408afe <_vfprintf_r+0x1262>
  407e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407e64:	1c53      	adds	r3, r2, #1
  407e66:	f000 85cc 	beq.w	408a02 <_vfprintf_r+0x1166>
  407e6a:	4621      	mov	r1, r4
  407e6c:	4638      	mov	r0, r7
  407e6e:	f002 fce7 	bl	40a840 <memchr>
  407e72:	2800      	cmp	r0, #0
  407e74:	f000 8697 	beq.w	408ba6 <_vfprintf_r+0x130a>
  407e78:	1bc3      	subs	r3, r0, r7
  407e7a:	930d      	str	r3, [sp, #52]	; 0x34
  407e7c:	9409      	str	r4, [sp, #36]	; 0x24
  407e7e:	950e      	str	r5, [sp, #56]	; 0x38
  407e80:	f8cd b018 	str.w	fp, [sp, #24]
  407e84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407e88:	9307      	str	r3, [sp, #28]
  407e8a:	9410      	str	r4, [sp, #64]	; 0x40
  407e8c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407e90:	e636      	b.n	407b00 <_vfprintf_r+0x264>
  407e92:	2a00      	cmp	r2, #0
  407e94:	f040 8796 	bne.w	408dc4 <_vfprintf_r+0x1528>
  407e98:	f01b 0f20 	tst.w	fp, #32
  407e9c:	f040 845a 	bne.w	408754 <_vfprintf_r+0xeb8>
  407ea0:	f01b 0f10 	tst.w	fp, #16
  407ea4:	f040 83a2 	bne.w	4085ec <_vfprintf_r+0xd50>
  407ea8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407eac:	f000 839e 	beq.w	4085ec <_vfprintf_r+0xd50>
  407eb0:	990e      	ldr	r1, [sp, #56]	; 0x38
  407eb2:	f9b1 4000 	ldrsh.w	r4, [r1]
  407eb6:	3104      	adds	r1, #4
  407eb8:	17e5      	asrs	r5, r4, #31
  407eba:	4622      	mov	r2, r4
  407ebc:	462b      	mov	r3, r5
  407ebe:	910e      	str	r1, [sp, #56]	; 0x38
  407ec0:	2a00      	cmp	r2, #0
  407ec2:	f173 0300 	sbcs.w	r3, r3, #0
  407ec6:	f2c0 8487 	blt.w	4087d8 <_vfprintf_r+0xf3c>
  407eca:	9909      	ldr	r1, [sp, #36]	; 0x24
  407ecc:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407ed0:	1c4a      	adds	r2, r1, #1
  407ed2:	f04f 0301 	mov.w	r3, #1
  407ed6:	f47f adf5 	bne.w	407ac4 <_vfprintf_r+0x228>
  407eda:	ea54 0205 	orrs.w	r2, r4, r5
  407ede:	f000 826c 	beq.w	4083ba <_vfprintf_r+0xb1e>
  407ee2:	f8cd b018 	str.w	fp, [sp, #24]
  407ee6:	2b01      	cmp	r3, #1
  407ee8:	f000 8308 	beq.w	4084fc <_vfprintf_r+0xc60>
  407eec:	2b02      	cmp	r3, #2
  407eee:	f040 8295 	bne.w	40841c <_vfprintf_r+0xb80>
  407ef2:	9818      	ldr	r0, [sp, #96]	; 0x60
  407ef4:	af30      	add	r7, sp, #192	; 0xc0
  407ef6:	0923      	lsrs	r3, r4, #4
  407ef8:	f004 010f 	and.w	r1, r4, #15
  407efc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407f00:	092a      	lsrs	r2, r5, #4
  407f02:	461c      	mov	r4, r3
  407f04:	4615      	mov	r5, r2
  407f06:	5c43      	ldrb	r3, [r0, r1]
  407f08:	f807 3d01 	strb.w	r3, [r7, #-1]!
  407f0c:	ea54 0305 	orrs.w	r3, r4, r5
  407f10:	d1f1      	bne.n	407ef6 <_vfprintf_r+0x65a>
  407f12:	ab30      	add	r3, sp, #192	; 0xc0
  407f14:	1bdb      	subs	r3, r3, r7
  407f16:	930d      	str	r3, [sp, #52]	; 0x34
  407f18:	e5ea      	b.n	407af0 <_vfprintf_r+0x254>
  407f1a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407f1e:	f899 6000 	ldrb.w	r6, [r9]
  407f22:	e53a      	b.n	40799a <_vfprintf_r+0xfe>
  407f24:	f899 6000 	ldrb.w	r6, [r9]
  407f28:	2e6c      	cmp	r6, #108	; 0x6c
  407f2a:	bf03      	ittte	eq
  407f2c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  407f30:	f04b 0b20 	orreq.w	fp, fp, #32
  407f34:	f109 0901 	addeq.w	r9, r9, #1
  407f38:	f04b 0b10 	orrne.w	fp, fp, #16
  407f3c:	e52d      	b.n	40799a <_vfprintf_r+0xfe>
  407f3e:	2a00      	cmp	r2, #0
  407f40:	f040 874c 	bne.w	408ddc <_vfprintf_r+0x1540>
  407f44:	f01b 0f20 	tst.w	fp, #32
  407f48:	f040 853f 	bne.w	4089ca <_vfprintf_r+0x112e>
  407f4c:	f01b 0f10 	tst.w	fp, #16
  407f50:	f040 80fc 	bne.w	40814c <_vfprintf_r+0x8b0>
  407f54:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407f58:	f000 80f8 	beq.w	40814c <_vfprintf_r+0x8b0>
  407f5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407f5e:	6813      	ldr	r3, [r2, #0]
  407f60:	3204      	adds	r2, #4
  407f62:	920e      	str	r2, [sp, #56]	; 0x38
  407f64:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  407f68:	801a      	strh	r2, [r3, #0]
  407f6a:	e4e3      	b.n	407934 <_vfprintf_r+0x98>
  407f6c:	f899 6000 	ldrb.w	r6, [r9]
  407f70:	2900      	cmp	r1, #0
  407f72:	f47f ad12 	bne.w	40799a <_vfprintf_r+0xfe>
  407f76:	2201      	movs	r2, #1
  407f78:	2120      	movs	r1, #32
  407f7a:	e50e      	b.n	40799a <_vfprintf_r+0xfe>
  407f7c:	f899 6000 	ldrb.w	r6, [r9]
  407f80:	2e2a      	cmp	r6, #42	; 0x2a
  407f82:	f109 0001 	add.w	r0, r9, #1
  407f86:	f000 86f1 	beq.w	408d6c <_vfprintf_r+0x14d0>
  407f8a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407f8e:	2b09      	cmp	r3, #9
  407f90:	4681      	mov	r9, r0
  407f92:	bf98      	it	ls
  407f94:	2000      	movls	r0, #0
  407f96:	f200 863d 	bhi.w	408c14 <_vfprintf_r+0x1378>
  407f9a:	f819 6b01 	ldrb.w	r6, [r9], #1
  407f9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407fa2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  407fa6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407faa:	2b09      	cmp	r3, #9
  407fac:	d9f5      	bls.n	407f9a <_vfprintf_r+0x6fe>
  407fae:	9009      	str	r0, [sp, #36]	; 0x24
  407fb0:	e4f5      	b.n	40799e <_vfprintf_r+0x102>
  407fb2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407fb6:	f899 6000 	ldrb.w	r6, [r9]
  407fba:	e4ee      	b.n	40799a <_vfprintf_r+0xfe>
  407fbc:	f899 6000 	ldrb.w	r6, [r9]
  407fc0:	2201      	movs	r2, #1
  407fc2:	212b      	movs	r1, #43	; 0x2b
  407fc4:	e4e9      	b.n	40799a <_vfprintf_r+0xfe>
  407fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407fc8:	4bae      	ldr	r3, [pc, #696]	; (408284 <_vfprintf_r+0x9e8>)
  407fca:	6814      	ldr	r4, [r2, #0]
  407fcc:	9318      	str	r3, [sp, #96]	; 0x60
  407fce:	2678      	movs	r6, #120	; 0x78
  407fd0:	2330      	movs	r3, #48	; 0x30
  407fd2:	3204      	adds	r2, #4
  407fd4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407fd8:	f04b 0b02 	orr.w	fp, fp, #2
  407fdc:	920e      	str	r2, [sp, #56]	; 0x38
  407fde:	2500      	movs	r5, #0
  407fe0:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407fe4:	2302      	movs	r3, #2
  407fe6:	e565      	b.n	407ab4 <_vfprintf_r+0x218>
  407fe8:	2a00      	cmp	r2, #0
  407fea:	f040 86e4 	bne.w	408db6 <_vfprintf_r+0x151a>
  407fee:	4ba6      	ldr	r3, [pc, #664]	; (408288 <_vfprintf_r+0x9ec>)
  407ff0:	9318      	str	r3, [sp, #96]	; 0x60
  407ff2:	e6ff      	b.n	407df4 <_vfprintf_r+0x558>
  407ff4:	990e      	ldr	r1, [sp, #56]	; 0x38
  407ff6:	f8cd b018 	str.w	fp, [sp, #24]
  407ffa:	680a      	ldr	r2, [r1, #0]
  407ffc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408000:	2300      	movs	r3, #0
  408002:	460a      	mov	r2, r1
  408004:	469a      	mov	sl, r3
  408006:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40800a:	3204      	adds	r2, #4
  40800c:	2301      	movs	r3, #1
  40800e:	9307      	str	r3, [sp, #28]
  408010:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  408014:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  408018:	920e      	str	r2, [sp, #56]	; 0x38
  40801a:	930d      	str	r3, [sp, #52]	; 0x34
  40801c:	af26      	add	r7, sp, #152	; 0x98
  40801e:	e575      	b.n	407b0c <_vfprintf_r+0x270>
  408020:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  408024:	2000      	movs	r0, #0
  408026:	f819 6b01 	ldrb.w	r6, [r9], #1
  40802a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40802e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  408032:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  408036:	2b09      	cmp	r3, #9
  408038:	d9f5      	bls.n	408026 <_vfprintf_r+0x78a>
  40803a:	900c      	str	r0, [sp, #48]	; 0x30
  40803c:	e4af      	b.n	40799e <_vfprintf_r+0x102>
  40803e:	2a00      	cmp	r2, #0
  408040:	f040 86c8 	bne.w	408dd4 <_vfprintf_r+0x1538>
  408044:	f04b 0b10 	orr.w	fp, fp, #16
  408048:	e726      	b.n	407e98 <_vfprintf_r+0x5fc>
  40804a:	f04b 0b01 	orr.w	fp, fp, #1
  40804e:	f899 6000 	ldrb.w	r6, [r9]
  408052:	e4a2      	b.n	40799a <_vfprintf_r+0xfe>
  408054:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408056:	6823      	ldr	r3, [r4, #0]
  408058:	930c      	str	r3, [sp, #48]	; 0x30
  40805a:	4618      	mov	r0, r3
  40805c:	2800      	cmp	r0, #0
  40805e:	4623      	mov	r3, r4
  408060:	f103 0304 	add.w	r3, r3, #4
  408064:	f6ff aeb8 	blt.w	407dd8 <_vfprintf_r+0x53c>
  408068:	930e      	str	r3, [sp, #56]	; 0x38
  40806a:	f899 6000 	ldrb.w	r6, [r9]
  40806e:	e494      	b.n	40799a <_vfprintf_r+0xfe>
  408070:	2a00      	cmp	r2, #0
  408072:	f040 86b7 	bne.w	408de4 <_vfprintf_r+0x1548>
  408076:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408078:	3507      	adds	r5, #7
  40807a:	f025 0307 	bic.w	r3, r5, #7
  40807e:	f103 0208 	add.w	r2, r3, #8
  408082:	920e      	str	r2, [sp, #56]	; 0x38
  408084:	681a      	ldr	r2, [r3, #0]
  408086:	9213      	str	r2, [sp, #76]	; 0x4c
  408088:	685b      	ldr	r3, [r3, #4]
  40808a:	9312      	str	r3, [sp, #72]	; 0x48
  40808c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40808e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  408090:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408094:	4628      	mov	r0, r5
  408096:	4621      	mov	r1, r4
  408098:	f04f 32ff 	mov.w	r2, #4294967295
  40809c:	4b7b      	ldr	r3, [pc, #492]	; (40828c <_vfprintf_r+0x9f0>)
  40809e:	f7fe fae5 	bl	40666c <__aeabi_dcmpun>
  4080a2:	2800      	cmp	r0, #0
  4080a4:	f040 83a2 	bne.w	4087ec <_vfprintf_r+0xf50>
  4080a8:	4628      	mov	r0, r5
  4080aa:	4621      	mov	r1, r4
  4080ac:	f04f 32ff 	mov.w	r2, #4294967295
  4080b0:	4b76      	ldr	r3, [pc, #472]	; (40828c <_vfprintf_r+0x9f0>)
  4080b2:	f7fe fabd 	bl	406630 <__aeabi_dcmple>
  4080b6:	2800      	cmp	r0, #0
  4080b8:	f040 8398 	bne.w	4087ec <_vfprintf_r+0xf50>
  4080bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4080be:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4080c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4080c2:	9912      	ldr	r1, [sp, #72]	; 0x48
  4080c4:	f7fe faaa 	bl	40661c <__aeabi_dcmplt>
  4080c8:	2800      	cmp	r0, #0
  4080ca:	f040 8435 	bne.w	408938 <_vfprintf_r+0x109c>
  4080ce:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4080d2:	4f6f      	ldr	r7, [pc, #444]	; (408290 <_vfprintf_r+0x9f4>)
  4080d4:	4b6f      	ldr	r3, [pc, #444]	; (408294 <_vfprintf_r+0x9f8>)
  4080d6:	2203      	movs	r2, #3
  4080d8:	2100      	movs	r1, #0
  4080da:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4080de:	9207      	str	r2, [sp, #28]
  4080e0:	9109      	str	r1, [sp, #36]	; 0x24
  4080e2:	9006      	str	r0, [sp, #24]
  4080e4:	2e47      	cmp	r6, #71	; 0x47
  4080e6:	bfd8      	it	le
  4080e8:	461f      	movle	r7, r3
  4080ea:	920d      	str	r2, [sp, #52]	; 0x34
  4080ec:	9110      	str	r1, [sp, #64]	; 0x40
  4080ee:	e507      	b.n	407b00 <_vfprintf_r+0x264>
  4080f0:	f04b 0b08 	orr.w	fp, fp, #8
  4080f4:	f899 6000 	ldrb.w	r6, [r9]
  4080f8:	e44f      	b.n	40799a <_vfprintf_r+0xfe>
  4080fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4080fc:	3507      	adds	r5, #7
  4080fe:	f025 0307 	bic.w	r3, r5, #7
  408102:	f103 0208 	add.w	r2, r3, #8
  408106:	e9d3 4500 	ldrd	r4, r5, [r3]
  40810a:	920e      	str	r2, [sp, #56]	; 0x38
  40810c:	2300      	movs	r3, #0
  40810e:	e4d1      	b.n	407ab4 <_vfprintf_r+0x218>
  408110:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408112:	3507      	adds	r5, #7
  408114:	f025 0307 	bic.w	r3, r5, #7
  408118:	f103 0208 	add.w	r2, r3, #8
  40811c:	e9d3 4500 	ldrd	r4, r5, [r3]
  408120:	920e      	str	r2, [sp, #56]	; 0x38
  408122:	2301      	movs	r3, #1
  408124:	e4c6      	b.n	407ab4 <_vfprintf_r+0x218>
  408126:	2a00      	cmp	r2, #0
  408128:	f040 8650 	bne.w	408dcc <_vfprintf_r+0x1530>
  40812c:	b1c6      	cbz	r6, 408160 <_vfprintf_r+0x8c4>
  40812e:	2300      	movs	r3, #0
  408130:	2201      	movs	r2, #1
  408132:	469a      	mov	sl, r3
  408134:	9207      	str	r2, [sp, #28]
  408136:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40813a:	f8cd b018 	str.w	fp, [sp, #24]
  40813e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408142:	9309      	str	r3, [sp, #36]	; 0x24
  408144:	9310      	str	r3, [sp, #64]	; 0x40
  408146:	920d      	str	r2, [sp, #52]	; 0x34
  408148:	af26      	add	r7, sp, #152	; 0x98
  40814a:	e4df      	b.n	407b0c <_vfprintf_r+0x270>
  40814c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40814e:	6813      	ldr	r3, [r2, #0]
  408150:	3204      	adds	r2, #4
  408152:	920e      	str	r2, [sp, #56]	; 0x38
  408154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408156:	601a      	str	r2, [r3, #0]
  408158:	f7ff bbec 	b.w	407934 <_vfprintf_r+0x98>
  40815c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40815e:	e527      	b.n	407bb0 <_vfprintf_r+0x314>
  408160:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408162:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  408166:	2b00      	cmp	r3, #0
  408168:	f040 8594 	bne.w	408c94 <_vfprintf_r+0x13f8>
  40816c:	2300      	movs	r3, #0
  40816e:	9324      	str	r3, [sp, #144]	; 0x90
  408170:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  408174:	f013 0f01 	tst.w	r3, #1
  408178:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40817c:	d102      	bne.n	408184 <_vfprintf_r+0x8e8>
  40817e:	059a      	lsls	r2, r3, #22
  408180:	f140 8249 	bpl.w	408616 <_vfprintf_r+0xd7a>
  408184:	065b      	lsls	r3, r3, #25
  408186:	f53f adec 	bmi.w	407d62 <_vfprintf_r+0x4c6>
  40818a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40818c:	b041      	add	sp, #260	; 0x104
  40818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408192:	2e65      	cmp	r6, #101	; 0x65
  408194:	f340 80b2 	ble.w	4082fc <_vfprintf_r+0xa60>
  408198:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40819a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40819c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40819e:	9912      	ldr	r1, [sp, #72]	; 0x48
  4081a0:	f7fe fa32 	bl	406608 <__aeabi_dcmpeq>
  4081a4:	2800      	cmp	r0, #0
  4081a6:	f000 8160 	beq.w	40846a <_vfprintf_r+0xbce>
  4081aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081ac:	4a3a      	ldr	r2, [pc, #232]	; (408298 <_vfprintf_r+0x9fc>)
  4081ae:	f8c8 2000 	str.w	r2, [r8]
  4081b2:	3301      	adds	r3, #1
  4081b4:	3401      	adds	r4, #1
  4081b6:	2201      	movs	r2, #1
  4081b8:	2b07      	cmp	r3, #7
  4081ba:	9425      	str	r4, [sp, #148]	; 0x94
  4081bc:	9324      	str	r3, [sp, #144]	; 0x90
  4081be:	f8c8 2004 	str.w	r2, [r8, #4]
  4081c2:	f300 83bf 	bgt.w	408944 <_vfprintf_r+0x10a8>
  4081c6:	f108 0808 	add.w	r8, r8, #8
  4081ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4081cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4081ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4081d0:	4293      	cmp	r3, r2
  4081d2:	db03      	blt.n	4081dc <_vfprintf_r+0x940>
  4081d4:	9b06      	ldr	r3, [sp, #24]
  4081d6:	07df      	lsls	r7, r3, #31
  4081d8:	f57f ad65 	bpl.w	407ca6 <_vfprintf_r+0x40a>
  4081dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4081e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4081e2:	f8c8 2000 	str.w	r2, [r8]
  4081e6:	3301      	adds	r3, #1
  4081e8:	440c      	add	r4, r1
  4081ea:	2b07      	cmp	r3, #7
  4081ec:	f8c8 1004 	str.w	r1, [r8, #4]
  4081f0:	9425      	str	r4, [sp, #148]	; 0x94
  4081f2:	9324      	str	r3, [sp, #144]	; 0x90
  4081f4:	f300 83f8 	bgt.w	4089e8 <_vfprintf_r+0x114c>
  4081f8:	f108 0808 	add.w	r8, r8, #8
  4081fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4081fe:	1e5e      	subs	r6, r3, #1
  408200:	2e00      	cmp	r6, #0
  408202:	f77f ad50 	ble.w	407ca6 <_vfprintf_r+0x40a>
  408206:	2e10      	cmp	r6, #16
  408208:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40820a:	4d24      	ldr	r5, [pc, #144]	; (40829c <_vfprintf_r+0xa00>)
  40820c:	f340 81dd 	ble.w	4085ca <_vfprintf_r+0xd2e>
  408210:	2710      	movs	r7, #16
  408212:	f8dd a020 	ldr.w	sl, [sp, #32]
  408216:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40821a:	e005      	b.n	408228 <_vfprintf_r+0x98c>
  40821c:	f108 0808 	add.w	r8, r8, #8
  408220:	3e10      	subs	r6, #16
  408222:	2e10      	cmp	r6, #16
  408224:	f340 81d1 	ble.w	4085ca <_vfprintf_r+0xd2e>
  408228:	3301      	adds	r3, #1
  40822a:	3410      	adds	r4, #16
  40822c:	2b07      	cmp	r3, #7
  40822e:	9425      	str	r4, [sp, #148]	; 0x94
  408230:	9324      	str	r3, [sp, #144]	; 0x90
  408232:	e888 00a0 	stmia.w	r8, {r5, r7}
  408236:	ddf1      	ble.n	40821c <_vfprintf_r+0x980>
  408238:	aa23      	add	r2, sp, #140	; 0x8c
  40823a:	4659      	mov	r1, fp
  40823c:	4650      	mov	r0, sl
  40823e:	f003 f8d7 	bl	40b3f0 <__sprint_r>
  408242:	2800      	cmp	r0, #0
  408244:	f040 83cd 	bne.w	4089e2 <_vfprintf_r+0x1146>
  408248:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40824a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40824c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408250:	e7e6      	b.n	408220 <_vfprintf_r+0x984>
  408252:	46aa      	mov	sl, r5
  408254:	e78c      	b.n	408170 <_vfprintf_r+0x8d4>
  408256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408258:	9a07      	ldr	r2, [sp, #28]
  40825a:	eba3 0a02 	sub.w	sl, r3, r2
  40825e:	f1ba 0f00 	cmp.w	sl, #0
  408262:	f77f acca 	ble.w	407bfa <_vfprintf_r+0x35e>
  408266:	f1ba 0f10 	cmp.w	sl, #16
  40826a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40826c:	4d0b      	ldr	r5, [pc, #44]	; (40829c <_vfprintf_r+0xa00>)
  40826e:	dd39      	ble.n	4082e4 <_vfprintf_r+0xa48>
  408270:	4642      	mov	r2, r8
  408272:	4621      	mov	r1, r4
  408274:	46b0      	mov	r8, r6
  408276:	f04f 0b10 	mov.w	fp, #16
  40827a:	462e      	mov	r6, r5
  40827c:	9c08      	ldr	r4, [sp, #32]
  40827e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408280:	e015      	b.n	4082ae <_vfprintf_r+0xa12>
  408282:	bf00      	nop
  408284:	0040c500 	.word	0x0040c500
  408288:	0040c4ec 	.word	0x0040c4ec
  40828c:	7fefffff 	.word	0x7fefffff
  408290:	0040c4e0 	.word	0x0040c4e0
  408294:	0040c4dc 	.word	0x0040c4dc
  408298:	0040c51c 	.word	0x0040c51c
  40829c:	0040c530 	.word	0x0040c530
  4082a0:	f1aa 0a10 	sub.w	sl, sl, #16
  4082a4:	f1ba 0f10 	cmp.w	sl, #16
  4082a8:	f102 0208 	add.w	r2, r2, #8
  4082ac:	dd16      	ble.n	4082dc <_vfprintf_r+0xa40>
  4082ae:	3301      	adds	r3, #1
  4082b0:	3110      	adds	r1, #16
  4082b2:	2b07      	cmp	r3, #7
  4082b4:	9125      	str	r1, [sp, #148]	; 0x94
  4082b6:	9324      	str	r3, [sp, #144]	; 0x90
  4082b8:	e882 0840 	stmia.w	r2, {r6, fp}
  4082bc:	ddf0      	ble.n	4082a0 <_vfprintf_r+0xa04>
  4082be:	aa23      	add	r2, sp, #140	; 0x8c
  4082c0:	4629      	mov	r1, r5
  4082c2:	4620      	mov	r0, r4
  4082c4:	f003 f894 	bl	40b3f0 <__sprint_r>
  4082c8:	2800      	cmp	r0, #0
  4082ca:	d1c2      	bne.n	408252 <_vfprintf_r+0x9b6>
  4082cc:	f1aa 0a10 	sub.w	sl, sl, #16
  4082d0:	f1ba 0f10 	cmp.w	sl, #16
  4082d4:	9925      	ldr	r1, [sp, #148]	; 0x94
  4082d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082d8:	aa30      	add	r2, sp, #192	; 0xc0
  4082da:	dce8      	bgt.n	4082ae <_vfprintf_r+0xa12>
  4082dc:	4635      	mov	r5, r6
  4082de:	460c      	mov	r4, r1
  4082e0:	4646      	mov	r6, r8
  4082e2:	4690      	mov	r8, r2
  4082e4:	3301      	adds	r3, #1
  4082e6:	4454      	add	r4, sl
  4082e8:	2b07      	cmp	r3, #7
  4082ea:	9425      	str	r4, [sp, #148]	; 0x94
  4082ec:	9324      	str	r3, [sp, #144]	; 0x90
  4082ee:	e888 0420 	stmia.w	r8, {r5, sl}
  4082f2:	f300 8264 	bgt.w	4087be <_vfprintf_r+0xf22>
  4082f6:	f108 0808 	add.w	r8, r8, #8
  4082fa:	e47e      	b.n	407bfa <_vfprintf_r+0x35e>
  4082fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4082fe:	9e24      	ldr	r6, [sp, #144]	; 0x90
  408300:	2b01      	cmp	r3, #1
  408302:	f340 81fd 	ble.w	408700 <_vfprintf_r+0xe64>
  408306:	3601      	adds	r6, #1
  408308:	3401      	adds	r4, #1
  40830a:	2301      	movs	r3, #1
  40830c:	2e07      	cmp	r6, #7
  40830e:	9425      	str	r4, [sp, #148]	; 0x94
  408310:	9624      	str	r6, [sp, #144]	; 0x90
  408312:	f8c8 7000 	str.w	r7, [r8]
  408316:	f8c8 3004 	str.w	r3, [r8, #4]
  40831a:	f300 820e 	bgt.w	40873a <_vfprintf_r+0xe9e>
  40831e:	f108 0808 	add.w	r8, r8, #8
  408322:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408324:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408326:	f8c8 3000 	str.w	r3, [r8]
  40832a:	3601      	adds	r6, #1
  40832c:	4414      	add	r4, r2
  40832e:	2e07      	cmp	r6, #7
  408330:	9425      	str	r4, [sp, #148]	; 0x94
  408332:	9624      	str	r6, [sp, #144]	; 0x90
  408334:	f8c8 2004 	str.w	r2, [r8, #4]
  408338:	f300 822e 	bgt.w	408798 <_vfprintf_r+0xefc>
  40833c:	f108 0808 	add.w	r8, r8, #8
  408340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408342:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408344:	9813      	ldr	r0, [sp, #76]	; 0x4c
  408346:	9912      	ldr	r1, [sp, #72]	; 0x48
  408348:	f7fe f95e 	bl	406608 <__aeabi_dcmpeq>
  40834c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40834e:	2800      	cmp	r0, #0
  408350:	f040 8106 	bne.w	408560 <_vfprintf_r+0xcc4>
  408354:	3b01      	subs	r3, #1
  408356:	3601      	adds	r6, #1
  408358:	3701      	adds	r7, #1
  40835a:	441c      	add	r4, r3
  40835c:	2e07      	cmp	r6, #7
  40835e:	9624      	str	r6, [sp, #144]	; 0x90
  408360:	9425      	str	r4, [sp, #148]	; 0x94
  408362:	f8c8 7000 	str.w	r7, [r8]
  408366:	f8c8 3004 	str.w	r3, [r8, #4]
  40836a:	f300 81d9 	bgt.w	408720 <_vfprintf_r+0xe84>
  40836e:	f108 0808 	add.w	r8, r8, #8
  408372:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408374:	f8c8 2004 	str.w	r2, [r8, #4]
  408378:	3601      	adds	r6, #1
  40837a:	4414      	add	r4, r2
  40837c:	ab1f      	add	r3, sp, #124	; 0x7c
  40837e:	2e07      	cmp	r6, #7
  408380:	9425      	str	r4, [sp, #148]	; 0x94
  408382:	9624      	str	r6, [sp, #144]	; 0x90
  408384:	f8c8 3000 	str.w	r3, [r8]
  408388:	f77f ac8b 	ble.w	407ca2 <_vfprintf_r+0x406>
  40838c:	aa23      	add	r2, sp, #140	; 0x8c
  40838e:	990a      	ldr	r1, [sp, #40]	; 0x28
  408390:	9808      	ldr	r0, [sp, #32]
  408392:	f003 f82d 	bl	40b3f0 <__sprint_r>
  408396:	b958      	cbnz	r0, 4083b0 <_vfprintf_r+0xb14>
  408398:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40839a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40839e:	e482      	b.n	407ca6 <_vfprintf_r+0x40a>
  4083a0:	aa23      	add	r2, sp, #140	; 0x8c
  4083a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4083a4:	9808      	ldr	r0, [sp, #32]
  4083a6:	f003 f823 	bl	40b3f0 <__sprint_r>
  4083aa:	2800      	cmp	r0, #0
  4083ac:	f43f acc5 	beq.w	407d3a <_vfprintf_r+0x49e>
  4083b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4083b4:	e6dc      	b.n	408170 <_vfprintf_r+0x8d4>
  4083b6:	f8dd b018 	ldr.w	fp, [sp, #24]
  4083ba:	2b01      	cmp	r3, #1
  4083bc:	f000 8121 	beq.w	408602 <_vfprintf_r+0xd66>
  4083c0:	2b02      	cmp	r3, #2
  4083c2:	d127      	bne.n	408414 <_vfprintf_r+0xb78>
  4083c4:	f8cd b018 	str.w	fp, [sp, #24]
  4083c8:	2400      	movs	r4, #0
  4083ca:	2500      	movs	r5, #0
  4083cc:	e591      	b.n	407ef2 <_vfprintf_r+0x656>
  4083ce:	aa23      	add	r2, sp, #140	; 0x8c
  4083d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4083d2:	9808      	ldr	r0, [sp, #32]
  4083d4:	f003 f80c 	bl	40b3f0 <__sprint_r>
  4083d8:	2800      	cmp	r0, #0
  4083da:	d1e9      	bne.n	4083b0 <_vfprintf_r+0xb14>
  4083dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4083de:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4083e2:	e44d      	b.n	407c80 <_vfprintf_r+0x3e4>
  4083e4:	aa23      	add	r2, sp, #140	; 0x8c
  4083e6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4083e8:	9808      	ldr	r0, [sp, #32]
  4083ea:	f003 f801 	bl	40b3f0 <__sprint_r>
  4083ee:	2800      	cmp	r0, #0
  4083f0:	d1de      	bne.n	4083b0 <_vfprintf_r+0xb14>
  4083f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4083f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4083f8:	f7ff bbec 	b.w	407bd4 <_vfprintf_r+0x338>
  4083fc:	aa23      	add	r2, sp, #140	; 0x8c
  4083fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  408400:	9808      	ldr	r0, [sp, #32]
  408402:	f002 fff5 	bl	40b3f0 <__sprint_r>
  408406:	2800      	cmp	r0, #0
  408408:	d1d2      	bne.n	4083b0 <_vfprintf_r+0xb14>
  40840a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40840c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408410:	f7ff bbf0 	b.w	407bf4 <_vfprintf_r+0x358>
  408414:	f8cd b018 	str.w	fp, [sp, #24]
  408418:	2400      	movs	r4, #0
  40841a:	2500      	movs	r5, #0
  40841c:	a930      	add	r1, sp, #192	; 0xc0
  40841e:	e000      	b.n	408422 <_vfprintf_r+0xb86>
  408420:	4639      	mov	r1, r7
  408422:	08e2      	lsrs	r2, r4, #3
  408424:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  408428:	08e8      	lsrs	r0, r5, #3
  40842a:	f004 0307 	and.w	r3, r4, #7
  40842e:	4605      	mov	r5, r0
  408430:	4614      	mov	r4, r2
  408432:	3330      	adds	r3, #48	; 0x30
  408434:	ea54 0205 	orrs.w	r2, r4, r5
  408438:	f801 3c01 	strb.w	r3, [r1, #-1]
  40843c:	f101 37ff 	add.w	r7, r1, #4294967295
  408440:	d1ee      	bne.n	408420 <_vfprintf_r+0xb84>
  408442:	9a06      	ldr	r2, [sp, #24]
  408444:	07d2      	lsls	r2, r2, #31
  408446:	f57f ad64 	bpl.w	407f12 <_vfprintf_r+0x676>
  40844a:	2b30      	cmp	r3, #48	; 0x30
  40844c:	f43f ad61 	beq.w	407f12 <_vfprintf_r+0x676>
  408450:	2330      	movs	r3, #48	; 0x30
  408452:	3902      	subs	r1, #2
  408454:	f807 3c01 	strb.w	r3, [r7, #-1]
  408458:	ab30      	add	r3, sp, #192	; 0xc0
  40845a:	1a5b      	subs	r3, r3, r1
  40845c:	930d      	str	r3, [sp, #52]	; 0x34
  40845e:	460f      	mov	r7, r1
  408460:	f7ff bb46 	b.w	407af0 <_vfprintf_r+0x254>
  408464:	2302      	movs	r3, #2
  408466:	f7ff bb25 	b.w	407ab4 <_vfprintf_r+0x218>
  40846a:	991d      	ldr	r1, [sp, #116]	; 0x74
  40846c:	2900      	cmp	r1, #0
  40846e:	f340 8274 	ble.w	40895a <_vfprintf_r+0x10be>
  408472:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408474:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408476:	4293      	cmp	r3, r2
  408478:	bfa8      	it	ge
  40847a:	4613      	movge	r3, r2
  40847c:	2b00      	cmp	r3, #0
  40847e:	461e      	mov	r6, r3
  408480:	dd0d      	ble.n	40849e <_vfprintf_r+0xc02>
  408482:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408484:	f8c8 7000 	str.w	r7, [r8]
  408488:	3301      	adds	r3, #1
  40848a:	4434      	add	r4, r6
  40848c:	2b07      	cmp	r3, #7
  40848e:	9425      	str	r4, [sp, #148]	; 0x94
  408490:	f8c8 6004 	str.w	r6, [r8, #4]
  408494:	9324      	str	r3, [sp, #144]	; 0x90
  408496:	f300 8324 	bgt.w	408ae2 <_vfprintf_r+0x1246>
  40849a:	f108 0808 	add.w	r8, r8, #8
  40849e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4084a0:	2e00      	cmp	r6, #0
  4084a2:	bfa8      	it	ge
  4084a4:	1b9b      	subge	r3, r3, r6
  4084a6:	2b00      	cmp	r3, #0
  4084a8:	461e      	mov	r6, r3
  4084aa:	f340 80d0 	ble.w	40864e <_vfprintf_r+0xdb2>
  4084ae:	2e10      	cmp	r6, #16
  4084b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084b2:	4dc0      	ldr	r5, [pc, #768]	; (4087b4 <_vfprintf_r+0xf18>)
  4084b4:	f340 80b7 	ble.w	408626 <_vfprintf_r+0xd8a>
  4084b8:	4622      	mov	r2, r4
  4084ba:	f04f 0a10 	mov.w	sl, #16
  4084be:	f8dd b020 	ldr.w	fp, [sp, #32]
  4084c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4084c4:	e005      	b.n	4084d2 <_vfprintf_r+0xc36>
  4084c6:	f108 0808 	add.w	r8, r8, #8
  4084ca:	3e10      	subs	r6, #16
  4084cc:	2e10      	cmp	r6, #16
  4084ce:	f340 80a9 	ble.w	408624 <_vfprintf_r+0xd88>
  4084d2:	3301      	adds	r3, #1
  4084d4:	3210      	adds	r2, #16
  4084d6:	2b07      	cmp	r3, #7
  4084d8:	9225      	str	r2, [sp, #148]	; 0x94
  4084da:	9324      	str	r3, [sp, #144]	; 0x90
  4084dc:	e888 0420 	stmia.w	r8, {r5, sl}
  4084e0:	ddf1      	ble.n	4084c6 <_vfprintf_r+0xc2a>
  4084e2:	aa23      	add	r2, sp, #140	; 0x8c
  4084e4:	4621      	mov	r1, r4
  4084e6:	4658      	mov	r0, fp
  4084e8:	f002 ff82 	bl	40b3f0 <__sprint_r>
  4084ec:	2800      	cmp	r0, #0
  4084ee:	f040 8324 	bne.w	408b3a <_vfprintf_r+0x129e>
  4084f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4084f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084f6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4084fa:	e7e6      	b.n	4084ca <_vfprintf_r+0xc2e>
  4084fc:	2d00      	cmp	r5, #0
  4084fe:	bf08      	it	eq
  408500:	2c0a      	cmpeq	r4, #10
  408502:	d37c      	bcc.n	4085fe <_vfprintf_r+0xd62>
  408504:	af30      	add	r7, sp, #192	; 0xc0
  408506:	4620      	mov	r0, r4
  408508:	4629      	mov	r1, r5
  40850a:	220a      	movs	r2, #10
  40850c:	2300      	movs	r3, #0
  40850e:	f003 fa47 	bl	40b9a0 <__aeabi_uldivmod>
  408512:	3230      	adds	r2, #48	; 0x30
  408514:	f807 2d01 	strb.w	r2, [r7, #-1]!
  408518:	4620      	mov	r0, r4
  40851a:	4629      	mov	r1, r5
  40851c:	2300      	movs	r3, #0
  40851e:	220a      	movs	r2, #10
  408520:	f003 fa3e 	bl	40b9a0 <__aeabi_uldivmod>
  408524:	4604      	mov	r4, r0
  408526:	460d      	mov	r5, r1
  408528:	ea54 0305 	orrs.w	r3, r4, r5
  40852c:	d1eb      	bne.n	408506 <_vfprintf_r+0xc6a>
  40852e:	ab30      	add	r3, sp, #192	; 0xc0
  408530:	1bdb      	subs	r3, r3, r7
  408532:	930d      	str	r3, [sp, #52]	; 0x34
  408534:	f7ff badc 	b.w	407af0 <_vfprintf_r+0x254>
  408538:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40853a:	930d      	str	r3, [sp, #52]	; 0x34
  40853c:	af30      	add	r7, sp, #192	; 0xc0
  40853e:	f7ff bad7 	b.w	407af0 <_vfprintf_r+0x254>
  408542:	aa23      	add	r2, sp, #140	; 0x8c
  408544:	990a      	ldr	r1, [sp, #40]	; 0x28
  408546:	9808      	ldr	r0, [sp, #32]
  408548:	f002 ff52 	bl	40b3f0 <__sprint_r>
  40854c:	2800      	cmp	r0, #0
  40854e:	f47f af2f 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408552:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  408556:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408558:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40855c:	f7ff bb28 	b.w	407bb0 <_vfprintf_r+0x314>
  408560:	1e5f      	subs	r7, r3, #1
  408562:	2f00      	cmp	r7, #0
  408564:	f77f af05 	ble.w	408372 <_vfprintf_r+0xad6>
  408568:	2f10      	cmp	r7, #16
  40856a:	4d92      	ldr	r5, [pc, #584]	; (4087b4 <_vfprintf_r+0xf18>)
  40856c:	f340 810a 	ble.w	408784 <_vfprintf_r+0xee8>
  408570:	f04f 0a10 	mov.w	sl, #16
  408574:	f8dd b020 	ldr.w	fp, [sp, #32]
  408578:	e005      	b.n	408586 <_vfprintf_r+0xcea>
  40857a:	f108 0808 	add.w	r8, r8, #8
  40857e:	3f10      	subs	r7, #16
  408580:	2f10      	cmp	r7, #16
  408582:	f340 80ff 	ble.w	408784 <_vfprintf_r+0xee8>
  408586:	3601      	adds	r6, #1
  408588:	3410      	adds	r4, #16
  40858a:	2e07      	cmp	r6, #7
  40858c:	9425      	str	r4, [sp, #148]	; 0x94
  40858e:	9624      	str	r6, [sp, #144]	; 0x90
  408590:	e888 0420 	stmia.w	r8, {r5, sl}
  408594:	ddf1      	ble.n	40857a <_vfprintf_r+0xcde>
  408596:	aa23      	add	r2, sp, #140	; 0x8c
  408598:	990a      	ldr	r1, [sp, #40]	; 0x28
  40859a:	4658      	mov	r0, fp
  40859c:	f002 ff28 	bl	40b3f0 <__sprint_r>
  4085a0:	2800      	cmp	r0, #0
  4085a2:	f47f af05 	bne.w	4083b0 <_vfprintf_r+0xb14>
  4085a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4085a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4085aa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4085ae:	e7e6      	b.n	40857e <_vfprintf_r+0xce2>
  4085b0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4085b2:	460a      	mov	r2, r1
  4085b4:	3204      	adds	r2, #4
  4085b6:	680c      	ldr	r4, [r1, #0]
  4085b8:	920e      	str	r2, [sp, #56]	; 0x38
  4085ba:	2500      	movs	r5, #0
  4085bc:	f7ff ba7a 	b.w	407ab4 <_vfprintf_r+0x218>
  4085c0:	681c      	ldr	r4, [r3, #0]
  4085c2:	3304      	adds	r3, #4
  4085c4:	930e      	str	r3, [sp, #56]	; 0x38
  4085c6:	2500      	movs	r5, #0
  4085c8:	e426      	b.n	407e18 <_vfprintf_r+0x57c>
  4085ca:	3301      	adds	r3, #1
  4085cc:	4434      	add	r4, r6
  4085ce:	2b07      	cmp	r3, #7
  4085d0:	9425      	str	r4, [sp, #148]	; 0x94
  4085d2:	9324      	str	r3, [sp, #144]	; 0x90
  4085d4:	e888 0060 	stmia.w	r8, {r5, r6}
  4085d8:	f77f ab63 	ble.w	407ca2 <_vfprintf_r+0x406>
  4085dc:	e6d6      	b.n	40838c <_vfprintf_r+0xaf0>
  4085de:	3204      	adds	r2, #4
  4085e0:	681c      	ldr	r4, [r3, #0]
  4085e2:	920e      	str	r2, [sp, #56]	; 0x38
  4085e4:	2301      	movs	r3, #1
  4085e6:	2500      	movs	r5, #0
  4085e8:	f7ff ba64 	b.w	407ab4 <_vfprintf_r+0x218>
  4085ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4085ee:	6814      	ldr	r4, [r2, #0]
  4085f0:	4613      	mov	r3, r2
  4085f2:	3304      	adds	r3, #4
  4085f4:	17e5      	asrs	r5, r4, #31
  4085f6:	930e      	str	r3, [sp, #56]	; 0x38
  4085f8:	4622      	mov	r2, r4
  4085fa:	462b      	mov	r3, r5
  4085fc:	e460      	b.n	407ec0 <_vfprintf_r+0x624>
  4085fe:	f8dd b018 	ldr.w	fp, [sp, #24]
  408602:	f8cd b018 	str.w	fp, [sp, #24]
  408606:	af40      	add	r7, sp, #256	; 0x100
  408608:	3430      	adds	r4, #48	; 0x30
  40860a:	2301      	movs	r3, #1
  40860c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  408610:	930d      	str	r3, [sp, #52]	; 0x34
  408612:	f7ff ba6d 	b.w	407af0 <_vfprintf_r+0x254>
  408616:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40861a:	f002 f895 	bl	40a748 <__retarget_lock_release_recursive>
  40861e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  408622:	e5af      	b.n	408184 <_vfprintf_r+0x8e8>
  408624:	4614      	mov	r4, r2
  408626:	3301      	adds	r3, #1
  408628:	4434      	add	r4, r6
  40862a:	2b07      	cmp	r3, #7
  40862c:	9425      	str	r4, [sp, #148]	; 0x94
  40862e:	9324      	str	r3, [sp, #144]	; 0x90
  408630:	e888 0060 	stmia.w	r8, {r5, r6}
  408634:	f340 816d 	ble.w	408912 <_vfprintf_r+0x1076>
  408638:	aa23      	add	r2, sp, #140	; 0x8c
  40863a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40863c:	9808      	ldr	r0, [sp, #32]
  40863e:	f002 fed7 	bl	40b3f0 <__sprint_r>
  408642:	2800      	cmp	r0, #0
  408644:	f47f aeb4 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408648:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40864a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40864e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408650:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408652:	4293      	cmp	r3, r2
  408654:	f280 8158 	bge.w	408908 <_vfprintf_r+0x106c>
  408658:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40865a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40865c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40865e:	f8c8 1000 	str.w	r1, [r8]
  408662:	3201      	adds	r2, #1
  408664:	4404      	add	r4, r0
  408666:	2a07      	cmp	r2, #7
  408668:	9425      	str	r4, [sp, #148]	; 0x94
  40866a:	f8c8 0004 	str.w	r0, [r8, #4]
  40866e:	9224      	str	r2, [sp, #144]	; 0x90
  408670:	f300 8152 	bgt.w	408918 <_vfprintf_r+0x107c>
  408674:	f108 0808 	add.w	r8, r8, #8
  408678:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40867a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40867c:	1ad3      	subs	r3, r2, r3
  40867e:	1a56      	subs	r6, r2, r1
  408680:	429e      	cmp	r6, r3
  408682:	bfa8      	it	ge
  408684:	461e      	movge	r6, r3
  408686:	2e00      	cmp	r6, #0
  408688:	dd0e      	ble.n	4086a8 <_vfprintf_r+0xe0c>
  40868a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40868c:	f8c8 6004 	str.w	r6, [r8, #4]
  408690:	3201      	adds	r2, #1
  408692:	440f      	add	r7, r1
  408694:	4434      	add	r4, r6
  408696:	2a07      	cmp	r2, #7
  408698:	f8c8 7000 	str.w	r7, [r8]
  40869c:	9425      	str	r4, [sp, #148]	; 0x94
  40869e:	9224      	str	r2, [sp, #144]	; 0x90
  4086a0:	f300 823c 	bgt.w	408b1c <_vfprintf_r+0x1280>
  4086a4:	f108 0808 	add.w	r8, r8, #8
  4086a8:	2e00      	cmp	r6, #0
  4086aa:	bfac      	ite	ge
  4086ac:	1b9e      	subge	r6, r3, r6
  4086ae:	461e      	movlt	r6, r3
  4086b0:	2e00      	cmp	r6, #0
  4086b2:	f77f aaf8 	ble.w	407ca6 <_vfprintf_r+0x40a>
  4086b6:	2e10      	cmp	r6, #16
  4086b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086ba:	4d3e      	ldr	r5, [pc, #248]	; (4087b4 <_vfprintf_r+0xf18>)
  4086bc:	dd85      	ble.n	4085ca <_vfprintf_r+0xd2e>
  4086be:	2710      	movs	r7, #16
  4086c0:	f8dd a020 	ldr.w	sl, [sp, #32]
  4086c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4086c8:	e005      	b.n	4086d6 <_vfprintf_r+0xe3a>
  4086ca:	f108 0808 	add.w	r8, r8, #8
  4086ce:	3e10      	subs	r6, #16
  4086d0:	2e10      	cmp	r6, #16
  4086d2:	f77f af7a 	ble.w	4085ca <_vfprintf_r+0xd2e>
  4086d6:	3301      	adds	r3, #1
  4086d8:	3410      	adds	r4, #16
  4086da:	2b07      	cmp	r3, #7
  4086dc:	9425      	str	r4, [sp, #148]	; 0x94
  4086de:	9324      	str	r3, [sp, #144]	; 0x90
  4086e0:	e888 00a0 	stmia.w	r8, {r5, r7}
  4086e4:	ddf1      	ble.n	4086ca <_vfprintf_r+0xe2e>
  4086e6:	aa23      	add	r2, sp, #140	; 0x8c
  4086e8:	4659      	mov	r1, fp
  4086ea:	4650      	mov	r0, sl
  4086ec:	f002 fe80 	bl	40b3f0 <__sprint_r>
  4086f0:	2800      	cmp	r0, #0
  4086f2:	f040 8176 	bne.w	4089e2 <_vfprintf_r+0x1146>
  4086f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4086f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086fa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4086fe:	e7e6      	b.n	4086ce <_vfprintf_r+0xe32>
  408700:	9b06      	ldr	r3, [sp, #24]
  408702:	07d8      	lsls	r0, r3, #31
  408704:	f53f adff 	bmi.w	408306 <_vfprintf_r+0xa6a>
  408708:	3601      	adds	r6, #1
  40870a:	3401      	adds	r4, #1
  40870c:	2301      	movs	r3, #1
  40870e:	2e07      	cmp	r6, #7
  408710:	9425      	str	r4, [sp, #148]	; 0x94
  408712:	9624      	str	r6, [sp, #144]	; 0x90
  408714:	f8c8 7000 	str.w	r7, [r8]
  408718:	f8c8 3004 	str.w	r3, [r8, #4]
  40871c:	f77f ae27 	ble.w	40836e <_vfprintf_r+0xad2>
  408720:	aa23      	add	r2, sp, #140	; 0x8c
  408722:	990a      	ldr	r1, [sp, #40]	; 0x28
  408724:	9808      	ldr	r0, [sp, #32]
  408726:	f002 fe63 	bl	40b3f0 <__sprint_r>
  40872a:	2800      	cmp	r0, #0
  40872c:	f47f ae40 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408730:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408732:	9e24      	ldr	r6, [sp, #144]	; 0x90
  408734:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408738:	e61b      	b.n	408372 <_vfprintf_r+0xad6>
  40873a:	aa23      	add	r2, sp, #140	; 0x8c
  40873c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40873e:	9808      	ldr	r0, [sp, #32]
  408740:	f002 fe56 	bl	40b3f0 <__sprint_r>
  408744:	2800      	cmp	r0, #0
  408746:	f47f ae33 	bne.w	4083b0 <_vfprintf_r+0xb14>
  40874a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40874c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40874e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408752:	e5e6      	b.n	408322 <_vfprintf_r+0xa86>
  408754:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408756:	3507      	adds	r5, #7
  408758:	f025 0507 	bic.w	r5, r5, #7
  40875c:	e9d5 2300 	ldrd	r2, r3, [r5]
  408760:	f105 0108 	add.w	r1, r5, #8
  408764:	910e      	str	r1, [sp, #56]	; 0x38
  408766:	4614      	mov	r4, r2
  408768:	461d      	mov	r5, r3
  40876a:	f7ff bba9 	b.w	407ec0 <_vfprintf_r+0x624>
  40876e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408770:	3507      	adds	r5, #7
  408772:	f025 0307 	bic.w	r3, r5, #7
  408776:	f103 0208 	add.w	r2, r3, #8
  40877a:	920e      	str	r2, [sp, #56]	; 0x38
  40877c:	e9d3 4500 	ldrd	r4, r5, [r3]
  408780:	f7ff bb4a 	b.w	407e18 <_vfprintf_r+0x57c>
  408784:	3601      	adds	r6, #1
  408786:	443c      	add	r4, r7
  408788:	2e07      	cmp	r6, #7
  40878a:	9425      	str	r4, [sp, #148]	; 0x94
  40878c:	9624      	str	r6, [sp, #144]	; 0x90
  40878e:	e888 00a0 	stmia.w	r8, {r5, r7}
  408792:	f77f adec 	ble.w	40836e <_vfprintf_r+0xad2>
  408796:	e7c3      	b.n	408720 <_vfprintf_r+0xe84>
  408798:	aa23      	add	r2, sp, #140	; 0x8c
  40879a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40879c:	9808      	ldr	r0, [sp, #32]
  40879e:	f002 fe27 	bl	40b3f0 <__sprint_r>
  4087a2:	2800      	cmp	r0, #0
  4087a4:	f47f ae04 	bne.w	4083b0 <_vfprintf_r+0xb14>
  4087a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4087aa:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4087ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4087b0:	e5c6      	b.n	408340 <_vfprintf_r+0xaa4>
  4087b2:	bf00      	nop
  4087b4:	0040c530 	.word	0x0040c530
  4087b8:	af30      	add	r7, sp, #192	; 0xc0
  4087ba:	f7ff b999 	b.w	407af0 <_vfprintf_r+0x254>
  4087be:	aa23      	add	r2, sp, #140	; 0x8c
  4087c0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4087c2:	9808      	ldr	r0, [sp, #32]
  4087c4:	f002 fe14 	bl	40b3f0 <__sprint_r>
  4087c8:	2800      	cmp	r0, #0
  4087ca:	f47f adf1 	bne.w	4083b0 <_vfprintf_r+0xb14>
  4087ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4087d0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4087d4:	f7ff ba11 	b.w	407bfa <_vfprintf_r+0x35e>
  4087d8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4087dc:	4264      	negs	r4, r4
  4087de:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4087e2:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4087e6:	2301      	movs	r3, #1
  4087e8:	f7ff b968 	b.w	407abc <_vfprintf_r+0x220>
  4087ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  4087ee:	4622      	mov	r2, r4
  4087f0:	4620      	mov	r0, r4
  4087f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4087f4:	4623      	mov	r3, r4
  4087f6:	4621      	mov	r1, r4
  4087f8:	f7fd ff38 	bl	40666c <__aeabi_dcmpun>
  4087fc:	2800      	cmp	r0, #0
  4087fe:	f040 828c 	bne.w	408d1a <_vfprintf_r+0x147e>
  408802:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408804:	3301      	adds	r3, #1
  408806:	f026 0320 	bic.w	r3, r6, #32
  40880a:	930d      	str	r3, [sp, #52]	; 0x34
  40880c:	f000 8091 	beq.w	408932 <_vfprintf_r+0x1096>
  408810:	2b47      	cmp	r3, #71	; 0x47
  408812:	d104      	bne.n	40881e <_vfprintf_r+0xf82>
  408814:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408816:	2b00      	cmp	r3, #0
  408818:	bf08      	it	eq
  40881a:	2301      	moveq	r3, #1
  40881c:	9309      	str	r3, [sp, #36]	; 0x24
  40881e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  408822:	9306      	str	r3, [sp, #24]
  408824:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408826:	f1b3 0a00 	subs.w	sl, r3, #0
  40882a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40882c:	9307      	str	r3, [sp, #28]
  40882e:	bfbb      	ittet	lt
  408830:	4653      	movlt	r3, sl
  408832:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  408836:	2300      	movge	r3, #0
  408838:	232d      	movlt	r3, #45	; 0x2d
  40883a:	2e66      	cmp	r6, #102	; 0x66
  40883c:	930f      	str	r3, [sp, #60]	; 0x3c
  40883e:	f000 817f 	beq.w	408b40 <_vfprintf_r+0x12a4>
  408842:	2e46      	cmp	r6, #70	; 0x46
  408844:	f000 81d4 	beq.w	408bf0 <_vfprintf_r+0x1354>
  408848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40884a:	9a07      	ldr	r2, [sp, #28]
  40884c:	2b45      	cmp	r3, #69	; 0x45
  40884e:	bf0c      	ite	eq
  408850:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  408852:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  408854:	a821      	add	r0, sp, #132	; 0x84
  408856:	a91e      	add	r1, sp, #120	; 0x78
  408858:	bf08      	it	eq
  40885a:	1c5d      	addeq	r5, r3, #1
  40885c:	9004      	str	r0, [sp, #16]
  40885e:	9103      	str	r1, [sp, #12]
  408860:	a81d      	add	r0, sp, #116	; 0x74
  408862:	2102      	movs	r1, #2
  408864:	9002      	str	r0, [sp, #8]
  408866:	4653      	mov	r3, sl
  408868:	9501      	str	r5, [sp, #4]
  40886a:	9100      	str	r1, [sp, #0]
  40886c:	9808      	ldr	r0, [sp, #32]
  40886e:	f000 fc0b 	bl	409088 <_dtoa_r>
  408872:	2e67      	cmp	r6, #103	; 0x67
  408874:	4607      	mov	r7, r0
  408876:	f040 81af 	bne.w	408bd8 <_vfprintf_r+0x133c>
  40887a:	f01b 0f01 	tst.w	fp, #1
  40887e:	f000 8213 	beq.w	408ca8 <_vfprintf_r+0x140c>
  408882:	197c      	adds	r4, r7, r5
  408884:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408886:	9807      	ldr	r0, [sp, #28]
  408888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40888a:	4651      	mov	r1, sl
  40888c:	f7fd febc 	bl	406608 <__aeabi_dcmpeq>
  408890:	2800      	cmp	r0, #0
  408892:	f040 8132 	bne.w	408afa <_vfprintf_r+0x125e>
  408896:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408898:	42a3      	cmp	r3, r4
  40889a:	d206      	bcs.n	4088aa <_vfprintf_r+0x100e>
  40889c:	2130      	movs	r1, #48	; 0x30
  40889e:	1c5a      	adds	r2, r3, #1
  4088a0:	9221      	str	r2, [sp, #132]	; 0x84
  4088a2:	7019      	strb	r1, [r3, #0]
  4088a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4088a6:	429c      	cmp	r4, r3
  4088a8:	d8f9      	bhi.n	40889e <_vfprintf_r+0x1002>
  4088aa:	1bdb      	subs	r3, r3, r7
  4088ac:	9311      	str	r3, [sp, #68]	; 0x44
  4088ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4088b0:	2b47      	cmp	r3, #71	; 0x47
  4088b2:	f000 80b9 	beq.w	408a28 <_vfprintf_r+0x118c>
  4088b6:	2e65      	cmp	r6, #101	; 0x65
  4088b8:	f340 8276 	ble.w	408da8 <_vfprintf_r+0x150c>
  4088bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4088be:	9310      	str	r3, [sp, #64]	; 0x40
  4088c0:	2e66      	cmp	r6, #102	; 0x66
  4088c2:	f000 8162 	beq.w	408b8a <_vfprintf_r+0x12ee>
  4088c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4088c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4088ca:	4619      	mov	r1, r3
  4088cc:	4291      	cmp	r1, r2
  4088ce:	f300 814f 	bgt.w	408b70 <_vfprintf_r+0x12d4>
  4088d2:	f01b 0f01 	tst.w	fp, #1
  4088d6:	f040 8209 	bne.w	408cec <_vfprintf_r+0x1450>
  4088da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4088de:	9307      	str	r3, [sp, #28]
  4088e0:	920d      	str	r2, [sp, #52]	; 0x34
  4088e2:	2667      	movs	r6, #103	; 0x67
  4088e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4088e6:	2b00      	cmp	r3, #0
  4088e8:	f040 8096 	bne.w	408a18 <_vfprintf_r+0x117c>
  4088ec:	9309      	str	r3, [sp, #36]	; 0x24
  4088ee:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4088f2:	f7ff b905 	b.w	407b00 <_vfprintf_r+0x264>
  4088f6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4088fa:	f001 ff25 	bl	40a748 <__retarget_lock_release_recursive>
  4088fe:	f04f 33ff 	mov.w	r3, #4294967295
  408902:	930b      	str	r3, [sp, #44]	; 0x2c
  408904:	f7ff ba30 	b.w	407d68 <_vfprintf_r+0x4cc>
  408908:	9a06      	ldr	r2, [sp, #24]
  40890a:	07d5      	lsls	r5, r2, #31
  40890c:	f57f aeb4 	bpl.w	408678 <_vfprintf_r+0xddc>
  408910:	e6a2      	b.n	408658 <_vfprintf_r+0xdbc>
  408912:	f108 0808 	add.w	r8, r8, #8
  408916:	e69a      	b.n	40864e <_vfprintf_r+0xdb2>
  408918:	aa23      	add	r2, sp, #140	; 0x8c
  40891a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40891c:	9808      	ldr	r0, [sp, #32]
  40891e:	f002 fd67 	bl	40b3f0 <__sprint_r>
  408922:	2800      	cmp	r0, #0
  408924:	f47f ad44 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40892a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40892c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408930:	e6a2      	b.n	408678 <_vfprintf_r+0xddc>
  408932:	2306      	movs	r3, #6
  408934:	9309      	str	r3, [sp, #36]	; 0x24
  408936:	e772      	b.n	40881e <_vfprintf_r+0xf82>
  408938:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40893c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  408940:	f7ff bbc7 	b.w	4080d2 <_vfprintf_r+0x836>
  408944:	aa23      	add	r2, sp, #140	; 0x8c
  408946:	990a      	ldr	r1, [sp, #40]	; 0x28
  408948:	9808      	ldr	r0, [sp, #32]
  40894a:	f002 fd51 	bl	40b3f0 <__sprint_r>
  40894e:	2800      	cmp	r0, #0
  408950:	f47f ad2e 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408954:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408958:	e437      	b.n	4081ca <_vfprintf_r+0x92e>
  40895a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40895c:	4ab4      	ldr	r2, [pc, #720]	; (408c30 <_vfprintf_r+0x1394>)
  40895e:	f8c8 2000 	str.w	r2, [r8]
  408962:	3301      	adds	r3, #1
  408964:	3401      	adds	r4, #1
  408966:	2201      	movs	r2, #1
  408968:	2b07      	cmp	r3, #7
  40896a:	9425      	str	r4, [sp, #148]	; 0x94
  40896c:	9324      	str	r3, [sp, #144]	; 0x90
  40896e:	f8c8 2004 	str.w	r2, [r8, #4]
  408972:	f300 8124 	bgt.w	408bbe <_vfprintf_r+0x1322>
  408976:	f108 0808 	add.w	r8, r8, #8
  40897a:	b929      	cbnz	r1, 408988 <_vfprintf_r+0x10ec>
  40897c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40897e:	b91b      	cbnz	r3, 408988 <_vfprintf_r+0x10ec>
  408980:	9b06      	ldr	r3, [sp, #24]
  408982:	07de      	lsls	r6, r3, #31
  408984:	f57f a98f 	bpl.w	407ca6 <_vfprintf_r+0x40a>
  408988:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40898a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40898c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40898e:	f8c8 2000 	str.w	r2, [r8]
  408992:	3301      	adds	r3, #1
  408994:	4602      	mov	r2, r0
  408996:	4422      	add	r2, r4
  408998:	2b07      	cmp	r3, #7
  40899a:	9225      	str	r2, [sp, #148]	; 0x94
  40899c:	f8c8 0004 	str.w	r0, [r8, #4]
  4089a0:	9324      	str	r3, [sp, #144]	; 0x90
  4089a2:	f300 8169 	bgt.w	408c78 <_vfprintf_r+0x13dc>
  4089a6:	f108 0808 	add.w	r8, r8, #8
  4089aa:	2900      	cmp	r1, #0
  4089ac:	f2c0 8136 	blt.w	408c1c <_vfprintf_r+0x1380>
  4089b0:	9911      	ldr	r1, [sp, #68]	; 0x44
  4089b2:	f8c8 7000 	str.w	r7, [r8]
  4089b6:	3301      	adds	r3, #1
  4089b8:	188c      	adds	r4, r1, r2
  4089ba:	2b07      	cmp	r3, #7
  4089bc:	9425      	str	r4, [sp, #148]	; 0x94
  4089be:	9324      	str	r3, [sp, #144]	; 0x90
  4089c0:	f8c8 1004 	str.w	r1, [r8, #4]
  4089c4:	f77f a96d 	ble.w	407ca2 <_vfprintf_r+0x406>
  4089c8:	e4e0      	b.n	40838c <_vfprintf_r+0xaf0>
  4089ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4089cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4089ce:	6813      	ldr	r3, [r2, #0]
  4089d0:	17cd      	asrs	r5, r1, #31
  4089d2:	4608      	mov	r0, r1
  4089d4:	3204      	adds	r2, #4
  4089d6:	4629      	mov	r1, r5
  4089d8:	920e      	str	r2, [sp, #56]	; 0x38
  4089da:	e9c3 0100 	strd	r0, r1, [r3]
  4089de:	f7fe bfa9 	b.w	407934 <_vfprintf_r+0x98>
  4089e2:	46da      	mov	sl, fp
  4089e4:	f7ff bbc4 	b.w	408170 <_vfprintf_r+0x8d4>
  4089e8:	aa23      	add	r2, sp, #140	; 0x8c
  4089ea:	990a      	ldr	r1, [sp, #40]	; 0x28
  4089ec:	9808      	ldr	r0, [sp, #32]
  4089ee:	f002 fcff 	bl	40b3f0 <__sprint_r>
  4089f2:	2800      	cmp	r0, #0
  4089f4:	f47f acdc 	bne.w	4083b0 <_vfprintf_r+0xb14>
  4089f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4089fa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4089fe:	f7ff bbfd 	b.w	4081fc <_vfprintf_r+0x960>
  408a02:	4638      	mov	r0, r7
  408a04:	9409      	str	r4, [sp, #36]	; 0x24
  408a06:	f7fe fedb 	bl	4077c0 <strlen>
  408a0a:	950e      	str	r5, [sp, #56]	; 0x38
  408a0c:	900d      	str	r0, [sp, #52]	; 0x34
  408a0e:	f8cd b018 	str.w	fp, [sp, #24]
  408a12:	4603      	mov	r3, r0
  408a14:	f7ff ba36 	b.w	407e84 <_vfprintf_r+0x5e8>
  408a18:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  408a1c:	2300      	movs	r3, #0
  408a1e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  408a22:	9309      	str	r3, [sp, #36]	; 0x24
  408a24:	f7ff b86f 	b.w	407b06 <_vfprintf_r+0x26a>
  408a28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408a2a:	9310      	str	r3, [sp, #64]	; 0x40
  408a2c:	461a      	mov	r2, r3
  408a2e:	3303      	adds	r3, #3
  408a30:	db04      	blt.n	408a3c <_vfprintf_r+0x11a0>
  408a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408a34:	4619      	mov	r1, r3
  408a36:	4291      	cmp	r1, r2
  408a38:	f6bf af45 	bge.w	4088c6 <_vfprintf_r+0x102a>
  408a3c:	3e02      	subs	r6, #2
  408a3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408a40:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  408a44:	3b01      	subs	r3, #1
  408a46:	2b00      	cmp	r3, #0
  408a48:	931d      	str	r3, [sp, #116]	; 0x74
  408a4a:	bfbd      	ittte	lt
  408a4c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  408a4e:	f1c3 0301 	rsblt	r3, r3, #1
  408a52:	222d      	movlt	r2, #45	; 0x2d
  408a54:	222b      	movge	r2, #43	; 0x2b
  408a56:	2b09      	cmp	r3, #9
  408a58:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408a5c:	f340 813e 	ble.w	408cdc <_vfprintf_r+0x1440>
  408a60:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  408a64:	4620      	mov	r0, r4
  408a66:	4d73      	ldr	r5, [pc, #460]	; (408c34 <_vfprintf_r+0x1398>)
  408a68:	e000      	b.n	408a6c <_vfprintf_r+0x11d0>
  408a6a:	4610      	mov	r0, r2
  408a6c:	fb85 1203 	smull	r1, r2, r5, r3
  408a70:	17d9      	asrs	r1, r3, #31
  408a72:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  408a76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  408a7a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  408a7e:	3230      	adds	r2, #48	; 0x30
  408a80:	2909      	cmp	r1, #9
  408a82:	f800 2c01 	strb.w	r2, [r0, #-1]
  408a86:	460b      	mov	r3, r1
  408a88:	f100 32ff 	add.w	r2, r0, #4294967295
  408a8c:	dced      	bgt.n	408a6a <_vfprintf_r+0x11ce>
  408a8e:	3330      	adds	r3, #48	; 0x30
  408a90:	3802      	subs	r0, #2
  408a92:	b2d9      	uxtb	r1, r3
  408a94:	4284      	cmp	r4, r0
  408a96:	f802 1c01 	strb.w	r1, [r2, #-1]
  408a9a:	f240 8190 	bls.w	408dbe <_vfprintf_r+0x1522>
  408a9e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  408aa2:	4613      	mov	r3, r2
  408aa4:	e001      	b.n	408aaa <_vfprintf_r+0x120e>
  408aa6:	f813 1b01 	ldrb.w	r1, [r3], #1
  408aaa:	f800 1b01 	strb.w	r1, [r0], #1
  408aae:	42a3      	cmp	r3, r4
  408ab0:	d1f9      	bne.n	408aa6 <_vfprintf_r+0x120a>
  408ab2:	3301      	adds	r3, #1
  408ab4:	1a9b      	subs	r3, r3, r2
  408ab6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408aba:	4413      	add	r3, r2
  408abc:	aa1f      	add	r2, sp, #124	; 0x7c
  408abe:	1a9b      	subs	r3, r3, r2
  408ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ac2:	9319      	str	r3, [sp, #100]	; 0x64
  408ac4:	2a01      	cmp	r2, #1
  408ac6:	4413      	add	r3, r2
  408ac8:	930d      	str	r3, [sp, #52]	; 0x34
  408aca:	f340 8145 	ble.w	408d58 <_vfprintf_r+0x14bc>
  408ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408ad0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408ad2:	4413      	add	r3, r2
  408ad4:	930d      	str	r3, [sp, #52]	; 0x34
  408ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408ada:	9307      	str	r3, [sp, #28]
  408adc:	2300      	movs	r3, #0
  408ade:	9310      	str	r3, [sp, #64]	; 0x40
  408ae0:	e700      	b.n	4088e4 <_vfprintf_r+0x1048>
  408ae2:	aa23      	add	r2, sp, #140	; 0x8c
  408ae4:	990a      	ldr	r1, [sp, #40]	; 0x28
  408ae6:	9808      	ldr	r0, [sp, #32]
  408ae8:	f002 fc82 	bl	40b3f0 <__sprint_r>
  408aec:	2800      	cmp	r0, #0
  408aee:	f47f ac5f 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408af2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408af4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408af8:	e4d1      	b.n	40849e <_vfprintf_r+0xc02>
  408afa:	4623      	mov	r3, r4
  408afc:	e6d5      	b.n	4088aa <_vfprintf_r+0x100e>
  408afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408b00:	9710      	str	r7, [sp, #64]	; 0x40
  408b02:	2b06      	cmp	r3, #6
  408b04:	bf28      	it	cs
  408b06:	2306      	movcs	r3, #6
  408b08:	9709      	str	r7, [sp, #36]	; 0x24
  408b0a:	46ba      	mov	sl, r7
  408b0c:	9307      	str	r3, [sp, #28]
  408b0e:	950e      	str	r5, [sp, #56]	; 0x38
  408b10:	f8cd b018 	str.w	fp, [sp, #24]
  408b14:	930d      	str	r3, [sp, #52]	; 0x34
  408b16:	4f48      	ldr	r7, [pc, #288]	; (408c38 <_vfprintf_r+0x139c>)
  408b18:	f7fe bff2 	b.w	407b00 <_vfprintf_r+0x264>
  408b1c:	aa23      	add	r2, sp, #140	; 0x8c
  408b1e:	990a      	ldr	r1, [sp, #40]	; 0x28
  408b20:	9808      	ldr	r0, [sp, #32]
  408b22:	f002 fc65 	bl	40b3f0 <__sprint_r>
  408b26:	2800      	cmp	r0, #0
  408b28:	f47f ac42 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408b2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408b2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b30:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408b32:	1ad3      	subs	r3, r2, r3
  408b34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408b38:	e5b6      	b.n	4086a8 <_vfprintf_r+0xe0c>
  408b3a:	46a2      	mov	sl, r4
  408b3c:	f7ff bb18 	b.w	408170 <_vfprintf_r+0x8d4>
  408b40:	a821      	add	r0, sp, #132	; 0x84
  408b42:	a91e      	add	r1, sp, #120	; 0x78
  408b44:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408b46:	9004      	str	r0, [sp, #16]
  408b48:	9103      	str	r1, [sp, #12]
  408b4a:	a81d      	add	r0, sp, #116	; 0x74
  408b4c:	2103      	movs	r1, #3
  408b4e:	9002      	str	r0, [sp, #8]
  408b50:	9a07      	ldr	r2, [sp, #28]
  408b52:	9501      	str	r5, [sp, #4]
  408b54:	4653      	mov	r3, sl
  408b56:	9100      	str	r1, [sp, #0]
  408b58:	9808      	ldr	r0, [sp, #32]
  408b5a:	f000 fa95 	bl	409088 <_dtoa_r>
  408b5e:	4607      	mov	r7, r0
  408b60:	1944      	adds	r4, r0, r5
  408b62:	783b      	ldrb	r3, [r7, #0]
  408b64:	2b30      	cmp	r3, #48	; 0x30
  408b66:	f000 80ca 	beq.w	408cfe <_vfprintf_r+0x1462>
  408b6a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408b6c:	442c      	add	r4, r5
  408b6e:	e689      	b.n	408884 <_vfprintf_r+0xfe8>
  408b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b74:	4413      	add	r3, r2
  408b76:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408b78:	930d      	str	r3, [sp, #52]	; 0x34
  408b7a:	2a00      	cmp	r2, #0
  408b7c:	f340 80e4 	ble.w	408d48 <_vfprintf_r+0x14ac>
  408b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408b84:	9307      	str	r3, [sp, #28]
  408b86:	2667      	movs	r6, #103	; 0x67
  408b88:	e6ac      	b.n	4088e4 <_vfprintf_r+0x1048>
  408b8a:	2b00      	cmp	r3, #0
  408b8c:	f340 80fb 	ble.w	408d86 <_vfprintf_r+0x14ea>
  408b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408b92:	2a00      	cmp	r2, #0
  408b94:	f040 80ce 	bne.w	408d34 <_vfprintf_r+0x1498>
  408b98:	f01b 0f01 	tst.w	fp, #1
  408b9c:	f040 80ca 	bne.w	408d34 <_vfprintf_r+0x1498>
  408ba0:	9307      	str	r3, [sp, #28]
  408ba2:	930d      	str	r3, [sp, #52]	; 0x34
  408ba4:	e69e      	b.n	4088e4 <_vfprintf_r+0x1048>
  408ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ba8:	9307      	str	r3, [sp, #28]
  408baa:	930d      	str	r3, [sp, #52]	; 0x34
  408bac:	9009      	str	r0, [sp, #36]	; 0x24
  408bae:	950e      	str	r5, [sp, #56]	; 0x38
  408bb0:	f8cd b018 	str.w	fp, [sp, #24]
  408bb4:	9010      	str	r0, [sp, #64]	; 0x40
  408bb6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  408bba:	f7fe bfa1 	b.w	407b00 <_vfprintf_r+0x264>
  408bbe:	aa23      	add	r2, sp, #140	; 0x8c
  408bc0:	990a      	ldr	r1, [sp, #40]	; 0x28
  408bc2:	9808      	ldr	r0, [sp, #32]
  408bc4:	f002 fc14 	bl	40b3f0 <__sprint_r>
  408bc8:	2800      	cmp	r0, #0
  408bca:	f47f abf1 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408bce:	991d      	ldr	r1, [sp, #116]	; 0x74
  408bd0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408bd2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408bd6:	e6d0      	b.n	40897a <_vfprintf_r+0x10de>
  408bd8:	2e47      	cmp	r6, #71	; 0x47
  408bda:	f47f ae52 	bne.w	408882 <_vfprintf_r+0xfe6>
  408bde:	f01b 0f01 	tst.w	fp, #1
  408be2:	f000 80da 	beq.w	408d9a <_vfprintf_r+0x14fe>
  408be6:	2e46      	cmp	r6, #70	; 0x46
  408be8:	eb07 0405 	add.w	r4, r7, r5
  408bec:	d0b9      	beq.n	408b62 <_vfprintf_r+0x12c6>
  408bee:	e649      	b.n	408884 <_vfprintf_r+0xfe8>
  408bf0:	a821      	add	r0, sp, #132	; 0x84
  408bf2:	a91e      	add	r1, sp, #120	; 0x78
  408bf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408bf6:	9004      	str	r0, [sp, #16]
  408bf8:	9103      	str	r1, [sp, #12]
  408bfa:	a81d      	add	r0, sp, #116	; 0x74
  408bfc:	2103      	movs	r1, #3
  408bfe:	9002      	str	r0, [sp, #8]
  408c00:	9a07      	ldr	r2, [sp, #28]
  408c02:	9401      	str	r4, [sp, #4]
  408c04:	4653      	mov	r3, sl
  408c06:	9100      	str	r1, [sp, #0]
  408c08:	9808      	ldr	r0, [sp, #32]
  408c0a:	f000 fa3d 	bl	409088 <_dtoa_r>
  408c0e:	4625      	mov	r5, r4
  408c10:	4607      	mov	r7, r0
  408c12:	e7e8      	b.n	408be6 <_vfprintf_r+0x134a>
  408c14:	2300      	movs	r3, #0
  408c16:	9309      	str	r3, [sp, #36]	; 0x24
  408c18:	f7fe bec1 	b.w	40799e <_vfprintf_r+0x102>
  408c1c:	424e      	negs	r6, r1
  408c1e:	3110      	adds	r1, #16
  408c20:	4d06      	ldr	r5, [pc, #24]	; (408c3c <_vfprintf_r+0x13a0>)
  408c22:	da43      	bge.n	408cac <_vfprintf_r+0x1410>
  408c24:	2410      	movs	r4, #16
  408c26:	f8dd a020 	ldr.w	sl, [sp, #32]
  408c2a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408c2e:	e00c      	b.n	408c4a <_vfprintf_r+0x13ae>
  408c30:	0040c51c 	.word	0x0040c51c
  408c34:	66666667 	.word	0x66666667
  408c38:	0040c514 	.word	0x0040c514
  408c3c:	0040c530 	.word	0x0040c530
  408c40:	f108 0808 	add.w	r8, r8, #8
  408c44:	3e10      	subs	r6, #16
  408c46:	2e10      	cmp	r6, #16
  408c48:	dd30      	ble.n	408cac <_vfprintf_r+0x1410>
  408c4a:	3301      	adds	r3, #1
  408c4c:	3210      	adds	r2, #16
  408c4e:	2b07      	cmp	r3, #7
  408c50:	9225      	str	r2, [sp, #148]	; 0x94
  408c52:	9324      	str	r3, [sp, #144]	; 0x90
  408c54:	f8c8 5000 	str.w	r5, [r8]
  408c58:	f8c8 4004 	str.w	r4, [r8, #4]
  408c5c:	ddf0      	ble.n	408c40 <_vfprintf_r+0x13a4>
  408c5e:	aa23      	add	r2, sp, #140	; 0x8c
  408c60:	4659      	mov	r1, fp
  408c62:	4650      	mov	r0, sl
  408c64:	f002 fbc4 	bl	40b3f0 <__sprint_r>
  408c68:	2800      	cmp	r0, #0
  408c6a:	f47f aeba 	bne.w	4089e2 <_vfprintf_r+0x1146>
  408c6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c72:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408c76:	e7e5      	b.n	408c44 <_vfprintf_r+0x13a8>
  408c78:	aa23      	add	r2, sp, #140	; 0x8c
  408c7a:	990a      	ldr	r1, [sp, #40]	; 0x28
  408c7c:	9808      	ldr	r0, [sp, #32]
  408c7e:	f002 fbb7 	bl	40b3f0 <__sprint_r>
  408c82:	2800      	cmp	r0, #0
  408c84:	f47f ab94 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408c88:	991d      	ldr	r1, [sp, #116]	; 0x74
  408c8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c8e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408c92:	e68a      	b.n	4089aa <_vfprintf_r+0x110e>
  408c94:	9808      	ldr	r0, [sp, #32]
  408c96:	aa23      	add	r2, sp, #140	; 0x8c
  408c98:	4651      	mov	r1, sl
  408c9a:	f002 fba9 	bl	40b3f0 <__sprint_r>
  408c9e:	2800      	cmp	r0, #0
  408ca0:	f43f aa64 	beq.w	40816c <_vfprintf_r+0x8d0>
  408ca4:	f7ff ba64 	b.w	408170 <_vfprintf_r+0x8d4>
  408ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408caa:	e5fe      	b.n	4088aa <_vfprintf_r+0x100e>
  408cac:	3301      	adds	r3, #1
  408cae:	4432      	add	r2, r6
  408cb0:	2b07      	cmp	r3, #7
  408cb2:	e888 0060 	stmia.w	r8, {r5, r6}
  408cb6:	9225      	str	r2, [sp, #148]	; 0x94
  408cb8:	9324      	str	r3, [sp, #144]	; 0x90
  408cba:	f108 0808 	add.w	r8, r8, #8
  408cbe:	f77f ae77 	ble.w	4089b0 <_vfprintf_r+0x1114>
  408cc2:	aa23      	add	r2, sp, #140	; 0x8c
  408cc4:	990a      	ldr	r1, [sp, #40]	; 0x28
  408cc6:	9808      	ldr	r0, [sp, #32]
  408cc8:	f002 fb92 	bl	40b3f0 <__sprint_r>
  408ccc:	2800      	cmp	r0, #0
  408cce:	f47f ab6f 	bne.w	4083b0 <_vfprintf_r+0xb14>
  408cd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408cd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408cd6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408cda:	e669      	b.n	4089b0 <_vfprintf_r+0x1114>
  408cdc:	3330      	adds	r3, #48	; 0x30
  408cde:	2230      	movs	r2, #48	; 0x30
  408ce0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408ce4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408ce8:	ab20      	add	r3, sp, #128	; 0x80
  408cea:	e6e7      	b.n	408abc <_vfprintf_r+0x1220>
  408cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408cee:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408cf0:	4413      	add	r3, r2
  408cf2:	930d      	str	r3, [sp, #52]	; 0x34
  408cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408cf8:	9307      	str	r3, [sp, #28]
  408cfa:	2667      	movs	r6, #103	; 0x67
  408cfc:	e5f2      	b.n	4088e4 <_vfprintf_r+0x1048>
  408cfe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408d00:	9807      	ldr	r0, [sp, #28]
  408d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408d04:	4651      	mov	r1, sl
  408d06:	f7fd fc7f 	bl	406608 <__aeabi_dcmpeq>
  408d0a:	2800      	cmp	r0, #0
  408d0c:	f47f af2d 	bne.w	408b6a <_vfprintf_r+0x12ce>
  408d10:	f1c5 0501 	rsb	r5, r5, #1
  408d14:	951d      	str	r5, [sp, #116]	; 0x74
  408d16:	442c      	add	r4, r5
  408d18:	e5b4      	b.n	408884 <_vfprintf_r+0xfe8>
  408d1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408d1c:	4f33      	ldr	r7, [pc, #204]	; (408dec <_vfprintf_r+0x1550>)
  408d1e:	2b00      	cmp	r3, #0
  408d20:	bfb6      	itet	lt
  408d22:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  408d26:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  408d2a:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  408d2e:	4b30      	ldr	r3, [pc, #192]	; (408df0 <_vfprintf_r+0x1554>)
  408d30:	f7ff b9d1 	b.w	4080d6 <_vfprintf_r+0x83a>
  408d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408d36:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408d38:	4413      	add	r3, r2
  408d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408d3c:	441a      	add	r2, r3
  408d3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408d42:	920d      	str	r2, [sp, #52]	; 0x34
  408d44:	9307      	str	r3, [sp, #28]
  408d46:	e5cd      	b.n	4088e4 <_vfprintf_r+0x1048>
  408d48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408d4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408d4c:	f1c3 0301 	rsb	r3, r3, #1
  408d50:	441a      	add	r2, r3
  408d52:	4613      	mov	r3, r2
  408d54:	920d      	str	r2, [sp, #52]	; 0x34
  408d56:	e713      	b.n	408b80 <_vfprintf_r+0x12e4>
  408d58:	f01b 0301 	ands.w	r3, fp, #1
  408d5c:	9310      	str	r3, [sp, #64]	; 0x40
  408d5e:	f47f aeb6 	bne.w	408ace <_vfprintf_r+0x1232>
  408d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408d68:	9307      	str	r3, [sp, #28]
  408d6a:	e5bb      	b.n	4088e4 <_vfprintf_r+0x1048>
  408d6c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408d6e:	f899 6001 	ldrb.w	r6, [r9, #1]
  408d72:	6823      	ldr	r3, [r4, #0]
  408d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  408d78:	9309      	str	r3, [sp, #36]	; 0x24
  408d7a:	4623      	mov	r3, r4
  408d7c:	3304      	adds	r3, #4
  408d7e:	4681      	mov	r9, r0
  408d80:	930e      	str	r3, [sp, #56]	; 0x38
  408d82:	f7fe be0a 	b.w	40799a <_vfprintf_r+0xfe>
  408d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d88:	b913      	cbnz	r3, 408d90 <_vfprintf_r+0x14f4>
  408d8a:	f01b 0f01 	tst.w	fp, #1
  408d8e:	d002      	beq.n	408d96 <_vfprintf_r+0x14fa>
  408d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408d92:	3301      	adds	r3, #1
  408d94:	e7d1      	b.n	408d3a <_vfprintf_r+0x149e>
  408d96:	2301      	movs	r3, #1
  408d98:	e702      	b.n	408ba0 <_vfprintf_r+0x1304>
  408d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408d9c:	1bdb      	subs	r3, r3, r7
  408d9e:	9311      	str	r3, [sp, #68]	; 0x44
  408da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408da2:	2b47      	cmp	r3, #71	; 0x47
  408da4:	f43f ae40 	beq.w	408a28 <_vfprintf_r+0x118c>
  408da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408daa:	9310      	str	r3, [sp, #64]	; 0x40
  408dac:	e647      	b.n	408a3e <_vfprintf_r+0x11a2>
  408dae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408db2:	f7ff b81d 	b.w	407df0 <_vfprintf_r+0x554>
  408db6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408dba:	f7ff b918 	b.w	407fee <_vfprintf_r+0x752>
  408dbe:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408dc2:	e67b      	b.n	408abc <_vfprintf_r+0x1220>
  408dc4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408dc8:	f7ff b866 	b.w	407e98 <_vfprintf_r+0x5fc>
  408dcc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408dd0:	f7ff b9ac 	b.w	40812c <_vfprintf_r+0x890>
  408dd4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408dd8:	f7ff b934 	b.w	408044 <_vfprintf_r+0x7a8>
  408ddc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408de0:	f7ff b8b0 	b.w	407f44 <_vfprintf_r+0x6a8>
  408de4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408de8:	f7ff b945 	b.w	408076 <_vfprintf_r+0x7da>
  408dec:	0040c4e8 	.word	0x0040c4e8
  408df0:	0040c4e4 	.word	0x0040c4e4

00408df4 <__sbprintf>:
  408df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408df8:	460c      	mov	r4, r1
  408dfa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408dfe:	8989      	ldrh	r1, [r1, #12]
  408e00:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408e02:	89e5      	ldrh	r5, [r4, #14]
  408e04:	9619      	str	r6, [sp, #100]	; 0x64
  408e06:	f021 0102 	bic.w	r1, r1, #2
  408e0a:	4606      	mov	r6, r0
  408e0c:	69e0      	ldr	r0, [r4, #28]
  408e0e:	f8ad 100c 	strh.w	r1, [sp, #12]
  408e12:	4617      	mov	r7, r2
  408e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408e18:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408e1a:	f8ad 500e 	strh.w	r5, [sp, #14]
  408e1e:	4698      	mov	r8, r3
  408e20:	ad1a      	add	r5, sp, #104	; 0x68
  408e22:	2300      	movs	r3, #0
  408e24:	9007      	str	r0, [sp, #28]
  408e26:	a816      	add	r0, sp, #88	; 0x58
  408e28:	9209      	str	r2, [sp, #36]	; 0x24
  408e2a:	9306      	str	r3, [sp, #24]
  408e2c:	9500      	str	r5, [sp, #0]
  408e2e:	9504      	str	r5, [sp, #16]
  408e30:	9102      	str	r1, [sp, #8]
  408e32:	9105      	str	r1, [sp, #20]
  408e34:	f001 fc82 	bl	40a73c <__retarget_lock_init_recursive>
  408e38:	4643      	mov	r3, r8
  408e3a:	463a      	mov	r2, r7
  408e3c:	4669      	mov	r1, sp
  408e3e:	4630      	mov	r0, r6
  408e40:	f7fe fd2c 	bl	40789c <_vfprintf_r>
  408e44:	1e05      	subs	r5, r0, #0
  408e46:	db07      	blt.n	408e58 <__sbprintf+0x64>
  408e48:	4630      	mov	r0, r6
  408e4a:	4669      	mov	r1, sp
  408e4c:	f001 f8e6 	bl	40a01c <_fflush_r>
  408e50:	2800      	cmp	r0, #0
  408e52:	bf18      	it	ne
  408e54:	f04f 35ff 	movne.w	r5, #4294967295
  408e58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408e5c:	065b      	lsls	r3, r3, #25
  408e5e:	d503      	bpl.n	408e68 <__sbprintf+0x74>
  408e60:	89a3      	ldrh	r3, [r4, #12]
  408e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e66:	81a3      	strh	r3, [r4, #12]
  408e68:	9816      	ldr	r0, [sp, #88]	; 0x58
  408e6a:	f001 fc69 	bl	40a740 <__retarget_lock_close_recursive>
  408e6e:	4628      	mov	r0, r5
  408e70:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408e78 <__swsetup_r>:
  408e78:	b538      	push	{r3, r4, r5, lr}
  408e7a:	4b30      	ldr	r3, [pc, #192]	; (408f3c <__swsetup_r+0xc4>)
  408e7c:	681b      	ldr	r3, [r3, #0]
  408e7e:	4605      	mov	r5, r0
  408e80:	460c      	mov	r4, r1
  408e82:	b113      	cbz	r3, 408e8a <__swsetup_r+0x12>
  408e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408e86:	2a00      	cmp	r2, #0
  408e88:	d038      	beq.n	408efc <__swsetup_r+0x84>
  408e8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408e8e:	b293      	uxth	r3, r2
  408e90:	0718      	lsls	r0, r3, #28
  408e92:	d50c      	bpl.n	408eae <__swsetup_r+0x36>
  408e94:	6920      	ldr	r0, [r4, #16]
  408e96:	b1a8      	cbz	r0, 408ec4 <__swsetup_r+0x4c>
  408e98:	f013 0201 	ands.w	r2, r3, #1
  408e9c:	d01e      	beq.n	408edc <__swsetup_r+0x64>
  408e9e:	6963      	ldr	r3, [r4, #20]
  408ea0:	2200      	movs	r2, #0
  408ea2:	425b      	negs	r3, r3
  408ea4:	61a3      	str	r3, [r4, #24]
  408ea6:	60a2      	str	r2, [r4, #8]
  408ea8:	b1f0      	cbz	r0, 408ee8 <__swsetup_r+0x70>
  408eaa:	2000      	movs	r0, #0
  408eac:	bd38      	pop	{r3, r4, r5, pc}
  408eae:	06d9      	lsls	r1, r3, #27
  408eb0:	d53c      	bpl.n	408f2c <__swsetup_r+0xb4>
  408eb2:	0758      	lsls	r0, r3, #29
  408eb4:	d426      	bmi.n	408f04 <__swsetup_r+0x8c>
  408eb6:	6920      	ldr	r0, [r4, #16]
  408eb8:	f042 0308 	orr.w	r3, r2, #8
  408ebc:	81a3      	strh	r3, [r4, #12]
  408ebe:	b29b      	uxth	r3, r3
  408ec0:	2800      	cmp	r0, #0
  408ec2:	d1e9      	bne.n	408e98 <__swsetup_r+0x20>
  408ec4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408ec8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408ecc:	d0e4      	beq.n	408e98 <__swsetup_r+0x20>
  408ece:	4628      	mov	r0, r5
  408ed0:	4621      	mov	r1, r4
  408ed2:	f001 fc69 	bl	40a7a8 <__smakebuf_r>
  408ed6:	89a3      	ldrh	r3, [r4, #12]
  408ed8:	6920      	ldr	r0, [r4, #16]
  408eda:	e7dd      	b.n	408e98 <__swsetup_r+0x20>
  408edc:	0799      	lsls	r1, r3, #30
  408ede:	bf58      	it	pl
  408ee0:	6962      	ldrpl	r2, [r4, #20]
  408ee2:	60a2      	str	r2, [r4, #8]
  408ee4:	2800      	cmp	r0, #0
  408ee6:	d1e0      	bne.n	408eaa <__swsetup_r+0x32>
  408ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408eec:	061a      	lsls	r2, r3, #24
  408eee:	d5dd      	bpl.n	408eac <__swsetup_r+0x34>
  408ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ef4:	81a3      	strh	r3, [r4, #12]
  408ef6:	f04f 30ff 	mov.w	r0, #4294967295
  408efa:	bd38      	pop	{r3, r4, r5, pc}
  408efc:	4618      	mov	r0, r3
  408efe:	f001 f8e5 	bl	40a0cc <__sinit>
  408f02:	e7c2      	b.n	408e8a <__swsetup_r+0x12>
  408f04:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408f06:	b151      	cbz	r1, 408f1e <__swsetup_r+0xa6>
  408f08:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408f0c:	4299      	cmp	r1, r3
  408f0e:	d004      	beq.n	408f1a <__swsetup_r+0xa2>
  408f10:	4628      	mov	r0, r5
  408f12:	f001 f97d 	bl	40a210 <_free_r>
  408f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408f1a:	2300      	movs	r3, #0
  408f1c:	6323      	str	r3, [r4, #48]	; 0x30
  408f1e:	2300      	movs	r3, #0
  408f20:	6920      	ldr	r0, [r4, #16]
  408f22:	6063      	str	r3, [r4, #4]
  408f24:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408f28:	6020      	str	r0, [r4, #0]
  408f2a:	e7c5      	b.n	408eb8 <__swsetup_r+0x40>
  408f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408f30:	2309      	movs	r3, #9
  408f32:	602b      	str	r3, [r5, #0]
  408f34:	f04f 30ff 	mov.w	r0, #4294967295
  408f38:	81a2      	strh	r2, [r4, #12]
  408f3a:	bd38      	pop	{r3, r4, r5, pc}
  408f3c:	20400028 	.word	0x20400028

00408f40 <register_fini>:
  408f40:	4b02      	ldr	r3, [pc, #8]	; (408f4c <register_fini+0xc>)
  408f42:	b113      	cbz	r3, 408f4a <register_fini+0xa>
  408f44:	4802      	ldr	r0, [pc, #8]	; (408f50 <register_fini+0x10>)
  408f46:	f000 b805 	b.w	408f54 <atexit>
  408f4a:	4770      	bx	lr
  408f4c:	00000000 	.word	0x00000000
  408f50:	0040a13d 	.word	0x0040a13d

00408f54 <atexit>:
  408f54:	2300      	movs	r3, #0
  408f56:	4601      	mov	r1, r0
  408f58:	461a      	mov	r2, r3
  408f5a:	4618      	mov	r0, r3
  408f5c:	f002 ba68 	b.w	40b430 <__register_exitproc>

00408f60 <quorem>:
  408f60:	6902      	ldr	r2, [r0, #16]
  408f62:	690b      	ldr	r3, [r1, #16]
  408f64:	4293      	cmp	r3, r2
  408f66:	f300 808d 	bgt.w	409084 <quorem+0x124>
  408f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f6e:	f103 38ff 	add.w	r8, r3, #4294967295
  408f72:	f101 0714 	add.w	r7, r1, #20
  408f76:	f100 0b14 	add.w	fp, r0, #20
  408f7a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408f7e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408f82:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408f86:	b083      	sub	sp, #12
  408f88:	3201      	adds	r2, #1
  408f8a:	fbb3 f9f2 	udiv	r9, r3, r2
  408f8e:	eb0b 0304 	add.w	r3, fp, r4
  408f92:	9400      	str	r4, [sp, #0]
  408f94:	eb07 0a04 	add.w	sl, r7, r4
  408f98:	9301      	str	r3, [sp, #4]
  408f9a:	f1b9 0f00 	cmp.w	r9, #0
  408f9e:	d039      	beq.n	409014 <quorem+0xb4>
  408fa0:	2500      	movs	r5, #0
  408fa2:	462e      	mov	r6, r5
  408fa4:	46bc      	mov	ip, r7
  408fa6:	46de      	mov	lr, fp
  408fa8:	f85c 4b04 	ldr.w	r4, [ip], #4
  408fac:	f8de 3000 	ldr.w	r3, [lr]
  408fb0:	b2a2      	uxth	r2, r4
  408fb2:	fb09 5502 	mla	r5, r9, r2, r5
  408fb6:	0c22      	lsrs	r2, r4, #16
  408fb8:	0c2c      	lsrs	r4, r5, #16
  408fba:	fb09 4202 	mla	r2, r9, r2, r4
  408fbe:	b2ad      	uxth	r5, r5
  408fc0:	1b75      	subs	r5, r6, r5
  408fc2:	b296      	uxth	r6, r2
  408fc4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408fc8:	fa15 f383 	uxtah	r3, r5, r3
  408fcc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408fd0:	b29b      	uxth	r3, r3
  408fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408fd6:	45e2      	cmp	sl, ip
  408fd8:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408fdc:	f84e 3b04 	str.w	r3, [lr], #4
  408fe0:	ea4f 4626 	mov.w	r6, r6, asr #16
  408fe4:	d2e0      	bcs.n	408fa8 <quorem+0x48>
  408fe6:	9b00      	ldr	r3, [sp, #0]
  408fe8:	f85b 3003 	ldr.w	r3, [fp, r3]
  408fec:	b993      	cbnz	r3, 409014 <quorem+0xb4>
  408fee:	9c01      	ldr	r4, [sp, #4]
  408ff0:	1f23      	subs	r3, r4, #4
  408ff2:	459b      	cmp	fp, r3
  408ff4:	d20c      	bcs.n	409010 <quorem+0xb0>
  408ff6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408ffa:	b94b      	cbnz	r3, 409010 <quorem+0xb0>
  408ffc:	f1a4 0308 	sub.w	r3, r4, #8
  409000:	e002      	b.n	409008 <quorem+0xa8>
  409002:	681a      	ldr	r2, [r3, #0]
  409004:	3b04      	subs	r3, #4
  409006:	b91a      	cbnz	r2, 409010 <quorem+0xb0>
  409008:	459b      	cmp	fp, r3
  40900a:	f108 38ff 	add.w	r8, r8, #4294967295
  40900e:	d3f8      	bcc.n	409002 <quorem+0xa2>
  409010:	f8c0 8010 	str.w	r8, [r0, #16]
  409014:	4604      	mov	r4, r0
  409016:	f001 fec5 	bl	40ada4 <__mcmp>
  40901a:	2800      	cmp	r0, #0
  40901c:	db2e      	blt.n	40907c <quorem+0x11c>
  40901e:	f109 0901 	add.w	r9, r9, #1
  409022:	465d      	mov	r5, fp
  409024:	2300      	movs	r3, #0
  409026:	f857 1b04 	ldr.w	r1, [r7], #4
  40902a:	6828      	ldr	r0, [r5, #0]
  40902c:	b28a      	uxth	r2, r1
  40902e:	1a9a      	subs	r2, r3, r2
  409030:	0c0b      	lsrs	r3, r1, #16
  409032:	fa12 f280 	uxtah	r2, r2, r0
  409036:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40903a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40903e:	b292      	uxth	r2, r2
  409040:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409044:	45ba      	cmp	sl, r7
  409046:	f845 2b04 	str.w	r2, [r5], #4
  40904a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40904e:	d2ea      	bcs.n	409026 <quorem+0xc6>
  409050:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  409054:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  409058:	b982      	cbnz	r2, 40907c <quorem+0x11c>
  40905a:	1f1a      	subs	r2, r3, #4
  40905c:	4593      	cmp	fp, r2
  40905e:	d20b      	bcs.n	409078 <quorem+0x118>
  409060:	f853 2c04 	ldr.w	r2, [r3, #-4]
  409064:	b942      	cbnz	r2, 409078 <quorem+0x118>
  409066:	3b08      	subs	r3, #8
  409068:	e002      	b.n	409070 <quorem+0x110>
  40906a:	681a      	ldr	r2, [r3, #0]
  40906c:	3b04      	subs	r3, #4
  40906e:	b91a      	cbnz	r2, 409078 <quorem+0x118>
  409070:	459b      	cmp	fp, r3
  409072:	f108 38ff 	add.w	r8, r8, #4294967295
  409076:	d3f8      	bcc.n	40906a <quorem+0x10a>
  409078:	f8c4 8010 	str.w	r8, [r4, #16]
  40907c:	4648      	mov	r0, r9
  40907e:	b003      	add	sp, #12
  409080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409084:	2000      	movs	r0, #0
  409086:	4770      	bx	lr

00409088 <_dtoa_r>:
  409088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40908c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40908e:	b09b      	sub	sp, #108	; 0x6c
  409090:	4604      	mov	r4, r0
  409092:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  409094:	4692      	mov	sl, r2
  409096:	469b      	mov	fp, r3
  409098:	b141      	cbz	r1, 4090ac <_dtoa_r+0x24>
  40909a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40909c:	604a      	str	r2, [r1, #4]
  40909e:	2301      	movs	r3, #1
  4090a0:	4093      	lsls	r3, r2
  4090a2:	608b      	str	r3, [r1, #8]
  4090a4:	f001 fca6 	bl	40a9f4 <_Bfree>
  4090a8:	2300      	movs	r3, #0
  4090aa:	6423      	str	r3, [r4, #64]	; 0x40
  4090ac:	f1bb 0f00 	cmp.w	fp, #0
  4090b0:	465d      	mov	r5, fp
  4090b2:	db35      	blt.n	409120 <_dtoa_r+0x98>
  4090b4:	2300      	movs	r3, #0
  4090b6:	6033      	str	r3, [r6, #0]
  4090b8:	4b9d      	ldr	r3, [pc, #628]	; (409330 <_dtoa_r+0x2a8>)
  4090ba:	43ab      	bics	r3, r5
  4090bc:	d015      	beq.n	4090ea <_dtoa_r+0x62>
  4090be:	4650      	mov	r0, sl
  4090c0:	4659      	mov	r1, fp
  4090c2:	2200      	movs	r2, #0
  4090c4:	2300      	movs	r3, #0
  4090c6:	f7fd fa9f 	bl	406608 <__aeabi_dcmpeq>
  4090ca:	4680      	mov	r8, r0
  4090cc:	2800      	cmp	r0, #0
  4090ce:	d02d      	beq.n	40912c <_dtoa_r+0xa4>
  4090d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4090d2:	2301      	movs	r3, #1
  4090d4:	6013      	str	r3, [r2, #0]
  4090d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4090d8:	2b00      	cmp	r3, #0
  4090da:	f000 80bd 	beq.w	409258 <_dtoa_r+0x1d0>
  4090de:	4895      	ldr	r0, [pc, #596]	; (409334 <_dtoa_r+0x2ac>)
  4090e0:	6018      	str	r0, [r3, #0]
  4090e2:	3801      	subs	r0, #1
  4090e4:	b01b      	add	sp, #108	; 0x6c
  4090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4090ec:	f242 730f 	movw	r3, #9999	; 0x270f
  4090f0:	6013      	str	r3, [r2, #0]
  4090f2:	f1ba 0f00 	cmp.w	sl, #0
  4090f6:	d10d      	bne.n	409114 <_dtoa_r+0x8c>
  4090f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4090fc:	b955      	cbnz	r5, 409114 <_dtoa_r+0x8c>
  4090fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409100:	488d      	ldr	r0, [pc, #564]	; (409338 <_dtoa_r+0x2b0>)
  409102:	2b00      	cmp	r3, #0
  409104:	d0ee      	beq.n	4090e4 <_dtoa_r+0x5c>
  409106:	f100 0308 	add.w	r3, r0, #8
  40910a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40910c:	6013      	str	r3, [r2, #0]
  40910e:	b01b      	add	sp, #108	; 0x6c
  409110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409114:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409116:	4889      	ldr	r0, [pc, #548]	; (40933c <_dtoa_r+0x2b4>)
  409118:	2b00      	cmp	r3, #0
  40911a:	d0e3      	beq.n	4090e4 <_dtoa_r+0x5c>
  40911c:	1cc3      	adds	r3, r0, #3
  40911e:	e7f4      	b.n	40910a <_dtoa_r+0x82>
  409120:	2301      	movs	r3, #1
  409122:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  409126:	6033      	str	r3, [r6, #0]
  409128:	46ab      	mov	fp, r5
  40912a:	e7c5      	b.n	4090b8 <_dtoa_r+0x30>
  40912c:	aa18      	add	r2, sp, #96	; 0x60
  40912e:	ab19      	add	r3, sp, #100	; 0x64
  409130:	9201      	str	r2, [sp, #4]
  409132:	9300      	str	r3, [sp, #0]
  409134:	4652      	mov	r2, sl
  409136:	465b      	mov	r3, fp
  409138:	4620      	mov	r0, r4
  40913a:	f001 fed3 	bl	40aee4 <__d2b>
  40913e:	0d2b      	lsrs	r3, r5, #20
  409140:	4681      	mov	r9, r0
  409142:	d071      	beq.n	409228 <_dtoa_r+0x1a0>
  409144:	f3cb 0213 	ubfx	r2, fp, #0, #20
  409148:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40914c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40914e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  409152:	4650      	mov	r0, sl
  409154:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  409158:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40915c:	2200      	movs	r2, #0
  40915e:	4b78      	ldr	r3, [pc, #480]	; (409340 <_dtoa_r+0x2b8>)
  409160:	f7fc fe36 	bl	405dd0 <__aeabi_dsub>
  409164:	a36c      	add	r3, pc, #432	; (adr r3, 409318 <_dtoa_r+0x290>)
  409166:	e9d3 2300 	ldrd	r2, r3, [r3]
  40916a:	f7fc ffe5 	bl	406138 <__aeabi_dmul>
  40916e:	a36c      	add	r3, pc, #432	; (adr r3, 409320 <_dtoa_r+0x298>)
  409170:	e9d3 2300 	ldrd	r2, r3, [r3]
  409174:	f7fc fe2e 	bl	405dd4 <__adddf3>
  409178:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40917c:	4630      	mov	r0, r6
  40917e:	f7fc ff75 	bl	40606c <__aeabi_i2d>
  409182:	a369      	add	r3, pc, #420	; (adr r3, 409328 <_dtoa_r+0x2a0>)
  409184:	e9d3 2300 	ldrd	r2, r3, [r3]
  409188:	f7fc ffd6 	bl	406138 <__aeabi_dmul>
  40918c:	4602      	mov	r2, r0
  40918e:	460b      	mov	r3, r1
  409190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409194:	f7fc fe1e 	bl	405dd4 <__adddf3>
  409198:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40919c:	f002 fbd8 	bl	40b950 <__aeabi_d2iz>
  4091a0:	2200      	movs	r2, #0
  4091a2:	9002      	str	r0, [sp, #8]
  4091a4:	2300      	movs	r3, #0
  4091a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4091aa:	f7fd fa37 	bl	40661c <__aeabi_dcmplt>
  4091ae:	2800      	cmp	r0, #0
  4091b0:	f040 8173 	bne.w	40949a <_dtoa_r+0x412>
  4091b4:	9d02      	ldr	r5, [sp, #8]
  4091b6:	2d16      	cmp	r5, #22
  4091b8:	f200 815d 	bhi.w	409476 <_dtoa_r+0x3ee>
  4091bc:	4b61      	ldr	r3, [pc, #388]	; (409344 <_dtoa_r+0x2bc>)
  4091be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4091c2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4091c6:	4652      	mov	r2, sl
  4091c8:	465b      	mov	r3, fp
  4091ca:	f7fd fa45 	bl	406658 <__aeabi_dcmpgt>
  4091ce:	2800      	cmp	r0, #0
  4091d0:	f000 81c5 	beq.w	40955e <_dtoa_r+0x4d6>
  4091d4:	1e6b      	subs	r3, r5, #1
  4091d6:	9302      	str	r3, [sp, #8]
  4091d8:	2300      	movs	r3, #0
  4091da:	930e      	str	r3, [sp, #56]	; 0x38
  4091dc:	1bbf      	subs	r7, r7, r6
  4091de:	1e7b      	subs	r3, r7, #1
  4091e0:	9306      	str	r3, [sp, #24]
  4091e2:	f100 8154 	bmi.w	40948e <_dtoa_r+0x406>
  4091e6:	2300      	movs	r3, #0
  4091e8:	9308      	str	r3, [sp, #32]
  4091ea:	9b02      	ldr	r3, [sp, #8]
  4091ec:	2b00      	cmp	r3, #0
  4091ee:	f2c0 8145 	blt.w	40947c <_dtoa_r+0x3f4>
  4091f2:	9a06      	ldr	r2, [sp, #24]
  4091f4:	930d      	str	r3, [sp, #52]	; 0x34
  4091f6:	4611      	mov	r1, r2
  4091f8:	4419      	add	r1, r3
  4091fa:	2300      	movs	r3, #0
  4091fc:	9106      	str	r1, [sp, #24]
  4091fe:	930c      	str	r3, [sp, #48]	; 0x30
  409200:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409202:	2b09      	cmp	r3, #9
  409204:	d82a      	bhi.n	40925c <_dtoa_r+0x1d4>
  409206:	2b05      	cmp	r3, #5
  409208:	f340 865b 	ble.w	409ec2 <_dtoa_r+0xe3a>
  40920c:	3b04      	subs	r3, #4
  40920e:	9324      	str	r3, [sp, #144]	; 0x90
  409210:	2500      	movs	r5, #0
  409212:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409214:	3b02      	subs	r3, #2
  409216:	2b03      	cmp	r3, #3
  409218:	f200 8642 	bhi.w	409ea0 <_dtoa_r+0xe18>
  40921c:	e8df f013 	tbh	[pc, r3, lsl #1]
  409220:	02c903d4 	.word	0x02c903d4
  409224:	046103df 	.word	0x046103df
  409228:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40922a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40922c:	443e      	add	r6, r7
  40922e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  409232:	2b20      	cmp	r3, #32
  409234:	f340 818e 	ble.w	409554 <_dtoa_r+0x4cc>
  409238:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40923c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409240:	409d      	lsls	r5, r3
  409242:	fa2a f000 	lsr.w	r0, sl, r0
  409246:	4328      	orrs	r0, r5
  409248:	f7fc ff00 	bl	40604c <__aeabi_ui2d>
  40924c:	2301      	movs	r3, #1
  40924e:	3e01      	subs	r6, #1
  409250:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409254:	9314      	str	r3, [sp, #80]	; 0x50
  409256:	e781      	b.n	40915c <_dtoa_r+0xd4>
  409258:	483b      	ldr	r0, [pc, #236]	; (409348 <_dtoa_r+0x2c0>)
  40925a:	e743      	b.n	4090e4 <_dtoa_r+0x5c>
  40925c:	2100      	movs	r1, #0
  40925e:	6461      	str	r1, [r4, #68]	; 0x44
  409260:	4620      	mov	r0, r4
  409262:	9125      	str	r1, [sp, #148]	; 0x94
  409264:	f001 fba0 	bl	40a9a8 <_Balloc>
  409268:	f04f 33ff 	mov.w	r3, #4294967295
  40926c:	930a      	str	r3, [sp, #40]	; 0x28
  40926e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409270:	930f      	str	r3, [sp, #60]	; 0x3c
  409272:	2301      	movs	r3, #1
  409274:	9004      	str	r0, [sp, #16]
  409276:	6420      	str	r0, [r4, #64]	; 0x40
  409278:	9224      	str	r2, [sp, #144]	; 0x90
  40927a:	930b      	str	r3, [sp, #44]	; 0x2c
  40927c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40927e:	2b00      	cmp	r3, #0
  409280:	f2c0 80d9 	blt.w	409436 <_dtoa_r+0x3ae>
  409284:	9a02      	ldr	r2, [sp, #8]
  409286:	2a0e      	cmp	r2, #14
  409288:	f300 80d5 	bgt.w	409436 <_dtoa_r+0x3ae>
  40928c:	4b2d      	ldr	r3, [pc, #180]	; (409344 <_dtoa_r+0x2bc>)
  40928e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409292:	e9d3 2300 	ldrd	r2, r3, [r3]
  409296:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40929a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40929c:	2b00      	cmp	r3, #0
  40929e:	f2c0 83ba 	blt.w	409a16 <_dtoa_r+0x98e>
  4092a2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4092a6:	4650      	mov	r0, sl
  4092a8:	462a      	mov	r2, r5
  4092aa:	4633      	mov	r3, r6
  4092ac:	4659      	mov	r1, fp
  4092ae:	f7fd f86d 	bl	40638c <__aeabi_ddiv>
  4092b2:	f002 fb4d 	bl	40b950 <__aeabi_d2iz>
  4092b6:	4680      	mov	r8, r0
  4092b8:	f7fc fed8 	bl	40606c <__aeabi_i2d>
  4092bc:	462a      	mov	r2, r5
  4092be:	4633      	mov	r3, r6
  4092c0:	f7fc ff3a 	bl	406138 <__aeabi_dmul>
  4092c4:	460b      	mov	r3, r1
  4092c6:	4602      	mov	r2, r0
  4092c8:	4659      	mov	r1, fp
  4092ca:	4650      	mov	r0, sl
  4092cc:	f7fc fd80 	bl	405dd0 <__aeabi_dsub>
  4092d0:	9d04      	ldr	r5, [sp, #16]
  4092d2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4092d6:	702b      	strb	r3, [r5, #0]
  4092d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4092da:	2b01      	cmp	r3, #1
  4092dc:	4606      	mov	r6, r0
  4092de:	460f      	mov	r7, r1
  4092e0:	f105 0501 	add.w	r5, r5, #1
  4092e4:	d068      	beq.n	4093b8 <_dtoa_r+0x330>
  4092e6:	2200      	movs	r2, #0
  4092e8:	4b18      	ldr	r3, [pc, #96]	; (40934c <_dtoa_r+0x2c4>)
  4092ea:	f7fc ff25 	bl	406138 <__aeabi_dmul>
  4092ee:	2200      	movs	r2, #0
  4092f0:	2300      	movs	r3, #0
  4092f2:	4606      	mov	r6, r0
  4092f4:	460f      	mov	r7, r1
  4092f6:	f7fd f987 	bl	406608 <__aeabi_dcmpeq>
  4092fa:	2800      	cmp	r0, #0
  4092fc:	f040 8088 	bne.w	409410 <_dtoa_r+0x388>
  409300:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  409304:	f04f 0a00 	mov.w	sl, #0
  409308:	f8df b040 	ldr.w	fp, [pc, #64]	; 40934c <_dtoa_r+0x2c4>
  40930c:	940c      	str	r4, [sp, #48]	; 0x30
  40930e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  409312:	e028      	b.n	409366 <_dtoa_r+0x2de>
  409314:	f3af 8000 	nop.w
  409318:	636f4361 	.word	0x636f4361
  40931c:	3fd287a7 	.word	0x3fd287a7
  409320:	8b60c8b3 	.word	0x8b60c8b3
  409324:	3fc68a28 	.word	0x3fc68a28
  409328:	509f79fb 	.word	0x509f79fb
  40932c:	3fd34413 	.word	0x3fd34413
  409330:	7ff00000 	.word	0x7ff00000
  409334:	0040c51d 	.word	0x0040c51d
  409338:	0040c540 	.word	0x0040c540
  40933c:	0040c54c 	.word	0x0040c54c
  409340:	3ff80000 	.word	0x3ff80000
  409344:	0040c578 	.word	0x0040c578
  409348:	0040c51c 	.word	0x0040c51c
  40934c:	40240000 	.word	0x40240000
  409350:	f7fc fef2 	bl	406138 <__aeabi_dmul>
  409354:	2200      	movs	r2, #0
  409356:	2300      	movs	r3, #0
  409358:	4606      	mov	r6, r0
  40935a:	460f      	mov	r7, r1
  40935c:	f7fd f954 	bl	406608 <__aeabi_dcmpeq>
  409360:	2800      	cmp	r0, #0
  409362:	f040 83c1 	bne.w	409ae8 <_dtoa_r+0xa60>
  409366:	4642      	mov	r2, r8
  409368:	464b      	mov	r3, r9
  40936a:	4630      	mov	r0, r6
  40936c:	4639      	mov	r1, r7
  40936e:	f7fd f80d 	bl	40638c <__aeabi_ddiv>
  409372:	f002 faed 	bl	40b950 <__aeabi_d2iz>
  409376:	4604      	mov	r4, r0
  409378:	f7fc fe78 	bl	40606c <__aeabi_i2d>
  40937c:	4642      	mov	r2, r8
  40937e:	464b      	mov	r3, r9
  409380:	f7fc feda 	bl	406138 <__aeabi_dmul>
  409384:	4602      	mov	r2, r0
  409386:	460b      	mov	r3, r1
  409388:	4630      	mov	r0, r6
  40938a:	4639      	mov	r1, r7
  40938c:	f7fc fd20 	bl	405dd0 <__aeabi_dsub>
  409390:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  409394:	9e04      	ldr	r6, [sp, #16]
  409396:	f805 eb01 	strb.w	lr, [r5], #1
  40939a:	eba5 0e06 	sub.w	lr, r5, r6
  40939e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4093a0:	45b6      	cmp	lr, r6
  4093a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4093a6:	4652      	mov	r2, sl
  4093a8:	465b      	mov	r3, fp
  4093aa:	d1d1      	bne.n	409350 <_dtoa_r+0x2c8>
  4093ac:	46a0      	mov	r8, r4
  4093ae:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4093b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4093b4:	4606      	mov	r6, r0
  4093b6:	460f      	mov	r7, r1
  4093b8:	4632      	mov	r2, r6
  4093ba:	463b      	mov	r3, r7
  4093bc:	4630      	mov	r0, r6
  4093be:	4639      	mov	r1, r7
  4093c0:	f7fc fd08 	bl	405dd4 <__adddf3>
  4093c4:	4606      	mov	r6, r0
  4093c6:	460f      	mov	r7, r1
  4093c8:	4602      	mov	r2, r0
  4093ca:	460b      	mov	r3, r1
  4093cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4093d0:	f7fd f924 	bl	40661c <__aeabi_dcmplt>
  4093d4:	b948      	cbnz	r0, 4093ea <_dtoa_r+0x362>
  4093d6:	4632      	mov	r2, r6
  4093d8:	463b      	mov	r3, r7
  4093da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4093de:	f7fd f913 	bl	406608 <__aeabi_dcmpeq>
  4093e2:	b1a8      	cbz	r0, 409410 <_dtoa_r+0x388>
  4093e4:	f018 0f01 	tst.w	r8, #1
  4093e8:	d012      	beq.n	409410 <_dtoa_r+0x388>
  4093ea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4093ee:	9a04      	ldr	r2, [sp, #16]
  4093f0:	1e6b      	subs	r3, r5, #1
  4093f2:	e004      	b.n	4093fe <_dtoa_r+0x376>
  4093f4:	429a      	cmp	r2, r3
  4093f6:	f000 8401 	beq.w	409bfc <_dtoa_r+0xb74>
  4093fa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4093fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  409402:	f103 0501 	add.w	r5, r3, #1
  409406:	d0f5      	beq.n	4093f4 <_dtoa_r+0x36c>
  409408:	f108 0801 	add.w	r8, r8, #1
  40940c:	f883 8000 	strb.w	r8, [r3]
  409410:	4649      	mov	r1, r9
  409412:	4620      	mov	r0, r4
  409414:	f001 faee 	bl	40a9f4 <_Bfree>
  409418:	2200      	movs	r2, #0
  40941a:	9b02      	ldr	r3, [sp, #8]
  40941c:	702a      	strb	r2, [r5, #0]
  40941e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409420:	3301      	adds	r3, #1
  409422:	6013      	str	r3, [r2, #0]
  409424:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409426:	2b00      	cmp	r3, #0
  409428:	f000 839e 	beq.w	409b68 <_dtoa_r+0xae0>
  40942c:	9804      	ldr	r0, [sp, #16]
  40942e:	601d      	str	r5, [r3, #0]
  409430:	b01b      	add	sp, #108	; 0x6c
  409432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409438:	2a00      	cmp	r2, #0
  40943a:	d03e      	beq.n	4094ba <_dtoa_r+0x432>
  40943c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40943e:	2a01      	cmp	r2, #1
  409440:	f340 8311 	ble.w	409a66 <_dtoa_r+0x9de>
  409444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409448:	1e5f      	subs	r7, r3, #1
  40944a:	42ba      	cmp	r2, r7
  40944c:	f2c0 838f 	blt.w	409b6e <_dtoa_r+0xae6>
  409450:	1bd7      	subs	r7, r2, r7
  409452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409454:	2b00      	cmp	r3, #0
  409456:	f2c0 848b 	blt.w	409d70 <_dtoa_r+0xce8>
  40945a:	9d08      	ldr	r5, [sp, #32]
  40945c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40945e:	9a08      	ldr	r2, [sp, #32]
  409460:	441a      	add	r2, r3
  409462:	9208      	str	r2, [sp, #32]
  409464:	9a06      	ldr	r2, [sp, #24]
  409466:	2101      	movs	r1, #1
  409468:	441a      	add	r2, r3
  40946a:	4620      	mov	r0, r4
  40946c:	9206      	str	r2, [sp, #24]
  40946e:	f001 fb5b 	bl	40ab28 <__i2b>
  409472:	4606      	mov	r6, r0
  409474:	e024      	b.n	4094c0 <_dtoa_r+0x438>
  409476:	2301      	movs	r3, #1
  409478:	930e      	str	r3, [sp, #56]	; 0x38
  40947a:	e6af      	b.n	4091dc <_dtoa_r+0x154>
  40947c:	9a08      	ldr	r2, [sp, #32]
  40947e:	9b02      	ldr	r3, [sp, #8]
  409480:	1ad2      	subs	r2, r2, r3
  409482:	425b      	negs	r3, r3
  409484:	930c      	str	r3, [sp, #48]	; 0x30
  409486:	2300      	movs	r3, #0
  409488:	9208      	str	r2, [sp, #32]
  40948a:	930d      	str	r3, [sp, #52]	; 0x34
  40948c:	e6b8      	b.n	409200 <_dtoa_r+0x178>
  40948e:	f1c7 0301 	rsb	r3, r7, #1
  409492:	9308      	str	r3, [sp, #32]
  409494:	2300      	movs	r3, #0
  409496:	9306      	str	r3, [sp, #24]
  409498:	e6a7      	b.n	4091ea <_dtoa_r+0x162>
  40949a:	9d02      	ldr	r5, [sp, #8]
  40949c:	4628      	mov	r0, r5
  40949e:	f7fc fde5 	bl	40606c <__aeabi_i2d>
  4094a2:	4602      	mov	r2, r0
  4094a4:	460b      	mov	r3, r1
  4094a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4094aa:	f7fd f8ad 	bl	406608 <__aeabi_dcmpeq>
  4094ae:	2800      	cmp	r0, #0
  4094b0:	f47f ae80 	bne.w	4091b4 <_dtoa_r+0x12c>
  4094b4:	1e6b      	subs	r3, r5, #1
  4094b6:	9302      	str	r3, [sp, #8]
  4094b8:	e67c      	b.n	4091b4 <_dtoa_r+0x12c>
  4094ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4094bc:	9d08      	ldr	r5, [sp, #32]
  4094be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4094c0:	2d00      	cmp	r5, #0
  4094c2:	dd0c      	ble.n	4094de <_dtoa_r+0x456>
  4094c4:	9906      	ldr	r1, [sp, #24]
  4094c6:	2900      	cmp	r1, #0
  4094c8:	460b      	mov	r3, r1
  4094ca:	dd08      	ble.n	4094de <_dtoa_r+0x456>
  4094cc:	42a9      	cmp	r1, r5
  4094ce:	9a08      	ldr	r2, [sp, #32]
  4094d0:	bfa8      	it	ge
  4094d2:	462b      	movge	r3, r5
  4094d4:	1ad2      	subs	r2, r2, r3
  4094d6:	1aed      	subs	r5, r5, r3
  4094d8:	1acb      	subs	r3, r1, r3
  4094da:	9208      	str	r2, [sp, #32]
  4094dc:	9306      	str	r3, [sp, #24]
  4094de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4094e0:	b1d3      	cbz	r3, 409518 <_dtoa_r+0x490>
  4094e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4094e4:	2b00      	cmp	r3, #0
  4094e6:	f000 82b7 	beq.w	409a58 <_dtoa_r+0x9d0>
  4094ea:	2f00      	cmp	r7, #0
  4094ec:	dd10      	ble.n	409510 <_dtoa_r+0x488>
  4094ee:	4631      	mov	r1, r6
  4094f0:	463a      	mov	r2, r7
  4094f2:	4620      	mov	r0, r4
  4094f4:	f001 fbb4 	bl	40ac60 <__pow5mult>
  4094f8:	464a      	mov	r2, r9
  4094fa:	4601      	mov	r1, r0
  4094fc:	4606      	mov	r6, r0
  4094fe:	4620      	mov	r0, r4
  409500:	f001 fb1c 	bl	40ab3c <__multiply>
  409504:	4649      	mov	r1, r9
  409506:	4680      	mov	r8, r0
  409508:	4620      	mov	r0, r4
  40950a:	f001 fa73 	bl	40a9f4 <_Bfree>
  40950e:	46c1      	mov	r9, r8
  409510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409512:	1bda      	subs	r2, r3, r7
  409514:	f040 82a1 	bne.w	409a5a <_dtoa_r+0x9d2>
  409518:	2101      	movs	r1, #1
  40951a:	4620      	mov	r0, r4
  40951c:	f001 fb04 	bl	40ab28 <__i2b>
  409520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409522:	2b00      	cmp	r3, #0
  409524:	4680      	mov	r8, r0
  409526:	dd1c      	ble.n	409562 <_dtoa_r+0x4da>
  409528:	4601      	mov	r1, r0
  40952a:	461a      	mov	r2, r3
  40952c:	4620      	mov	r0, r4
  40952e:	f001 fb97 	bl	40ac60 <__pow5mult>
  409532:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409534:	2b01      	cmp	r3, #1
  409536:	4680      	mov	r8, r0
  409538:	f340 8254 	ble.w	4099e4 <_dtoa_r+0x95c>
  40953c:	2300      	movs	r3, #0
  40953e:	930c      	str	r3, [sp, #48]	; 0x30
  409540:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409544:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409548:	6918      	ldr	r0, [r3, #16]
  40954a:	f001 fa9d 	bl	40aa88 <__hi0bits>
  40954e:	f1c0 0020 	rsb	r0, r0, #32
  409552:	e010      	b.n	409576 <_dtoa_r+0x4ee>
  409554:	f1c3 0520 	rsb	r5, r3, #32
  409558:	fa0a f005 	lsl.w	r0, sl, r5
  40955c:	e674      	b.n	409248 <_dtoa_r+0x1c0>
  40955e:	900e      	str	r0, [sp, #56]	; 0x38
  409560:	e63c      	b.n	4091dc <_dtoa_r+0x154>
  409562:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409564:	2b01      	cmp	r3, #1
  409566:	f340 8287 	ble.w	409a78 <_dtoa_r+0x9f0>
  40956a:	2300      	movs	r3, #0
  40956c:	930c      	str	r3, [sp, #48]	; 0x30
  40956e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409570:	2001      	movs	r0, #1
  409572:	2b00      	cmp	r3, #0
  409574:	d1e4      	bne.n	409540 <_dtoa_r+0x4b8>
  409576:	9a06      	ldr	r2, [sp, #24]
  409578:	4410      	add	r0, r2
  40957a:	f010 001f 	ands.w	r0, r0, #31
  40957e:	f000 80a1 	beq.w	4096c4 <_dtoa_r+0x63c>
  409582:	f1c0 0320 	rsb	r3, r0, #32
  409586:	2b04      	cmp	r3, #4
  409588:	f340 849e 	ble.w	409ec8 <_dtoa_r+0xe40>
  40958c:	9b08      	ldr	r3, [sp, #32]
  40958e:	f1c0 001c 	rsb	r0, r0, #28
  409592:	4403      	add	r3, r0
  409594:	9308      	str	r3, [sp, #32]
  409596:	4613      	mov	r3, r2
  409598:	4403      	add	r3, r0
  40959a:	4405      	add	r5, r0
  40959c:	9306      	str	r3, [sp, #24]
  40959e:	9b08      	ldr	r3, [sp, #32]
  4095a0:	2b00      	cmp	r3, #0
  4095a2:	dd05      	ble.n	4095b0 <_dtoa_r+0x528>
  4095a4:	4649      	mov	r1, r9
  4095a6:	461a      	mov	r2, r3
  4095a8:	4620      	mov	r0, r4
  4095aa:	f001 fba9 	bl	40ad00 <__lshift>
  4095ae:	4681      	mov	r9, r0
  4095b0:	9b06      	ldr	r3, [sp, #24]
  4095b2:	2b00      	cmp	r3, #0
  4095b4:	dd05      	ble.n	4095c2 <_dtoa_r+0x53a>
  4095b6:	4641      	mov	r1, r8
  4095b8:	461a      	mov	r2, r3
  4095ba:	4620      	mov	r0, r4
  4095bc:	f001 fba0 	bl	40ad00 <__lshift>
  4095c0:	4680      	mov	r8, r0
  4095c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4095c4:	2b00      	cmp	r3, #0
  4095c6:	f040 8086 	bne.w	4096d6 <_dtoa_r+0x64e>
  4095ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4095cc:	2b00      	cmp	r3, #0
  4095ce:	f340 8266 	ble.w	409a9e <_dtoa_r+0xa16>
  4095d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4095d4:	2b00      	cmp	r3, #0
  4095d6:	f000 8098 	beq.w	40970a <_dtoa_r+0x682>
  4095da:	2d00      	cmp	r5, #0
  4095dc:	dd05      	ble.n	4095ea <_dtoa_r+0x562>
  4095de:	4631      	mov	r1, r6
  4095e0:	462a      	mov	r2, r5
  4095e2:	4620      	mov	r0, r4
  4095e4:	f001 fb8c 	bl	40ad00 <__lshift>
  4095e8:	4606      	mov	r6, r0
  4095ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4095ec:	2b00      	cmp	r3, #0
  4095ee:	f040 8337 	bne.w	409c60 <_dtoa_r+0xbd8>
  4095f2:	9606      	str	r6, [sp, #24]
  4095f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4095f6:	9a04      	ldr	r2, [sp, #16]
  4095f8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4095fc:	3b01      	subs	r3, #1
  4095fe:	18d3      	adds	r3, r2, r3
  409600:	930b      	str	r3, [sp, #44]	; 0x2c
  409602:	f00a 0301 	and.w	r3, sl, #1
  409606:	930c      	str	r3, [sp, #48]	; 0x30
  409608:	4617      	mov	r7, r2
  40960a:	46c2      	mov	sl, r8
  40960c:	4651      	mov	r1, sl
  40960e:	4648      	mov	r0, r9
  409610:	f7ff fca6 	bl	408f60 <quorem>
  409614:	4631      	mov	r1, r6
  409616:	4605      	mov	r5, r0
  409618:	4648      	mov	r0, r9
  40961a:	f001 fbc3 	bl	40ada4 <__mcmp>
  40961e:	465a      	mov	r2, fp
  409620:	900a      	str	r0, [sp, #40]	; 0x28
  409622:	4651      	mov	r1, sl
  409624:	4620      	mov	r0, r4
  409626:	f001 fbd9 	bl	40addc <__mdiff>
  40962a:	68c2      	ldr	r2, [r0, #12]
  40962c:	4680      	mov	r8, r0
  40962e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  409632:	2a00      	cmp	r2, #0
  409634:	f040 822b 	bne.w	409a8e <_dtoa_r+0xa06>
  409638:	4601      	mov	r1, r0
  40963a:	4648      	mov	r0, r9
  40963c:	9308      	str	r3, [sp, #32]
  40963e:	f001 fbb1 	bl	40ada4 <__mcmp>
  409642:	4641      	mov	r1, r8
  409644:	9006      	str	r0, [sp, #24]
  409646:	4620      	mov	r0, r4
  409648:	f001 f9d4 	bl	40a9f4 <_Bfree>
  40964c:	9a06      	ldr	r2, [sp, #24]
  40964e:	9b08      	ldr	r3, [sp, #32]
  409650:	b932      	cbnz	r2, 409660 <_dtoa_r+0x5d8>
  409652:	9924      	ldr	r1, [sp, #144]	; 0x90
  409654:	b921      	cbnz	r1, 409660 <_dtoa_r+0x5d8>
  409656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409658:	2a00      	cmp	r2, #0
  40965a:	f000 83ef 	beq.w	409e3c <_dtoa_r+0xdb4>
  40965e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409660:	990a      	ldr	r1, [sp, #40]	; 0x28
  409662:	2900      	cmp	r1, #0
  409664:	f2c0 829f 	blt.w	409ba6 <_dtoa_r+0xb1e>
  409668:	d105      	bne.n	409676 <_dtoa_r+0x5ee>
  40966a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40966c:	b919      	cbnz	r1, 409676 <_dtoa_r+0x5ee>
  40966e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409670:	2900      	cmp	r1, #0
  409672:	f000 8298 	beq.w	409ba6 <_dtoa_r+0xb1e>
  409676:	2a00      	cmp	r2, #0
  409678:	f300 8306 	bgt.w	409c88 <_dtoa_r+0xc00>
  40967c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40967e:	703b      	strb	r3, [r7, #0]
  409680:	f107 0801 	add.w	r8, r7, #1
  409684:	4297      	cmp	r7, r2
  409686:	4645      	mov	r5, r8
  409688:	f000 830c 	beq.w	409ca4 <_dtoa_r+0xc1c>
  40968c:	4649      	mov	r1, r9
  40968e:	2300      	movs	r3, #0
  409690:	220a      	movs	r2, #10
  409692:	4620      	mov	r0, r4
  409694:	f001 f9b8 	bl	40aa08 <__multadd>
  409698:	455e      	cmp	r6, fp
  40969a:	4681      	mov	r9, r0
  40969c:	4631      	mov	r1, r6
  40969e:	f04f 0300 	mov.w	r3, #0
  4096a2:	f04f 020a 	mov.w	r2, #10
  4096a6:	4620      	mov	r0, r4
  4096a8:	f000 81eb 	beq.w	409a82 <_dtoa_r+0x9fa>
  4096ac:	f001 f9ac 	bl	40aa08 <__multadd>
  4096b0:	4659      	mov	r1, fp
  4096b2:	4606      	mov	r6, r0
  4096b4:	2300      	movs	r3, #0
  4096b6:	220a      	movs	r2, #10
  4096b8:	4620      	mov	r0, r4
  4096ba:	f001 f9a5 	bl	40aa08 <__multadd>
  4096be:	4647      	mov	r7, r8
  4096c0:	4683      	mov	fp, r0
  4096c2:	e7a3      	b.n	40960c <_dtoa_r+0x584>
  4096c4:	201c      	movs	r0, #28
  4096c6:	9b08      	ldr	r3, [sp, #32]
  4096c8:	4403      	add	r3, r0
  4096ca:	9308      	str	r3, [sp, #32]
  4096cc:	9b06      	ldr	r3, [sp, #24]
  4096ce:	4403      	add	r3, r0
  4096d0:	4405      	add	r5, r0
  4096d2:	9306      	str	r3, [sp, #24]
  4096d4:	e763      	b.n	40959e <_dtoa_r+0x516>
  4096d6:	4641      	mov	r1, r8
  4096d8:	4648      	mov	r0, r9
  4096da:	f001 fb63 	bl	40ada4 <__mcmp>
  4096de:	2800      	cmp	r0, #0
  4096e0:	f6bf af73 	bge.w	4095ca <_dtoa_r+0x542>
  4096e4:	9f02      	ldr	r7, [sp, #8]
  4096e6:	4649      	mov	r1, r9
  4096e8:	2300      	movs	r3, #0
  4096ea:	220a      	movs	r2, #10
  4096ec:	4620      	mov	r0, r4
  4096ee:	3f01      	subs	r7, #1
  4096f0:	9702      	str	r7, [sp, #8]
  4096f2:	f001 f989 	bl	40aa08 <__multadd>
  4096f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4096f8:	4681      	mov	r9, r0
  4096fa:	2b00      	cmp	r3, #0
  4096fc:	f040 83b6 	bne.w	409e6c <_dtoa_r+0xde4>
  409700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409702:	2b00      	cmp	r3, #0
  409704:	f340 83bf 	ble.w	409e86 <_dtoa_r+0xdfe>
  409708:	930a      	str	r3, [sp, #40]	; 0x28
  40970a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40970e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409710:	465d      	mov	r5, fp
  409712:	e002      	b.n	40971a <_dtoa_r+0x692>
  409714:	f001 f978 	bl	40aa08 <__multadd>
  409718:	4681      	mov	r9, r0
  40971a:	4641      	mov	r1, r8
  40971c:	4648      	mov	r0, r9
  40971e:	f7ff fc1f 	bl	408f60 <quorem>
  409722:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  409726:	f805 ab01 	strb.w	sl, [r5], #1
  40972a:	eba5 030b 	sub.w	r3, r5, fp
  40972e:	42bb      	cmp	r3, r7
  409730:	f04f 020a 	mov.w	r2, #10
  409734:	f04f 0300 	mov.w	r3, #0
  409738:	4649      	mov	r1, r9
  40973a:	4620      	mov	r0, r4
  40973c:	dbea      	blt.n	409714 <_dtoa_r+0x68c>
  40973e:	9b04      	ldr	r3, [sp, #16]
  409740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409742:	2a01      	cmp	r2, #1
  409744:	bfac      	ite	ge
  409746:	189b      	addge	r3, r3, r2
  409748:	3301      	addlt	r3, #1
  40974a:	461d      	mov	r5, r3
  40974c:	f04f 0b00 	mov.w	fp, #0
  409750:	4649      	mov	r1, r9
  409752:	2201      	movs	r2, #1
  409754:	4620      	mov	r0, r4
  409756:	f001 fad3 	bl	40ad00 <__lshift>
  40975a:	4641      	mov	r1, r8
  40975c:	4681      	mov	r9, r0
  40975e:	f001 fb21 	bl	40ada4 <__mcmp>
  409762:	2800      	cmp	r0, #0
  409764:	f340 823d 	ble.w	409be2 <_dtoa_r+0xb5a>
  409768:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40976c:	9904      	ldr	r1, [sp, #16]
  40976e:	1e6b      	subs	r3, r5, #1
  409770:	e004      	b.n	40977c <_dtoa_r+0x6f4>
  409772:	428b      	cmp	r3, r1
  409774:	f000 81ae 	beq.w	409ad4 <_dtoa_r+0xa4c>
  409778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40977c:	2a39      	cmp	r2, #57	; 0x39
  40977e:	f103 0501 	add.w	r5, r3, #1
  409782:	d0f6      	beq.n	409772 <_dtoa_r+0x6ea>
  409784:	3201      	adds	r2, #1
  409786:	701a      	strb	r2, [r3, #0]
  409788:	4641      	mov	r1, r8
  40978a:	4620      	mov	r0, r4
  40978c:	f001 f932 	bl	40a9f4 <_Bfree>
  409790:	2e00      	cmp	r6, #0
  409792:	f43f ae3d 	beq.w	409410 <_dtoa_r+0x388>
  409796:	f1bb 0f00 	cmp.w	fp, #0
  40979a:	d005      	beq.n	4097a8 <_dtoa_r+0x720>
  40979c:	45b3      	cmp	fp, r6
  40979e:	d003      	beq.n	4097a8 <_dtoa_r+0x720>
  4097a0:	4659      	mov	r1, fp
  4097a2:	4620      	mov	r0, r4
  4097a4:	f001 f926 	bl	40a9f4 <_Bfree>
  4097a8:	4631      	mov	r1, r6
  4097aa:	4620      	mov	r0, r4
  4097ac:	f001 f922 	bl	40a9f4 <_Bfree>
  4097b0:	e62e      	b.n	409410 <_dtoa_r+0x388>
  4097b2:	2300      	movs	r3, #0
  4097b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4097b6:	9b02      	ldr	r3, [sp, #8]
  4097b8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4097ba:	4413      	add	r3, r2
  4097bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4097be:	3301      	adds	r3, #1
  4097c0:	2b01      	cmp	r3, #1
  4097c2:	461f      	mov	r7, r3
  4097c4:	461e      	mov	r6, r3
  4097c6:	930a      	str	r3, [sp, #40]	; 0x28
  4097c8:	bfb8      	it	lt
  4097ca:	2701      	movlt	r7, #1
  4097cc:	2100      	movs	r1, #0
  4097ce:	2f17      	cmp	r7, #23
  4097d0:	6461      	str	r1, [r4, #68]	; 0x44
  4097d2:	d90a      	bls.n	4097ea <_dtoa_r+0x762>
  4097d4:	2201      	movs	r2, #1
  4097d6:	2304      	movs	r3, #4
  4097d8:	005b      	lsls	r3, r3, #1
  4097da:	f103 0014 	add.w	r0, r3, #20
  4097de:	4287      	cmp	r7, r0
  4097e0:	4611      	mov	r1, r2
  4097e2:	f102 0201 	add.w	r2, r2, #1
  4097e6:	d2f7      	bcs.n	4097d8 <_dtoa_r+0x750>
  4097e8:	6461      	str	r1, [r4, #68]	; 0x44
  4097ea:	4620      	mov	r0, r4
  4097ec:	f001 f8dc 	bl	40a9a8 <_Balloc>
  4097f0:	2e0e      	cmp	r6, #14
  4097f2:	9004      	str	r0, [sp, #16]
  4097f4:	6420      	str	r0, [r4, #64]	; 0x40
  4097f6:	f63f ad41 	bhi.w	40927c <_dtoa_r+0x1f4>
  4097fa:	2d00      	cmp	r5, #0
  4097fc:	f43f ad3e 	beq.w	40927c <_dtoa_r+0x1f4>
  409800:	9902      	ldr	r1, [sp, #8]
  409802:	2900      	cmp	r1, #0
  409804:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  409808:	f340 8202 	ble.w	409c10 <_dtoa_r+0xb88>
  40980c:	4bb8      	ldr	r3, [pc, #736]	; (409af0 <_dtoa_r+0xa68>)
  40980e:	f001 020f 	and.w	r2, r1, #15
  409812:	110d      	asrs	r5, r1, #4
  409814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409818:	06e9      	lsls	r1, r5, #27
  40981a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40981e:	f140 81ae 	bpl.w	409b7e <_dtoa_r+0xaf6>
  409822:	4bb4      	ldr	r3, [pc, #720]	; (409af4 <_dtoa_r+0xa6c>)
  409824:	4650      	mov	r0, sl
  409826:	4659      	mov	r1, fp
  409828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40982c:	f7fc fdae 	bl	40638c <__aeabi_ddiv>
  409830:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  409834:	f005 050f 	and.w	r5, r5, #15
  409838:	f04f 0a03 	mov.w	sl, #3
  40983c:	b18d      	cbz	r5, 409862 <_dtoa_r+0x7da>
  40983e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 409af4 <_dtoa_r+0xa6c>
  409842:	07ea      	lsls	r2, r5, #31
  409844:	d509      	bpl.n	40985a <_dtoa_r+0x7d2>
  409846:	4630      	mov	r0, r6
  409848:	4639      	mov	r1, r7
  40984a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40984e:	f7fc fc73 	bl	406138 <__aeabi_dmul>
  409852:	f10a 0a01 	add.w	sl, sl, #1
  409856:	4606      	mov	r6, r0
  409858:	460f      	mov	r7, r1
  40985a:	106d      	asrs	r5, r5, #1
  40985c:	f108 0808 	add.w	r8, r8, #8
  409860:	d1ef      	bne.n	409842 <_dtoa_r+0x7ba>
  409862:	463b      	mov	r3, r7
  409864:	4632      	mov	r2, r6
  409866:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40986a:	f7fc fd8f 	bl	40638c <__aeabi_ddiv>
  40986e:	4607      	mov	r7, r0
  409870:	4688      	mov	r8, r1
  409872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409874:	b143      	cbz	r3, 409888 <_dtoa_r+0x800>
  409876:	2200      	movs	r2, #0
  409878:	4b9f      	ldr	r3, [pc, #636]	; (409af8 <_dtoa_r+0xa70>)
  40987a:	4638      	mov	r0, r7
  40987c:	4641      	mov	r1, r8
  40987e:	f7fc fecd 	bl	40661c <__aeabi_dcmplt>
  409882:	2800      	cmp	r0, #0
  409884:	f040 8286 	bne.w	409d94 <_dtoa_r+0xd0c>
  409888:	4650      	mov	r0, sl
  40988a:	f7fc fbef 	bl	40606c <__aeabi_i2d>
  40988e:	463a      	mov	r2, r7
  409890:	4643      	mov	r3, r8
  409892:	f7fc fc51 	bl	406138 <__aeabi_dmul>
  409896:	4b99      	ldr	r3, [pc, #612]	; (409afc <_dtoa_r+0xa74>)
  409898:	2200      	movs	r2, #0
  40989a:	f7fc fa9b 	bl	405dd4 <__adddf3>
  40989e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4098a0:	4605      	mov	r5, r0
  4098a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4098a6:	2b00      	cmp	r3, #0
  4098a8:	f000 813e 	beq.w	409b28 <_dtoa_r+0xaa0>
  4098ac:	9b02      	ldr	r3, [sp, #8]
  4098ae:	9315      	str	r3, [sp, #84]	; 0x54
  4098b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4098b2:	9312      	str	r3, [sp, #72]	; 0x48
  4098b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4098b6:	2b00      	cmp	r3, #0
  4098b8:	f000 81fa 	beq.w	409cb0 <_dtoa_r+0xc28>
  4098bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4098be:	4b8c      	ldr	r3, [pc, #560]	; (409af0 <_dtoa_r+0xa68>)
  4098c0:	498f      	ldr	r1, [pc, #572]	; (409b00 <_dtoa_r+0xa78>)
  4098c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4098c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4098ca:	2000      	movs	r0, #0
  4098cc:	f7fc fd5e 	bl	40638c <__aeabi_ddiv>
  4098d0:	462a      	mov	r2, r5
  4098d2:	4633      	mov	r3, r6
  4098d4:	f7fc fa7c 	bl	405dd0 <__aeabi_dsub>
  4098d8:	4682      	mov	sl, r0
  4098da:	468b      	mov	fp, r1
  4098dc:	4638      	mov	r0, r7
  4098de:	4641      	mov	r1, r8
  4098e0:	f002 f836 	bl	40b950 <__aeabi_d2iz>
  4098e4:	4605      	mov	r5, r0
  4098e6:	f7fc fbc1 	bl	40606c <__aeabi_i2d>
  4098ea:	4602      	mov	r2, r0
  4098ec:	460b      	mov	r3, r1
  4098ee:	4638      	mov	r0, r7
  4098f0:	4641      	mov	r1, r8
  4098f2:	f7fc fa6d 	bl	405dd0 <__aeabi_dsub>
  4098f6:	3530      	adds	r5, #48	; 0x30
  4098f8:	fa5f f885 	uxtb.w	r8, r5
  4098fc:	9d04      	ldr	r5, [sp, #16]
  4098fe:	4606      	mov	r6, r0
  409900:	460f      	mov	r7, r1
  409902:	f885 8000 	strb.w	r8, [r5]
  409906:	4602      	mov	r2, r0
  409908:	460b      	mov	r3, r1
  40990a:	4650      	mov	r0, sl
  40990c:	4659      	mov	r1, fp
  40990e:	3501      	adds	r5, #1
  409910:	f7fc fea2 	bl	406658 <__aeabi_dcmpgt>
  409914:	2800      	cmp	r0, #0
  409916:	d154      	bne.n	4099c2 <_dtoa_r+0x93a>
  409918:	4632      	mov	r2, r6
  40991a:	463b      	mov	r3, r7
  40991c:	2000      	movs	r0, #0
  40991e:	4976      	ldr	r1, [pc, #472]	; (409af8 <_dtoa_r+0xa70>)
  409920:	f7fc fa56 	bl	405dd0 <__aeabi_dsub>
  409924:	4602      	mov	r2, r0
  409926:	460b      	mov	r3, r1
  409928:	4650      	mov	r0, sl
  40992a:	4659      	mov	r1, fp
  40992c:	f7fc fe94 	bl	406658 <__aeabi_dcmpgt>
  409930:	2800      	cmp	r0, #0
  409932:	f040 8270 	bne.w	409e16 <_dtoa_r+0xd8e>
  409936:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409938:	2a01      	cmp	r2, #1
  40993a:	f000 8111 	beq.w	409b60 <_dtoa_r+0xad8>
  40993e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409940:	9a04      	ldr	r2, [sp, #16]
  409942:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409946:	4413      	add	r3, r2
  409948:	4699      	mov	r9, r3
  40994a:	e00d      	b.n	409968 <_dtoa_r+0x8e0>
  40994c:	2000      	movs	r0, #0
  40994e:	496a      	ldr	r1, [pc, #424]	; (409af8 <_dtoa_r+0xa70>)
  409950:	f7fc fa3e 	bl	405dd0 <__aeabi_dsub>
  409954:	4652      	mov	r2, sl
  409956:	465b      	mov	r3, fp
  409958:	f7fc fe60 	bl	40661c <__aeabi_dcmplt>
  40995c:	2800      	cmp	r0, #0
  40995e:	f040 8258 	bne.w	409e12 <_dtoa_r+0xd8a>
  409962:	454d      	cmp	r5, r9
  409964:	f000 80fa 	beq.w	409b5c <_dtoa_r+0xad4>
  409968:	4650      	mov	r0, sl
  40996a:	4659      	mov	r1, fp
  40996c:	2200      	movs	r2, #0
  40996e:	4b65      	ldr	r3, [pc, #404]	; (409b04 <_dtoa_r+0xa7c>)
  409970:	f7fc fbe2 	bl	406138 <__aeabi_dmul>
  409974:	2200      	movs	r2, #0
  409976:	4b63      	ldr	r3, [pc, #396]	; (409b04 <_dtoa_r+0xa7c>)
  409978:	4682      	mov	sl, r0
  40997a:	468b      	mov	fp, r1
  40997c:	4630      	mov	r0, r6
  40997e:	4639      	mov	r1, r7
  409980:	f7fc fbda 	bl	406138 <__aeabi_dmul>
  409984:	460f      	mov	r7, r1
  409986:	4606      	mov	r6, r0
  409988:	f001 ffe2 	bl	40b950 <__aeabi_d2iz>
  40998c:	4680      	mov	r8, r0
  40998e:	f7fc fb6d 	bl	40606c <__aeabi_i2d>
  409992:	4602      	mov	r2, r0
  409994:	460b      	mov	r3, r1
  409996:	4630      	mov	r0, r6
  409998:	4639      	mov	r1, r7
  40999a:	f7fc fa19 	bl	405dd0 <__aeabi_dsub>
  40999e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4099a2:	fa5f f888 	uxtb.w	r8, r8
  4099a6:	4652      	mov	r2, sl
  4099a8:	465b      	mov	r3, fp
  4099aa:	f805 8b01 	strb.w	r8, [r5], #1
  4099ae:	4606      	mov	r6, r0
  4099b0:	460f      	mov	r7, r1
  4099b2:	f7fc fe33 	bl	40661c <__aeabi_dcmplt>
  4099b6:	4632      	mov	r2, r6
  4099b8:	463b      	mov	r3, r7
  4099ba:	2800      	cmp	r0, #0
  4099bc:	d0c6      	beq.n	40994c <_dtoa_r+0x8c4>
  4099be:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4099c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4099c4:	9302      	str	r3, [sp, #8]
  4099c6:	e523      	b.n	409410 <_dtoa_r+0x388>
  4099c8:	2300      	movs	r3, #0
  4099ca:	930b      	str	r3, [sp, #44]	; 0x2c
  4099cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4099ce:	2b00      	cmp	r3, #0
  4099d0:	f340 80dc 	ble.w	409b8c <_dtoa_r+0xb04>
  4099d4:	461f      	mov	r7, r3
  4099d6:	461e      	mov	r6, r3
  4099d8:	930f      	str	r3, [sp, #60]	; 0x3c
  4099da:	930a      	str	r3, [sp, #40]	; 0x28
  4099dc:	e6f6      	b.n	4097cc <_dtoa_r+0x744>
  4099de:	2301      	movs	r3, #1
  4099e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4099e2:	e7f3      	b.n	4099cc <_dtoa_r+0x944>
  4099e4:	f1ba 0f00 	cmp.w	sl, #0
  4099e8:	f47f ada8 	bne.w	40953c <_dtoa_r+0x4b4>
  4099ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4099f0:	2b00      	cmp	r3, #0
  4099f2:	f47f adba 	bne.w	40956a <_dtoa_r+0x4e2>
  4099f6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4099fa:	0d3f      	lsrs	r7, r7, #20
  4099fc:	053f      	lsls	r7, r7, #20
  4099fe:	2f00      	cmp	r7, #0
  409a00:	f000 820d 	beq.w	409e1e <_dtoa_r+0xd96>
  409a04:	9b08      	ldr	r3, [sp, #32]
  409a06:	3301      	adds	r3, #1
  409a08:	9308      	str	r3, [sp, #32]
  409a0a:	9b06      	ldr	r3, [sp, #24]
  409a0c:	3301      	adds	r3, #1
  409a0e:	9306      	str	r3, [sp, #24]
  409a10:	2301      	movs	r3, #1
  409a12:	930c      	str	r3, [sp, #48]	; 0x30
  409a14:	e5ab      	b.n	40956e <_dtoa_r+0x4e6>
  409a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a18:	2b00      	cmp	r3, #0
  409a1a:	f73f ac42 	bgt.w	4092a2 <_dtoa_r+0x21a>
  409a1e:	f040 8221 	bne.w	409e64 <_dtoa_r+0xddc>
  409a22:	2200      	movs	r2, #0
  409a24:	4b38      	ldr	r3, [pc, #224]	; (409b08 <_dtoa_r+0xa80>)
  409a26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409a2a:	f7fc fb85 	bl	406138 <__aeabi_dmul>
  409a2e:	4652      	mov	r2, sl
  409a30:	465b      	mov	r3, fp
  409a32:	f7fc fe07 	bl	406644 <__aeabi_dcmpge>
  409a36:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  409a3a:	4646      	mov	r6, r8
  409a3c:	2800      	cmp	r0, #0
  409a3e:	d041      	beq.n	409ac4 <_dtoa_r+0xa3c>
  409a40:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409a42:	9d04      	ldr	r5, [sp, #16]
  409a44:	43db      	mvns	r3, r3
  409a46:	9302      	str	r3, [sp, #8]
  409a48:	4641      	mov	r1, r8
  409a4a:	4620      	mov	r0, r4
  409a4c:	f000 ffd2 	bl	40a9f4 <_Bfree>
  409a50:	2e00      	cmp	r6, #0
  409a52:	f43f acdd 	beq.w	409410 <_dtoa_r+0x388>
  409a56:	e6a7      	b.n	4097a8 <_dtoa_r+0x720>
  409a58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409a5a:	4649      	mov	r1, r9
  409a5c:	4620      	mov	r0, r4
  409a5e:	f001 f8ff 	bl	40ac60 <__pow5mult>
  409a62:	4681      	mov	r9, r0
  409a64:	e558      	b.n	409518 <_dtoa_r+0x490>
  409a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409a68:	2a00      	cmp	r2, #0
  409a6a:	f000 8187 	beq.w	409d7c <_dtoa_r+0xcf4>
  409a6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409a72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409a74:	9d08      	ldr	r5, [sp, #32]
  409a76:	e4f2      	b.n	40945e <_dtoa_r+0x3d6>
  409a78:	f1ba 0f00 	cmp.w	sl, #0
  409a7c:	f47f ad75 	bne.w	40956a <_dtoa_r+0x4e2>
  409a80:	e7b4      	b.n	4099ec <_dtoa_r+0x964>
  409a82:	f000 ffc1 	bl	40aa08 <__multadd>
  409a86:	4647      	mov	r7, r8
  409a88:	4606      	mov	r6, r0
  409a8a:	4683      	mov	fp, r0
  409a8c:	e5be      	b.n	40960c <_dtoa_r+0x584>
  409a8e:	4601      	mov	r1, r0
  409a90:	4620      	mov	r0, r4
  409a92:	9306      	str	r3, [sp, #24]
  409a94:	f000 ffae 	bl	40a9f4 <_Bfree>
  409a98:	2201      	movs	r2, #1
  409a9a:	9b06      	ldr	r3, [sp, #24]
  409a9c:	e5e0      	b.n	409660 <_dtoa_r+0x5d8>
  409a9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409aa0:	2b02      	cmp	r3, #2
  409aa2:	f77f ad96 	ble.w	4095d2 <_dtoa_r+0x54a>
  409aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409aa8:	2b00      	cmp	r3, #0
  409aaa:	d1c9      	bne.n	409a40 <_dtoa_r+0x9b8>
  409aac:	4641      	mov	r1, r8
  409aae:	2205      	movs	r2, #5
  409ab0:	4620      	mov	r0, r4
  409ab2:	f000 ffa9 	bl	40aa08 <__multadd>
  409ab6:	4601      	mov	r1, r0
  409ab8:	4680      	mov	r8, r0
  409aba:	4648      	mov	r0, r9
  409abc:	f001 f972 	bl	40ada4 <__mcmp>
  409ac0:	2800      	cmp	r0, #0
  409ac2:	ddbd      	ble.n	409a40 <_dtoa_r+0x9b8>
  409ac4:	9a02      	ldr	r2, [sp, #8]
  409ac6:	9904      	ldr	r1, [sp, #16]
  409ac8:	2331      	movs	r3, #49	; 0x31
  409aca:	3201      	adds	r2, #1
  409acc:	9202      	str	r2, [sp, #8]
  409ace:	700b      	strb	r3, [r1, #0]
  409ad0:	1c4d      	adds	r5, r1, #1
  409ad2:	e7b9      	b.n	409a48 <_dtoa_r+0x9c0>
  409ad4:	9a02      	ldr	r2, [sp, #8]
  409ad6:	3201      	adds	r2, #1
  409ad8:	9202      	str	r2, [sp, #8]
  409ada:	9a04      	ldr	r2, [sp, #16]
  409adc:	2331      	movs	r3, #49	; 0x31
  409ade:	7013      	strb	r3, [r2, #0]
  409ae0:	e652      	b.n	409788 <_dtoa_r+0x700>
  409ae2:	2301      	movs	r3, #1
  409ae4:	930b      	str	r3, [sp, #44]	; 0x2c
  409ae6:	e666      	b.n	4097b6 <_dtoa_r+0x72e>
  409ae8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409aec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409aee:	e48f      	b.n	409410 <_dtoa_r+0x388>
  409af0:	0040c578 	.word	0x0040c578
  409af4:	0040c550 	.word	0x0040c550
  409af8:	3ff00000 	.word	0x3ff00000
  409afc:	401c0000 	.word	0x401c0000
  409b00:	3fe00000 	.word	0x3fe00000
  409b04:	40240000 	.word	0x40240000
  409b08:	40140000 	.word	0x40140000
  409b0c:	4650      	mov	r0, sl
  409b0e:	f7fc faad 	bl	40606c <__aeabi_i2d>
  409b12:	463a      	mov	r2, r7
  409b14:	4643      	mov	r3, r8
  409b16:	f7fc fb0f 	bl	406138 <__aeabi_dmul>
  409b1a:	2200      	movs	r2, #0
  409b1c:	4bc1      	ldr	r3, [pc, #772]	; (409e24 <_dtoa_r+0xd9c>)
  409b1e:	f7fc f959 	bl	405dd4 <__adddf3>
  409b22:	4605      	mov	r5, r0
  409b24:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409b28:	4641      	mov	r1, r8
  409b2a:	2200      	movs	r2, #0
  409b2c:	4bbe      	ldr	r3, [pc, #760]	; (409e28 <_dtoa_r+0xda0>)
  409b2e:	4638      	mov	r0, r7
  409b30:	f7fc f94e 	bl	405dd0 <__aeabi_dsub>
  409b34:	462a      	mov	r2, r5
  409b36:	4633      	mov	r3, r6
  409b38:	4682      	mov	sl, r0
  409b3a:	468b      	mov	fp, r1
  409b3c:	f7fc fd8c 	bl	406658 <__aeabi_dcmpgt>
  409b40:	4680      	mov	r8, r0
  409b42:	2800      	cmp	r0, #0
  409b44:	f040 8110 	bne.w	409d68 <_dtoa_r+0xce0>
  409b48:	462a      	mov	r2, r5
  409b4a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  409b4e:	4650      	mov	r0, sl
  409b50:	4659      	mov	r1, fp
  409b52:	f7fc fd63 	bl	40661c <__aeabi_dcmplt>
  409b56:	b118      	cbz	r0, 409b60 <_dtoa_r+0xad8>
  409b58:	4646      	mov	r6, r8
  409b5a:	e771      	b.n	409a40 <_dtoa_r+0x9b8>
  409b5c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409b60:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  409b64:	f7ff bb8a 	b.w	40927c <_dtoa_r+0x1f4>
  409b68:	9804      	ldr	r0, [sp, #16]
  409b6a:	f7ff babb 	b.w	4090e4 <_dtoa_r+0x5c>
  409b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409b72:	970c      	str	r7, [sp, #48]	; 0x30
  409b74:	1afb      	subs	r3, r7, r3
  409b76:	441a      	add	r2, r3
  409b78:	920d      	str	r2, [sp, #52]	; 0x34
  409b7a:	2700      	movs	r7, #0
  409b7c:	e469      	b.n	409452 <_dtoa_r+0x3ca>
  409b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409b82:	f04f 0a02 	mov.w	sl, #2
  409b86:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  409b8a:	e657      	b.n	40983c <_dtoa_r+0x7b4>
  409b8c:	2100      	movs	r1, #0
  409b8e:	2301      	movs	r3, #1
  409b90:	6461      	str	r1, [r4, #68]	; 0x44
  409b92:	4620      	mov	r0, r4
  409b94:	9325      	str	r3, [sp, #148]	; 0x94
  409b96:	f000 ff07 	bl	40a9a8 <_Balloc>
  409b9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409b9c:	9004      	str	r0, [sp, #16]
  409b9e:	6420      	str	r0, [r4, #64]	; 0x40
  409ba0:	930a      	str	r3, [sp, #40]	; 0x28
  409ba2:	930f      	str	r3, [sp, #60]	; 0x3c
  409ba4:	e629      	b.n	4097fa <_dtoa_r+0x772>
  409ba6:	2a00      	cmp	r2, #0
  409ba8:	46d0      	mov	r8, sl
  409baa:	f8cd b018 	str.w	fp, [sp, #24]
  409bae:	469a      	mov	sl, r3
  409bb0:	dd11      	ble.n	409bd6 <_dtoa_r+0xb4e>
  409bb2:	4649      	mov	r1, r9
  409bb4:	2201      	movs	r2, #1
  409bb6:	4620      	mov	r0, r4
  409bb8:	f001 f8a2 	bl	40ad00 <__lshift>
  409bbc:	4641      	mov	r1, r8
  409bbe:	4681      	mov	r9, r0
  409bc0:	f001 f8f0 	bl	40ada4 <__mcmp>
  409bc4:	2800      	cmp	r0, #0
  409bc6:	f340 8146 	ble.w	409e56 <_dtoa_r+0xdce>
  409bca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  409bce:	f000 8106 	beq.w	409dde <_dtoa_r+0xd56>
  409bd2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  409bd6:	46b3      	mov	fp, r6
  409bd8:	f887 a000 	strb.w	sl, [r7]
  409bdc:	1c7d      	adds	r5, r7, #1
  409bde:	9e06      	ldr	r6, [sp, #24]
  409be0:	e5d2      	b.n	409788 <_dtoa_r+0x700>
  409be2:	d104      	bne.n	409bee <_dtoa_r+0xb66>
  409be4:	f01a 0f01 	tst.w	sl, #1
  409be8:	d001      	beq.n	409bee <_dtoa_r+0xb66>
  409bea:	e5bd      	b.n	409768 <_dtoa_r+0x6e0>
  409bec:	4615      	mov	r5, r2
  409bee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409bf2:	2b30      	cmp	r3, #48	; 0x30
  409bf4:	f105 32ff 	add.w	r2, r5, #4294967295
  409bf8:	d0f8      	beq.n	409bec <_dtoa_r+0xb64>
  409bfa:	e5c5      	b.n	409788 <_dtoa_r+0x700>
  409bfc:	9904      	ldr	r1, [sp, #16]
  409bfe:	2230      	movs	r2, #48	; 0x30
  409c00:	700a      	strb	r2, [r1, #0]
  409c02:	9a02      	ldr	r2, [sp, #8]
  409c04:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409c08:	3201      	adds	r2, #1
  409c0a:	9202      	str	r2, [sp, #8]
  409c0c:	f7ff bbfc 	b.w	409408 <_dtoa_r+0x380>
  409c10:	f000 80bb 	beq.w	409d8a <_dtoa_r+0xd02>
  409c14:	9b02      	ldr	r3, [sp, #8]
  409c16:	425d      	negs	r5, r3
  409c18:	4b84      	ldr	r3, [pc, #528]	; (409e2c <_dtoa_r+0xda4>)
  409c1a:	f005 020f 	and.w	r2, r5, #15
  409c1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409c22:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409c2a:	f7fc fa85 	bl	406138 <__aeabi_dmul>
  409c2e:	112d      	asrs	r5, r5, #4
  409c30:	4607      	mov	r7, r0
  409c32:	4688      	mov	r8, r1
  409c34:	f000 812c 	beq.w	409e90 <_dtoa_r+0xe08>
  409c38:	4e7d      	ldr	r6, [pc, #500]	; (409e30 <_dtoa_r+0xda8>)
  409c3a:	f04f 0a02 	mov.w	sl, #2
  409c3e:	07eb      	lsls	r3, r5, #31
  409c40:	d509      	bpl.n	409c56 <_dtoa_r+0xbce>
  409c42:	4638      	mov	r0, r7
  409c44:	4641      	mov	r1, r8
  409c46:	e9d6 2300 	ldrd	r2, r3, [r6]
  409c4a:	f7fc fa75 	bl	406138 <__aeabi_dmul>
  409c4e:	f10a 0a01 	add.w	sl, sl, #1
  409c52:	4607      	mov	r7, r0
  409c54:	4688      	mov	r8, r1
  409c56:	106d      	asrs	r5, r5, #1
  409c58:	f106 0608 	add.w	r6, r6, #8
  409c5c:	d1ef      	bne.n	409c3e <_dtoa_r+0xbb6>
  409c5e:	e608      	b.n	409872 <_dtoa_r+0x7ea>
  409c60:	6871      	ldr	r1, [r6, #4]
  409c62:	4620      	mov	r0, r4
  409c64:	f000 fea0 	bl	40a9a8 <_Balloc>
  409c68:	6933      	ldr	r3, [r6, #16]
  409c6a:	3302      	adds	r3, #2
  409c6c:	009a      	lsls	r2, r3, #2
  409c6e:	4605      	mov	r5, r0
  409c70:	f106 010c 	add.w	r1, r6, #12
  409c74:	300c      	adds	r0, #12
  409c76:	f7fd fb5d 	bl	407334 <memcpy>
  409c7a:	4629      	mov	r1, r5
  409c7c:	2201      	movs	r2, #1
  409c7e:	4620      	mov	r0, r4
  409c80:	f001 f83e 	bl	40ad00 <__lshift>
  409c84:	9006      	str	r0, [sp, #24]
  409c86:	e4b5      	b.n	4095f4 <_dtoa_r+0x56c>
  409c88:	2b39      	cmp	r3, #57	; 0x39
  409c8a:	f8cd b018 	str.w	fp, [sp, #24]
  409c8e:	46d0      	mov	r8, sl
  409c90:	f000 80a5 	beq.w	409dde <_dtoa_r+0xd56>
  409c94:	f103 0a01 	add.w	sl, r3, #1
  409c98:	46b3      	mov	fp, r6
  409c9a:	f887 a000 	strb.w	sl, [r7]
  409c9e:	1c7d      	adds	r5, r7, #1
  409ca0:	9e06      	ldr	r6, [sp, #24]
  409ca2:	e571      	b.n	409788 <_dtoa_r+0x700>
  409ca4:	465a      	mov	r2, fp
  409ca6:	46d0      	mov	r8, sl
  409ca8:	46b3      	mov	fp, r6
  409caa:	469a      	mov	sl, r3
  409cac:	4616      	mov	r6, r2
  409cae:	e54f      	b.n	409750 <_dtoa_r+0x6c8>
  409cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409cb2:	495e      	ldr	r1, [pc, #376]	; (409e2c <_dtoa_r+0xda4>)
  409cb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409cb8:	462a      	mov	r2, r5
  409cba:	4633      	mov	r3, r6
  409cbc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409cc0:	f7fc fa3a 	bl	406138 <__aeabi_dmul>
  409cc4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409cc8:	4638      	mov	r0, r7
  409cca:	4641      	mov	r1, r8
  409ccc:	f001 fe40 	bl	40b950 <__aeabi_d2iz>
  409cd0:	4605      	mov	r5, r0
  409cd2:	f7fc f9cb 	bl	40606c <__aeabi_i2d>
  409cd6:	460b      	mov	r3, r1
  409cd8:	4602      	mov	r2, r0
  409cda:	4641      	mov	r1, r8
  409cdc:	4638      	mov	r0, r7
  409cde:	f7fc f877 	bl	405dd0 <__aeabi_dsub>
  409ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409ce4:	460f      	mov	r7, r1
  409ce6:	9904      	ldr	r1, [sp, #16]
  409ce8:	3530      	adds	r5, #48	; 0x30
  409cea:	2b01      	cmp	r3, #1
  409cec:	700d      	strb	r5, [r1, #0]
  409cee:	4606      	mov	r6, r0
  409cf0:	f101 0501 	add.w	r5, r1, #1
  409cf4:	d026      	beq.n	409d44 <_dtoa_r+0xcbc>
  409cf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409cf8:	9a04      	ldr	r2, [sp, #16]
  409cfa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 409e38 <_dtoa_r+0xdb0>
  409cfe:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409d02:	4413      	add	r3, r2
  409d04:	f04f 0a00 	mov.w	sl, #0
  409d08:	4699      	mov	r9, r3
  409d0a:	4652      	mov	r2, sl
  409d0c:	465b      	mov	r3, fp
  409d0e:	4630      	mov	r0, r6
  409d10:	4639      	mov	r1, r7
  409d12:	f7fc fa11 	bl	406138 <__aeabi_dmul>
  409d16:	460f      	mov	r7, r1
  409d18:	4606      	mov	r6, r0
  409d1a:	f001 fe19 	bl	40b950 <__aeabi_d2iz>
  409d1e:	4680      	mov	r8, r0
  409d20:	f7fc f9a4 	bl	40606c <__aeabi_i2d>
  409d24:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409d28:	4602      	mov	r2, r0
  409d2a:	460b      	mov	r3, r1
  409d2c:	4630      	mov	r0, r6
  409d2e:	4639      	mov	r1, r7
  409d30:	f7fc f84e 	bl	405dd0 <__aeabi_dsub>
  409d34:	f805 8b01 	strb.w	r8, [r5], #1
  409d38:	454d      	cmp	r5, r9
  409d3a:	4606      	mov	r6, r0
  409d3c:	460f      	mov	r7, r1
  409d3e:	d1e4      	bne.n	409d0a <_dtoa_r+0xc82>
  409d40:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409d44:	4b3b      	ldr	r3, [pc, #236]	; (409e34 <_dtoa_r+0xdac>)
  409d46:	2200      	movs	r2, #0
  409d48:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409d4c:	f7fc f842 	bl	405dd4 <__adddf3>
  409d50:	4632      	mov	r2, r6
  409d52:	463b      	mov	r3, r7
  409d54:	f7fc fc62 	bl	40661c <__aeabi_dcmplt>
  409d58:	2800      	cmp	r0, #0
  409d5a:	d046      	beq.n	409dea <_dtoa_r+0xd62>
  409d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409d5e:	9302      	str	r3, [sp, #8]
  409d60:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409d64:	f7ff bb43 	b.w	4093ee <_dtoa_r+0x366>
  409d68:	f04f 0800 	mov.w	r8, #0
  409d6c:	4646      	mov	r6, r8
  409d6e:	e6a9      	b.n	409ac4 <_dtoa_r+0xa3c>
  409d70:	9b08      	ldr	r3, [sp, #32]
  409d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409d74:	1a9d      	subs	r5, r3, r2
  409d76:	2300      	movs	r3, #0
  409d78:	f7ff bb71 	b.w	40945e <_dtoa_r+0x3d6>
  409d7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409d7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409d80:	9d08      	ldr	r5, [sp, #32]
  409d82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409d86:	f7ff bb6a 	b.w	40945e <_dtoa_r+0x3d6>
  409d8a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409d8e:	f04f 0a02 	mov.w	sl, #2
  409d92:	e56e      	b.n	409872 <_dtoa_r+0x7ea>
  409d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409d96:	2b00      	cmp	r3, #0
  409d98:	f43f aeb8 	beq.w	409b0c <_dtoa_r+0xa84>
  409d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409d9e:	2b00      	cmp	r3, #0
  409da0:	f77f aede 	ble.w	409b60 <_dtoa_r+0xad8>
  409da4:	2200      	movs	r2, #0
  409da6:	4b24      	ldr	r3, [pc, #144]	; (409e38 <_dtoa_r+0xdb0>)
  409da8:	4638      	mov	r0, r7
  409daa:	4641      	mov	r1, r8
  409dac:	f7fc f9c4 	bl	406138 <__aeabi_dmul>
  409db0:	4607      	mov	r7, r0
  409db2:	4688      	mov	r8, r1
  409db4:	f10a 0001 	add.w	r0, sl, #1
  409db8:	f7fc f958 	bl	40606c <__aeabi_i2d>
  409dbc:	463a      	mov	r2, r7
  409dbe:	4643      	mov	r3, r8
  409dc0:	f7fc f9ba 	bl	406138 <__aeabi_dmul>
  409dc4:	2200      	movs	r2, #0
  409dc6:	4b17      	ldr	r3, [pc, #92]	; (409e24 <_dtoa_r+0xd9c>)
  409dc8:	f7fc f804 	bl	405dd4 <__adddf3>
  409dcc:	9a02      	ldr	r2, [sp, #8]
  409dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409dd0:	9312      	str	r3, [sp, #72]	; 0x48
  409dd2:	3a01      	subs	r2, #1
  409dd4:	4605      	mov	r5, r0
  409dd6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409dda:	9215      	str	r2, [sp, #84]	; 0x54
  409ddc:	e56a      	b.n	4098b4 <_dtoa_r+0x82c>
  409dde:	2239      	movs	r2, #57	; 0x39
  409de0:	46b3      	mov	fp, r6
  409de2:	703a      	strb	r2, [r7, #0]
  409de4:	9e06      	ldr	r6, [sp, #24]
  409de6:	1c7d      	adds	r5, r7, #1
  409de8:	e4c0      	b.n	40976c <_dtoa_r+0x6e4>
  409dea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  409dee:	2000      	movs	r0, #0
  409df0:	4910      	ldr	r1, [pc, #64]	; (409e34 <_dtoa_r+0xdac>)
  409df2:	f7fb ffed 	bl	405dd0 <__aeabi_dsub>
  409df6:	4632      	mov	r2, r6
  409df8:	463b      	mov	r3, r7
  409dfa:	f7fc fc2d 	bl	406658 <__aeabi_dcmpgt>
  409dfe:	b908      	cbnz	r0, 409e04 <_dtoa_r+0xd7c>
  409e00:	e6ae      	b.n	409b60 <_dtoa_r+0xad8>
  409e02:	4615      	mov	r5, r2
  409e04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409e08:	2b30      	cmp	r3, #48	; 0x30
  409e0a:	f105 32ff 	add.w	r2, r5, #4294967295
  409e0e:	d0f8      	beq.n	409e02 <_dtoa_r+0xd7a>
  409e10:	e5d7      	b.n	4099c2 <_dtoa_r+0x93a>
  409e12:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409e18:	9302      	str	r3, [sp, #8]
  409e1a:	f7ff bae8 	b.w	4093ee <_dtoa_r+0x366>
  409e1e:	970c      	str	r7, [sp, #48]	; 0x30
  409e20:	f7ff bba5 	b.w	40956e <_dtoa_r+0x4e6>
  409e24:	401c0000 	.word	0x401c0000
  409e28:	40140000 	.word	0x40140000
  409e2c:	0040c578 	.word	0x0040c578
  409e30:	0040c550 	.word	0x0040c550
  409e34:	3fe00000 	.word	0x3fe00000
  409e38:	40240000 	.word	0x40240000
  409e3c:	2b39      	cmp	r3, #57	; 0x39
  409e3e:	f8cd b018 	str.w	fp, [sp, #24]
  409e42:	46d0      	mov	r8, sl
  409e44:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409e48:	469a      	mov	sl, r3
  409e4a:	d0c8      	beq.n	409dde <_dtoa_r+0xd56>
  409e4c:	f1bb 0f00 	cmp.w	fp, #0
  409e50:	f73f aebf 	bgt.w	409bd2 <_dtoa_r+0xb4a>
  409e54:	e6bf      	b.n	409bd6 <_dtoa_r+0xb4e>
  409e56:	f47f aebe 	bne.w	409bd6 <_dtoa_r+0xb4e>
  409e5a:	f01a 0f01 	tst.w	sl, #1
  409e5e:	f43f aeba 	beq.w	409bd6 <_dtoa_r+0xb4e>
  409e62:	e6b2      	b.n	409bca <_dtoa_r+0xb42>
  409e64:	f04f 0800 	mov.w	r8, #0
  409e68:	4646      	mov	r6, r8
  409e6a:	e5e9      	b.n	409a40 <_dtoa_r+0x9b8>
  409e6c:	4631      	mov	r1, r6
  409e6e:	2300      	movs	r3, #0
  409e70:	220a      	movs	r2, #10
  409e72:	4620      	mov	r0, r4
  409e74:	f000 fdc8 	bl	40aa08 <__multadd>
  409e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e7a:	2b00      	cmp	r3, #0
  409e7c:	4606      	mov	r6, r0
  409e7e:	dd0a      	ble.n	409e96 <_dtoa_r+0xe0e>
  409e80:	930a      	str	r3, [sp, #40]	; 0x28
  409e82:	f7ff bbaa 	b.w	4095da <_dtoa_r+0x552>
  409e86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e88:	2b02      	cmp	r3, #2
  409e8a:	dc23      	bgt.n	409ed4 <_dtoa_r+0xe4c>
  409e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e8e:	e43b      	b.n	409708 <_dtoa_r+0x680>
  409e90:	f04f 0a02 	mov.w	sl, #2
  409e94:	e4ed      	b.n	409872 <_dtoa_r+0x7ea>
  409e96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e98:	2b02      	cmp	r3, #2
  409e9a:	dc1b      	bgt.n	409ed4 <_dtoa_r+0xe4c>
  409e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e9e:	e7ef      	b.n	409e80 <_dtoa_r+0xdf8>
  409ea0:	2500      	movs	r5, #0
  409ea2:	6465      	str	r5, [r4, #68]	; 0x44
  409ea4:	4629      	mov	r1, r5
  409ea6:	4620      	mov	r0, r4
  409ea8:	f000 fd7e 	bl	40a9a8 <_Balloc>
  409eac:	f04f 33ff 	mov.w	r3, #4294967295
  409eb0:	930a      	str	r3, [sp, #40]	; 0x28
  409eb2:	930f      	str	r3, [sp, #60]	; 0x3c
  409eb4:	2301      	movs	r3, #1
  409eb6:	9004      	str	r0, [sp, #16]
  409eb8:	9525      	str	r5, [sp, #148]	; 0x94
  409eba:	6420      	str	r0, [r4, #64]	; 0x40
  409ebc:	930b      	str	r3, [sp, #44]	; 0x2c
  409ebe:	f7ff b9dd 	b.w	40927c <_dtoa_r+0x1f4>
  409ec2:	2501      	movs	r5, #1
  409ec4:	f7ff b9a5 	b.w	409212 <_dtoa_r+0x18a>
  409ec8:	f43f ab69 	beq.w	40959e <_dtoa_r+0x516>
  409ecc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409ed0:	f7ff bbf9 	b.w	4096c6 <_dtoa_r+0x63e>
  409ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409ed6:	930a      	str	r3, [sp, #40]	; 0x28
  409ed8:	e5e5      	b.n	409aa6 <_dtoa_r+0xa1e>
  409eda:	bf00      	nop

00409edc <__sflush_r>:
  409edc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  409ee0:	b29a      	uxth	r2, r3
  409ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409ee6:	460d      	mov	r5, r1
  409ee8:	0711      	lsls	r1, r2, #28
  409eea:	4680      	mov	r8, r0
  409eec:	d43a      	bmi.n	409f64 <__sflush_r+0x88>
  409eee:	686a      	ldr	r2, [r5, #4]
  409ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409ef4:	2a00      	cmp	r2, #0
  409ef6:	81ab      	strh	r3, [r5, #12]
  409ef8:	dd6f      	ble.n	409fda <__sflush_r+0xfe>
  409efa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409efc:	2c00      	cmp	r4, #0
  409efe:	d049      	beq.n	409f94 <__sflush_r+0xb8>
  409f00:	2200      	movs	r2, #0
  409f02:	b29b      	uxth	r3, r3
  409f04:	f8d8 6000 	ldr.w	r6, [r8]
  409f08:	f8c8 2000 	str.w	r2, [r8]
  409f0c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  409f10:	d067      	beq.n	409fe2 <__sflush_r+0x106>
  409f12:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409f14:	075f      	lsls	r7, r3, #29
  409f16:	d505      	bpl.n	409f24 <__sflush_r+0x48>
  409f18:	6869      	ldr	r1, [r5, #4]
  409f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409f1c:	1a52      	subs	r2, r2, r1
  409f1e:	b10b      	cbz	r3, 409f24 <__sflush_r+0x48>
  409f20:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409f22:	1ad2      	subs	r2, r2, r3
  409f24:	2300      	movs	r3, #0
  409f26:	69e9      	ldr	r1, [r5, #28]
  409f28:	4640      	mov	r0, r8
  409f2a:	47a0      	blx	r4
  409f2c:	1c44      	adds	r4, r0, #1
  409f2e:	d03c      	beq.n	409faa <__sflush_r+0xce>
  409f30:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  409f34:	692a      	ldr	r2, [r5, #16]
  409f36:	602a      	str	r2, [r5, #0]
  409f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409f3c:	2200      	movs	r2, #0
  409f3e:	81ab      	strh	r3, [r5, #12]
  409f40:	04db      	lsls	r3, r3, #19
  409f42:	606a      	str	r2, [r5, #4]
  409f44:	d447      	bmi.n	409fd6 <__sflush_r+0xfa>
  409f46:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409f48:	f8c8 6000 	str.w	r6, [r8]
  409f4c:	b311      	cbz	r1, 409f94 <__sflush_r+0xb8>
  409f4e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409f52:	4299      	cmp	r1, r3
  409f54:	d002      	beq.n	409f5c <__sflush_r+0x80>
  409f56:	4640      	mov	r0, r8
  409f58:	f000 f95a 	bl	40a210 <_free_r>
  409f5c:	2000      	movs	r0, #0
  409f5e:	6328      	str	r0, [r5, #48]	; 0x30
  409f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f64:	692e      	ldr	r6, [r5, #16]
  409f66:	b1ae      	cbz	r6, 409f94 <__sflush_r+0xb8>
  409f68:	682c      	ldr	r4, [r5, #0]
  409f6a:	602e      	str	r6, [r5, #0]
  409f6c:	0791      	lsls	r1, r2, #30
  409f6e:	bf0c      	ite	eq
  409f70:	696b      	ldreq	r3, [r5, #20]
  409f72:	2300      	movne	r3, #0
  409f74:	1ba4      	subs	r4, r4, r6
  409f76:	60ab      	str	r3, [r5, #8]
  409f78:	e00a      	b.n	409f90 <__sflush_r+0xb4>
  409f7a:	4623      	mov	r3, r4
  409f7c:	4632      	mov	r2, r6
  409f7e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409f80:	69e9      	ldr	r1, [r5, #28]
  409f82:	4640      	mov	r0, r8
  409f84:	47b8      	blx	r7
  409f86:	2800      	cmp	r0, #0
  409f88:	eba4 0400 	sub.w	r4, r4, r0
  409f8c:	4406      	add	r6, r0
  409f8e:	dd04      	ble.n	409f9a <__sflush_r+0xbe>
  409f90:	2c00      	cmp	r4, #0
  409f92:	dcf2      	bgt.n	409f7a <__sflush_r+0x9e>
  409f94:	2000      	movs	r0, #0
  409f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f9a:	89ab      	ldrh	r3, [r5, #12]
  409f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fa0:	81ab      	strh	r3, [r5, #12]
  409fa2:	f04f 30ff 	mov.w	r0, #4294967295
  409fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409faa:	f8d8 4000 	ldr.w	r4, [r8]
  409fae:	2c1d      	cmp	r4, #29
  409fb0:	d8f3      	bhi.n	409f9a <__sflush_r+0xbe>
  409fb2:	4b19      	ldr	r3, [pc, #100]	; (40a018 <__sflush_r+0x13c>)
  409fb4:	40e3      	lsrs	r3, r4
  409fb6:	43db      	mvns	r3, r3
  409fb8:	f013 0301 	ands.w	r3, r3, #1
  409fbc:	d1ed      	bne.n	409f9a <__sflush_r+0xbe>
  409fbe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409fc2:	606b      	str	r3, [r5, #4]
  409fc4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409fc8:	6929      	ldr	r1, [r5, #16]
  409fca:	81ab      	strh	r3, [r5, #12]
  409fcc:	04da      	lsls	r2, r3, #19
  409fce:	6029      	str	r1, [r5, #0]
  409fd0:	d5b9      	bpl.n	409f46 <__sflush_r+0x6a>
  409fd2:	2c00      	cmp	r4, #0
  409fd4:	d1b7      	bne.n	409f46 <__sflush_r+0x6a>
  409fd6:	6528      	str	r0, [r5, #80]	; 0x50
  409fd8:	e7b5      	b.n	409f46 <__sflush_r+0x6a>
  409fda:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409fdc:	2a00      	cmp	r2, #0
  409fde:	dc8c      	bgt.n	409efa <__sflush_r+0x1e>
  409fe0:	e7d8      	b.n	409f94 <__sflush_r+0xb8>
  409fe2:	2301      	movs	r3, #1
  409fe4:	69e9      	ldr	r1, [r5, #28]
  409fe6:	4640      	mov	r0, r8
  409fe8:	47a0      	blx	r4
  409fea:	1c43      	adds	r3, r0, #1
  409fec:	4602      	mov	r2, r0
  409fee:	d002      	beq.n	409ff6 <__sflush_r+0x11a>
  409ff0:	89ab      	ldrh	r3, [r5, #12]
  409ff2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409ff4:	e78e      	b.n	409f14 <__sflush_r+0x38>
  409ff6:	f8d8 3000 	ldr.w	r3, [r8]
  409ffa:	2b00      	cmp	r3, #0
  409ffc:	d0f8      	beq.n	409ff0 <__sflush_r+0x114>
  409ffe:	2b1d      	cmp	r3, #29
  40a000:	d001      	beq.n	40a006 <__sflush_r+0x12a>
  40a002:	2b16      	cmp	r3, #22
  40a004:	d102      	bne.n	40a00c <__sflush_r+0x130>
  40a006:	f8c8 6000 	str.w	r6, [r8]
  40a00a:	e7c3      	b.n	409f94 <__sflush_r+0xb8>
  40a00c:	89ab      	ldrh	r3, [r5, #12]
  40a00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a012:	81ab      	strh	r3, [r5, #12]
  40a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a018:	20400001 	.word	0x20400001

0040a01c <_fflush_r>:
  40a01c:	b538      	push	{r3, r4, r5, lr}
  40a01e:	460d      	mov	r5, r1
  40a020:	4604      	mov	r4, r0
  40a022:	b108      	cbz	r0, 40a028 <_fflush_r+0xc>
  40a024:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a026:	b1bb      	cbz	r3, 40a058 <_fflush_r+0x3c>
  40a028:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40a02c:	b188      	cbz	r0, 40a052 <_fflush_r+0x36>
  40a02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a030:	07db      	lsls	r3, r3, #31
  40a032:	d401      	bmi.n	40a038 <_fflush_r+0x1c>
  40a034:	0581      	lsls	r1, r0, #22
  40a036:	d517      	bpl.n	40a068 <_fflush_r+0x4c>
  40a038:	4620      	mov	r0, r4
  40a03a:	4629      	mov	r1, r5
  40a03c:	f7ff ff4e 	bl	409edc <__sflush_r>
  40a040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a042:	07da      	lsls	r2, r3, #31
  40a044:	4604      	mov	r4, r0
  40a046:	d402      	bmi.n	40a04e <_fflush_r+0x32>
  40a048:	89ab      	ldrh	r3, [r5, #12]
  40a04a:	059b      	lsls	r3, r3, #22
  40a04c:	d507      	bpl.n	40a05e <_fflush_r+0x42>
  40a04e:	4620      	mov	r0, r4
  40a050:	bd38      	pop	{r3, r4, r5, pc}
  40a052:	4604      	mov	r4, r0
  40a054:	4620      	mov	r0, r4
  40a056:	bd38      	pop	{r3, r4, r5, pc}
  40a058:	f000 f838 	bl	40a0cc <__sinit>
  40a05c:	e7e4      	b.n	40a028 <_fflush_r+0xc>
  40a05e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a060:	f000 fb72 	bl	40a748 <__retarget_lock_release_recursive>
  40a064:	4620      	mov	r0, r4
  40a066:	bd38      	pop	{r3, r4, r5, pc}
  40a068:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a06a:	f000 fb6b 	bl	40a744 <__retarget_lock_acquire_recursive>
  40a06e:	e7e3      	b.n	40a038 <_fflush_r+0x1c>

0040a070 <_cleanup_r>:
  40a070:	4901      	ldr	r1, [pc, #4]	; (40a078 <_cleanup_r+0x8>)
  40a072:	f000 bb2b 	b.w	40a6cc <_fwalk_reent>
  40a076:	bf00      	nop
  40a078:	0040b579 	.word	0x0040b579

0040a07c <std.isra.0>:
  40a07c:	b510      	push	{r4, lr}
  40a07e:	2300      	movs	r3, #0
  40a080:	4604      	mov	r4, r0
  40a082:	8181      	strh	r1, [r0, #12]
  40a084:	81c2      	strh	r2, [r0, #14]
  40a086:	6003      	str	r3, [r0, #0]
  40a088:	6043      	str	r3, [r0, #4]
  40a08a:	6083      	str	r3, [r0, #8]
  40a08c:	6643      	str	r3, [r0, #100]	; 0x64
  40a08e:	6103      	str	r3, [r0, #16]
  40a090:	6143      	str	r3, [r0, #20]
  40a092:	6183      	str	r3, [r0, #24]
  40a094:	4619      	mov	r1, r3
  40a096:	2208      	movs	r2, #8
  40a098:	305c      	adds	r0, #92	; 0x5c
  40a09a:	f7fd f9e5 	bl	407468 <memset>
  40a09e:	4807      	ldr	r0, [pc, #28]	; (40a0bc <std.isra.0+0x40>)
  40a0a0:	4907      	ldr	r1, [pc, #28]	; (40a0c0 <std.isra.0+0x44>)
  40a0a2:	4a08      	ldr	r2, [pc, #32]	; (40a0c4 <std.isra.0+0x48>)
  40a0a4:	4b08      	ldr	r3, [pc, #32]	; (40a0c8 <std.isra.0+0x4c>)
  40a0a6:	6220      	str	r0, [r4, #32]
  40a0a8:	61e4      	str	r4, [r4, #28]
  40a0aa:	6261      	str	r1, [r4, #36]	; 0x24
  40a0ac:	62a2      	str	r2, [r4, #40]	; 0x28
  40a0ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a0b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a0b8:	f000 bb40 	b.w	40a73c <__retarget_lock_init_recursive>
  40a0bc:	0040b2e9 	.word	0x0040b2e9
  40a0c0:	0040b30d 	.word	0x0040b30d
  40a0c4:	0040b349 	.word	0x0040b349
  40a0c8:	0040b369 	.word	0x0040b369

0040a0cc <__sinit>:
  40a0cc:	b510      	push	{r4, lr}
  40a0ce:	4604      	mov	r4, r0
  40a0d0:	4812      	ldr	r0, [pc, #72]	; (40a11c <__sinit+0x50>)
  40a0d2:	f000 fb37 	bl	40a744 <__retarget_lock_acquire_recursive>
  40a0d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40a0d8:	b9d2      	cbnz	r2, 40a110 <__sinit+0x44>
  40a0da:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40a0de:	4810      	ldr	r0, [pc, #64]	; (40a120 <__sinit+0x54>)
  40a0e0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40a0e4:	2103      	movs	r1, #3
  40a0e6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40a0ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  40a0ec:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40a0f0:	6860      	ldr	r0, [r4, #4]
  40a0f2:	2104      	movs	r1, #4
  40a0f4:	f7ff ffc2 	bl	40a07c <std.isra.0>
  40a0f8:	2201      	movs	r2, #1
  40a0fa:	2109      	movs	r1, #9
  40a0fc:	68a0      	ldr	r0, [r4, #8]
  40a0fe:	f7ff ffbd 	bl	40a07c <std.isra.0>
  40a102:	2202      	movs	r2, #2
  40a104:	2112      	movs	r1, #18
  40a106:	68e0      	ldr	r0, [r4, #12]
  40a108:	f7ff ffb8 	bl	40a07c <std.isra.0>
  40a10c:	2301      	movs	r3, #1
  40a10e:	63a3      	str	r3, [r4, #56]	; 0x38
  40a110:	4802      	ldr	r0, [pc, #8]	; (40a11c <__sinit+0x50>)
  40a112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a116:	f000 bb17 	b.w	40a748 <__retarget_lock_release_recursive>
  40a11a:	bf00      	nop
  40a11c:	20400e48 	.word	0x20400e48
  40a120:	0040a071 	.word	0x0040a071

0040a124 <__sfp_lock_acquire>:
  40a124:	4801      	ldr	r0, [pc, #4]	; (40a12c <__sfp_lock_acquire+0x8>)
  40a126:	f000 bb0d 	b.w	40a744 <__retarget_lock_acquire_recursive>
  40a12a:	bf00      	nop
  40a12c:	20400e5c 	.word	0x20400e5c

0040a130 <__sfp_lock_release>:
  40a130:	4801      	ldr	r0, [pc, #4]	; (40a138 <__sfp_lock_release+0x8>)
  40a132:	f000 bb09 	b.w	40a748 <__retarget_lock_release_recursive>
  40a136:	bf00      	nop
  40a138:	20400e5c 	.word	0x20400e5c

0040a13c <__libc_fini_array>:
  40a13c:	b538      	push	{r3, r4, r5, lr}
  40a13e:	4c0a      	ldr	r4, [pc, #40]	; (40a168 <__libc_fini_array+0x2c>)
  40a140:	4d0a      	ldr	r5, [pc, #40]	; (40a16c <__libc_fini_array+0x30>)
  40a142:	1b64      	subs	r4, r4, r5
  40a144:	10a4      	asrs	r4, r4, #2
  40a146:	d00a      	beq.n	40a15e <__libc_fini_array+0x22>
  40a148:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40a14c:	3b01      	subs	r3, #1
  40a14e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40a152:	3c01      	subs	r4, #1
  40a154:	f855 3904 	ldr.w	r3, [r5], #-4
  40a158:	4798      	blx	r3
  40a15a:	2c00      	cmp	r4, #0
  40a15c:	d1f9      	bne.n	40a152 <__libc_fini_array+0x16>
  40a15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a162:	f002 bb07 	b.w	40c774 <_fini>
  40a166:	bf00      	nop
  40a168:	0040c784 	.word	0x0040c784
  40a16c:	0040c780 	.word	0x0040c780

0040a170 <_malloc_trim_r>:
  40a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a172:	4f24      	ldr	r7, [pc, #144]	; (40a204 <_malloc_trim_r+0x94>)
  40a174:	460c      	mov	r4, r1
  40a176:	4606      	mov	r6, r0
  40a178:	f7fd f9c4 	bl	407504 <__malloc_lock>
  40a17c:	68bb      	ldr	r3, [r7, #8]
  40a17e:	685d      	ldr	r5, [r3, #4]
  40a180:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a184:	310f      	adds	r1, #15
  40a186:	f025 0503 	bic.w	r5, r5, #3
  40a18a:	4429      	add	r1, r5
  40a18c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a190:	f021 010f 	bic.w	r1, r1, #15
  40a194:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a198:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a19c:	db07      	blt.n	40a1ae <_malloc_trim_r+0x3e>
  40a19e:	2100      	movs	r1, #0
  40a1a0:	4630      	mov	r0, r6
  40a1a2:	f7fd fa25 	bl	4075f0 <_sbrk_r>
  40a1a6:	68bb      	ldr	r3, [r7, #8]
  40a1a8:	442b      	add	r3, r5
  40a1aa:	4298      	cmp	r0, r3
  40a1ac:	d004      	beq.n	40a1b8 <_malloc_trim_r+0x48>
  40a1ae:	4630      	mov	r0, r6
  40a1b0:	f7fd f9ae 	bl	407510 <__malloc_unlock>
  40a1b4:	2000      	movs	r0, #0
  40a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a1b8:	4261      	negs	r1, r4
  40a1ba:	4630      	mov	r0, r6
  40a1bc:	f7fd fa18 	bl	4075f0 <_sbrk_r>
  40a1c0:	3001      	adds	r0, #1
  40a1c2:	d00d      	beq.n	40a1e0 <_malloc_trim_r+0x70>
  40a1c4:	4b10      	ldr	r3, [pc, #64]	; (40a208 <_malloc_trim_r+0x98>)
  40a1c6:	68ba      	ldr	r2, [r7, #8]
  40a1c8:	6819      	ldr	r1, [r3, #0]
  40a1ca:	1b2d      	subs	r5, r5, r4
  40a1cc:	f045 0501 	orr.w	r5, r5, #1
  40a1d0:	4630      	mov	r0, r6
  40a1d2:	1b09      	subs	r1, r1, r4
  40a1d4:	6055      	str	r5, [r2, #4]
  40a1d6:	6019      	str	r1, [r3, #0]
  40a1d8:	f7fd f99a 	bl	407510 <__malloc_unlock>
  40a1dc:	2001      	movs	r0, #1
  40a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a1e0:	2100      	movs	r1, #0
  40a1e2:	4630      	mov	r0, r6
  40a1e4:	f7fd fa04 	bl	4075f0 <_sbrk_r>
  40a1e8:	68ba      	ldr	r2, [r7, #8]
  40a1ea:	1a83      	subs	r3, r0, r2
  40a1ec:	2b0f      	cmp	r3, #15
  40a1ee:	ddde      	ble.n	40a1ae <_malloc_trim_r+0x3e>
  40a1f0:	4c06      	ldr	r4, [pc, #24]	; (40a20c <_malloc_trim_r+0x9c>)
  40a1f2:	4905      	ldr	r1, [pc, #20]	; (40a208 <_malloc_trim_r+0x98>)
  40a1f4:	6824      	ldr	r4, [r4, #0]
  40a1f6:	f043 0301 	orr.w	r3, r3, #1
  40a1fa:	1b00      	subs	r0, r0, r4
  40a1fc:	6053      	str	r3, [r2, #4]
  40a1fe:	6008      	str	r0, [r1, #0]
  40a200:	e7d5      	b.n	40a1ae <_malloc_trim_r+0x3e>
  40a202:	bf00      	nop
  40a204:	20400458 	.word	0x20400458
  40a208:	20400db4 	.word	0x20400db4
  40a20c:	20400860 	.word	0x20400860

0040a210 <_free_r>:
  40a210:	2900      	cmp	r1, #0
  40a212:	d044      	beq.n	40a29e <_free_r+0x8e>
  40a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a218:	460d      	mov	r5, r1
  40a21a:	4680      	mov	r8, r0
  40a21c:	f7fd f972 	bl	407504 <__malloc_lock>
  40a220:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a224:	4969      	ldr	r1, [pc, #420]	; (40a3cc <_free_r+0x1bc>)
  40a226:	f027 0301 	bic.w	r3, r7, #1
  40a22a:	f1a5 0408 	sub.w	r4, r5, #8
  40a22e:	18e2      	adds	r2, r4, r3
  40a230:	688e      	ldr	r6, [r1, #8]
  40a232:	6850      	ldr	r0, [r2, #4]
  40a234:	42b2      	cmp	r2, r6
  40a236:	f020 0003 	bic.w	r0, r0, #3
  40a23a:	d05e      	beq.n	40a2fa <_free_r+0xea>
  40a23c:	07fe      	lsls	r6, r7, #31
  40a23e:	6050      	str	r0, [r2, #4]
  40a240:	d40b      	bmi.n	40a25a <_free_r+0x4a>
  40a242:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a246:	1be4      	subs	r4, r4, r7
  40a248:	f101 0e08 	add.w	lr, r1, #8
  40a24c:	68a5      	ldr	r5, [r4, #8]
  40a24e:	4575      	cmp	r5, lr
  40a250:	443b      	add	r3, r7
  40a252:	d06d      	beq.n	40a330 <_free_r+0x120>
  40a254:	68e7      	ldr	r7, [r4, #12]
  40a256:	60ef      	str	r7, [r5, #12]
  40a258:	60bd      	str	r5, [r7, #8]
  40a25a:	1815      	adds	r5, r2, r0
  40a25c:	686d      	ldr	r5, [r5, #4]
  40a25e:	07ed      	lsls	r5, r5, #31
  40a260:	d53e      	bpl.n	40a2e0 <_free_r+0xd0>
  40a262:	f043 0201 	orr.w	r2, r3, #1
  40a266:	6062      	str	r2, [r4, #4]
  40a268:	50e3      	str	r3, [r4, r3]
  40a26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a26e:	d217      	bcs.n	40a2a0 <_free_r+0x90>
  40a270:	08db      	lsrs	r3, r3, #3
  40a272:	1c58      	adds	r0, r3, #1
  40a274:	109a      	asrs	r2, r3, #2
  40a276:	684d      	ldr	r5, [r1, #4]
  40a278:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a27c:	60a7      	str	r7, [r4, #8]
  40a27e:	2301      	movs	r3, #1
  40a280:	4093      	lsls	r3, r2
  40a282:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a286:	432b      	orrs	r3, r5
  40a288:	3a08      	subs	r2, #8
  40a28a:	60e2      	str	r2, [r4, #12]
  40a28c:	604b      	str	r3, [r1, #4]
  40a28e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a292:	60fc      	str	r4, [r7, #12]
  40a294:	4640      	mov	r0, r8
  40a296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a29a:	f7fd b939 	b.w	407510 <__malloc_unlock>
  40a29e:	4770      	bx	lr
  40a2a0:	0a5a      	lsrs	r2, r3, #9
  40a2a2:	2a04      	cmp	r2, #4
  40a2a4:	d852      	bhi.n	40a34c <_free_r+0x13c>
  40a2a6:	099a      	lsrs	r2, r3, #6
  40a2a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a2ac:	00ff      	lsls	r7, r7, #3
  40a2ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a2b2:	19c8      	adds	r0, r1, r7
  40a2b4:	59ca      	ldr	r2, [r1, r7]
  40a2b6:	3808      	subs	r0, #8
  40a2b8:	4290      	cmp	r0, r2
  40a2ba:	d04f      	beq.n	40a35c <_free_r+0x14c>
  40a2bc:	6851      	ldr	r1, [r2, #4]
  40a2be:	f021 0103 	bic.w	r1, r1, #3
  40a2c2:	428b      	cmp	r3, r1
  40a2c4:	d232      	bcs.n	40a32c <_free_r+0x11c>
  40a2c6:	6892      	ldr	r2, [r2, #8]
  40a2c8:	4290      	cmp	r0, r2
  40a2ca:	d1f7      	bne.n	40a2bc <_free_r+0xac>
  40a2cc:	68c3      	ldr	r3, [r0, #12]
  40a2ce:	60a0      	str	r0, [r4, #8]
  40a2d0:	60e3      	str	r3, [r4, #12]
  40a2d2:	609c      	str	r4, [r3, #8]
  40a2d4:	60c4      	str	r4, [r0, #12]
  40a2d6:	4640      	mov	r0, r8
  40a2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a2dc:	f7fd b918 	b.w	407510 <__malloc_unlock>
  40a2e0:	6895      	ldr	r5, [r2, #8]
  40a2e2:	4f3b      	ldr	r7, [pc, #236]	; (40a3d0 <_free_r+0x1c0>)
  40a2e4:	42bd      	cmp	r5, r7
  40a2e6:	4403      	add	r3, r0
  40a2e8:	d040      	beq.n	40a36c <_free_r+0x15c>
  40a2ea:	68d0      	ldr	r0, [r2, #12]
  40a2ec:	60e8      	str	r0, [r5, #12]
  40a2ee:	f043 0201 	orr.w	r2, r3, #1
  40a2f2:	6085      	str	r5, [r0, #8]
  40a2f4:	6062      	str	r2, [r4, #4]
  40a2f6:	50e3      	str	r3, [r4, r3]
  40a2f8:	e7b7      	b.n	40a26a <_free_r+0x5a>
  40a2fa:	07ff      	lsls	r7, r7, #31
  40a2fc:	4403      	add	r3, r0
  40a2fe:	d407      	bmi.n	40a310 <_free_r+0x100>
  40a300:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a304:	1aa4      	subs	r4, r4, r2
  40a306:	4413      	add	r3, r2
  40a308:	68a0      	ldr	r0, [r4, #8]
  40a30a:	68e2      	ldr	r2, [r4, #12]
  40a30c:	60c2      	str	r2, [r0, #12]
  40a30e:	6090      	str	r0, [r2, #8]
  40a310:	4a30      	ldr	r2, [pc, #192]	; (40a3d4 <_free_r+0x1c4>)
  40a312:	6812      	ldr	r2, [r2, #0]
  40a314:	f043 0001 	orr.w	r0, r3, #1
  40a318:	4293      	cmp	r3, r2
  40a31a:	6060      	str	r0, [r4, #4]
  40a31c:	608c      	str	r4, [r1, #8]
  40a31e:	d3b9      	bcc.n	40a294 <_free_r+0x84>
  40a320:	4b2d      	ldr	r3, [pc, #180]	; (40a3d8 <_free_r+0x1c8>)
  40a322:	4640      	mov	r0, r8
  40a324:	6819      	ldr	r1, [r3, #0]
  40a326:	f7ff ff23 	bl	40a170 <_malloc_trim_r>
  40a32a:	e7b3      	b.n	40a294 <_free_r+0x84>
  40a32c:	4610      	mov	r0, r2
  40a32e:	e7cd      	b.n	40a2cc <_free_r+0xbc>
  40a330:	1811      	adds	r1, r2, r0
  40a332:	6849      	ldr	r1, [r1, #4]
  40a334:	07c9      	lsls	r1, r1, #31
  40a336:	d444      	bmi.n	40a3c2 <_free_r+0x1b2>
  40a338:	6891      	ldr	r1, [r2, #8]
  40a33a:	68d2      	ldr	r2, [r2, #12]
  40a33c:	60ca      	str	r2, [r1, #12]
  40a33e:	4403      	add	r3, r0
  40a340:	f043 0001 	orr.w	r0, r3, #1
  40a344:	6091      	str	r1, [r2, #8]
  40a346:	6060      	str	r0, [r4, #4]
  40a348:	50e3      	str	r3, [r4, r3]
  40a34a:	e7a3      	b.n	40a294 <_free_r+0x84>
  40a34c:	2a14      	cmp	r2, #20
  40a34e:	d816      	bhi.n	40a37e <_free_r+0x16e>
  40a350:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a354:	00ff      	lsls	r7, r7, #3
  40a356:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a35a:	e7aa      	b.n	40a2b2 <_free_r+0xa2>
  40a35c:	10aa      	asrs	r2, r5, #2
  40a35e:	2301      	movs	r3, #1
  40a360:	684d      	ldr	r5, [r1, #4]
  40a362:	4093      	lsls	r3, r2
  40a364:	432b      	orrs	r3, r5
  40a366:	604b      	str	r3, [r1, #4]
  40a368:	4603      	mov	r3, r0
  40a36a:	e7b0      	b.n	40a2ce <_free_r+0xbe>
  40a36c:	f043 0201 	orr.w	r2, r3, #1
  40a370:	614c      	str	r4, [r1, #20]
  40a372:	610c      	str	r4, [r1, #16]
  40a374:	60e5      	str	r5, [r4, #12]
  40a376:	60a5      	str	r5, [r4, #8]
  40a378:	6062      	str	r2, [r4, #4]
  40a37a:	50e3      	str	r3, [r4, r3]
  40a37c:	e78a      	b.n	40a294 <_free_r+0x84>
  40a37e:	2a54      	cmp	r2, #84	; 0x54
  40a380:	d806      	bhi.n	40a390 <_free_r+0x180>
  40a382:	0b1a      	lsrs	r2, r3, #12
  40a384:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a388:	00ff      	lsls	r7, r7, #3
  40a38a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a38e:	e790      	b.n	40a2b2 <_free_r+0xa2>
  40a390:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a394:	d806      	bhi.n	40a3a4 <_free_r+0x194>
  40a396:	0bda      	lsrs	r2, r3, #15
  40a398:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a39c:	00ff      	lsls	r7, r7, #3
  40a39e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a3a2:	e786      	b.n	40a2b2 <_free_r+0xa2>
  40a3a4:	f240 5054 	movw	r0, #1364	; 0x554
  40a3a8:	4282      	cmp	r2, r0
  40a3aa:	d806      	bhi.n	40a3ba <_free_r+0x1aa>
  40a3ac:	0c9a      	lsrs	r2, r3, #18
  40a3ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a3b2:	00ff      	lsls	r7, r7, #3
  40a3b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a3b8:	e77b      	b.n	40a2b2 <_free_r+0xa2>
  40a3ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a3be:	257e      	movs	r5, #126	; 0x7e
  40a3c0:	e777      	b.n	40a2b2 <_free_r+0xa2>
  40a3c2:	f043 0101 	orr.w	r1, r3, #1
  40a3c6:	6061      	str	r1, [r4, #4]
  40a3c8:	6013      	str	r3, [r2, #0]
  40a3ca:	e763      	b.n	40a294 <_free_r+0x84>
  40a3cc:	20400458 	.word	0x20400458
  40a3d0:	20400460 	.word	0x20400460
  40a3d4:	20400864 	.word	0x20400864
  40a3d8:	20400de4 	.word	0x20400de4

0040a3dc <__sfvwrite_r>:
  40a3dc:	6893      	ldr	r3, [r2, #8]
  40a3de:	2b00      	cmp	r3, #0
  40a3e0:	d073      	beq.n	40a4ca <__sfvwrite_r+0xee>
  40a3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a3e6:	898b      	ldrh	r3, [r1, #12]
  40a3e8:	b083      	sub	sp, #12
  40a3ea:	460c      	mov	r4, r1
  40a3ec:	0719      	lsls	r1, r3, #28
  40a3ee:	9000      	str	r0, [sp, #0]
  40a3f0:	4616      	mov	r6, r2
  40a3f2:	d526      	bpl.n	40a442 <__sfvwrite_r+0x66>
  40a3f4:	6922      	ldr	r2, [r4, #16]
  40a3f6:	b322      	cbz	r2, 40a442 <__sfvwrite_r+0x66>
  40a3f8:	f013 0002 	ands.w	r0, r3, #2
  40a3fc:	6835      	ldr	r5, [r6, #0]
  40a3fe:	d02c      	beq.n	40a45a <__sfvwrite_r+0x7e>
  40a400:	f04f 0900 	mov.w	r9, #0
  40a404:	4fb0      	ldr	r7, [pc, #704]	; (40a6c8 <__sfvwrite_r+0x2ec>)
  40a406:	46c8      	mov	r8, r9
  40a408:	46b2      	mov	sl, r6
  40a40a:	45b8      	cmp	r8, r7
  40a40c:	4643      	mov	r3, r8
  40a40e:	464a      	mov	r2, r9
  40a410:	bf28      	it	cs
  40a412:	463b      	movcs	r3, r7
  40a414:	9800      	ldr	r0, [sp, #0]
  40a416:	f1b8 0f00 	cmp.w	r8, #0
  40a41a:	d050      	beq.n	40a4be <__sfvwrite_r+0xe2>
  40a41c:	69e1      	ldr	r1, [r4, #28]
  40a41e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a420:	47b0      	blx	r6
  40a422:	2800      	cmp	r0, #0
  40a424:	dd58      	ble.n	40a4d8 <__sfvwrite_r+0xfc>
  40a426:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a42a:	1a1b      	subs	r3, r3, r0
  40a42c:	4481      	add	r9, r0
  40a42e:	eba8 0800 	sub.w	r8, r8, r0
  40a432:	f8ca 3008 	str.w	r3, [sl, #8]
  40a436:	2b00      	cmp	r3, #0
  40a438:	d1e7      	bne.n	40a40a <__sfvwrite_r+0x2e>
  40a43a:	2000      	movs	r0, #0
  40a43c:	b003      	add	sp, #12
  40a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a442:	4621      	mov	r1, r4
  40a444:	9800      	ldr	r0, [sp, #0]
  40a446:	f7fe fd17 	bl	408e78 <__swsetup_r>
  40a44a:	2800      	cmp	r0, #0
  40a44c:	f040 8133 	bne.w	40a6b6 <__sfvwrite_r+0x2da>
  40a450:	89a3      	ldrh	r3, [r4, #12]
  40a452:	6835      	ldr	r5, [r6, #0]
  40a454:	f013 0002 	ands.w	r0, r3, #2
  40a458:	d1d2      	bne.n	40a400 <__sfvwrite_r+0x24>
  40a45a:	f013 0901 	ands.w	r9, r3, #1
  40a45e:	d145      	bne.n	40a4ec <__sfvwrite_r+0x110>
  40a460:	464f      	mov	r7, r9
  40a462:	9601      	str	r6, [sp, #4]
  40a464:	b337      	cbz	r7, 40a4b4 <__sfvwrite_r+0xd8>
  40a466:	059a      	lsls	r2, r3, #22
  40a468:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40a46c:	f140 8083 	bpl.w	40a576 <__sfvwrite_r+0x19a>
  40a470:	4547      	cmp	r7, r8
  40a472:	46c3      	mov	fp, r8
  40a474:	f0c0 80ab 	bcc.w	40a5ce <__sfvwrite_r+0x1f2>
  40a478:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a47c:	f040 80ac 	bne.w	40a5d8 <__sfvwrite_r+0x1fc>
  40a480:	6820      	ldr	r0, [r4, #0]
  40a482:	46ba      	mov	sl, r7
  40a484:	465a      	mov	r2, fp
  40a486:	4649      	mov	r1, r9
  40a488:	f000 fa2a 	bl	40a8e0 <memmove>
  40a48c:	68a2      	ldr	r2, [r4, #8]
  40a48e:	6823      	ldr	r3, [r4, #0]
  40a490:	eba2 0208 	sub.w	r2, r2, r8
  40a494:	445b      	add	r3, fp
  40a496:	60a2      	str	r2, [r4, #8]
  40a498:	6023      	str	r3, [r4, #0]
  40a49a:	9a01      	ldr	r2, [sp, #4]
  40a49c:	6893      	ldr	r3, [r2, #8]
  40a49e:	eba3 030a 	sub.w	r3, r3, sl
  40a4a2:	44d1      	add	r9, sl
  40a4a4:	eba7 070a 	sub.w	r7, r7, sl
  40a4a8:	6093      	str	r3, [r2, #8]
  40a4aa:	2b00      	cmp	r3, #0
  40a4ac:	d0c5      	beq.n	40a43a <__sfvwrite_r+0x5e>
  40a4ae:	89a3      	ldrh	r3, [r4, #12]
  40a4b0:	2f00      	cmp	r7, #0
  40a4b2:	d1d8      	bne.n	40a466 <__sfvwrite_r+0x8a>
  40a4b4:	f8d5 9000 	ldr.w	r9, [r5]
  40a4b8:	686f      	ldr	r7, [r5, #4]
  40a4ba:	3508      	adds	r5, #8
  40a4bc:	e7d2      	b.n	40a464 <__sfvwrite_r+0x88>
  40a4be:	f8d5 9000 	ldr.w	r9, [r5]
  40a4c2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40a4c6:	3508      	adds	r5, #8
  40a4c8:	e79f      	b.n	40a40a <__sfvwrite_r+0x2e>
  40a4ca:	2000      	movs	r0, #0
  40a4cc:	4770      	bx	lr
  40a4ce:	4621      	mov	r1, r4
  40a4d0:	9800      	ldr	r0, [sp, #0]
  40a4d2:	f7ff fda3 	bl	40a01c <_fflush_r>
  40a4d6:	b370      	cbz	r0, 40a536 <__sfvwrite_r+0x15a>
  40a4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a4e0:	f04f 30ff 	mov.w	r0, #4294967295
  40a4e4:	81a3      	strh	r3, [r4, #12]
  40a4e6:	b003      	add	sp, #12
  40a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4ec:	4681      	mov	r9, r0
  40a4ee:	4633      	mov	r3, r6
  40a4f0:	464e      	mov	r6, r9
  40a4f2:	46a8      	mov	r8, r5
  40a4f4:	469a      	mov	sl, r3
  40a4f6:	464d      	mov	r5, r9
  40a4f8:	b34e      	cbz	r6, 40a54e <__sfvwrite_r+0x172>
  40a4fa:	b380      	cbz	r0, 40a55e <__sfvwrite_r+0x182>
  40a4fc:	6820      	ldr	r0, [r4, #0]
  40a4fe:	6923      	ldr	r3, [r4, #16]
  40a500:	6962      	ldr	r2, [r4, #20]
  40a502:	45b1      	cmp	r9, r6
  40a504:	46cb      	mov	fp, r9
  40a506:	bf28      	it	cs
  40a508:	46b3      	movcs	fp, r6
  40a50a:	4298      	cmp	r0, r3
  40a50c:	465f      	mov	r7, fp
  40a50e:	d904      	bls.n	40a51a <__sfvwrite_r+0x13e>
  40a510:	68a3      	ldr	r3, [r4, #8]
  40a512:	4413      	add	r3, r2
  40a514:	459b      	cmp	fp, r3
  40a516:	f300 80a6 	bgt.w	40a666 <__sfvwrite_r+0x28a>
  40a51a:	4593      	cmp	fp, r2
  40a51c:	db4b      	blt.n	40a5b6 <__sfvwrite_r+0x1da>
  40a51e:	4613      	mov	r3, r2
  40a520:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a522:	69e1      	ldr	r1, [r4, #28]
  40a524:	9800      	ldr	r0, [sp, #0]
  40a526:	462a      	mov	r2, r5
  40a528:	47b8      	blx	r7
  40a52a:	1e07      	subs	r7, r0, #0
  40a52c:	ddd4      	ble.n	40a4d8 <__sfvwrite_r+0xfc>
  40a52e:	ebb9 0907 	subs.w	r9, r9, r7
  40a532:	d0cc      	beq.n	40a4ce <__sfvwrite_r+0xf2>
  40a534:	2001      	movs	r0, #1
  40a536:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a53a:	1bdb      	subs	r3, r3, r7
  40a53c:	443d      	add	r5, r7
  40a53e:	1bf6      	subs	r6, r6, r7
  40a540:	f8ca 3008 	str.w	r3, [sl, #8]
  40a544:	2b00      	cmp	r3, #0
  40a546:	f43f af78 	beq.w	40a43a <__sfvwrite_r+0x5e>
  40a54a:	2e00      	cmp	r6, #0
  40a54c:	d1d5      	bne.n	40a4fa <__sfvwrite_r+0x11e>
  40a54e:	f108 0308 	add.w	r3, r8, #8
  40a552:	e913 0060 	ldmdb	r3, {r5, r6}
  40a556:	4698      	mov	r8, r3
  40a558:	3308      	adds	r3, #8
  40a55a:	2e00      	cmp	r6, #0
  40a55c:	d0f9      	beq.n	40a552 <__sfvwrite_r+0x176>
  40a55e:	4632      	mov	r2, r6
  40a560:	210a      	movs	r1, #10
  40a562:	4628      	mov	r0, r5
  40a564:	f000 f96c 	bl	40a840 <memchr>
  40a568:	2800      	cmp	r0, #0
  40a56a:	f000 80a1 	beq.w	40a6b0 <__sfvwrite_r+0x2d4>
  40a56e:	3001      	adds	r0, #1
  40a570:	eba0 0905 	sub.w	r9, r0, r5
  40a574:	e7c2      	b.n	40a4fc <__sfvwrite_r+0x120>
  40a576:	6820      	ldr	r0, [r4, #0]
  40a578:	6923      	ldr	r3, [r4, #16]
  40a57a:	4298      	cmp	r0, r3
  40a57c:	d802      	bhi.n	40a584 <__sfvwrite_r+0x1a8>
  40a57e:	6963      	ldr	r3, [r4, #20]
  40a580:	429f      	cmp	r7, r3
  40a582:	d25d      	bcs.n	40a640 <__sfvwrite_r+0x264>
  40a584:	45b8      	cmp	r8, r7
  40a586:	bf28      	it	cs
  40a588:	46b8      	movcs	r8, r7
  40a58a:	4642      	mov	r2, r8
  40a58c:	4649      	mov	r1, r9
  40a58e:	f000 f9a7 	bl	40a8e0 <memmove>
  40a592:	68a3      	ldr	r3, [r4, #8]
  40a594:	6822      	ldr	r2, [r4, #0]
  40a596:	eba3 0308 	sub.w	r3, r3, r8
  40a59a:	4442      	add	r2, r8
  40a59c:	60a3      	str	r3, [r4, #8]
  40a59e:	6022      	str	r2, [r4, #0]
  40a5a0:	b10b      	cbz	r3, 40a5a6 <__sfvwrite_r+0x1ca>
  40a5a2:	46c2      	mov	sl, r8
  40a5a4:	e779      	b.n	40a49a <__sfvwrite_r+0xbe>
  40a5a6:	4621      	mov	r1, r4
  40a5a8:	9800      	ldr	r0, [sp, #0]
  40a5aa:	f7ff fd37 	bl	40a01c <_fflush_r>
  40a5ae:	2800      	cmp	r0, #0
  40a5b0:	d192      	bne.n	40a4d8 <__sfvwrite_r+0xfc>
  40a5b2:	46c2      	mov	sl, r8
  40a5b4:	e771      	b.n	40a49a <__sfvwrite_r+0xbe>
  40a5b6:	465a      	mov	r2, fp
  40a5b8:	4629      	mov	r1, r5
  40a5ba:	f000 f991 	bl	40a8e0 <memmove>
  40a5be:	68a2      	ldr	r2, [r4, #8]
  40a5c0:	6823      	ldr	r3, [r4, #0]
  40a5c2:	eba2 020b 	sub.w	r2, r2, fp
  40a5c6:	445b      	add	r3, fp
  40a5c8:	60a2      	str	r2, [r4, #8]
  40a5ca:	6023      	str	r3, [r4, #0]
  40a5cc:	e7af      	b.n	40a52e <__sfvwrite_r+0x152>
  40a5ce:	6820      	ldr	r0, [r4, #0]
  40a5d0:	46b8      	mov	r8, r7
  40a5d2:	46ba      	mov	sl, r7
  40a5d4:	46bb      	mov	fp, r7
  40a5d6:	e755      	b.n	40a484 <__sfvwrite_r+0xa8>
  40a5d8:	6962      	ldr	r2, [r4, #20]
  40a5da:	6820      	ldr	r0, [r4, #0]
  40a5dc:	6921      	ldr	r1, [r4, #16]
  40a5de:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a5e2:	eba0 0a01 	sub.w	sl, r0, r1
  40a5e6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a5ea:	f10a 0001 	add.w	r0, sl, #1
  40a5ee:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a5f2:	4438      	add	r0, r7
  40a5f4:	4540      	cmp	r0, r8
  40a5f6:	4642      	mov	r2, r8
  40a5f8:	bf84      	itt	hi
  40a5fa:	4680      	movhi	r8, r0
  40a5fc:	4642      	movhi	r2, r8
  40a5fe:	055b      	lsls	r3, r3, #21
  40a600:	d544      	bpl.n	40a68c <__sfvwrite_r+0x2b0>
  40a602:	4611      	mov	r1, r2
  40a604:	9800      	ldr	r0, [sp, #0]
  40a606:	f7fc fbe5 	bl	406dd4 <_malloc_r>
  40a60a:	4683      	mov	fp, r0
  40a60c:	2800      	cmp	r0, #0
  40a60e:	d055      	beq.n	40a6bc <__sfvwrite_r+0x2e0>
  40a610:	4652      	mov	r2, sl
  40a612:	6921      	ldr	r1, [r4, #16]
  40a614:	f7fc fe8e 	bl	407334 <memcpy>
  40a618:	89a3      	ldrh	r3, [r4, #12]
  40a61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a622:	81a3      	strh	r3, [r4, #12]
  40a624:	eb0b 000a 	add.w	r0, fp, sl
  40a628:	eba8 030a 	sub.w	r3, r8, sl
  40a62c:	f8c4 b010 	str.w	fp, [r4, #16]
  40a630:	f8c4 8014 	str.w	r8, [r4, #20]
  40a634:	6020      	str	r0, [r4, #0]
  40a636:	60a3      	str	r3, [r4, #8]
  40a638:	46b8      	mov	r8, r7
  40a63a:	46ba      	mov	sl, r7
  40a63c:	46bb      	mov	fp, r7
  40a63e:	e721      	b.n	40a484 <__sfvwrite_r+0xa8>
  40a640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a644:	42b9      	cmp	r1, r7
  40a646:	bf28      	it	cs
  40a648:	4639      	movcs	r1, r7
  40a64a:	464a      	mov	r2, r9
  40a64c:	fb91 f1f3 	sdiv	r1, r1, r3
  40a650:	9800      	ldr	r0, [sp, #0]
  40a652:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a654:	fb03 f301 	mul.w	r3, r3, r1
  40a658:	69e1      	ldr	r1, [r4, #28]
  40a65a:	47b0      	blx	r6
  40a65c:	f1b0 0a00 	subs.w	sl, r0, #0
  40a660:	f73f af1b 	bgt.w	40a49a <__sfvwrite_r+0xbe>
  40a664:	e738      	b.n	40a4d8 <__sfvwrite_r+0xfc>
  40a666:	461a      	mov	r2, r3
  40a668:	4629      	mov	r1, r5
  40a66a:	9301      	str	r3, [sp, #4]
  40a66c:	f000 f938 	bl	40a8e0 <memmove>
  40a670:	6822      	ldr	r2, [r4, #0]
  40a672:	9b01      	ldr	r3, [sp, #4]
  40a674:	9800      	ldr	r0, [sp, #0]
  40a676:	441a      	add	r2, r3
  40a678:	6022      	str	r2, [r4, #0]
  40a67a:	4621      	mov	r1, r4
  40a67c:	f7ff fcce 	bl	40a01c <_fflush_r>
  40a680:	9b01      	ldr	r3, [sp, #4]
  40a682:	2800      	cmp	r0, #0
  40a684:	f47f af28 	bne.w	40a4d8 <__sfvwrite_r+0xfc>
  40a688:	461f      	mov	r7, r3
  40a68a:	e750      	b.n	40a52e <__sfvwrite_r+0x152>
  40a68c:	9800      	ldr	r0, [sp, #0]
  40a68e:	f000 fc85 	bl	40af9c <_realloc_r>
  40a692:	4683      	mov	fp, r0
  40a694:	2800      	cmp	r0, #0
  40a696:	d1c5      	bne.n	40a624 <__sfvwrite_r+0x248>
  40a698:	9d00      	ldr	r5, [sp, #0]
  40a69a:	6921      	ldr	r1, [r4, #16]
  40a69c:	4628      	mov	r0, r5
  40a69e:	f7ff fdb7 	bl	40a210 <_free_r>
  40a6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6a6:	220c      	movs	r2, #12
  40a6a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a6ac:	602a      	str	r2, [r5, #0]
  40a6ae:	e715      	b.n	40a4dc <__sfvwrite_r+0x100>
  40a6b0:	f106 0901 	add.w	r9, r6, #1
  40a6b4:	e722      	b.n	40a4fc <__sfvwrite_r+0x120>
  40a6b6:	f04f 30ff 	mov.w	r0, #4294967295
  40a6ba:	e6bf      	b.n	40a43c <__sfvwrite_r+0x60>
  40a6bc:	9a00      	ldr	r2, [sp, #0]
  40a6be:	230c      	movs	r3, #12
  40a6c0:	6013      	str	r3, [r2, #0]
  40a6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6c6:	e709      	b.n	40a4dc <__sfvwrite_r+0x100>
  40a6c8:	7ffffc00 	.word	0x7ffffc00

0040a6cc <_fwalk_reent>:
  40a6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a6d0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a6d4:	d01f      	beq.n	40a716 <_fwalk_reent+0x4a>
  40a6d6:	4688      	mov	r8, r1
  40a6d8:	4606      	mov	r6, r0
  40a6da:	f04f 0900 	mov.w	r9, #0
  40a6de:	687d      	ldr	r5, [r7, #4]
  40a6e0:	68bc      	ldr	r4, [r7, #8]
  40a6e2:	3d01      	subs	r5, #1
  40a6e4:	d411      	bmi.n	40a70a <_fwalk_reent+0x3e>
  40a6e6:	89a3      	ldrh	r3, [r4, #12]
  40a6e8:	2b01      	cmp	r3, #1
  40a6ea:	f105 35ff 	add.w	r5, r5, #4294967295
  40a6ee:	d908      	bls.n	40a702 <_fwalk_reent+0x36>
  40a6f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a6f4:	3301      	adds	r3, #1
  40a6f6:	4621      	mov	r1, r4
  40a6f8:	4630      	mov	r0, r6
  40a6fa:	d002      	beq.n	40a702 <_fwalk_reent+0x36>
  40a6fc:	47c0      	blx	r8
  40a6fe:	ea49 0900 	orr.w	r9, r9, r0
  40a702:	1c6b      	adds	r3, r5, #1
  40a704:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a708:	d1ed      	bne.n	40a6e6 <_fwalk_reent+0x1a>
  40a70a:	683f      	ldr	r7, [r7, #0]
  40a70c:	2f00      	cmp	r7, #0
  40a70e:	d1e6      	bne.n	40a6de <_fwalk_reent+0x12>
  40a710:	4648      	mov	r0, r9
  40a712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a716:	46b9      	mov	r9, r7
  40a718:	4648      	mov	r0, r9
  40a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a71e:	bf00      	nop

0040a720 <_localeconv_r>:
  40a720:	4a04      	ldr	r2, [pc, #16]	; (40a734 <_localeconv_r+0x14>)
  40a722:	4b05      	ldr	r3, [pc, #20]	; (40a738 <_localeconv_r+0x18>)
  40a724:	6812      	ldr	r2, [r2, #0]
  40a726:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a728:	2800      	cmp	r0, #0
  40a72a:	bf08      	it	eq
  40a72c:	4618      	moveq	r0, r3
  40a72e:	30f0      	adds	r0, #240	; 0xf0
  40a730:	4770      	bx	lr
  40a732:	bf00      	nop
  40a734:	20400028 	.word	0x20400028
  40a738:	2040086c 	.word	0x2040086c

0040a73c <__retarget_lock_init_recursive>:
  40a73c:	4770      	bx	lr
  40a73e:	bf00      	nop

0040a740 <__retarget_lock_close_recursive>:
  40a740:	4770      	bx	lr
  40a742:	bf00      	nop

0040a744 <__retarget_lock_acquire_recursive>:
  40a744:	4770      	bx	lr
  40a746:	bf00      	nop

0040a748 <__retarget_lock_release_recursive>:
  40a748:	4770      	bx	lr
  40a74a:	bf00      	nop

0040a74c <__swhatbuf_r>:
  40a74c:	b570      	push	{r4, r5, r6, lr}
  40a74e:	460c      	mov	r4, r1
  40a750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a754:	2900      	cmp	r1, #0
  40a756:	b090      	sub	sp, #64	; 0x40
  40a758:	4615      	mov	r5, r2
  40a75a:	461e      	mov	r6, r3
  40a75c:	db14      	blt.n	40a788 <__swhatbuf_r+0x3c>
  40a75e:	aa01      	add	r2, sp, #4
  40a760:	f000 fff0 	bl	40b744 <_fstat_r>
  40a764:	2800      	cmp	r0, #0
  40a766:	db0f      	blt.n	40a788 <__swhatbuf_r+0x3c>
  40a768:	9a02      	ldr	r2, [sp, #8]
  40a76a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a76e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a772:	fab2 f282 	clz	r2, r2
  40a776:	0952      	lsrs	r2, r2, #5
  40a778:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a77c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a780:	6032      	str	r2, [r6, #0]
  40a782:	602b      	str	r3, [r5, #0]
  40a784:	b010      	add	sp, #64	; 0x40
  40a786:	bd70      	pop	{r4, r5, r6, pc}
  40a788:	89a2      	ldrh	r2, [r4, #12]
  40a78a:	2300      	movs	r3, #0
  40a78c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a790:	6033      	str	r3, [r6, #0]
  40a792:	d004      	beq.n	40a79e <__swhatbuf_r+0x52>
  40a794:	2240      	movs	r2, #64	; 0x40
  40a796:	4618      	mov	r0, r3
  40a798:	602a      	str	r2, [r5, #0]
  40a79a:	b010      	add	sp, #64	; 0x40
  40a79c:	bd70      	pop	{r4, r5, r6, pc}
  40a79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a7a2:	602b      	str	r3, [r5, #0]
  40a7a4:	b010      	add	sp, #64	; 0x40
  40a7a6:	bd70      	pop	{r4, r5, r6, pc}

0040a7a8 <__smakebuf_r>:
  40a7a8:	898a      	ldrh	r2, [r1, #12]
  40a7aa:	0792      	lsls	r2, r2, #30
  40a7ac:	460b      	mov	r3, r1
  40a7ae:	d506      	bpl.n	40a7be <__smakebuf_r+0x16>
  40a7b0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a7b4:	2101      	movs	r1, #1
  40a7b6:	601a      	str	r2, [r3, #0]
  40a7b8:	611a      	str	r2, [r3, #16]
  40a7ba:	6159      	str	r1, [r3, #20]
  40a7bc:	4770      	bx	lr
  40a7be:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a7c0:	b083      	sub	sp, #12
  40a7c2:	ab01      	add	r3, sp, #4
  40a7c4:	466a      	mov	r2, sp
  40a7c6:	460c      	mov	r4, r1
  40a7c8:	4606      	mov	r6, r0
  40a7ca:	f7ff ffbf 	bl	40a74c <__swhatbuf_r>
  40a7ce:	9900      	ldr	r1, [sp, #0]
  40a7d0:	4605      	mov	r5, r0
  40a7d2:	4630      	mov	r0, r6
  40a7d4:	f7fc fafe 	bl	406dd4 <_malloc_r>
  40a7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a7dc:	b1d8      	cbz	r0, 40a816 <__smakebuf_r+0x6e>
  40a7de:	9a01      	ldr	r2, [sp, #4]
  40a7e0:	4f15      	ldr	r7, [pc, #84]	; (40a838 <__smakebuf_r+0x90>)
  40a7e2:	9900      	ldr	r1, [sp, #0]
  40a7e4:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a7ea:	81a3      	strh	r3, [r4, #12]
  40a7ec:	6020      	str	r0, [r4, #0]
  40a7ee:	6120      	str	r0, [r4, #16]
  40a7f0:	6161      	str	r1, [r4, #20]
  40a7f2:	b91a      	cbnz	r2, 40a7fc <__smakebuf_r+0x54>
  40a7f4:	432b      	orrs	r3, r5
  40a7f6:	81a3      	strh	r3, [r4, #12]
  40a7f8:	b003      	add	sp, #12
  40a7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a7fc:	4630      	mov	r0, r6
  40a7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a802:	f000 ffb3 	bl	40b76c <_isatty_r>
  40a806:	b1a0      	cbz	r0, 40a832 <__smakebuf_r+0x8a>
  40a808:	89a3      	ldrh	r3, [r4, #12]
  40a80a:	f023 0303 	bic.w	r3, r3, #3
  40a80e:	f043 0301 	orr.w	r3, r3, #1
  40a812:	b21b      	sxth	r3, r3
  40a814:	e7ee      	b.n	40a7f4 <__smakebuf_r+0x4c>
  40a816:	059a      	lsls	r2, r3, #22
  40a818:	d4ee      	bmi.n	40a7f8 <__smakebuf_r+0x50>
  40a81a:	f023 0303 	bic.w	r3, r3, #3
  40a81e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a822:	f043 0302 	orr.w	r3, r3, #2
  40a826:	2101      	movs	r1, #1
  40a828:	81a3      	strh	r3, [r4, #12]
  40a82a:	6022      	str	r2, [r4, #0]
  40a82c:	6122      	str	r2, [r4, #16]
  40a82e:	6161      	str	r1, [r4, #20]
  40a830:	e7e2      	b.n	40a7f8 <__smakebuf_r+0x50>
  40a832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a836:	e7dd      	b.n	40a7f4 <__smakebuf_r+0x4c>
  40a838:	0040a071 	.word	0x0040a071
  40a83c:	00000000 	.word	0x00000000

0040a840 <memchr>:
  40a840:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a844:	2a10      	cmp	r2, #16
  40a846:	db2b      	blt.n	40a8a0 <memchr+0x60>
  40a848:	f010 0f07 	tst.w	r0, #7
  40a84c:	d008      	beq.n	40a860 <memchr+0x20>
  40a84e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a852:	3a01      	subs	r2, #1
  40a854:	428b      	cmp	r3, r1
  40a856:	d02d      	beq.n	40a8b4 <memchr+0x74>
  40a858:	f010 0f07 	tst.w	r0, #7
  40a85c:	b342      	cbz	r2, 40a8b0 <memchr+0x70>
  40a85e:	d1f6      	bne.n	40a84e <memchr+0xe>
  40a860:	b4f0      	push	{r4, r5, r6, r7}
  40a862:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40a866:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40a86a:	f022 0407 	bic.w	r4, r2, #7
  40a86e:	f07f 0700 	mvns.w	r7, #0
  40a872:	2300      	movs	r3, #0
  40a874:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40a878:	3c08      	subs	r4, #8
  40a87a:	ea85 0501 	eor.w	r5, r5, r1
  40a87e:	ea86 0601 	eor.w	r6, r6, r1
  40a882:	fa85 f547 	uadd8	r5, r5, r7
  40a886:	faa3 f587 	sel	r5, r3, r7
  40a88a:	fa86 f647 	uadd8	r6, r6, r7
  40a88e:	faa5 f687 	sel	r6, r5, r7
  40a892:	b98e      	cbnz	r6, 40a8b8 <memchr+0x78>
  40a894:	d1ee      	bne.n	40a874 <memchr+0x34>
  40a896:	bcf0      	pop	{r4, r5, r6, r7}
  40a898:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a89c:	f002 0207 	and.w	r2, r2, #7
  40a8a0:	b132      	cbz	r2, 40a8b0 <memchr+0x70>
  40a8a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a8a6:	3a01      	subs	r2, #1
  40a8a8:	ea83 0301 	eor.w	r3, r3, r1
  40a8ac:	b113      	cbz	r3, 40a8b4 <memchr+0x74>
  40a8ae:	d1f8      	bne.n	40a8a2 <memchr+0x62>
  40a8b0:	2000      	movs	r0, #0
  40a8b2:	4770      	bx	lr
  40a8b4:	3801      	subs	r0, #1
  40a8b6:	4770      	bx	lr
  40a8b8:	2d00      	cmp	r5, #0
  40a8ba:	bf06      	itte	eq
  40a8bc:	4635      	moveq	r5, r6
  40a8be:	3803      	subeq	r0, #3
  40a8c0:	3807      	subne	r0, #7
  40a8c2:	f015 0f01 	tst.w	r5, #1
  40a8c6:	d107      	bne.n	40a8d8 <memchr+0x98>
  40a8c8:	3001      	adds	r0, #1
  40a8ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  40a8ce:	bf02      	ittt	eq
  40a8d0:	3001      	addeq	r0, #1
  40a8d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40a8d6:	3001      	addeq	r0, #1
  40a8d8:	bcf0      	pop	{r4, r5, r6, r7}
  40a8da:	3801      	subs	r0, #1
  40a8dc:	4770      	bx	lr
  40a8de:	bf00      	nop

0040a8e0 <memmove>:
  40a8e0:	4288      	cmp	r0, r1
  40a8e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a8e4:	d90d      	bls.n	40a902 <memmove+0x22>
  40a8e6:	188b      	adds	r3, r1, r2
  40a8e8:	4298      	cmp	r0, r3
  40a8ea:	d20a      	bcs.n	40a902 <memmove+0x22>
  40a8ec:	1884      	adds	r4, r0, r2
  40a8ee:	2a00      	cmp	r2, #0
  40a8f0:	d051      	beq.n	40a996 <memmove+0xb6>
  40a8f2:	4622      	mov	r2, r4
  40a8f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a8f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40a8fc:	4299      	cmp	r1, r3
  40a8fe:	d1f9      	bne.n	40a8f4 <memmove+0x14>
  40a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a902:	2a0f      	cmp	r2, #15
  40a904:	d948      	bls.n	40a998 <memmove+0xb8>
  40a906:	ea41 0300 	orr.w	r3, r1, r0
  40a90a:	079b      	lsls	r3, r3, #30
  40a90c:	d146      	bne.n	40a99c <memmove+0xbc>
  40a90e:	f100 0410 	add.w	r4, r0, #16
  40a912:	f101 0310 	add.w	r3, r1, #16
  40a916:	4615      	mov	r5, r2
  40a918:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a91c:	f844 6c10 	str.w	r6, [r4, #-16]
  40a920:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40a924:	f844 6c0c 	str.w	r6, [r4, #-12]
  40a928:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40a92c:	f844 6c08 	str.w	r6, [r4, #-8]
  40a930:	3d10      	subs	r5, #16
  40a932:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40a936:	f844 6c04 	str.w	r6, [r4, #-4]
  40a93a:	2d0f      	cmp	r5, #15
  40a93c:	f103 0310 	add.w	r3, r3, #16
  40a940:	f104 0410 	add.w	r4, r4, #16
  40a944:	d8e8      	bhi.n	40a918 <memmove+0x38>
  40a946:	f1a2 0310 	sub.w	r3, r2, #16
  40a94a:	f023 030f 	bic.w	r3, r3, #15
  40a94e:	f002 0e0f 	and.w	lr, r2, #15
  40a952:	3310      	adds	r3, #16
  40a954:	f1be 0f03 	cmp.w	lr, #3
  40a958:	4419      	add	r1, r3
  40a95a:	4403      	add	r3, r0
  40a95c:	d921      	bls.n	40a9a2 <memmove+0xc2>
  40a95e:	1f1e      	subs	r6, r3, #4
  40a960:	460d      	mov	r5, r1
  40a962:	4674      	mov	r4, lr
  40a964:	3c04      	subs	r4, #4
  40a966:	f855 7b04 	ldr.w	r7, [r5], #4
  40a96a:	f846 7f04 	str.w	r7, [r6, #4]!
  40a96e:	2c03      	cmp	r4, #3
  40a970:	d8f8      	bhi.n	40a964 <memmove+0x84>
  40a972:	f1ae 0404 	sub.w	r4, lr, #4
  40a976:	f024 0403 	bic.w	r4, r4, #3
  40a97a:	3404      	adds	r4, #4
  40a97c:	4421      	add	r1, r4
  40a97e:	4423      	add	r3, r4
  40a980:	f002 0203 	and.w	r2, r2, #3
  40a984:	b162      	cbz	r2, 40a9a0 <memmove+0xc0>
  40a986:	3b01      	subs	r3, #1
  40a988:	440a      	add	r2, r1
  40a98a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a98e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a992:	428a      	cmp	r2, r1
  40a994:	d1f9      	bne.n	40a98a <memmove+0xaa>
  40a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a998:	4603      	mov	r3, r0
  40a99a:	e7f3      	b.n	40a984 <memmove+0xa4>
  40a99c:	4603      	mov	r3, r0
  40a99e:	e7f2      	b.n	40a986 <memmove+0xa6>
  40a9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a9a2:	4672      	mov	r2, lr
  40a9a4:	e7ee      	b.n	40a984 <memmove+0xa4>
  40a9a6:	bf00      	nop

0040a9a8 <_Balloc>:
  40a9a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a9aa:	b570      	push	{r4, r5, r6, lr}
  40a9ac:	4605      	mov	r5, r0
  40a9ae:	460c      	mov	r4, r1
  40a9b0:	b14b      	cbz	r3, 40a9c6 <_Balloc+0x1e>
  40a9b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40a9b6:	b180      	cbz	r0, 40a9da <_Balloc+0x32>
  40a9b8:	6802      	ldr	r2, [r0, #0]
  40a9ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40a9be:	2300      	movs	r3, #0
  40a9c0:	6103      	str	r3, [r0, #16]
  40a9c2:	60c3      	str	r3, [r0, #12]
  40a9c4:	bd70      	pop	{r4, r5, r6, pc}
  40a9c6:	2221      	movs	r2, #33	; 0x21
  40a9c8:	2104      	movs	r1, #4
  40a9ca:	f000 fd93 	bl	40b4f4 <_calloc_r>
  40a9ce:	64e8      	str	r0, [r5, #76]	; 0x4c
  40a9d0:	4603      	mov	r3, r0
  40a9d2:	2800      	cmp	r0, #0
  40a9d4:	d1ed      	bne.n	40a9b2 <_Balloc+0xa>
  40a9d6:	2000      	movs	r0, #0
  40a9d8:	bd70      	pop	{r4, r5, r6, pc}
  40a9da:	2101      	movs	r1, #1
  40a9dc:	fa01 f604 	lsl.w	r6, r1, r4
  40a9e0:	1d72      	adds	r2, r6, #5
  40a9e2:	4628      	mov	r0, r5
  40a9e4:	0092      	lsls	r2, r2, #2
  40a9e6:	f000 fd85 	bl	40b4f4 <_calloc_r>
  40a9ea:	2800      	cmp	r0, #0
  40a9ec:	d0f3      	beq.n	40a9d6 <_Balloc+0x2e>
  40a9ee:	6044      	str	r4, [r0, #4]
  40a9f0:	6086      	str	r6, [r0, #8]
  40a9f2:	e7e4      	b.n	40a9be <_Balloc+0x16>

0040a9f4 <_Bfree>:
  40a9f4:	b131      	cbz	r1, 40aa04 <_Bfree+0x10>
  40a9f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a9f8:	684a      	ldr	r2, [r1, #4]
  40a9fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40a9fe:	6008      	str	r0, [r1, #0]
  40aa00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40aa04:	4770      	bx	lr
  40aa06:	bf00      	nop

0040aa08 <__multadd>:
  40aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
  40aa0a:	690c      	ldr	r4, [r1, #16]
  40aa0c:	b083      	sub	sp, #12
  40aa0e:	460d      	mov	r5, r1
  40aa10:	4606      	mov	r6, r0
  40aa12:	f101 0e14 	add.w	lr, r1, #20
  40aa16:	2700      	movs	r7, #0
  40aa18:	f8de 0000 	ldr.w	r0, [lr]
  40aa1c:	b281      	uxth	r1, r0
  40aa1e:	fb02 3301 	mla	r3, r2, r1, r3
  40aa22:	0c01      	lsrs	r1, r0, #16
  40aa24:	0c18      	lsrs	r0, r3, #16
  40aa26:	fb02 0101 	mla	r1, r2, r1, r0
  40aa2a:	b29b      	uxth	r3, r3
  40aa2c:	3701      	adds	r7, #1
  40aa2e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40aa32:	42bc      	cmp	r4, r7
  40aa34:	f84e 3b04 	str.w	r3, [lr], #4
  40aa38:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40aa3c:	dcec      	bgt.n	40aa18 <__multadd+0x10>
  40aa3e:	b13b      	cbz	r3, 40aa50 <__multadd+0x48>
  40aa40:	68aa      	ldr	r2, [r5, #8]
  40aa42:	4294      	cmp	r4, r2
  40aa44:	da07      	bge.n	40aa56 <__multadd+0x4e>
  40aa46:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40aa4a:	3401      	adds	r4, #1
  40aa4c:	6153      	str	r3, [r2, #20]
  40aa4e:	612c      	str	r4, [r5, #16]
  40aa50:	4628      	mov	r0, r5
  40aa52:	b003      	add	sp, #12
  40aa54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40aa56:	6869      	ldr	r1, [r5, #4]
  40aa58:	9301      	str	r3, [sp, #4]
  40aa5a:	3101      	adds	r1, #1
  40aa5c:	4630      	mov	r0, r6
  40aa5e:	f7ff ffa3 	bl	40a9a8 <_Balloc>
  40aa62:	692a      	ldr	r2, [r5, #16]
  40aa64:	3202      	adds	r2, #2
  40aa66:	f105 010c 	add.w	r1, r5, #12
  40aa6a:	4607      	mov	r7, r0
  40aa6c:	0092      	lsls	r2, r2, #2
  40aa6e:	300c      	adds	r0, #12
  40aa70:	f7fc fc60 	bl	407334 <memcpy>
  40aa74:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40aa76:	6869      	ldr	r1, [r5, #4]
  40aa78:	9b01      	ldr	r3, [sp, #4]
  40aa7a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40aa7e:	6028      	str	r0, [r5, #0]
  40aa80:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40aa84:	463d      	mov	r5, r7
  40aa86:	e7de      	b.n	40aa46 <__multadd+0x3e>

0040aa88 <__hi0bits>:
  40aa88:	0c02      	lsrs	r2, r0, #16
  40aa8a:	0412      	lsls	r2, r2, #16
  40aa8c:	4603      	mov	r3, r0
  40aa8e:	b9b2      	cbnz	r2, 40aabe <__hi0bits+0x36>
  40aa90:	0403      	lsls	r3, r0, #16
  40aa92:	2010      	movs	r0, #16
  40aa94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40aa98:	bf04      	itt	eq
  40aa9a:	021b      	lsleq	r3, r3, #8
  40aa9c:	3008      	addeq	r0, #8
  40aa9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40aaa2:	bf04      	itt	eq
  40aaa4:	011b      	lsleq	r3, r3, #4
  40aaa6:	3004      	addeq	r0, #4
  40aaa8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40aaac:	bf04      	itt	eq
  40aaae:	009b      	lsleq	r3, r3, #2
  40aab0:	3002      	addeq	r0, #2
  40aab2:	2b00      	cmp	r3, #0
  40aab4:	db02      	blt.n	40aabc <__hi0bits+0x34>
  40aab6:	005b      	lsls	r3, r3, #1
  40aab8:	d403      	bmi.n	40aac2 <__hi0bits+0x3a>
  40aaba:	2020      	movs	r0, #32
  40aabc:	4770      	bx	lr
  40aabe:	2000      	movs	r0, #0
  40aac0:	e7e8      	b.n	40aa94 <__hi0bits+0xc>
  40aac2:	3001      	adds	r0, #1
  40aac4:	4770      	bx	lr
  40aac6:	bf00      	nop

0040aac8 <__lo0bits>:
  40aac8:	6803      	ldr	r3, [r0, #0]
  40aaca:	f013 0207 	ands.w	r2, r3, #7
  40aace:	4601      	mov	r1, r0
  40aad0:	d007      	beq.n	40aae2 <__lo0bits+0x1a>
  40aad2:	07da      	lsls	r2, r3, #31
  40aad4:	d421      	bmi.n	40ab1a <__lo0bits+0x52>
  40aad6:	0798      	lsls	r0, r3, #30
  40aad8:	d421      	bmi.n	40ab1e <__lo0bits+0x56>
  40aada:	089b      	lsrs	r3, r3, #2
  40aadc:	600b      	str	r3, [r1, #0]
  40aade:	2002      	movs	r0, #2
  40aae0:	4770      	bx	lr
  40aae2:	b298      	uxth	r0, r3
  40aae4:	b198      	cbz	r0, 40ab0e <__lo0bits+0x46>
  40aae6:	4610      	mov	r0, r2
  40aae8:	f013 0fff 	tst.w	r3, #255	; 0xff
  40aaec:	bf04      	itt	eq
  40aaee:	0a1b      	lsreq	r3, r3, #8
  40aaf0:	3008      	addeq	r0, #8
  40aaf2:	071a      	lsls	r2, r3, #28
  40aaf4:	bf04      	itt	eq
  40aaf6:	091b      	lsreq	r3, r3, #4
  40aaf8:	3004      	addeq	r0, #4
  40aafa:	079a      	lsls	r2, r3, #30
  40aafc:	bf04      	itt	eq
  40aafe:	089b      	lsreq	r3, r3, #2
  40ab00:	3002      	addeq	r0, #2
  40ab02:	07da      	lsls	r2, r3, #31
  40ab04:	d407      	bmi.n	40ab16 <__lo0bits+0x4e>
  40ab06:	085b      	lsrs	r3, r3, #1
  40ab08:	d104      	bne.n	40ab14 <__lo0bits+0x4c>
  40ab0a:	2020      	movs	r0, #32
  40ab0c:	4770      	bx	lr
  40ab0e:	0c1b      	lsrs	r3, r3, #16
  40ab10:	2010      	movs	r0, #16
  40ab12:	e7e9      	b.n	40aae8 <__lo0bits+0x20>
  40ab14:	3001      	adds	r0, #1
  40ab16:	600b      	str	r3, [r1, #0]
  40ab18:	4770      	bx	lr
  40ab1a:	2000      	movs	r0, #0
  40ab1c:	4770      	bx	lr
  40ab1e:	085b      	lsrs	r3, r3, #1
  40ab20:	600b      	str	r3, [r1, #0]
  40ab22:	2001      	movs	r0, #1
  40ab24:	4770      	bx	lr
  40ab26:	bf00      	nop

0040ab28 <__i2b>:
  40ab28:	b510      	push	{r4, lr}
  40ab2a:	460c      	mov	r4, r1
  40ab2c:	2101      	movs	r1, #1
  40ab2e:	f7ff ff3b 	bl	40a9a8 <_Balloc>
  40ab32:	2201      	movs	r2, #1
  40ab34:	6144      	str	r4, [r0, #20]
  40ab36:	6102      	str	r2, [r0, #16]
  40ab38:	bd10      	pop	{r4, pc}
  40ab3a:	bf00      	nop

0040ab3c <__multiply>:
  40ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ab40:	690c      	ldr	r4, [r1, #16]
  40ab42:	6915      	ldr	r5, [r2, #16]
  40ab44:	42ac      	cmp	r4, r5
  40ab46:	b083      	sub	sp, #12
  40ab48:	468b      	mov	fp, r1
  40ab4a:	4616      	mov	r6, r2
  40ab4c:	da04      	bge.n	40ab58 <__multiply+0x1c>
  40ab4e:	4622      	mov	r2, r4
  40ab50:	46b3      	mov	fp, r6
  40ab52:	462c      	mov	r4, r5
  40ab54:	460e      	mov	r6, r1
  40ab56:	4615      	mov	r5, r2
  40ab58:	f8db 3008 	ldr.w	r3, [fp, #8]
  40ab5c:	f8db 1004 	ldr.w	r1, [fp, #4]
  40ab60:	eb04 0805 	add.w	r8, r4, r5
  40ab64:	4598      	cmp	r8, r3
  40ab66:	bfc8      	it	gt
  40ab68:	3101      	addgt	r1, #1
  40ab6a:	f7ff ff1d 	bl	40a9a8 <_Balloc>
  40ab6e:	f100 0914 	add.w	r9, r0, #20
  40ab72:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40ab76:	45d1      	cmp	r9, sl
  40ab78:	9000      	str	r0, [sp, #0]
  40ab7a:	d205      	bcs.n	40ab88 <__multiply+0x4c>
  40ab7c:	464b      	mov	r3, r9
  40ab7e:	2100      	movs	r1, #0
  40ab80:	f843 1b04 	str.w	r1, [r3], #4
  40ab84:	459a      	cmp	sl, r3
  40ab86:	d8fb      	bhi.n	40ab80 <__multiply+0x44>
  40ab88:	f106 0c14 	add.w	ip, r6, #20
  40ab8c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40ab90:	f10b 0b14 	add.w	fp, fp, #20
  40ab94:	459c      	cmp	ip, r3
  40ab96:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40ab9a:	d24c      	bcs.n	40ac36 <__multiply+0xfa>
  40ab9c:	f8cd a004 	str.w	sl, [sp, #4]
  40aba0:	469a      	mov	sl, r3
  40aba2:	f8dc 5000 	ldr.w	r5, [ip]
  40aba6:	b2af      	uxth	r7, r5
  40aba8:	b1ef      	cbz	r7, 40abe6 <__multiply+0xaa>
  40abaa:	2100      	movs	r1, #0
  40abac:	464d      	mov	r5, r9
  40abae:	465e      	mov	r6, fp
  40abb0:	460c      	mov	r4, r1
  40abb2:	f856 2b04 	ldr.w	r2, [r6], #4
  40abb6:	6828      	ldr	r0, [r5, #0]
  40abb8:	b293      	uxth	r3, r2
  40abba:	b281      	uxth	r1, r0
  40abbc:	fb07 1303 	mla	r3, r7, r3, r1
  40abc0:	0c12      	lsrs	r2, r2, #16
  40abc2:	0c01      	lsrs	r1, r0, #16
  40abc4:	4423      	add	r3, r4
  40abc6:	fb07 1102 	mla	r1, r7, r2, r1
  40abca:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40abce:	b29b      	uxth	r3, r3
  40abd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40abd4:	45b6      	cmp	lr, r6
  40abd6:	f845 3b04 	str.w	r3, [r5], #4
  40abda:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40abde:	d8e8      	bhi.n	40abb2 <__multiply+0x76>
  40abe0:	602c      	str	r4, [r5, #0]
  40abe2:	f8dc 5000 	ldr.w	r5, [ip]
  40abe6:	0c2d      	lsrs	r5, r5, #16
  40abe8:	d01d      	beq.n	40ac26 <__multiply+0xea>
  40abea:	f8d9 3000 	ldr.w	r3, [r9]
  40abee:	4648      	mov	r0, r9
  40abf0:	461c      	mov	r4, r3
  40abf2:	4659      	mov	r1, fp
  40abf4:	2200      	movs	r2, #0
  40abf6:	880e      	ldrh	r6, [r1, #0]
  40abf8:	0c24      	lsrs	r4, r4, #16
  40abfa:	fb05 4406 	mla	r4, r5, r6, r4
  40abfe:	4422      	add	r2, r4
  40ac00:	b29b      	uxth	r3, r3
  40ac02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ac06:	f840 3b04 	str.w	r3, [r0], #4
  40ac0a:	f851 3b04 	ldr.w	r3, [r1], #4
  40ac0e:	6804      	ldr	r4, [r0, #0]
  40ac10:	0c1b      	lsrs	r3, r3, #16
  40ac12:	b2a6      	uxth	r6, r4
  40ac14:	fb05 6303 	mla	r3, r5, r3, r6
  40ac18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40ac1c:	458e      	cmp	lr, r1
  40ac1e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40ac22:	d8e8      	bhi.n	40abf6 <__multiply+0xba>
  40ac24:	6003      	str	r3, [r0, #0]
  40ac26:	f10c 0c04 	add.w	ip, ip, #4
  40ac2a:	45e2      	cmp	sl, ip
  40ac2c:	f109 0904 	add.w	r9, r9, #4
  40ac30:	d8b7      	bhi.n	40aba2 <__multiply+0x66>
  40ac32:	f8dd a004 	ldr.w	sl, [sp, #4]
  40ac36:	f1b8 0f00 	cmp.w	r8, #0
  40ac3a:	dd0b      	ble.n	40ac54 <__multiply+0x118>
  40ac3c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40ac40:	f1aa 0a04 	sub.w	sl, sl, #4
  40ac44:	b11b      	cbz	r3, 40ac4e <__multiply+0x112>
  40ac46:	e005      	b.n	40ac54 <__multiply+0x118>
  40ac48:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40ac4c:	b913      	cbnz	r3, 40ac54 <__multiply+0x118>
  40ac4e:	f1b8 0801 	subs.w	r8, r8, #1
  40ac52:	d1f9      	bne.n	40ac48 <__multiply+0x10c>
  40ac54:	9800      	ldr	r0, [sp, #0]
  40ac56:	f8c0 8010 	str.w	r8, [r0, #16]
  40ac5a:	b003      	add	sp, #12
  40ac5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ac60 <__pow5mult>:
  40ac60:	f012 0303 	ands.w	r3, r2, #3
  40ac64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ac68:	4614      	mov	r4, r2
  40ac6a:	4607      	mov	r7, r0
  40ac6c:	d12e      	bne.n	40accc <__pow5mult+0x6c>
  40ac6e:	460d      	mov	r5, r1
  40ac70:	10a4      	asrs	r4, r4, #2
  40ac72:	d01c      	beq.n	40acae <__pow5mult+0x4e>
  40ac74:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40ac76:	b396      	cbz	r6, 40acde <__pow5mult+0x7e>
  40ac78:	07e3      	lsls	r3, r4, #31
  40ac7a:	f04f 0800 	mov.w	r8, #0
  40ac7e:	d406      	bmi.n	40ac8e <__pow5mult+0x2e>
  40ac80:	1064      	asrs	r4, r4, #1
  40ac82:	d014      	beq.n	40acae <__pow5mult+0x4e>
  40ac84:	6830      	ldr	r0, [r6, #0]
  40ac86:	b1a8      	cbz	r0, 40acb4 <__pow5mult+0x54>
  40ac88:	4606      	mov	r6, r0
  40ac8a:	07e3      	lsls	r3, r4, #31
  40ac8c:	d5f8      	bpl.n	40ac80 <__pow5mult+0x20>
  40ac8e:	4632      	mov	r2, r6
  40ac90:	4629      	mov	r1, r5
  40ac92:	4638      	mov	r0, r7
  40ac94:	f7ff ff52 	bl	40ab3c <__multiply>
  40ac98:	b1b5      	cbz	r5, 40acc8 <__pow5mult+0x68>
  40ac9a:	686a      	ldr	r2, [r5, #4]
  40ac9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ac9e:	1064      	asrs	r4, r4, #1
  40aca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40aca4:	6029      	str	r1, [r5, #0]
  40aca6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40acaa:	4605      	mov	r5, r0
  40acac:	d1ea      	bne.n	40ac84 <__pow5mult+0x24>
  40acae:	4628      	mov	r0, r5
  40acb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40acb4:	4632      	mov	r2, r6
  40acb6:	4631      	mov	r1, r6
  40acb8:	4638      	mov	r0, r7
  40acba:	f7ff ff3f 	bl	40ab3c <__multiply>
  40acbe:	6030      	str	r0, [r6, #0]
  40acc0:	f8c0 8000 	str.w	r8, [r0]
  40acc4:	4606      	mov	r6, r0
  40acc6:	e7e0      	b.n	40ac8a <__pow5mult+0x2a>
  40acc8:	4605      	mov	r5, r0
  40acca:	e7d9      	b.n	40ac80 <__pow5mult+0x20>
  40accc:	1e5a      	subs	r2, r3, #1
  40acce:	4d0b      	ldr	r5, [pc, #44]	; (40acfc <__pow5mult+0x9c>)
  40acd0:	2300      	movs	r3, #0
  40acd2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40acd6:	f7ff fe97 	bl	40aa08 <__multadd>
  40acda:	4605      	mov	r5, r0
  40acdc:	e7c8      	b.n	40ac70 <__pow5mult+0x10>
  40acde:	2101      	movs	r1, #1
  40ace0:	4638      	mov	r0, r7
  40ace2:	f7ff fe61 	bl	40a9a8 <_Balloc>
  40ace6:	f240 2171 	movw	r1, #625	; 0x271
  40acea:	2201      	movs	r2, #1
  40acec:	2300      	movs	r3, #0
  40acee:	6141      	str	r1, [r0, #20]
  40acf0:	6102      	str	r2, [r0, #16]
  40acf2:	4606      	mov	r6, r0
  40acf4:	64b8      	str	r0, [r7, #72]	; 0x48
  40acf6:	6003      	str	r3, [r0, #0]
  40acf8:	e7be      	b.n	40ac78 <__pow5mult+0x18>
  40acfa:	bf00      	nop
  40acfc:	0040c640 	.word	0x0040c640

0040ad00 <__lshift>:
  40ad00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ad04:	4691      	mov	r9, r2
  40ad06:	690a      	ldr	r2, [r1, #16]
  40ad08:	688b      	ldr	r3, [r1, #8]
  40ad0a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40ad0e:	eb04 0802 	add.w	r8, r4, r2
  40ad12:	f108 0501 	add.w	r5, r8, #1
  40ad16:	429d      	cmp	r5, r3
  40ad18:	460e      	mov	r6, r1
  40ad1a:	4607      	mov	r7, r0
  40ad1c:	6849      	ldr	r1, [r1, #4]
  40ad1e:	dd04      	ble.n	40ad2a <__lshift+0x2a>
  40ad20:	005b      	lsls	r3, r3, #1
  40ad22:	429d      	cmp	r5, r3
  40ad24:	f101 0101 	add.w	r1, r1, #1
  40ad28:	dcfa      	bgt.n	40ad20 <__lshift+0x20>
  40ad2a:	4638      	mov	r0, r7
  40ad2c:	f7ff fe3c 	bl	40a9a8 <_Balloc>
  40ad30:	2c00      	cmp	r4, #0
  40ad32:	f100 0314 	add.w	r3, r0, #20
  40ad36:	dd06      	ble.n	40ad46 <__lshift+0x46>
  40ad38:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40ad3c:	2100      	movs	r1, #0
  40ad3e:	f843 1b04 	str.w	r1, [r3], #4
  40ad42:	429a      	cmp	r2, r3
  40ad44:	d1fb      	bne.n	40ad3e <__lshift+0x3e>
  40ad46:	6934      	ldr	r4, [r6, #16]
  40ad48:	f106 0114 	add.w	r1, r6, #20
  40ad4c:	f019 091f 	ands.w	r9, r9, #31
  40ad50:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40ad54:	d01d      	beq.n	40ad92 <__lshift+0x92>
  40ad56:	f1c9 0c20 	rsb	ip, r9, #32
  40ad5a:	2200      	movs	r2, #0
  40ad5c:	680c      	ldr	r4, [r1, #0]
  40ad5e:	fa04 f409 	lsl.w	r4, r4, r9
  40ad62:	4314      	orrs	r4, r2
  40ad64:	f843 4b04 	str.w	r4, [r3], #4
  40ad68:	f851 2b04 	ldr.w	r2, [r1], #4
  40ad6c:	458e      	cmp	lr, r1
  40ad6e:	fa22 f20c 	lsr.w	r2, r2, ip
  40ad72:	d8f3      	bhi.n	40ad5c <__lshift+0x5c>
  40ad74:	601a      	str	r2, [r3, #0]
  40ad76:	b10a      	cbz	r2, 40ad7c <__lshift+0x7c>
  40ad78:	f108 0502 	add.w	r5, r8, #2
  40ad7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ad7e:	6872      	ldr	r2, [r6, #4]
  40ad80:	3d01      	subs	r5, #1
  40ad82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ad86:	6105      	str	r5, [r0, #16]
  40ad88:	6031      	str	r1, [r6, #0]
  40ad8a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ad8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ad92:	3b04      	subs	r3, #4
  40ad94:	f851 2b04 	ldr.w	r2, [r1], #4
  40ad98:	f843 2f04 	str.w	r2, [r3, #4]!
  40ad9c:	458e      	cmp	lr, r1
  40ad9e:	d8f9      	bhi.n	40ad94 <__lshift+0x94>
  40ada0:	e7ec      	b.n	40ad7c <__lshift+0x7c>
  40ada2:	bf00      	nop

0040ada4 <__mcmp>:
  40ada4:	b430      	push	{r4, r5}
  40ada6:	690b      	ldr	r3, [r1, #16]
  40ada8:	4605      	mov	r5, r0
  40adaa:	6900      	ldr	r0, [r0, #16]
  40adac:	1ac0      	subs	r0, r0, r3
  40adae:	d10f      	bne.n	40add0 <__mcmp+0x2c>
  40adb0:	009b      	lsls	r3, r3, #2
  40adb2:	3514      	adds	r5, #20
  40adb4:	3114      	adds	r1, #20
  40adb6:	4419      	add	r1, r3
  40adb8:	442b      	add	r3, r5
  40adba:	e001      	b.n	40adc0 <__mcmp+0x1c>
  40adbc:	429d      	cmp	r5, r3
  40adbe:	d207      	bcs.n	40add0 <__mcmp+0x2c>
  40adc0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40adc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40adc8:	4294      	cmp	r4, r2
  40adca:	d0f7      	beq.n	40adbc <__mcmp+0x18>
  40adcc:	d302      	bcc.n	40add4 <__mcmp+0x30>
  40adce:	2001      	movs	r0, #1
  40add0:	bc30      	pop	{r4, r5}
  40add2:	4770      	bx	lr
  40add4:	f04f 30ff 	mov.w	r0, #4294967295
  40add8:	e7fa      	b.n	40add0 <__mcmp+0x2c>
  40adda:	bf00      	nop

0040addc <__mdiff>:
  40addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ade0:	690f      	ldr	r7, [r1, #16]
  40ade2:	460e      	mov	r6, r1
  40ade4:	6911      	ldr	r1, [r2, #16]
  40ade6:	1a7f      	subs	r7, r7, r1
  40ade8:	2f00      	cmp	r7, #0
  40adea:	4690      	mov	r8, r2
  40adec:	d117      	bne.n	40ae1e <__mdiff+0x42>
  40adee:	0089      	lsls	r1, r1, #2
  40adf0:	f106 0514 	add.w	r5, r6, #20
  40adf4:	f102 0e14 	add.w	lr, r2, #20
  40adf8:	186b      	adds	r3, r5, r1
  40adfa:	4471      	add	r1, lr
  40adfc:	e001      	b.n	40ae02 <__mdiff+0x26>
  40adfe:	429d      	cmp	r5, r3
  40ae00:	d25c      	bcs.n	40aebc <__mdiff+0xe0>
  40ae02:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40ae06:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ae0a:	42a2      	cmp	r2, r4
  40ae0c:	d0f7      	beq.n	40adfe <__mdiff+0x22>
  40ae0e:	d25e      	bcs.n	40aece <__mdiff+0xf2>
  40ae10:	4633      	mov	r3, r6
  40ae12:	462c      	mov	r4, r5
  40ae14:	4646      	mov	r6, r8
  40ae16:	4675      	mov	r5, lr
  40ae18:	4698      	mov	r8, r3
  40ae1a:	2701      	movs	r7, #1
  40ae1c:	e005      	b.n	40ae2a <__mdiff+0x4e>
  40ae1e:	db58      	blt.n	40aed2 <__mdiff+0xf6>
  40ae20:	f106 0514 	add.w	r5, r6, #20
  40ae24:	f108 0414 	add.w	r4, r8, #20
  40ae28:	2700      	movs	r7, #0
  40ae2a:	6871      	ldr	r1, [r6, #4]
  40ae2c:	f7ff fdbc 	bl	40a9a8 <_Balloc>
  40ae30:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ae34:	6936      	ldr	r6, [r6, #16]
  40ae36:	60c7      	str	r7, [r0, #12]
  40ae38:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40ae3c:	46a6      	mov	lr, r4
  40ae3e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40ae42:	f100 0414 	add.w	r4, r0, #20
  40ae46:	2300      	movs	r3, #0
  40ae48:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ae4c:	f855 8b04 	ldr.w	r8, [r5], #4
  40ae50:	b28a      	uxth	r2, r1
  40ae52:	fa13 f388 	uxtah	r3, r3, r8
  40ae56:	0c09      	lsrs	r1, r1, #16
  40ae58:	1a9a      	subs	r2, r3, r2
  40ae5a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ae5e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ae62:	b292      	uxth	r2, r2
  40ae64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ae68:	45f4      	cmp	ip, lr
  40ae6a:	f844 2b04 	str.w	r2, [r4], #4
  40ae6e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ae72:	d8e9      	bhi.n	40ae48 <__mdiff+0x6c>
  40ae74:	42af      	cmp	r7, r5
  40ae76:	d917      	bls.n	40aea8 <__mdiff+0xcc>
  40ae78:	46a4      	mov	ip, r4
  40ae7a:	46ae      	mov	lr, r5
  40ae7c:	f85e 2b04 	ldr.w	r2, [lr], #4
  40ae80:	fa13 f382 	uxtah	r3, r3, r2
  40ae84:	1419      	asrs	r1, r3, #16
  40ae86:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ae8a:	b29b      	uxth	r3, r3
  40ae8c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ae90:	4577      	cmp	r7, lr
  40ae92:	f84c 2b04 	str.w	r2, [ip], #4
  40ae96:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ae9a:	d8ef      	bhi.n	40ae7c <__mdiff+0xa0>
  40ae9c:	43ed      	mvns	r5, r5
  40ae9e:	442f      	add	r7, r5
  40aea0:	f027 0703 	bic.w	r7, r7, #3
  40aea4:	3704      	adds	r7, #4
  40aea6:	443c      	add	r4, r7
  40aea8:	3c04      	subs	r4, #4
  40aeaa:	b922      	cbnz	r2, 40aeb6 <__mdiff+0xda>
  40aeac:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40aeb0:	3e01      	subs	r6, #1
  40aeb2:	2b00      	cmp	r3, #0
  40aeb4:	d0fa      	beq.n	40aeac <__mdiff+0xd0>
  40aeb6:	6106      	str	r6, [r0, #16]
  40aeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aebc:	2100      	movs	r1, #0
  40aebe:	f7ff fd73 	bl	40a9a8 <_Balloc>
  40aec2:	2201      	movs	r2, #1
  40aec4:	2300      	movs	r3, #0
  40aec6:	6102      	str	r2, [r0, #16]
  40aec8:	6143      	str	r3, [r0, #20]
  40aeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aece:	4674      	mov	r4, lr
  40aed0:	e7ab      	b.n	40ae2a <__mdiff+0x4e>
  40aed2:	4633      	mov	r3, r6
  40aed4:	f106 0414 	add.w	r4, r6, #20
  40aed8:	f102 0514 	add.w	r5, r2, #20
  40aedc:	4616      	mov	r6, r2
  40aede:	2701      	movs	r7, #1
  40aee0:	4698      	mov	r8, r3
  40aee2:	e7a2      	b.n	40ae2a <__mdiff+0x4e>

0040aee4 <__d2b>:
  40aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40aee8:	b082      	sub	sp, #8
  40aeea:	2101      	movs	r1, #1
  40aeec:	461c      	mov	r4, r3
  40aeee:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40aef2:	4615      	mov	r5, r2
  40aef4:	9e08      	ldr	r6, [sp, #32]
  40aef6:	f7ff fd57 	bl	40a9a8 <_Balloc>
  40aefa:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40aefe:	4680      	mov	r8, r0
  40af00:	b10f      	cbz	r7, 40af06 <__d2b+0x22>
  40af02:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40af06:	9401      	str	r4, [sp, #4]
  40af08:	b31d      	cbz	r5, 40af52 <__d2b+0x6e>
  40af0a:	a802      	add	r0, sp, #8
  40af0c:	f840 5d08 	str.w	r5, [r0, #-8]!
  40af10:	f7ff fdda 	bl	40aac8 <__lo0bits>
  40af14:	2800      	cmp	r0, #0
  40af16:	d134      	bne.n	40af82 <__d2b+0x9e>
  40af18:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40af1c:	f8c8 2014 	str.w	r2, [r8, #20]
  40af20:	2b00      	cmp	r3, #0
  40af22:	bf0c      	ite	eq
  40af24:	2101      	moveq	r1, #1
  40af26:	2102      	movne	r1, #2
  40af28:	f8c8 3018 	str.w	r3, [r8, #24]
  40af2c:	f8c8 1010 	str.w	r1, [r8, #16]
  40af30:	b9df      	cbnz	r7, 40af6a <__d2b+0x86>
  40af32:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40af36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40af3a:	6030      	str	r0, [r6, #0]
  40af3c:	6918      	ldr	r0, [r3, #16]
  40af3e:	f7ff fda3 	bl	40aa88 <__hi0bits>
  40af42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40af44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40af48:	6018      	str	r0, [r3, #0]
  40af4a:	4640      	mov	r0, r8
  40af4c:	b002      	add	sp, #8
  40af4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af52:	a801      	add	r0, sp, #4
  40af54:	f7ff fdb8 	bl	40aac8 <__lo0bits>
  40af58:	9b01      	ldr	r3, [sp, #4]
  40af5a:	f8c8 3014 	str.w	r3, [r8, #20]
  40af5e:	2101      	movs	r1, #1
  40af60:	3020      	adds	r0, #32
  40af62:	f8c8 1010 	str.w	r1, [r8, #16]
  40af66:	2f00      	cmp	r7, #0
  40af68:	d0e3      	beq.n	40af32 <__d2b+0x4e>
  40af6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40af6c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40af70:	4407      	add	r7, r0
  40af72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40af76:	6037      	str	r7, [r6, #0]
  40af78:	6018      	str	r0, [r3, #0]
  40af7a:	4640      	mov	r0, r8
  40af7c:	b002      	add	sp, #8
  40af7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af82:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40af86:	f1c0 0220 	rsb	r2, r0, #32
  40af8a:	fa03 f202 	lsl.w	r2, r3, r2
  40af8e:	430a      	orrs	r2, r1
  40af90:	40c3      	lsrs	r3, r0
  40af92:	9301      	str	r3, [sp, #4]
  40af94:	f8c8 2014 	str.w	r2, [r8, #20]
  40af98:	e7c2      	b.n	40af20 <__d2b+0x3c>
  40af9a:	bf00      	nop

0040af9c <_realloc_r>:
  40af9c:	2900      	cmp	r1, #0
  40af9e:	f000 8095 	beq.w	40b0cc <_realloc_r+0x130>
  40afa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40afa6:	460d      	mov	r5, r1
  40afa8:	4616      	mov	r6, r2
  40afaa:	b083      	sub	sp, #12
  40afac:	4680      	mov	r8, r0
  40afae:	f106 070b 	add.w	r7, r6, #11
  40afb2:	f7fc faa7 	bl	407504 <__malloc_lock>
  40afb6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40afba:	2f16      	cmp	r7, #22
  40afbc:	f02e 0403 	bic.w	r4, lr, #3
  40afc0:	f1a5 0908 	sub.w	r9, r5, #8
  40afc4:	d83c      	bhi.n	40b040 <_realloc_r+0xa4>
  40afc6:	2210      	movs	r2, #16
  40afc8:	4617      	mov	r7, r2
  40afca:	42be      	cmp	r6, r7
  40afcc:	d83d      	bhi.n	40b04a <_realloc_r+0xae>
  40afce:	4294      	cmp	r4, r2
  40afd0:	da43      	bge.n	40b05a <_realloc_r+0xbe>
  40afd2:	4bc4      	ldr	r3, [pc, #784]	; (40b2e4 <_realloc_r+0x348>)
  40afd4:	6899      	ldr	r1, [r3, #8]
  40afd6:	eb09 0004 	add.w	r0, r9, r4
  40afda:	4288      	cmp	r0, r1
  40afdc:	f000 80b4 	beq.w	40b148 <_realloc_r+0x1ac>
  40afe0:	6843      	ldr	r3, [r0, #4]
  40afe2:	f023 0101 	bic.w	r1, r3, #1
  40afe6:	4401      	add	r1, r0
  40afe8:	6849      	ldr	r1, [r1, #4]
  40afea:	07c9      	lsls	r1, r1, #31
  40afec:	d54c      	bpl.n	40b088 <_realloc_r+0xec>
  40afee:	f01e 0f01 	tst.w	lr, #1
  40aff2:	f000 809b 	beq.w	40b12c <_realloc_r+0x190>
  40aff6:	4631      	mov	r1, r6
  40aff8:	4640      	mov	r0, r8
  40affa:	f7fb feeb 	bl	406dd4 <_malloc_r>
  40affe:	4606      	mov	r6, r0
  40b000:	2800      	cmp	r0, #0
  40b002:	d03a      	beq.n	40b07a <_realloc_r+0xde>
  40b004:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b008:	f023 0301 	bic.w	r3, r3, #1
  40b00c:	444b      	add	r3, r9
  40b00e:	f1a0 0208 	sub.w	r2, r0, #8
  40b012:	429a      	cmp	r2, r3
  40b014:	f000 8121 	beq.w	40b25a <_realloc_r+0x2be>
  40b018:	1f22      	subs	r2, r4, #4
  40b01a:	2a24      	cmp	r2, #36	; 0x24
  40b01c:	f200 8107 	bhi.w	40b22e <_realloc_r+0x292>
  40b020:	2a13      	cmp	r2, #19
  40b022:	f200 80db 	bhi.w	40b1dc <_realloc_r+0x240>
  40b026:	4603      	mov	r3, r0
  40b028:	462a      	mov	r2, r5
  40b02a:	6811      	ldr	r1, [r2, #0]
  40b02c:	6019      	str	r1, [r3, #0]
  40b02e:	6851      	ldr	r1, [r2, #4]
  40b030:	6059      	str	r1, [r3, #4]
  40b032:	6892      	ldr	r2, [r2, #8]
  40b034:	609a      	str	r2, [r3, #8]
  40b036:	4629      	mov	r1, r5
  40b038:	4640      	mov	r0, r8
  40b03a:	f7ff f8e9 	bl	40a210 <_free_r>
  40b03e:	e01c      	b.n	40b07a <_realloc_r+0xde>
  40b040:	f027 0707 	bic.w	r7, r7, #7
  40b044:	2f00      	cmp	r7, #0
  40b046:	463a      	mov	r2, r7
  40b048:	dabf      	bge.n	40afca <_realloc_r+0x2e>
  40b04a:	2600      	movs	r6, #0
  40b04c:	230c      	movs	r3, #12
  40b04e:	4630      	mov	r0, r6
  40b050:	f8c8 3000 	str.w	r3, [r8]
  40b054:	b003      	add	sp, #12
  40b056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b05a:	462e      	mov	r6, r5
  40b05c:	1be3      	subs	r3, r4, r7
  40b05e:	2b0f      	cmp	r3, #15
  40b060:	d81e      	bhi.n	40b0a0 <_realloc_r+0x104>
  40b062:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b066:	f003 0301 	and.w	r3, r3, #1
  40b06a:	4323      	orrs	r3, r4
  40b06c:	444c      	add	r4, r9
  40b06e:	f8c9 3004 	str.w	r3, [r9, #4]
  40b072:	6863      	ldr	r3, [r4, #4]
  40b074:	f043 0301 	orr.w	r3, r3, #1
  40b078:	6063      	str	r3, [r4, #4]
  40b07a:	4640      	mov	r0, r8
  40b07c:	f7fc fa48 	bl	407510 <__malloc_unlock>
  40b080:	4630      	mov	r0, r6
  40b082:	b003      	add	sp, #12
  40b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b088:	f023 0303 	bic.w	r3, r3, #3
  40b08c:	18e1      	adds	r1, r4, r3
  40b08e:	4291      	cmp	r1, r2
  40b090:	db1f      	blt.n	40b0d2 <_realloc_r+0x136>
  40b092:	68c3      	ldr	r3, [r0, #12]
  40b094:	6882      	ldr	r2, [r0, #8]
  40b096:	462e      	mov	r6, r5
  40b098:	60d3      	str	r3, [r2, #12]
  40b09a:	460c      	mov	r4, r1
  40b09c:	609a      	str	r2, [r3, #8]
  40b09e:	e7dd      	b.n	40b05c <_realloc_r+0xc0>
  40b0a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b0a4:	eb09 0107 	add.w	r1, r9, r7
  40b0a8:	f002 0201 	and.w	r2, r2, #1
  40b0ac:	444c      	add	r4, r9
  40b0ae:	f043 0301 	orr.w	r3, r3, #1
  40b0b2:	4317      	orrs	r7, r2
  40b0b4:	f8c9 7004 	str.w	r7, [r9, #4]
  40b0b8:	604b      	str	r3, [r1, #4]
  40b0ba:	6863      	ldr	r3, [r4, #4]
  40b0bc:	f043 0301 	orr.w	r3, r3, #1
  40b0c0:	3108      	adds	r1, #8
  40b0c2:	6063      	str	r3, [r4, #4]
  40b0c4:	4640      	mov	r0, r8
  40b0c6:	f7ff f8a3 	bl	40a210 <_free_r>
  40b0ca:	e7d6      	b.n	40b07a <_realloc_r+0xde>
  40b0cc:	4611      	mov	r1, r2
  40b0ce:	f7fb be81 	b.w	406dd4 <_malloc_r>
  40b0d2:	f01e 0f01 	tst.w	lr, #1
  40b0d6:	d18e      	bne.n	40aff6 <_realloc_r+0x5a>
  40b0d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b0dc:	eba9 0a01 	sub.w	sl, r9, r1
  40b0e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b0e4:	f021 0103 	bic.w	r1, r1, #3
  40b0e8:	440b      	add	r3, r1
  40b0ea:	4423      	add	r3, r4
  40b0ec:	4293      	cmp	r3, r2
  40b0ee:	db25      	blt.n	40b13c <_realloc_r+0x1a0>
  40b0f0:	68c2      	ldr	r2, [r0, #12]
  40b0f2:	6881      	ldr	r1, [r0, #8]
  40b0f4:	4656      	mov	r6, sl
  40b0f6:	60ca      	str	r2, [r1, #12]
  40b0f8:	6091      	str	r1, [r2, #8]
  40b0fa:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b0fe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b102:	1f22      	subs	r2, r4, #4
  40b104:	2a24      	cmp	r2, #36	; 0x24
  40b106:	60c1      	str	r1, [r0, #12]
  40b108:	6088      	str	r0, [r1, #8]
  40b10a:	f200 8094 	bhi.w	40b236 <_realloc_r+0x29a>
  40b10e:	2a13      	cmp	r2, #19
  40b110:	d96f      	bls.n	40b1f2 <_realloc_r+0x256>
  40b112:	6829      	ldr	r1, [r5, #0]
  40b114:	f8ca 1008 	str.w	r1, [sl, #8]
  40b118:	6869      	ldr	r1, [r5, #4]
  40b11a:	f8ca 100c 	str.w	r1, [sl, #12]
  40b11e:	2a1b      	cmp	r2, #27
  40b120:	f200 80a2 	bhi.w	40b268 <_realloc_r+0x2cc>
  40b124:	3508      	adds	r5, #8
  40b126:	f10a 0210 	add.w	r2, sl, #16
  40b12a:	e063      	b.n	40b1f4 <_realloc_r+0x258>
  40b12c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b130:	eba9 0a03 	sub.w	sl, r9, r3
  40b134:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b138:	f021 0103 	bic.w	r1, r1, #3
  40b13c:	1863      	adds	r3, r4, r1
  40b13e:	4293      	cmp	r3, r2
  40b140:	f6ff af59 	blt.w	40aff6 <_realloc_r+0x5a>
  40b144:	4656      	mov	r6, sl
  40b146:	e7d8      	b.n	40b0fa <_realloc_r+0x15e>
  40b148:	6841      	ldr	r1, [r0, #4]
  40b14a:	f021 0b03 	bic.w	fp, r1, #3
  40b14e:	44a3      	add	fp, r4
  40b150:	f107 0010 	add.w	r0, r7, #16
  40b154:	4583      	cmp	fp, r0
  40b156:	da56      	bge.n	40b206 <_realloc_r+0x26a>
  40b158:	f01e 0f01 	tst.w	lr, #1
  40b15c:	f47f af4b 	bne.w	40aff6 <_realloc_r+0x5a>
  40b160:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b164:	eba9 0a01 	sub.w	sl, r9, r1
  40b168:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b16c:	f021 0103 	bic.w	r1, r1, #3
  40b170:	448b      	add	fp, r1
  40b172:	4558      	cmp	r0, fp
  40b174:	dce2      	bgt.n	40b13c <_realloc_r+0x1a0>
  40b176:	4656      	mov	r6, sl
  40b178:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b17c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b180:	1f22      	subs	r2, r4, #4
  40b182:	2a24      	cmp	r2, #36	; 0x24
  40b184:	60c1      	str	r1, [r0, #12]
  40b186:	6088      	str	r0, [r1, #8]
  40b188:	f200 808f 	bhi.w	40b2aa <_realloc_r+0x30e>
  40b18c:	2a13      	cmp	r2, #19
  40b18e:	f240 808a 	bls.w	40b2a6 <_realloc_r+0x30a>
  40b192:	6829      	ldr	r1, [r5, #0]
  40b194:	f8ca 1008 	str.w	r1, [sl, #8]
  40b198:	6869      	ldr	r1, [r5, #4]
  40b19a:	f8ca 100c 	str.w	r1, [sl, #12]
  40b19e:	2a1b      	cmp	r2, #27
  40b1a0:	f200 808a 	bhi.w	40b2b8 <_realloc_r+0x31c>
  40b1a4:	3508      	adds	r5, #8
  40b1a6:	f10a 0210 	add.w	r2, sl, #16
  40b1aa:	6829      	ldr	r1, [r5, #0]
  40b1ac:	6011      	str	r1, [r2, #0]
  40b1ae:	6869      	ldr	r1, [r5, #4]
  40b1b0:	6051      	str	r1, [r2, #4]
  40b1b2:	68a9      	ldr	r1, [r5, #8]
  40b1b4:	6091      	str	r1, [r2, #8]
  40b1b6:	eb0a 0107 	add.w	r1, sl, r7
  40b1ba:	ebab 0207 	sub.w	r2, fp, r7
  40b1be:	f042 0201 	orr.w	r2, r2, #1
  40b1c2:	6099      	str	r1, [r3, #8]
  40b1c4:	604a      	str	r2, [r1, #4]
  40b1c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b1ca:	f003 0301 	and.w	r3, r3, #1
  40b1ce:	431f      	orrs	r7, r3
  40b1d0:	4640      	mov	r0, r8
  40b1d2:	f8ca 7004 	str.w	r7, [sl, #4]
  40b1d6:	f7fc f99b 	bl	407510 <__malloc_unlock>
  40b1da:	e751      	b.n	40b080 <_realloc_r+0xe4>
  40b1dc:	682b      	ldr	r3, [r5, #0]
  40b1de:	6003      	str	r3, [r0, #0]
  40b1e0:	686b      	ldr	r3, [r5, #4]
  40b1e2:	6043      	str	r3, [r0, #4]
  40b1e4:	2a1b      	cmp	r2, #27
  40b1e6:	d82d      	bhi.n	40b244 <_realloc_r+0x2a8>
  40b1e8:	f100 0308 	add.w	r3, r0, #8
  40b1ec:	f105 0208 	add.w	r2, r5, #8
  40b1f0:	e71b      	b.n	40b02a <_realloc_r+0x8e>
  40b1f2:	4632      	mov	r2, r6
  40b1f4:	6829      	ldr	r1, [r5, #0]
  40b1f6:	6011      	str	r1, [r2, #0]
  40b1f8:	6869      	ldr	r1, [r5, #4]
  40b1fa:	6051      	str	r1, [r2, #4]
  40b1fc:	68a9      	ldr	r1, [r5, #8]
  40b1fe:	6091      	str	r1, [r2, #8]
  40b200:	461c      	mov	r4, r3
  40b202:	46d1      	mov	r9, sl
  40b204:	e72a      	b.n	40b05c <_realloc_r+0xc0>
  40b206:	eb09 0107 	add.w	r1, r9, r7
  40b20a:	ebab 0b07 	sub.w	fp, fp, r7
  40b20e:	f04b 0201 	orr.w	r2, fp, #1
  40b212:	6099      	str	r1, [r3, #8]
  40b214:	604a      	str	r2, [r1, #4]
  40b216:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b21a:	f003 0301 	and.w	r3, r3, #1
  40b21e:	431f      	orrs	r7, r3
  40b220:	4640      	mov	r0, r8
  40b222:	f845 7c04 	str.w	r7, [r5, #-4]
  40b226:	f7fc f973 	bl	407510 <__malloc_unlock>
  40b22a:	462e      	mov	r6, r5
  40b22c:	e728      	b.n	40b080 <_realloc_r+0xe4>
  40b22e:	4629      	mov	r1, r5
  40b230:	f7ff fb56 	bl	40a8e0 <memmove>
  40b234:	e6ff      	b.n	40b036 <_realloc_r+0x9a>
  40b236:	4629      	mov	r1, r5
  40b238:	4630      	mov	r0, r6
  40b23a:	461c      	mov	r4, r3
  40b23c:	46d1      	mov	r9, sl
  40b23e:	f7ff fb4f 	bl	40a8e0 <memmove>
  40b242:	e70b      	b.n	40b05c <_realloc_r+0xc0>
  40b244:	68ab      	ldr	r3, [r5, #8]
  40b246:	6083      	str	r3, [r0, #8]
  40b248:	68eb      	ldr	r3, [r5, #12]
  40b24a:	60c3      	str	r3, [r0, #12]
  40b24c:	2a24      	cmp	r2, #36	; 0x24
  40b24e:	d017      	beq.n	40b280 <_realloc_r+0x2e4>
  40b250:	f100 0310 	add.w	r3, r0, #16
  40b254:	f105 0210 	add.w	r2, r5, #16
  40b258:	e6e7      	b.n	40b02a <_realloc_r+0x8e>
  40b25a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b25e:	f023 0303 	bic.w	r3, r3, #3
  40b262:	441c      	add	r4, r3
  40b264:	462e      	mov	r6, r5
  40b266:	e6f9      	b.n	40b05c <_realloc_r+0xc0>
  40b268:	68a9      	ldr	r1, [r5, #8]
  40b26a:	f8ca 1010 	str.w	r1, [sl, #16]
  40b26e:	68e9      	ldr	r1, [r5, #12]
  40b270:	f8ca 1014 	str.w	r1, [sl, #20]
  40b274:	2a24      	cmp	r2, #36	; 0x24
  40b276:	d00c      	beq.n	40b292 <_realloc_r+0x2f6>
  40b278:	3510      	adds	r5, #16
  40b27a:	f10a 0218 	add.w	r2, sl, #24
  40b27e:	e7b9      	b.n	40b1f4 <_realloc_r+0x258>
  40b280:	692b      	ldr	r3, [r5, #16]
  40b282:	6103      	str	r3, [r0, #16]
  40b284:	696b      	ldr	r3, [r5, #20]
  40b286:	6143      	str	r3, [r0, #20]
  40b288:	f105 0218 	add.w	r2, r5, #24
  40b28c:	f100 0318 	add.w	r3, r0, #24
  40b290:	e6cb      	b.n	40b02a <_realloc_r+0x8e>
  40b292:	692a      	ldr	r2, [r5, #16]
  40b294:	f8ca 2018 	str.w	r2, [sl, #24]
  40b298:	696a      	ldr	r2, [r5, #20]
  40b29a:	f8ca 201c 	str.w	r2, [sl, #28]
  40b29e:	3518      	adds	r5, #24
  40b2a0:	f10a 0220 	add.w	r2, sl, #32
  40b2a4:	e7a6      	b.n	40b1f4 <_realloc_r+0x258>
  40b2a6:	4632      	mov	r2, r6
  40b2a8:	e77f      	b.n	40b1aa <_realloc_r+0x20e>
  40b2aa:	4629      	mov	r1, r5
  40b2ac:	4630      	mov	r0, r6
  40b2ae:	9301      	str	r3, [sp, #4]
  40b2b0:	f7ff fb16 	bl	40a8e0 <memmove>
  40b2b4:	9b01      	ldr	r3, [sp, #4]
  40b2b6:	e77e      	b.n	40b1b6 <_realloc_r+0x21a>
  40b2b8:	68a9      	ldr	r1, [r5, #8]
  40b2ba:	f8ca 1010 	str.w	r1, [sl, #16]
  40b2be:	68e9      	ldr	r1, [r5, #12]
  40b2c0:	f8ca 1014 	str.w	r1, [sl, #20]
  40b2c4:	2a24      	cmp	r2, #36	; 0x24
  40b2c6:	d003      	beq.n	40b2d0 <_realloc_r+0x334>
  40b2c8:	3510      	adds	r5, #16
  40b2ca:	f10a 0218 	add.w	r2, sl, #24
  40b2ce:	e76c      	b.n	40b1aa <_realloc_r+0x20e>
  40b2d0:	692a      	ldr	r2, [r5, #16]
  40b2d2:	f8ca 2018 	str.w	r2, [sl, #24]
  40b2d6:	696a      	ldr	r2, [r5, #20]
  40b2d8:	f8ca 201c 	str.w	r2, [sl, #28]
  40b2dc:	3518      	adds	r5, #24
  40b2de:	f10a 0220 	add.w	r2, sl, #32
  40b2e2:	e762      	b.n	40b1aa <_realloc_r+0x20e>
  40b2e4:	20400458 	.word	0x20400458

0040b2e8 <__sread>:
  40b2e8:	b510      	push	{r4, lr}
  40b2ea:	460c      	mov	r4, r1
  40b2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b2f0:	f000 fa88 	bl	40b804 <_read_r>
  40b2f4:	2800      	cmp	r0, #0
  40b2f6:	db03      	blt.n	40b300 <__sread+0x18>
  40b2f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b2fa:	4403      	add	r3, r0
  40b2fc:	6523      	str	r3, [r4, #80]	; 0x50
  40b2fe:	bd10      	pop	{r4, pc}
  40b300:	89a3      	ldrh	r3, [r4, #12]
  40b302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b306:	81a3      	strh	r3, [r4, #12]
  40b308:	bd10      	pop	{r4, pc}
  40b30a:	bf00      	nop

0040b30c <__swrite>:
  40b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b310:	4616      	mov	r6, r2
  40b312:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40b316:	461f      	mov	r7, r3
  40b318:	05d3      	lsls	r3, r2, #23
  40b31a:	460c      	mov	r4, r1
  40b31c:	4605      	mov	r5, r0
  40b31e:	d507      	bpl.n	40b330 <__swrite+0x24>
  40b320:	2200      	movs	r2, #0
  40b322:	2302      	movs	r3, #2
  40b324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b328:	f000 fa40 	bl	40b7ac <_lseek_r>
  40b32c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b334:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b338:	81a2      	strh	r2, [r4, #12]
  40b33a:	463b      	mov	r3, r7
  40b33c:	4632      	mov	r2, r6
  40b33e:	4628      	mov	r0, r5
  40b340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b344:	f000 b85e 	b.w	40b404 <_write_r>

0040b348 <__sseek>:
  40b348:	b510      	push	{r4, lr}
  40b34a:	460c      	mov	r4, r1
  40b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b350:	f000 fa2c 	bl	40b7ac <_lseek_r>
  40b354:	89a3      	ldrh	r3, [r4, #12]
  40b356:	1c42      	adds	r2, r0, #1
  40b358:	bf0e      	itee	eq
  40b35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b362:	6520      	strne	r0, [r4, #80]	; 0x50
  40b364:	81a3      	strh	r3, [r4, #12]
  40b366:	bd10      	pop	{r4, pc}

0040b368 <__sclose>:
  40b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b36c:	f000 b8f2 	b.w	40b554 <_close_r>

0040b370 <__sprint_r.part.0>:
  40b370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b374:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40b376:	049c      	lsls	r4, r3, #18
  40b378:	4693      	mov	fp, r2
  40b37a:	d52f      	bpl.n	40b3dc <__sprint_r.part.0+0x6c>
  40b37c:	6893      	ldr	r3, [r2, #8]
  40b37e:	6812      	ldr	r2, [r2, #0]
  40b380:	b353      	cbz	r3, 40b3d8 <__sprint_r.part.0+0x68>
  40b382:	460e      	mov	r6, r1
  40b384:	4607      	mov	r7, r0
  40b386:	f102 0908 	add.w	r9, r2, #8
  40b38a:	e919 0420 	ldmdb	r9, {r5, sl}
  40b38e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40b392:	d017      	beq.n	40b3c4 <__sprint_r.part.0+0x54>
  40b394:	3d04      	subs	r5, #4
  40b396:	2400      	movs	r4, #0
  40b398:	e001      	b.n	40b39e <__sprint_r.part.0+0x2e>
  40b39a:	45a0      	cmp	r8, r4
  40b39c:	d010      	beq.n	40b3c0 <__sprint_r.part.0+0x50>
  40b39e:	4632      	mov	r2, r6
  40b3a0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40b3a4:	4638      	mov	r0, r7
  40b3a6:	f000 f999 	bl	40b6dc <_fputwc_r>
  40b3aa:	1c43      	adds	r3, r0, #1
  40b3ac:	f104 0401 	add.w	r4, r4, #1
  40b3b0:	d1f3      	bne.n	40b39a <__sprint_r.part.0+0x2a>
  40b3b2:	2300      	movs	r3, #0
  40b3b4:	f8cb 3008 	str.w	r3, [fp, #8]
  40b3b8:	f8cb 3004 	str.w	r3, [fp, #4]
  40b3bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b3c0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b3c4:	f02a 0a03 	bic.w	sl, sl, #3
  40b3c8:	eba3 030a 	sub.w	r3, r3, sl
  40b3cc:	f8cb 3008 	str.w	r3, [fp, #8]
  40b3d0:	f109 0908 	add.w	r9, r9, #8
  40b3d4:	2b00      	cmp	r3, #0
  40b3d6:	d1d8      	bne.n	40b38a <__sprint_r.part.0+0x1a>
  40b3d8:	2000      	movs	r0, #0
  40b3da:	e7ea      	b.n	40b3b2 <__sprint_r.part.0+0x42>
  40b3dc:	f7fe fffe 	bl	40a3dc <__sfvwrite_r>
  40b3e0:	2300      	movs	r3, #0
  40b3e2:	f8cb 3008 	str.w	r3, [fp, #8]
  40b3e6:	f8cb 3004 	str.w	r3, [fp, #4]
  40b3ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b3ee:	bf00      	nop

0040b3f0 <__sprint_r>:
  40b3f0:	6893      	ldr	r3, [r2, #8]
  40b3f2:	b10b      	cbz	r3, 40b3f8 <__sprint_r+0x8>
  40b3f4:	f7ff bfbc 	b.w	40b370 <__sprint_r.part.0>
  40b3f8:	b410      	push	{r4}
  40b3fa:	4618      	mov	r0, r3
  40b3fc:	6053      	str	r3, [r2, #4]
  40b3fe:	bc10      	pop	{r4}
  40b400:	4770      	bx	lr
  40b402:	bf00      	nop

0040b404 <_write_r>:
  40b404:	b570      	push	{r4, r5, r6, lr}
  40b406:	460d      	mov	r5, r1
  40b408:	4c08      	ldr	r4, [pc, #32]	; (40b42c <_write_r+0x28>)
  40b40a:	4611      	mov	r1, r2
  40b40c:	4606      	mov	r6, r0
  40b40e:	461a      	mov	r2, r3
  40b410:	4628      	mov	r0, r5
  40b412:	2300      	movs	r3, #0
  40b414:	6023      	str	r3, [r4, #0]
  40b416:	f7f6 f80d 	bl	401434 <_write>
  40b41a:	1c43      	adds	r3, r0, #1
  40b41c:	d000      	beq.n	40b420 <_write_r+0x1c>
  40b41e:	bd70      	pop	{r4, r5, r6, pc}
  40b420:	6823      	ldr	r3, [r4, #0]
  40b422:	2b00      	cmp	r3, #0
  40b424:	d0fb      	beq.n	40b41e <_write_r+0x1a>
  40b426:	6033      	str	r3, [r6, #0]
  40b428:	bd70      	pop	{r4, r5, r6, pc}
  40b42a:	bf00      	nop
  40b42c:	20400e60 	.word	0x20400e60

0040b430 <__register_exitproc>:
  40b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b434:	4d2c      	ldr	r5, [pc, #176]	; (40b4e8 <__register_exitproc+0xb8>)
  40b436:	4606      	mov	r6, r0
  40b438:	6828      	ldr	r0, [r5, #0]
  40b43a:	4698      	mov	r8, r3
  40b43c:	460f      	mov	r7, r1
  40b43e:	4691      	mov	r9, r2
  40b440:	f7ff f980 	bl	40a744 <__retarget_lock_acquire_recursive>
  40b444:	4b29      	ldr	r3, [pc, #164]	; (40b4ec <__register_exitproc+0xbc>)
  40b446:	681c      	ldr	r4, [r3, #0]
  40b448:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40b44c:	2b00      	cmp	r3, #0
  40b44e:	d03e      	beq.n	40b4ce <__register_exitproc+0x9e>
  40b450:	685a      	ldr	r2, [r3, #4]
  40b452:	2a1f      	cmp	r2, #31
  40b454:	dc1c      	bgt.n	40b490 <__register_exitproc+0x60>
  40b456:	f102 0e01 	add.w	lr, r2, #1
  40b45a:	b176      	cbz	r6, 40b47a <__register_exitproc+0x4a>
  40b45c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40b460:	2401      	movs	r4, #1
  40b462:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40b466:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40b46a:	4094      	lsls	r4, r2
  40b46c:	4320      	orrs	r0, r4
  40b46e:	2e02      	cmp	r6, #2
  40b470:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40b474:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40b478:	d023      	beq.n	40b4c2 <__register_exitproc+0x92>
  40b47a:	3202      	adds	r2, #2
  40b47c:	f8c3 e004 	str.w	lr, [r3, #4]
  40b480:	6828      	ldr	r0, [r5, #0]
  40b482:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40b486:	f7ff f95f 	bl	40a748 <__retarget_lock_release_recursive>
  40b48a:	2000      	movs	r0, #0
  40b48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b490:	4b17      	ldr	r3, [pc, #92]	; (40b4f0 <__register_exitproc+0xc0>)
  40b492:	b30b      	cbz	r3, 40b4d8 <__register_exitproc+0xa8>
  40b494:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40b498:	f7fb fc8c 	bl	406db4 <malloc>
  40b49c:	4603      	mov	r3, r0
  40b49e:	b1d8      	cbz	r0, 40b4d8 <__register_exitproc+0xa8>
  40b4a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40b4a4:	6002      	str	r2, [r0, #0]
  40b4a6:	2100      	movs	r1, #0
  40b4a8:	6041      	str	r1, [r0, #4]
  40b4aa:	460a      	mov	r2, r1
  40b4ac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40b4b0:	f04f 0e01 	mov.w	lr, #1
  40b4b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40b4b8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40b4bc:	2e00      	cmp	r6, #0
  40b4be:	d0dc      	beq.n	40b47a <__register_exitproc+0x4a>
  40b4c0:	e7cc      	b.n	40b45c <__register_exitproc+0x2c>
  40b4c2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40b4c6:	430c      	orrs	r4, r1
  40b4c8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40b4cc:	e7d5      	b.n	40b47a <__register_exitproc+0x4a>
  40b4ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40b4d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40b4d6:	e7bb      	b.n	40b450 <__register_exitproc+0x20>
  40b4d8:	6828      	ldr	r0, [r5, #0]
  40b4da:	f7ff f935 	bl	40a748 <__retarget_lock_release_recursive>
  40b4de:	f04f 30ff 	mov.w	r0, #4294967295
  40b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b4e6:	bf00      	nop
  40b4e8:	20400868 	.word	0x20400868
  40b4ec:	0040c4d4 	.word	0x0040c4d4
  40b4f0:	00406db5 	.word	0x00406db5

0040b4f4 <_calloc_r>:
  40b4f4:	b510      	push	{r4, lr}
  40b4f6:	fb02 f101 	mul.w	r1, r2, r1
  40b4fa:	f7fb fc6b 	bl	406dd4 <_malloc_r>
  40b4fe:	4604      	mov	r4, r0
  40b500:	b1d8      	cbz	r0, 40b53a <_calloc_r+0x46>
  40b502:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b506:	f022 0203 	bic.w	r2, r2, #3
  40b50a:	3a04      	subs	r2, #4
  40b50c:	2a24      	cmp	r2, #36	; 0x24
  40b50e:	d818      	bhi.n	40b542 <_calloc_r+0x4e>
  40b510:	2a13      	cmp	r2, #19
  40b512:	d914      	bls.n	40b53e <_calloc_r+0x4a>
  40b514:	2300      	movs	r3, #0
  40b516:	2a1b      	cmp	r2, #27
  40b518:	6003      	str	r3, [r0, #0]
  40b51a:	6043      	str	r3, [r0, #4]
  40b51c:	d916      	bls.n	40b54c <_calloc_r+0x58>
  40b51e:	2a24      	cmp	r2, #36	; 0x24
  40b520:	6083      	str	r3, [r0, #8]
  40b522:	60c3      	str	r3, [r0, #12]
  40b524:	bf11      	iteee	ne
  40b526:	f100 0210 	addne.w	r2, r0, #16
  40b52a:	6103      	streq	r3, [r0, #16]
  40b52c:	6143      	streq	r3, [r0, #20]
  40b52e:	f100 0218 	addeq.w	r2, r0, #24
  40b532:	2300      	movs	r3, #0
  40b534:	6013      	str	r3, [r2, #0]
  40b536:	6053      	str	r3, [r2, #4]
  40b538:	6093      	str	r3, [r2, #8]
  40b53a:	4620      	mov	r0, r4
  40b53c:	bd10      	pop	{r4, pc}
  40b53e:	4602      	mov	r2, r0
  40b540:	e7f7      	b.n	40b532 <_calloc_r+0x3e>
  40b542:	2100      	movs	r1, #0
  40b544:	f7fb ff90 	bl	407468 <memset>
  40b548:	4620      	mov	r0, r4
  40b54a:	bd10      	pop	{r4, pc}
  40b54c:	f100 0208 	add.w	r2, r0, #8
  40b550:	e7ef      	b.n	40b532 <_calloc_r+0x3e>
  40b552:	bf00      	nop

0040b554 <_close_r>:
  40b554:	b538      	push	{r3, r4, r5, lr}
  40b556:	4c07      	ldr	r4, [pc, #28]	; (40b574 <_close_r+0x20>)
  40b558:	2300      	movs	r3, #0
  40b55a:	4605      	mov	r5, r0
  40b55c:	4608      	mov	r0, r1
  40b55e:	6023      	str	r3, [r4, #0]
  40b560:	f7f6 fc82 	bl	401e68 <_close>
  40b564:	1c43      	adds	r3, r0, #1
  40b566:	d000      	beq.n	40b56a <_close_r+0x16>
  40b568:	bd38      	pop	{r3, r4, r5, pc}
  40b56a:	6823      	ldr	r3, [r4, #0]
  40b56c:	2b00      	cmp	r3, #0
  40b56e:	d0fb      	beq.n	40b568 <_close_r+0x14>
  40b570:	602b      	str	r3, [r5, #0]
  40b572:	bd38      	pop	{r3, r4, r5, pc}
  40b574:	20400e60 	.word	0x20400e60

0040b578 <_fclose_r>:
  40b578:	b570      	push	{r4, r5, r6, lr}
  40b57a:	b159      	cbz	r1, 40b594 <_fclose_r+0x1c>
  40b57c:	4605      	mov	r5, r0
  40b57e:	460c      	mov	r4, r1
  40b580:	b110      	cbz	r0, 40b588 <_fclose_r+0x10>
  40b582:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b584:	2b00      	cmp	r3, #0
  40b586:	d03c      	beq.n	40b602 <_fclose_r+0x8a>
  40b588:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b58a:	07d8      	lsls	r0, r3, #31
  40b58c:	d505      	bpl.n	40b59a <_fclose_r+0x22>
  40b58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b592:	b92b      	cbnz	r3, 40b5a0 <_fclose_r+0x28>
  40b594:	2600      	movs	r6, #0
  40b596:	4630      	mov	r0, r6
  40b598:	bd70      	pop	{r4, r5, r6, pc}
  40b59a:	89a3      	ldrh	r3, [r4, #12]
  40b59c:	0599      	lsls	r1, r3, #22
  40b59e:	d53c      	bpl.n	40b61a <_fclose_r+0xa2>
  40b5a0:	4621      	mov	r1, r4
  40b5a2:	4628      	mov	r0, r5
  40b5a4:	f7fe fc9a 	bl	409edc <__sflush_r>
  40b5a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b5aa:	4606      	mov	r6, r0
  40b5ac:	b133      	cbz	r3, 40b5bc <_fclose_r+0x44>
  40b5ae:	69e1      	ldr	r1, [r4, #28]
  40b5b0:	4628      	mov	r0, r5
  40b5b2:	4798      	blx	r3
  40b5b4:	2800      	cmp	r0, #0
  40b5b6:	bfb8      	it	lt
  40b5b8:	f04f 36ff 	movlt.w	r6, #4294967295
  40b5bc:	89a3      	ldrh	r3, [r4, #12]
  40b5be:	061a      	lsls	r2, r3, #24
  40b5c0:	d422      	bmi.n	40b608 <_fclose_r+0x90>
  40b5c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b5c4:	b141      	cbz	r1, 40b5d8 <_fclose_r+0x60>
  40b5c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b5ca:	4299      	cmp	r1, r3
  40b5cc:	d002      	beq.n	40b5d4 <_fclose_r+0x5c>
  40b5ce:	4628      	mov	r0, r5
  40b5d0:	f7fe fe1e 	bl	40a210 <_free_r>
  40b5d4:	2300      	movs	r3, #0
  40b5d6:	6323      	str	r3, [r4, #48]	; 0x30
  40b5d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40b5da:	b121      	cbz	r1, 40b5e6 <_fclose_r+0x6e>
  40b5dc:	4628      	mov	r0, r5
  40b5de:	f7fe fe17 	bl	40a210 <_free_r>
  40b5e2:	2300      	movs	r3, #0
  40b5e4:	6463      	str	r3, [r4, #68]	; 0x44
  40b5e6:	f7fe fd9d 	bl	40a124 <__sfp_lock_acquire>
  40b5ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b5ec:	2200      	movs	r2, #0
  40b5ee:	07db      	lsls	r3, r3, #31
  40b5f0:	81a2      	strh	r2, [r4, #12]
  40b5f2:	d50e      	bpl.n	40b612 <_fclose_r+0x9a>
  40b5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b5f6:	f7ff f8a3 	bl	40a740 <__retarget_lock_close_recursive>
  40b5fa:	f7fe fd99 	bl	40a130 <__sfp_lock_release>
  40b5fe:	4630      	mov	r0, r6
  40b600:	bd70      	pop	{r4, r5, r6, pc}
  40b602:	f7fe fd63 	bl	40a0cc <__sinit>
  40b606:	e7bf      	b.n	40b588 <_fclose_r+0x10>
  40b608:	6921      	ldr	r1, [r4, #16]
  40b60a:	4628      	mov	r0, r5
  40b60c:	f7fe fe00 	bl	40a210 <_free_r>
  40b610:	e7d7      	b.n	40b5c2 <_fclose_r+0x4a>
  40b612:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b614:	f7ff f898 	bl	40a748 <__retarget_lock_release_recursive>
  40b618:	e7ec      	b.n	40b5f4 <_fclose_r+0x7c>
  40b61a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b61c:	f7ff f892 	bl	40a744 <__retarget_lock_acquire_recursive>
  40b620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b624:	2b00      	cmp	r3, #0
  40b626:	d1bb      	bne.n	40b5a0 <_fclose_r+0x28>
  40b628:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40b62a:	f016 0601 	ands.w	r6, r6, #1
  40b62e:	d1b1      	bne.n	40b594 <_fclose_r+0x1c>
  40b630:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b632:	f7ff f889 	bl	40a748 <__retarget_lock_release_recursive>
  40b636:	4630      	mov	r0, r6
  40b638:	bd70      	pop	{r4, r5, r6, pc}
  40b63a:	bf00      	nop

0040b63c <__fputwc>:
  40b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b640:	b082      	sub	sp, #8
  40b642:	4680      	mov	r8, r0
  40b644:	4689      	mov	r9, r1
  40b646:	4614      	mov	r4, r2
  40b648:	f000 f8a2 	bl	40b790 <__locale_mb_cur_max>
  40b64c:	2801      	cmp	r0, #1
  40b64e:	d036      	beq.n	40b6be <__fputwc+0x82>
  40b650:	464a      	mov	r2, r9
  40b652:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b656:	a901      	add	r1, sp, #4
  40b658:	4640      	mov	r0, r8
  40b65a:	f000 f941 	bl	40b8e0 <_wcrtomb_r>
  40b65e:	1c42      	adds	r2, r0, #1
  40b660:	4606      	mov	r6, r0
  40b662:	d025      	beq.n	40b6b0 <__fputwc+0x74>
  40b664:	b3a8      	cbz	r0, 40b6d2 <__fputwc+0x96>
  40b666:	f89d e004 	ldrb.w	lr, [sp, #4]
  40b66a:	2500      	movs	r5, #0
  40b66c:	f10d 0a04 	add.w	sl, sp, #4
  40b670:	e009      	b.n	40b686 <__fputwc+0x4a>
  40b672:	6823      	ldr	r3, [r4, #0]
  40b674:	1c5a      	adds	r2, r3, #1
  40b676:	6022      	str	r2, [r4, #0]
  40b678:	f883 e000 	strb.w	lr, [r3]
  40b67c:	3501      	adds	r5, #1
  40b67e:	42b5      	cmp	r5, r6
  40b680:	d227      	bcs.n	40b6d2 <__fputwc+0x96>
  40b682:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40b686:	68a3      	ldr	r3, [r4, #8]
  40b688:	3b01      	subs	r3, #1
  40b68a:	2b00      	cmp	r3, #0
  40b68c:	60a3      	str	r3, [r4, #8]
  40b68e:	daf0      	bge.n	40b672 <__fputwc+0x36>
  40b690:	69a7      	ldr	r7, [r4, #24]
  40b692:	42bb      	cmp	r3, r7
  40b694:	4671      	mov	r1, lr
  40b696:	4622      	mov	r2, r4
  40b698:	4640      	mov	r0, r8
  40b69a:	db02      	blt.n	40b6a2 <__fputwc+0x66>
  40b69c:	f1be 0f0a 	cmp.w	lr, #10
  40b6a0:	d1e7      	bne.n	40b672 <__fputwc+0x36>
  40b6a2:	f000 f8c5 	bl	40b830 <__swbuf_r>
  40b6a6:	1c43      	adds	r3, r0, #1
  40b6a8:	d1e8      	bne.n	40b67c <__fputwc+0x40>
  40b6aa:	b002      	add	sp, #8
  40b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6b0:	89a3      	ldrh	r3, [r4, #12]
  40b6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b6b6:	81a3      	strh	r3, [r4, #12]
  40b6b8:	b002      	add	sp, #8
  40b6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6be:	f109 33ff 	add.w	r3, r9, #4294967295
  40b6c2:	2bfe      	cmp	r3, #254	; 0xfe
  40b6c4:	d8c4      	bhi.n	40b650 <__fputwc+0x14>
  40b6c6:	fa5f fe89 	uxtb.w	lr, r9
  40b6ca:	4606      	mov	r6, r0
  40b6cc:	f88d e004 	strb.w	lr, [sp, #4]
  40b6d0:	e7cb      	b.n	40b66a <__fputwc+0x2e>
  40b6d2:	4648      	mov	r0, r9
  40b6d4:	b002      	add	sp, #8
  40b6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6da:	bf00      	nop

0040b6dc <_fputwc_r>:
  40b6dc:	b530      	push	{r4, r5, lr}
  40b6de:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40b6e0:	f013 0f01 	tst.w	r3, #1
  40b6e4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b6e8:	4614      	mov	r4, r2
  40b6ea:	b083      	sub	sp, #12
  40b6ec:	4605      	mov	r5, r0
  40b6ee:	b29a      	uxth	r2, r3
  40b6f0:	d101      	bne.n	40b6f6 <_fputwc_r+0x1a>
  40b6f2:	0590      	lsls	r0, r2, #22
  40b6f4:	d51c      	bpl.n	40b730 <_fputwc_r+0x54>
  40b6f6:	0490      	lsls	r0, r2, #18
  40b6f8:	d406      	bmi.n	40b708 <_fputwc_r+0x2c>
  40b6fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40b6fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b704:	81a3      	strh	r3, [r4, #12]
  40b706:	6662      	str	r2, [r4, #100]	; 0x64
  40b708:	4628      	mov	r0, r5
  40b70a:	4622      	mov	r2, r4
  40b70c:	f7ff ff96 	bl	40b63c <__fputwc>
  40b710:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b712:	07da      	lsls	r2, r3, #31
  40b714:	4605      	mov	r5, r0
  40b716:	d402      	bmi.n	40b71e <_fputwc_r+0x42>
  40b718:	89a3      	ldrh	r3, [r4, #12]
  40b71a:	059b      	lsls	r3, r3, #22
  40b71c:	d502      	bpl.n	40b724 <_fputwc_r+0x48>
  40b71e:	4628      	mov	r0, r5
  40b720:	b003      	add	sp, #12
  40b722:	bd30      	pop	{r4, r5, pc}
  40b724:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b726:	f7ff f80f 	bl	40a748 <__retarget_lock_release_recursive>
  40b72a:	4628      	mov	r0, r5
  40b72c:	b003      	add	sp, #12
  40b72e:	bd30      	pop	{r4, r5, pc}
  40b730:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b732:	9101      	str	r1, [sp, #4]
  40b734:	f7ff f806 	bl	40a744 <__retarget_lock_acquire_recursive>
  40b738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b73c:	9901      	ldr	r1, [sp, #4]
  40b73e:	b29a      	uxth	r2, r3
  40b740:	e7d9      	b.n	40b6f6 <_fputwc_r+0x1a>
  40b742:	bf00      	nop

0040b744 <_fstat_r>:
  40b744:	b538      	push	{r3, r4, r5, lr}
  40b746:	460b      	mov	r3, r1
  40b748:	4c07      	ldr	r4, [pc, #28]	; (40b768 <_fstat_r+0x24>)
  40b74a:	4605      	mov	r5, r0
  40b74c:	4611      	mov	r1, r2
  40b74e:	4618      	mov	r0, r3
  40b750:	2300      	movs	r3, #0
  40b752:	6023      	str	r3, [r4, #0]
  40b754:	f7f6 fb8b 	bl	401e6e <_fstat>
  40b758:	1c43      	adds	r3, r0, #1
  40b75a:	d000      	beq.n	40b75e <_fstat_r+0x1a>
  40b75c:	bd38      	pop	{r3, r4, r5, pc}
  40b75e:	6823      	ldr	r3, [r4, #0]
  40b760:	2b00      	cmp	r3, #0
  40b762:	d0fb      	beq.n	40b75c <_fstat_r+0x18>
  40b764:	602b      	str	r3, [r5, #0]
  40b766:	bd38      	pop	{r3, r4, r5, pc}
  40b768:	20400e60 	.word	0x20400e60

0040b76c <_isatty_r>:
  40b76c:	b538      	push	{r3, r4, r5, lr}
  40b76e:	4c07      	ldr	r4, [pc, #28]	; (40b78c <_isatty_r+0x20>)
  40b770:	2300      	movs	r3, #0
  40b772:	4605      	mov	r5, r0
  40b774:	4608      	mov	r0, r1
  40b776:	6023      	str	r3, [r4, #0]
  40b778:	f7f6 fb7e 	bl	401e78 <_isatty>
  40b77c:	1c43      	adds	r3, r0, #1
  40b77e:	d000      	beq.n	40b782 <_isatty_r+0x16>
  40b780:	bd38      	pop	{r3, r4, r5, pc}
  40b782:	6823      	ldr	r3, [r4, #0]
  40b784:	2b00      	cmp	r3, #0
  40b786:	d0fb      	beq.n	40b780 <_isatty_r+0x14>
  40b788:	602b      	str	r3, [r5, #0]
  40b78a:	bd38      	pop	{r3, r4, r5, pc}
  40b78c:	20400e60 	.word	0x20400e60

0040b790 <__locale_mb_cur_max>:
  40b790:	4b04      	ldr	r3, [pc, #16]	; (40b7a4 <__locale_mb_cur_max+0x14>)
  40b792:	4a05      	ldr	r2, [pc, #20]	; (40b7a8 <__locale_mb_cur_max+0x18>)
  40b794:	681b      	ldr	r3, [r3, #0]
  40b796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b798:	2b00      	cmp	r3, #0
  40b79a:	bf08      	it	eq
  40b79c:	4613      	moveq	r3, r2
  40b79e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b7a2:	4770      	bx	lr
  40b7a4:	20400028 	.word	0x20400028
  40b7a8:	2040086c 	.word	0x2040086c

0040b7ac <_lseek_r>:
  40b7ac:	b570      	push	{r4, r5, r6, lr}
  40b7ae:	460d      	mov	r5, r1
  40b7b0:	4c08      	ldr	r4, [pc, #32]	; (40b7d4 <_lseek_r+0x28>)
  40b7b2:	4611      	mov	r1, r2
  40b7b4:	4606      	mov	r6, r0
  40b7b6:	461a      	mov	r2, r3
  40b7b8:	4628      	mov	r0, r5
  40b7ba:	2300      	movs	r3, #0
  40b7bc:	6023      	str	r3, [r4, #0]
  40b7be:	f7f6 fb5d 	bl	401e7c <_lseek>
  40b7c2:	1c43      	adds	r3, r0, #1
  40b7c4:	d000      	beq.n	40b7c8 <_lseek_r+0x1c>
  40b7c6:	bd70      	pop	{r4, r5, r6, pc}
  40b7c8:	6823      	ldr	r3, [r4, #0]
  40b7ca:	2b00      	cmp	r3, #0
  40b7cc:	d0fb      	beq.n	40b7c6 <_lseek_r+0x1a>
  40b7ce:	6033      	str	r3, [r6, #0]
  40b7d0:	bd70      	pop	{r4, r5, r6, pc}
  40b7d2:	bf00      	nop
  40b7d4:	20400e60 	.word	0x20400e60

0040b7d8 <__ascii_mbtowc>:
  40b7d8:	b082      	sub	sp, #8
  40b7da:	b149      	cbz	r1, 40b7f0 <__ascii_mbtowc+0x18>
  40b7dc:	b15a      	cbz	r2, 40b7f6 <__ascii_mbtowc+0x1e>
  40b7de:	b16b      	cbz	r3, 40b7fc <__ascii_mbtowc+0x24>
  40b7e0:	7813      	ldrb	r3, [r2, #0]
  40b7e2:	600b      	str	r3, [r1, #0]
  40b7e4:	7812      	ldrb	r2, [r2, #0]
  40b7e6:	1c10      	adds	r0, r2, #0
  40b7e8:	bf18      	it	ne
  40b7ea:	2001      	movne	r0, #1
  40b7ec:	b002      	add	sp, #8
  40b7ee:	4770      	bx	lr
  40b7f0:	a901      	add	r1, sp, #4
  40b7f2:	2a00      	cmp	r2, #0
  40b7f4:	d1f3      	bne.n	40b7de <__ascii_mbtowc+0x6>
  40b7f6:	4610      	mov	r0, r2
  40b7f8:	b002      	add	sp, #8
  40b7fa:	4770      	bx	lr
  40b7fc:	f06f 0001 	mvn.w	r0, #1
  40b800:	e7f4      	b.n	40b7ec <__ascii_mbtowc+0x14>
  40b802:	bf00      	nop

0040b804 <_read_r>:
  40b804:	b570      	push	{r4, r5, r6, lr}
  40b806:	460d      	mov	r5, r1
  40b808:	4c08      	ldr	r4, [pc, #32]	; (40b82c <_read_r+0x28>)
  40b80a:	4611      	mov	r1, r2
  40b80c:	4606      	mov	r6, r0
  40b80e:	461a      	mov	r2, r3
  40b810:	4628      	mov	r0, r5
  40b812:	2300      	movs	r3, #0
  40b814:	6023      	str	r3, [r4, #0]
  40b816:	f7f5 fdef 	bl	4013f8 <_read>
  40b81a:	1c43      	adds	r3, r0, #1
  40b81c:	d000      	beq.n	40b820 <_read_r+0x1c>
  40b81e:	bd70      	pop	{r4, r5, r6, pc}
  40b820:	6823      	ldr	r3, [r4, #0]
  40b822:	2b00      	cmp	r3, #0
  40b824:	d0fb      	beq.n	40b81e <_read_r+0x1a>
  40b826:	6033      	str	r3, [r6, #0]
  40b828:	bd70      	pop	{r4, r5, r6, pc}
  40b82a:	bf00      	nop
  40b82c:	20400e60 	.word	0x20400e60

0040b830 <__swbuf_r>:
  40b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b832:	460d      	mov	r5, r1
  40b834:	4614      	mov	r4, r2
  40b836:	4606      	mov	r6, r0
  40b838:	b110      	cbz	r0, 40b840 <__swbuf_r+0x10>
  40b83a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b83c:	2b00      	cmp	r3, #0
  40b83e:	d04b      	beq.n	40b8d8 <__swbuf_r+0xa8>
  40b840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b844:	69a3      	ldr	r3, [r4, #24]
  40b846:	60a3      	str	r3, [r4, #8]
  40b848:	b291      	uxth	r1, r2
  40b84a:	0708      	lsls	r0, r1, #28
  40b84c:	d539      	bpl.n	40b8c2 <__swbuf_r+0x92>
  40b84e:	6923      	ldr	r3, [r4, #16]
  40b850:	2b00      	cmp	r3, #0
  40b852:	d036      	beq.n	40b8c2 <__swbuf_r+0x92>
  40b854:	b2ed      	uxtb	r5, r5
  40b856:	0489      	lsls	r1, r1, #18
  40b858:	462f      	mov	r7, r5
  40b85a:	d515      	bpl.n	40b888 <__swbuf_r+0x58>
  40b85c:	6822      	ldr	r2, [r4, #0]
  40b85e:	6961      	ldr	r1, [r4, #20]
  40b860:	1ad3      	subs	r3, r2, r3
  40b862:	428b      	cmp	r3, r1
  40b864:	da1c      	bge.n	40b8a0 <__swbuf_r+0x70>
  40b866:	3301      	adds	r3, #1
  40b868:	68a1      	ldr	r1, [r4, #8]
  40b86a:	1c50      	adds	r0, r2, #1
  40b86c:	3901      	subs	r1, #1
  40b86e:	60a1      	str	r1, [r4, #8]
  40b870:	6020      	str	r0, [r4, #0]
  40b872:	7015      	strb	r5, [r2, #0]
  40b874:	6962      	ldr	r2, [r4, #20]
  40b876:	429a      	cmp	r2, r3
  40b878:	d01a      	beq.n	40b8b0 <__swbuf_r+0x80>
  40b87a:	89a3      	ldrh	r3, [r4, #12]
  40b87c:	07db      	lsls	r3, r3, #31
  40b87e:	d501      	bpl.n	40b884 <__swbuf_r+0x54>
  40b880:	2d0a      	cmp	r5, #10
  40b882:	d015      	beq.n	40b8b0 <__swbuf_r+0x80>
  40b884:	4638      	mov	r0, r7
  40b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b888:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b88a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b88e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40b892:	81a2      	strh	r2, [r4, #12]
  40b894:	6822      	ldr	r2, [r4, #0]
  40b896:	6661      	str	r1, [r4, #100]	; 0x64
  40b898:	6961      	ldr	r1, [r4, #20]
  40b89a:	1ad3      	subs	r3, r2, r3
  40b89c:	428b      	cmp	r3, r1
  40b89e:	dbe2      	blt.n	40b866 <__swbuf_r+0x36>
  40b8a0:	4621      	mov	r1, r4
  40b8a2:	4630      	mov	r0, r6
  40b8a4:	f7fe fbba 	bl	40a01c <_fflush_r>
  40b8a8:	b940      	cbnz	r0, 40b8bc <__swbuf_r+0x8c>
  40b8aa:	6822      	ldr	r2, [r4, #0]
  40b8ac:	2301      	movs	r3, #1
  40b8ae:	e7db      	b.n	40b868 <__swbuf_r+0x38>
  40b8b0:	4621      	mov	r1, r4
  40b8b2:	4630      	mov	r0, r6
  40b8b4:	f7fe fbb2 	bl	40a01c <_fflush_r>
  40b8b8:	2800      	cmp	r0, #0
  40b8ba:	d0e3      	beq.n	40b884 <__swbuf_r+0x54>
  40b8bc:	f04f 37ff 	mov.w	r7, #4294967295
  40b8c0:	e7e0      	b.n	40b884 <__swbuf_r+0x54>
  40b8c2:	4621      	mov	r1, r4
  40b8c4:	4630      	mov	r0, r6
  40b8c6:	f7fd fad7 	bl	408e78 <__swsetup_r>
  40b8ca:	2800      	cmp	r0, #0
  40b8cc:	d1f6      	bne.n	40b8bc <__swbuf_r+0x8c>
  40b8ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b8d2:	6923      	ldr	r3, [r4, #16]
  40b8d4:	b291      	uxth	r1, r2
  40b8d6:	e7bd      	b.n	40b854 <__swbuf_r+0x24>
  40b8d8:	f7fe fbf8 	bl	40a0cc <__sinit>
  40b8dc:	e7b0      	b.n	40b840 <__swbuf_r+0x10>
  40b8de:	bf00      	nop

0040b8e0 <_wcrtomb_r>:
  40b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b8e2:	4606      	mov	r6, r0
  40b8e4:	b085      	sub	sp, #20
  40b8e6:	461f      	mov	r7, r3
  40b8e8:	b189      	cbz	r1, 40b90e <_wcrtomb_r+0x2e>
  40b8ea:	4c10      	ldr	r4, [pc, #64]	; (40b92c <_wcrtomb_r+0x4c>)
  40b8ec:	4d10      	ldr	r5, [pc, #64]	; (40b930 <_wcrtomb_r+0x50>)
  40b8ee:	6824      	ldr	r4, [r4, #0]
  40b8f0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40b8f2:	2c00      	cmp	r4, #0
  40b8f4:	bf08      	it	eq
  40b8f6:	462c      	moveq	r4, r5
  40b8f8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40b8fc:	47a0      	blx	r4
  40b8fe:	1c43      	adds	r3, r0, #1
  40b900:	d103      	bne.n	40b90a <_wcrtomb_r+0x2a>
  40b902:	2200      	movs	r2, #0
  40b904:	238a      	movs	r3, #138	; 0x8a
  40b906:	603a      	str	r2, [r7, #0]
  40b908:	6033      	str	r3, [r6, #0]
  40b90a:	b005      	add	sp, #20
  40b90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b90e:	460c      	mov	r4, r1
  40b910:	4906      	ldr	r1, [pc, #24]	; (40b92c <_wcrtomb_r+0x4c>)
  40b912:	4a07      	ldr	r2, [pc, #28]	; (40b930 <_wcrtomb_r+0x50>)
  40b914:	6809      	ldr	r1, [r1, #0]
  40b916:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40b918:	2900      	cmp	r1, #0
  40b91a:	bf08      	it	eq
  40b91c:	4611      	moveq	r1, r2
  40b91e:	4622      	mov	r2, r4
  40b920:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40b924:	a901      	add	r1, sp, #4
  40b926:	47a0      	blx	r4
  40b928:	e7e9      	b.n	40b8fe <_wcrtomb_r+0x1e>
  40b92a:	bf00      	nop
  40b92c:	20400028 	.word	0x20400028
  40b930:	2040086c 	.word	0x2040086c

0040b934 <__ascii_wctomb>:
  40b934:	b121      	cbz	r1, 40b940 <__ascii_wctomb+0xc>
  40b936:	2aff      	cmp	r2, #255	; 0xff
  40b938:	d804      	bhi.n	40b944 <__ascii_wctomb+0x10>
  40b93a:	700a      	strb	r2, [r1, #0]
  40b93c:	2001      	movs	r0, #1
  40b93e:	4770      	bx	lr
  40b940:	4608      	mov	r0, r1
  40b942:	4770      	bx	lr
  40b944:	238a      	movs	r3, #138	; 0x8a
  40b946:	6003      	str	r3, [r0, #0]
  40b948:	f04f 30ff 	mov.w	r0, #4294967295
  40b94c:	4770      	bx	lr
  40b94e:	bf00      	nop

0040b950 <__aeabi_d2iz>:
  40b950:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b958:	d215      	bcs.n	40b986 <__aeabi_d2iz+0x36>
  40b95a:	d511      	bpl.n	40b980 <__aeabi_d2iz+0x30>
  40b95c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b964:	d912      	bls.n	40b98c <__aeabi_d2iz+0x3c>
  40b966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b96a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b96e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b972:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b976:	fa23 f002 	lsr.w	r0, r3, r2
  40b97a:	bf18      	it	ne
  40b97c:	4240      	negne	r0, r0
  40b97e:	4770      	bx	lr
  40b980:	f04f 0000 	mov.w	r0, #0
  40b984:	4770      	bx	lr
  40b986:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b98a:	d105      	bne.n	40b998 <__aeabi_d2iz+0x48>
  40b98c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b990:	bf08      	it	eq
  40b992:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b996:	4770      	bx	lr
  40b998:	f04f 0000 	mov.w	r0, #0
  40b99c:	4770      	bx	lr
  40b99e:	bf00      	nop

0040b9a0 <__aeabi_uldivmod>:
  40b9a0:	b953      	cbnz	r3, 40b9b8 <__aeabi_uldivmod+0x18>
  40b9a2:	b94a      	cbnz	r2, 40b9b8 <__aeabi_uldivmod+0x18>
  40b9a4:	2900      	cmp	r1, #0
  40b9a6:	bf08      	it	eq
  40b9a8:	2800      	cmpeq	r0, #0
  40b9aa:	bf1c      	itt	ne
  40b9ac:	f04f 31ff 	movne.w	r1, #4294967295
  40b9b0:	f04f 30ff 	movne.w	r0, #4294967295
  40b9b4:	f000 b97a 	b.w	40bcac <__aeabi_idiv0>
  40b9b8:	f1ad 0c08 	sub.w	ip, sp, #8
  40b9bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b9c0:	f000 f806 	bl	40b9d0 <__udivmoddi4>
  40b9c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b9c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b9cc:	b004      	add	sp, #16
  40b9ce:	4770      	bx	lr

0040b9d0 <__udivmoddi4>:
  40b9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b9d4:	468c      	mov	ip, r1
  40b9d6:	460d      	mov	r5, r1
  40b9d8:	4604      	mov	r4, r0
  40b9da:	9e08      	ldr	r6, [sp, #32]
  40b9dc:	2b00      	cmp	r3, #0
  40b9de:	d151      	bne.n	40ba84 <__udivmoddi4+0xb4>
  40b9e0:	428a      	cmp	r2, r1
  40b9e2:	4617      	mov	r7, r2
  40b9e4:	d96d      	bls.n	40bac2 <__udivmoddi4+0xf2>
  40b9e6:	fab2 fe82 	clz	lr, r2
  40b9ea:	f1be 0f00 	cmp.w	lr, #0
  40b9ee:	d00b      	beq.n	40ba08 <__udivmoddi4+0x38>
  40b9f0:	f1ce 0c20 	rsb	ip, lr, #32
  40b9f4:	fa01 f50e 	lsl.w	r5, r1, lr
  40b9f8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b9fc:	fa02 f70e 	lsl.w	r7, r2, lr
  40ba00:	ea4c 0c05 	orr.w	ip, ip, r5
  40ba04:	fa00 f40e 	lsl.w	r4, r0, lr
  40ba08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40ba0c:	0c25      	lsrs	r5, r4, #16
  40ba0e:	fbbc f8fa 	udiv	r8, ip, sl
  40ba12:	fa1f f987 	uxth.w	r9, r7
  40ba16:	fb0a cc18 	mls	ip, sl, r8, ip
  40ba1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40ba1e:	fb08 f309 	mul.w	r3, r8, r9
  40ba22:	42ab      	cmp	r3, r5
  40ba24:	d90a      	bls.n	40ba3c <__udivmoddi4+0x6c>
  40ba26:	19ed      	adds	r5, r5, r7
  40ba28:	f108 32ff 	add.w	r2, r8, #4294967295
  40ba2c:	f080 8123 	bcs.w	40bc76 <__udivmoddi4+0x2a6>
  40ba30:	42ab      	cmp	r3, r5
  40ba32:	f240 8120 	bls.w	40bc76 <__udivmoddi4+0x2a6>
  40ba36:	f1a8 0802 	sub.w	r8, r8, #2
  40ba3a:	443d      	add	r5, r7
  40ba3c:	1aed      	subs	r5, r5, r3
  40ba3e:	b2a4      	uxth	r4, r4
  40ba40:	fbb5 f0fa 	udiv	r0, r5, sl
  40ba44:	fb0a 5510 	mls	r5, sl, r0, r5
  40ba48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40ba4c:	fb00 f909 	mul.w	r9, r0, r9
  40ba50:	45a1      	cmp	r9, r4
  40ba52:	d909      	bls.n	40ba68 <__udivmoddi4+0x98>
  40ba54:	19e4      	adds	r4, r4, r7
  40ba56:	f100 33ff 	add.w	r3, r0, #4294967295
  40ba5a:	f080 810a 	bcs.w	40bc72 <__udivmoddi4+0x2a2>
  40ba5e:	45a1      	cmp	r9, r4
  40ba60:	f240 8107 	bls.w	40bc72 <__udivmoddi4+0x2a2>
  40ba64:	3802      	subs	r0, #2
  40ba66:	443c      	add	r4, r7
  40ba68:	eba4 0409 	sub.w	r4, r4, r9
  40ba6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ba70:	2100      	movs	r1, #0
  40ba72:	2e00      	cmp	r6, #0
  40ba74:	d061      	beq.n	40bb3a <__udivmoddi4+0x16a>
  40ba76:	fa24 f40e 	lsr.w	r4, r4, lr
  40ba7a:	2300      	movs	r3, #0
  40ba7c:	6034      	str	r4, [r6, #0]
  40ba7e:	6073      	str	r3, [r6, #4]
  40ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ba84:	428b      	cmp	r3, r1
  40ba86:	d907      	bls.n	40ba98 <__udivmoddi4+0xc8>
  40ba88:	2e00      	cmp	r6, #0
  40ba8a:	d054      	beq.n	40bb36 <__udivmoddi4+0x166>
  40ba8c:	2100      	movs	r1, #0
  40ba8e:	e886 0021 	stmia.w	r6, {r0, r5}
  40ba92:	4608      	mov	r0, r1
  40ba94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ba98:	fab3 f183 	clz	r1, r3
  40ba9c:	2900      	cmp	r1, #0
  40ba9e:	f040 808e 	bne.w	40bbbe <__udivmoddi4+0x1ee>
  40baa2:	42ab      	cmp	r3, r5
  40baa4:	d302      	bcc.n	40baac <__udivmoddi4+0xdc>
  40baa6:	4282      	cmp	r2, r0
  40baa8:	f200 80fa 	bhi.w	40bca0 <__udivmoddi4+0x2d0>
  40baac:	1a84      	subs	r4, r0, r2
  40baae:	eb65 0503 	sbc.w	r5, r5, r3
  40bab2:	2001      	movs	r0, #1
  40bab4:	46ac      	mov	ip, r5
  40bab6:	2e00      	cmp	r6, #0
  40bab8:	d03f      	beq.n	40bb3a <__udivmoddi4+0x16a>
  40baba:	e886 1010 	stmia.w	r6, {r4, ip}
  40babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bac2:	b912      	cbnz	r2, 40baca <__udivmoddi4+0xfa>
  40bac4:	2701      	movs	r7, #1
  40bac6:	fbb7 f7f2 	udiv	r7, r7, r2
  40baca:	fab7 fe87 	clz	lr, r7
  40bace:	f1be 0f00 	cmp.w	lr, #0
  40bad2:	d134      	bne.n	40bb3e <__udivmoddi4+0x16e>
  40bad4:	1beb      	subs	r3, r5, r7
  40bad6:	0c3a      	lsrs	r2, r7, #16
  40bad8:	fa1f fc87 	uxth.w	ip, r7
  40badc:	2101      	movs	r1, #1
  40bade:	fbb3 f8f2 	udiv	r8, r3, r2
  40bae2:	0c25      	lsrs	r5, r4, #16
  40bae4:	fb02 3318 	mls	r3, r2, r8, r3
  40bae8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40baec:	fb0c f308 	mul.w	r3, ip, r8
  40baf0:	42ab      	cmp	r3, r5
  40baf2:	d907      	bls.n	40bb04 <__udivmoddi4+0x134>
  40baf4:	19ed      	adds	r5, r5, r7
  40baf6:	f108 30ff 	add.w	r0, r8, #4294967295
  40bafa:	d202      	bcs.n	40bb02 <__udivmoddi4+0x132>
  40bafc:	42ab      	cmp	r3, r5
  40bafe:	f200 80d1 	bhi.w	40bca4 <__udivmoddi4+0x2d4>
  40bb02:	4680      	mov	r8, r0
  40bb04:	1aed      	subs	r5, r5, r3
  40bb06:	b2a3      	uxth	r3, r4
  40bb08:	fbb5 f0f2 	udiv	r0, r5, r2
  40bb0c:	fb02 5510 	mls	r5, r2, r0, r5
  40bb10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40bb14:	fb0c fc00 	mul.w	ip, ip, r0
  40bb18:	45a4      	cmp	ip, r4
  40bb1a:	d907      	bls.n	40bb2c <__udivmoddi4+0x15c>
  40bb1c:	19e4      	adds	r4, r4, r7
  40bb1e:	f100 33ff 	add.w	r3, r0, #4294967295
  40bb22:	d202      	bcs.n	40bb2a <__udivmoddi4+0x15a>
  40bb24:	45a4      	cmp	ip, r4
  40bb26:	f200 80b8 	bhi.w	40bc9a <__udivmoddi4+0x2ca>
  40bb2a:	4618      	mov	r0, r3
  40bb2c:	eba4 040c 	sub.w	r4, r4, ip
  40bb30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40bb34:	e79d      	b.n	40ba72 <__udivmoddi4+0xa2>
  40bb36:	4631      	mov	r1, r6
  40bb38:	4630      	mov	r0, r6
  40bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bb3e:	f1ce 0420 	rsb	r4, lr, #32
  40bb42:	fa05 f30e 	lsl.w	r3, r5, lr
  40bb46:	fa07 f70e 	lsl.w	r7, r7, lr
  40bb4a:	fa20 f804 	lsr.w	r8, r0, r4
  40bb4e:	0c3a      	lsrs	r2, r7, #16
  40bb50:	fa25 f404 	lsr.w	r4, r5, r4
  40bb54:	ea48 0803 	orr.w	r8, r8, r3
  40bb58:	fbb4 f1f2 	udiv	r1, r4, r2
  40bb5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40bb60:	fb02 4411 	mls	r4, r2, r1, r4
  40bb64:	fa1f fc87 	uxth.w	ip, r7
  40bb68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40bb6c:	fb01 f30c 	mul.w	r3, r1, ip
  40bb70:	42ab      	cmp	r3, r5
  40bb72:	fa00 f40e 	lsl.w	r4, r0, lr
  40bb76:	d909      	bls.n	40bb8c <__udivmoddi4+0x1bc>
  40bb78:	19ed      	adds	r5, r5, r7
  40bb7a:	f101 30ff 	add.w	r0, r1, #4294967295
  40bb7e:	f080 808a 	bcs.w	40bc96 <__udivmoddi4+0x2c6>
  40bb82:	42ab      	cmp	r3, r5
  40bb84:	f240 8087 	bls.w	40bc96 <__udivmoddi4+0x2c6>
  40bb88:	3902      	subs	r1, #2
  40bb8a:	443d      	add	r5, r7
  40bb8c:	1aeb      	subs	r3, r5, r3
  40bb8e:	fa1f f588 	uxth.w	r5, r8
  40bb92:	fbb3 f0f2 	udiv	r0, r3, r2
  40bb96:	fb02 3310 	mls	r3, r2, r0, r3
  40bb9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bb9e:	fb00 f30c 	mul.w	r3, r0, ip
  40bba2:	42ab      	cmp	r3, r5
  40bba4:	d907      	bls.n	40bbb6 <__udivmoddi4+0x1e6>
  40bba6:	19ed      	adds	r5, r5, r7
  40bba8:	f100 38ff 	add.w	r8, r0, #4294967295
  40bbac:	d26f      	bcs.n	40bc8e <__udivmoddi4+0x2be>
  40bbae:	42ab      	cmp	r3, r5
  40bbb0:	d96d      	bls.n	40bc8e <__udivmoddi4+0x2be>
  40bbb2:	3802      	subs	r0, #2
  40bbb4:	443d      	add	r5, r7
  40bbb6:	1aeb      	subs	r3, r5, r3
  40bbb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40bbbc:	e78f      	b.n	40bade <__udivmoddi4+0x10e>
  40bbbe:	f1c1 0720 	rsb	r7, r1, #32
  40bbc2:	fa22 f807 	lsr.w	r8, r2, r7
  40bbc6:	408b      	lsls	r3, r1
  40bbc8:	fa05 f401 	lsl.w	r4, r5, r1
  40bbcc:	ea48 0303 	orr.w	r3, r8, r3
  40bbd0:	fa20 fe07 	lsr.w	lr, r0, r7
  40bbd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40bbd8:	40fd      	lsrs	r5, r7
  40bbda:	ea4e 0e04 	orr.w	lr, lr, r4
  40bbde:	fbb5 f9fc 	udiv	r9, r5, ip
  40bbe2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40bbe6:	fb0c 5519 	mls	r5, ip, r9, r5
  40bbea:	fa1f f883 	uxth.w	r8, r3
  40bbee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40bbf2:	fb09 f408 	mul.w	r4, r9, r8
  40bbf6:	42ac      	cmp	r4, r5
  40bbf8:	fa02 f201 	lsl.w	r2, r2, r1
  40bbfc:	fa00 fa01 	lsl.w	sl, r0, r1
  40bc00:	d908      	bls.n	40bc14 <__udivmoddi4+0x244>
  40bc02:	18ed      	adds	r5, r5, r3
  40bc04:	f109 30ff 	add.w	r0, r9, #4294967295
  40bc08:	d243      	bcs.n	40bc92 <__udivmoddi4+0x2c2>
  40bc0a:	42ac      	cmp	r4, r5
  40bc0c:	d941      	bls.n	40bc92 <__udivmoddi4+0x2c2>
  40bc0e:	f1a9 0902 	sub.w	r9, r9, #2
  40bc12:	441d      	add	r5, r3
  40bc14:	1b2d      	subs	r5, r5, r4
  40bc16:	fa1f fe8e 	uxth.w	lr, lr
  40bc1a:	fbb5 f0fc 	udiv	r0, r5, ip
  40bc1e:	fb0c 5510 	mls	r5, ip, r0, r5
  40bc22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40bc26:	fb00 f808 	mul.w	r8, r0, r8
  40bc2a:	45a0      	cmp	r8, r4
  40bc2c:	d907      	bls.n	40bc3e <__udivmoddi4+0x26e>
  40bc2e:	18e4      	adds	r4, r4, r3
  40bc30:	f100 35ff 	add.w	r5, r0, #4294967295
  40bc34:	d229      	bcs.n	40bc8a <__udivmoddi4+0x2ba>
  40bc36:	45a0      	cmp	r8, r4
  40bc38:	d927      	bls.n	40bc8a <__udivmoddi4+0x2ba>
  40bc3a:	3802      	subs	r0, #2
  40bc3c:	441c      	add	r4, r3
  40bc3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40bc42:	eba4 0408 	sub.w	r4, r4, r8
  40bc46:	fba0 8902 	umull	r8, r9, r0, r2
  40bc4a:	454c      	cmp	r4, r9
  40bc4c:	46c6      	mov	lr, r8
  40bc4e:	464d      	mov	r5, r9
  40bc50:	d315      	bcc.n	40bc7e <__udivmoddi4+0x2ae>
  40bc52:	d012      	beq.n	40bc7a <__udivmoddi4+0x2aa>
  40bc54:	b156      	cbz	r6, 40bc6c <__udivmoddi4+0x29c>
  40bc56:	ebba 030e 	subs.w	r3, sl, lr
  40bc5a:	eb64 0405 	sbc.w	r4, r4, r5
  40bc5e:	fa04 f707 	lsl.w	r7, r4, r7
  40bc62:	40cb      	lsrs	r3, r1
  40bc64:	431f      	orrs	r7, r3
  40bc66:	40cc      	lsrs	r4, r1
  40bc68:	6037      	str	r7, [r6, #0]
  40bc6a:	6074      	str	r4, [r6, #4]
  40bc6c:	2100      	movs	r1, #0
  40bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bc72:	4618      	mov	r0, r3
  40bc74:	e6f8      	b.n	40ba68 <__udivmoddi4+0x98>
  40bc76:	4690      	mov	r8, r2
  40bc78:	e6e0      	b.n	40ba3c <__udivmoddi4+0x6c>
  40bc7a:	45c2      	cmp	sl, r8
  40bc7c:	d2ea      	bcs.n	40bc54 <__udivmoddi4+0x284>
  40bc7e:	ebb8 0e02 	subs.w	lr, r8, r2
  40bc82:	eb69 0503 	sbc.w	r5, r9, r3
  40bc86:	3801      	subs	r0, #1
  40bc88:	e7e4      	b.n	40bc54 <__udivmoddi4+0x284>
  40bc8a:	4628      	mov	r0, r5
  40bc8c:	e7d7      	b.n	40bc3e <__udivmoddi4+0x26e>
  40bc8e:	4640      	mov	r0, r8
  40bc90:	e791      	b.n	40bbb6 <__udivmoddi4+0x1e6>
  40bc92:	4681      	mov	r9, r0
  40bc94:	e7be      	b.n	40bc14 <__udivmoddi4+0x244>
  40bc96:	4601      	mov	r1, r0
  40bc98:	e778      	b.n	40bb8c <__udivmoddi4+0x1bc>
  40bc9a:	3802      	subs	r0, #2
  40bc9c:	443c      	add	r4, r7
  40bc9e:	e745      	b.n	40bb2c <__udivmoddi4+0x15c>
  40bca0:	4608      	mov	r0, r1
  40bca2:	e708      	b.n	40bab6 <__udivmoddi4+0xe6>
  40bca4:	f1a8 0802 	sub.w	r8, r8, #2
  40bca8:	443d      	add	r5, r7
  40bcaa:	e72b      	b.n	40bb04 <__udivmoddi4+0x134>

0040bcac <__aeabi_idiv0>:
  40bcac:	4770      	bx	lr
  40bcae:	bf00      	nop
  40bcb0:	3f000000 	.word	0x3f000000
  40bcb4:	42b40000 	.word	0x42b40000
  40bcb8:	42b40000 	.word	0x42b40000
  40bcbc:	00000000 	.word	0x00000000

0040bcc0 <sysfont_glyphs>:
  40bcc0:	00000000 20000000 20202020 50502000     .......     . PP
  40bcd0:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
  40bce0:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
  40bcf0:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
  40bd00:	10101020 50004020 5020f820 20200000      ... @.P . P..  
  40bd10:	002020f8 00000000 00402060 00f80000     .  .....` @.....
  40bd20:	00000000 60000000 10080060 00804020     .......``... @..
  40bd30:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
  40bd40:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
  40bd50:	f81010f8 0808f080 40307088 8888f080     .........p0@....
  40bd60:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
  40bd70:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
  40bd80:	40206000 40201008 00081020 f800f800     .` @.. @ .......
  40bd90:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
  40bda0:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
  40bdb0:	8888f088 808870f0 70888080 888890e0     .....p.....p....
  40bdc0:	f8e09088 80f08080 80f8f880 8080e080     ................
  40bdd0:	80887080 70889880 f8888888 70888888     .p.....p.......p
  40bde0:	20202020 10387020 90101010 a0908860          p8.....`...
  40bdf0:	8890a0c0 80808080 88f88080 8888a8d8     ................
  40be00:	88888888 8898a8c8 88887088 70888888     .........p.....p
  40be10:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
  40be20:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
  40be30:	88202020 88888888 88887088 50888888        ......p.....P
  40be40:	88888820 88d8a8a8 20508888 88888850      .........P P...
  40be50:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
  40be60:	38202020 20408000 e0000810 20202020        8..@ ....    
  40be70:	5020e020 00000088 00000000 f8000000      . P............
  40be80:	00102040 00000000 78087000 80807888     @ .......p.x.x..
  40be90:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
  40bea0:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
  40beb0:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
  40bec0:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
  40bed0:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
  40bee0:	00008888 8888c8b0 70000088 70888888     ...........p...p
  40bef0:	88f00000 008080f0 78986800 00000808     .........h.x....
  40bf00:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
  40bf10:	00304840 88888800 00006898 50888888     @H0......h.....P
  40bf20:	88000020 50a8a888 50880000 00885020      ......P...P P..
  40bf30:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
  40bf40:	10202040 20202020 40202020 20102020     @  .       @  . 
  40bf50:	00004020 454c4449 00000000 51726d54      @..IDLE....TmrQ
  40bf60:	00000000 20726d54 00637653 2062614c     ....Tmr Svc.Lab 
  40bf70:	202d2036 534f5452 69202d20 0000756d     6 - RTOS - imu..
  40bf80:	686c6166 6d652061 69726320 6f207261     falha em criar o
  40bf90:	6d657320 726f6661 0000206f 73756f68      semaforo ..hous
  40bfa0:	6f645f65 00006e77 6c696146 74206465     e_down..Failed t
  40bfb0:	7263206f 65746165 656c6f20 61742064     o create oled ta
  40bfc0:	000d6b73 00756d69 6c696146 74206465     sk..imu.Failed t
  40bfd0:	7263206f 65746165 756d6920 73617420     o create imu tas
  40bfe0:	00000d6b 6569726f 6361746e 00006f61     k...orientacao..
  40bff0:	6c696146 74206465 7263206f 65746165     Failed to create
  40c000:	69726f20 61746e65 206f6163 6b736174      orientacao task
  40c010:	0000000d 5252455b 5b205d4f 5d633269     ....[ERRO] [i2c]
  40c020:	65725b20 205d6461 00000000 4441445b      [read] ....[DAD
  40c030:	5b205d4f 5d633269 3a782520 00007825     O] [i2c] %x:%x..
  40c040:	4d202d20 30365550 65203035 6e6f636e      - MPU6050 encon
  40c050:	64617274 0000006f 4d202d20 30365550     trado... - MPU60
  40c060:	6e203035 65206f61 6e6f636e 64617274     50 nao encontrad
  40c070:	0000006f 5252455b 5b205d4f 5d633269     o...[ERRO] [i2c]
  40c080:	72775b20 5d657469 00000020 6c6c6f52      [write] ...Roll
  40c090:	2e302520 202c6631 63746950 30252068      %0.1f, Pitch %0
  40c0a0:	2c66312e 77615920 2e302520 202c6631     .1f, Yaw %0.1f, 
  40c0b0:	20636341 312e3025 00000a66 63617473     Acc %0.1f...stac
  40c0c0:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40c0d0:	00000a0d 74727173 00000000 6e697361     ....sqrt....asin
  40c0e0:	00000066                                f...

0040c0e4 <npio2_hw>:
  40c0e4:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  40c0f4:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  40c104:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  40c114:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  40c124:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  40c134:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  40c144:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  40c154:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0040c164 <two_over_pi>:
  40c164:	000000a2 000000f9 00000083 0000006e     ............n...
  40c174:	0000004e 00000044 00000015 00000029     N...D.......)...
  40c184:	000000fc 00000027 00000057 000000d1     ....'...W.......
  40c194:	000000f5 00000034 000000dd 000000c0     ....4...........
  40c1a4:	000000db 00000062 00000095 00000099     ....b...........
  40c1b4:	0000003c 00000043 00000090 00000041     <...C.......A...
  40c1c4:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  40c1d4:	000000de 000000bb 000000c5 00000061     ............a...
  40c1e4:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  40c1f4:	00000042 0000004d 000000d2 000000e0     B...M...........
  40c204:	00000006 00000049 0000002e 000000ea     ....I...........
  40c214:	00000009 000000d1 00000092 0000001c     ................
  40c224:	000000fe 0000001d 000000eb 0000001c     ................
  40c234:	000000b1 00000029 000000a7 0000003e     ....).......>...
  40c244:	000000e8 00000082 00000035 000000f5     ........5.......
  40c254:	0000002e 000000bb 00000044 00000084     ........D.......
  40c264:	000000e9 0000009c 00000070 00000026     ........p...&...
  40c274:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  40c284:	00000039 00000091 000000d6 00000039     9...........9...
  40c294:	00000083 00000053 00000039 000000f4     ....S...9.......
  40c2a4:	0000009c 00000084 0000005f 0000008b     ........_.......
  40c2b4:	000000bd 000000f9 00000028 0000003b     ........(...;...
  40c2c4:	0000001f 000000f8 00000097 000000ff     ................
  40c2d4:	000000de 00000005 00000098 0000000f     ................
  40c2e4:	000000ef 0000002f 00000011 0000008b     ..../...........
  40c2f4:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  40c304:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  40c314:	00000027 000000cb 00000009 000000b7     '...............
  40c324:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  40c334:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  40c344:	00000075 00000027 000000ba 000000c7     u...'...........
  40c354:	000000eb 000000e5 000000f1 0000007b     ............{...
  40c364:	0000003d 00000007 00000039 000000f7     =.......9.......
  40c374:	0000008a 00000052 00000092 000000ea     ....R...........
  40c384:	0000006b 000000fb 0000005f 000000b1     k......._.......
  40c394:	0000001f 0000008d 0000005d 00000008     ........].......
  40c3a4:	00000056 00000003 00000030 00000046     V.......0...F...
  40c3b4:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  40c3c4:	000000f0 000000cf 000000bc 00000020     ............ ...
  40c3d4:	0000009a 000000f4 00000036 0000001d     ........6.......
  40c3e4:	000000a9 000000e3 00000091 00000061     ............a...
  40c3f4:	0000005e 000000e6 0000001b 00000008     ^...............
  40c404:	00000065 00000099 00000085 0000005f     e..........._...
  40c414:	00000014 000000a0 00000068 00000040     ........h...@...
  40c424:	0000008d 000000ff 000000d8 00000080     ................
  40c434:	0000004d 00000073 00000027 00000031     M...s...'...1...
  40c444:	00000006 00000006 00000015 00000056     ............V...
  40c454:	000000ca 00000073 000000a8 000000c9     ....s...........
  40c464:	00000060 000000e2 0000007b 000000c0     `.......{.......
  40c474:	0000008c 0000006b                       ....k...

0040c47c <PIo2>:
  40c47c:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40c48c:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40c49c:	1fc40000 1bc60000 17440000              ..........D.

0040c4a8 <init_jk>:
  40c4a8:	00000004 00000007 00000009              ............

0040c4b4 <atanhi>:
  40c4b4:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0040c4c4 <atanlo>:
  40c4c4:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0040c4d4 <_global_impure_ptr>:
  40c4d4:	20400030 0000000a 00464e49 00666e69     0.@ ....INF.inf.
  40c4e4:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  40c4f4:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40c504:	37363534 62613938 66656463 00000000     456789abcdef....
  40c514:	6c756e28 0000296c 00000030              (null)..0...

0040c520 <blanks.7238>:
  40c520:	20202020 20202020 20202020 20202020                     

0040c530 <zeroes.7239>:
  40c530:	30303030 30303030 30303030 30303030     0000000000000000
  40c540:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040c550 <__mprec_bigtens>:
  40c550:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40c560:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40c570:	7f73bf3c 75154fdd                       <.s..O.u

0040c578 <__mprec_tens>:
  40c578:	00000000 3ff00000 00000000 40240000     .......?......$@
  40c588:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40c598:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40c5a8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40c5b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40c5c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40c5d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40c5e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40c5f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40c608:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40c618:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40c628:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40c638:	79d99db4 44ea7843                       ...yCx.D

0040c640 <p05.6055>:
  40c640:	00000005 00000019 0000007d 00000043     ........}...C...
  40c650:	49534f50 00000058 0000002e              POSIX.......

0040c65c <_ctype_>:
  40c65c:	20202000 20202020 28282020 20282828     .         ((((( 
  40c66c:	20202020 20202020 20202020 20202020                     
  40c67c:	10108820 10101010 10101010 10101010      ...............
  40c68c:	04040410 04040404 10040404 10101010     ................
  40c69c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40c6ac:	01010101 01010101 01010101 10101010     ................
  40c6bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40c6cc:	02020202 02020202 02020202 10101010     ................
  40c6dc:	00000020 00000000 00000000 00000000      ...............
	...

0040c760 <_init>:
  40c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c762:	bf00      	nop
  40c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c766:	bc08      	pop	{r3}
  40c768:	469e      	mov	lr, r3
  40c76a:	4770      	bx	lr

0040c76c <__init_array_start>:
  40c76c:	00408f41 	.word	0x00408f41

0040c770 <__frame_dummy_init_array_entry>:
  40c770:	00400165                                e.@.

0040c774 <_fini>:
  40c774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c776:	bf00      	nop
  40c778:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c77a:	bc08      	pop	{r3}
  40c77c:	469e      	mov	lr, r3
  40c77e:	4770      	bx	lr

0040c780 <__fini_array_start>:
  40c780:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 bcc0 0040 0706 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <__fdlib_version>:
20400024:	0001 0000                                   ....

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__malloc_av_>:
	...
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 

20400860 <__malloc_sbrk_base>:
20400860:	ffff ffff                                   ....

20400864 <__malloc_trim_threshold>:
20400864:	0000 0002                                   ....

20400868 <__atexit_recursive_mutex>:
20400868:	0e3c 2040                                   <.@ 

2040086c <__global_locale>:
2040086c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	b935 0040 b7d9 0040 0000 0000 c65c 0040     5.@...@.....\.@.
2040095c:	c658 0040 c028 0040 c028 0040 c028 0040     X.@.(.@.(.@.(.@.
2040096c:	c028 0040 c028 0040 c028 0040 c028 0040     (.@.(.@.(.@.(.@.
2040097c:	c028 0040 c028 0040 ffff ffff ffff ffff     (.@.(.@.........
2040098c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
