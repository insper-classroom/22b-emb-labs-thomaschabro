
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b98  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000088c  20400000  00403b98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000330  2040088c  00404424  0002088c  2**2
                  ALLOC
  3 .stack        00002004  20400bbc  00404754  0002088c  2**0
                  ALLOC
  4 .heap         00000200  20402bc0  00406758  0002088c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208ba  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c5cc  00000000  00000000  00020913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004056  00000000  00000000  0003cedf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006ac0  00000000  00000000  00040f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c58  00000000  00000000  000479f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c60  00000000  00000000  0004864d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a80a  00000000  00000000  000492ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011b01  00000000  00000000  00053ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000910b6  00000000  00000000  000655b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023c4  00000000  00000000  000f6670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2b 40 20 91 10 40 00 8d 10 40 00 8d 10 40 00     .+@ ..@...@...@.
  400010:	8d 10 40 00 8d 10 40 00 8d 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	8d 10 40 00 8d 10 40 00 00 00 00 00 8d 10 40 00     ..@...@.......@.
  40003c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40004c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40005c:	8d 10 40 00 8d 10 40 00 00 00 00 00 b5 0e 40 00     ..@...@.......@.
  40006c:	c9 0e 40 00 dd 0e 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40007c:	8d 10 40 00 f1 0e 40 00 05 0f 40 00 8d 10 40 00     ..@...@...@...@.
  40008c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40009c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000ac:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000bc:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000cc:	8d 10 40 00 00 00 00 00 8d 10 40 00 00 00 00 00     ..@.......@.....
  4000dc:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000ec:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000fc:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40010c:	8d 10 40 00 8d 10 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ......@...@...@.
  40012c:	8d 10 40 00 8d 10 40 00 00 00 00 00 8d 10 40 00     ..@...@.......@.
  40013c:	8d 10 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040088c 	.word	0x2040088c
  40015c:	00000000 	.word	0x00000000
  400160:	00403b98 	.word	0x00403b98

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00403b98 	.word	0x00403b98
  4001a0:	20400890 	.word	0x20400890
  4001a4:	00403b98 	.word	0x00403b98
  4001a8:	00000000 	.word	0x00000000

004001ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001b0:	b980      	cbnz	r0, 4001d4 <_read+0x28>
  4001b2:	460c      	mov	r4, r1
  4001b4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001b6:	2a00      	cmp	r2, #0
  4001b8:	dd0f      	ble.n	4001da <_read+0x2e>
  4001ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001bc:	4e08      	ldr	r6, [pc, #32]	; (4001e0 <_read+0x34>)
  4001be:	4d09      	ldr	r5, [pc, #36]	; (4001e4 <_read+0x38>)
  4001c0:	6830      	ldr	r0, [r6, #0]
  4001c2:	4621      	mov	r1, r4
  4001c4:	682b      	ldr	r3, [r5, #0]
  4001c6:	4798      	blx	r3
		ptr++;
  4001c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ca:	42bc      	cmp	r4, r7
  4001cc:	d1f8      	bne.n	4001c0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ce:	4640      	mov	r0, r8
  4001d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001d4:	f04f 38ff 	mov.w	r8, #4294967295
  4001d8:	e7f9      	b.n	4001ce <_read+0x22>
	for (; len > 0; --len) {
  4001da:	4680      	mov	r8, r0
  4001dc:	e7f7      	b.n	4001ce <_read+0x22>
  4001de:	bf00      	nop
  4001e0:	20400b68 	.word	0x20400b68
  4001e4:	20400b60 	.word	0x20400b60

004001e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001e8:	3801      	subs	r0, #1
  4001ea:	2802      	cmp	r0, #2
  4001ec:	d815      	bhi.n	40021a <_write+0x32>
{
  4001ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f2:	460e      	mov	r6, r1
  4001f4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001f6:	b19a      	cbz	r2, 400220 <_write+0x38>
  4001f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400234 <_write+0x4c>
  4001fe:	4f0c      	ldr	r7, [pc, #48]	; (400230 <_write+0x48>)
  400200:	f8d8 0000 	ldr.w	r0, [r8]
  400204:	f815 1b01 	ldrb.w	r1, [r5], #1
  400208:	683b      	ldr	r3, [r7, #0]
  40020a:	4798      	blx	r3
  40020c:	2800      	cmp	r0, #0
  40020e:	db0a      	blt.n	400226 <_write+0x3e>
  400210:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400212:	3c01      	subs	r4, #1
  400214:	d1f4      	bne.n	400200 <_write+0x18>
  400216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40021a:	f04f 30ff 	mov.w	r0, #4294967295
  40021e:	4770      	bx	lr
	for (; len != 0; --len) {
  400220:	4610      	mov	r0, r2
  400222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400226:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40022e:	bf00      	nop
  400230:	20400b64 	.word	0x20400b64
  400234:	20400b68 	.word	0x20400b68

00400238 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400238:	4b03      	ldr	r3, [pc, #12]	; (400248 <rtt_init+0x10>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400240:	4319      	orrs	r1, r3
  400242:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400244:	2000      	movs	r0, #0
  400246:	4770      	bx	lr
  400248:	204008a8 	.word	0x204008a8

0040024c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40024c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40024e:	6883      	ldr	r3, [r0, #8]
  400250:	429a      	cmp	r2, r3
  400252:	d003      	beq.n	40025c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400254:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  400256:	6883      	ldr	r3, [r0, #8]
  400258:	4293      	cmp	r3, r2
  40025a:	d1fb      	bne.n	400254 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  40025c:	4618      	mov	r0, r3
  40025e:	4770      	bx	lr

00400260 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400260:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400262:	4b07      	ldr	r3, [pc, #28]	; (400280 <spi_enable_clock+0x20>)
  400264:	4298      	cmp	r0, r3
  400266:	d003      	beq.n	400270 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400268:	4b06      	ldr	r3, [pc, #24]	; (400284 <spi_enable_clock+0x24>)
  40026a:	4298      	cmp	r0, r3
  40026c:	d004      	beq.n	400278 <spi_enable_clock+0x18>
  40026e:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400270:	2015      	movs	r0, #21
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <spi_enable_clock+0x28>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	202a      	movs	r0, #42	; 0x2a
  40027a:	4b03      	ldr	r3, [pc, #12]	; (400288 <spi_enable_clock+0x28>)
  40027c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40027e:	e7f6      	b.n	40026e <spi_enable_clock+0xe>
  400280:	40008000 	.word	0x40008000
  400284:	40058000 	.word	0x40058000
  400288:	00401039 	.word	0x00401039

0040028c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40028c:	6843      	ldr	r3, [r0, #4]
  40028e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400292:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400294:	6843      	ldr	r3, [r0, #4]
  400296:	0409      	lsls	r1, r1, #16
  400298:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40029c:	4319      	orrs	r1, r3
  40029e:	6041      	str	r1, [r0, #4]
  4002a0:	4770      	bx	lr

004002a2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002a2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002a4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002a8:	6905      	ldr	r5, [r0, #16]
  4002aa:	f015 0f02 	tst.w	r5, #2
  4002ae:	d103      	bne.n	4002b8 <spi_write+0x16>
		if (!timeout--) {
  4002b0:	3c01      	subs	r4, #1
  4002b2:	d1f9      	bne.n	4002a8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002b4:	2001      	movs	r0, #1
  4002b6:	e00c      	b.n	4002d2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002b8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002ba:	f014 0f02 	tst.w	r4, #2
  4002be:	d006      	beq.n	4002ce <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002c0:	0412      	lsls	r2, r2, #16
  4002c2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002c6:	4311      	orrs	r1, r2
		if (uc_last) {
  4002c8:	b10b      	cbz	r3, 4002ce <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002ca:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002ce:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002d0:	2000      	movs	r0, #0
}
  4002d2:	bc30      	pop	{r4, r5}
  4002d4:	4770      	bx	lr

004002d6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002d6:	b932      	cbnz	r2, 4002e6 <spi_set_clock_polarity+0x10>
  4002d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002de:	f023 0301 	bic.w	r3, r3, #1
  4002e2:	6303      	str	r3, [r0, #48]	; 0x30
  4002e4:	4770      	bx	lr
  4002e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ec:	f043 0301 	orr.w	r3, r3, #1
  4002f0:	6303      	str	r3, [r0, #48]	; 0x30
  4002f2:	4770      	bx	lr

004002f4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4002f4:	b932      	cbnz	r2, 400304 <spi_set_clock_phase+0x10>
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f023 0302 	bic.w	r3, r3, #2
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr
  400304:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400308:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030a:	f043 0302 	orr.w	r3, r3, #2
  40030e:	6303      	str	r3, [r0, #48]	; 0x30
  400310:	4770      	bx	lr

00400312 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400312:	2a04      	cmp	r2, #4
  400314:	d003      	beq.n	40031e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400316:	b16a      	cbz	r2, 400334 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400318:	2a08      	cmp	r2, #8
  40031a:	d016      	beq.n	40034a <spi_configure_cs_behavior+0x38>
  40031c:	4770      	bx	lr
  40031e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400322:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400324:	f023 0308 	bic.w	r3, r3, #8
  400328:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40032a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40032c:	f043 0304 	orr.w	r3, r3, #4
  400330:	6303      	str	r3, [r0, #48]	; 0x30
  400332:	4770      	bx	lr
  400334:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400338:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033a:	f023 0308 	bic.w	r3, r3, #8
  40033e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400340:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400342:	f023 0304 	bic.w	r3, r3, #4
  400346:	6303      	str	r3, [r0, #48]	; 0x30
  400348:	4770      	bx	lr
  40034a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40034e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400350:	f043 0308 	orr.w	r3, r3, #8
  400354:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400356:	e7e1      	b.n	40031c <spi_configure_cs_behavior+0xa>

00400358 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400358:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40035c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40035e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400362:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400364:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400366:	431a      	orrs	r2, r3
  400368:	630a      	str	r2, [r1, #48]	; 0x30
  40036a:	4770      	bx	lr

0040036c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40036c:	1e43      	subs	r3, r0, #1
  40036e:	4419      	add	r1, r3
  400370:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400374:	1e43      	subs	r3, r0, #1
  400376:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400378:	bf94      	ite	ls
  40037a:	b200      	sxthls	r0, r0
		return -1;
  40037c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400380:	4770      	bx	lr

00400382 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400382:	b17a      	cbz	r2, 4003a4 <spi_set_baudrate_div+0x22>
{
  400384:	b410      	push	{r4}
  400386:	4614      	mov	r4, r2
  400388:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40038c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40038e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400392:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400394:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400396:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40039a:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40039c:	2000      	movs	r0, #0
}
  40039e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003a2:	4770      	bx	lr
        return -1;
  4003a4:	f04f 30ff 	mov.w	r0, #4294967295
  4003a8:	4770      	bx	lr

004003aa <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4003aa:	6943      	ldr	r3, [r0, #20]
  4003ac:	f013 0f02 	tst.w	r3, #2
  4003b0:	d002      	beq.n	4003b8 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4003b2:	61c1      	str	r1, [r0, #28]
	return 0;
  4003b4:	2000      	movs	r0, #0
  4003b6:	4770      	bx	lr
		return 1;
  4003b8:	2001      	movs	r0, #1
}
  4003ba:	4770      	bx	lr

004003bc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4003bc:	6943      	ldr	r3, [r0, #20]
  4003be:	f013 0f01 	tst.w	r3, #1
  4003c2:	d003      	beq.n	4003cc <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4003c4:	6983      	ldr	r3, [r0, #24]
  4003c6:	700b      	strb	r3, [r1, #0]
	return 0;
  4003c8:	2000      	movs	r0, #0
  4003ca:	4770      	bx	lr
		return 1;
  4003cc:	2001      	movs	r0, #1
}
  4003ce:	4770      	bx	lr

004003d0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4003d0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4003d2:	010b      	lsls	r3, r1, #4
  4003d4:	4293      	cmp	r3, r2
  4003d6:	d914      	bls.n	400402 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4003d8:	00c9      	lsls	r1, r1, #3
  4003da:	084b      	lsrs	r3, r1, #1
  4003dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4003e0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4003e4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4003e6:	1e5c      	subs	r4, r3, #1
  4003e8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4003ec:	428c      	cmp	r4, r1
  4003ee:	d901      	bls.n	4003f4 <usart_set_async_baudrate+0x24>
		return 1;
  4003f0:	2001      	movs	r0, #1
  4003f2:	e017      	b.n	400424 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4003f4:	6841      	ldr	r1, [r0, #4]
  4003f6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4003fa:	6041      	str	r1, [r0, #4]
  4003fc:	e00c      	b.n	400418 <usart_set_async_baudrate+0x48>
		return 1;
  4003fe:	2001      	movs	r0, #1
  400400:	e010      	b.n	400424 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400402:	0859      	lsrs	r1, r3, #1
  400404:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400408:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40040c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40040e:	1e5c      	subs	r4, r3, #1
  400410:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400414:	428c      	cmp	r4, r1
  400416:	d8f2      	bhi.n	4003fe <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400418:	0412      	lsls	r2, r2, #16
  40041a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40041e:	431a      	orrs	r2, r3
  400420:	6202      	str	r2, [r0, #32]

	return 0;
  400422:	2000      	movs	r0, #0
}
  400424:	f85d 4b04 	ldr.w	r4, [sp], #4
  400428:	4770      	bx	lr
	...

0040042c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40042c:	4b08      	ldr	r3, [pc, #32]	; (400450 <usart_reset+0x24>)
  40042e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400432:	2300      	movs	r3, #0
  400434:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400436:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400438:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40043a:	2388      	movs	r3, #136	; 0x88
  40043c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40043e:	2324      	movs	r3, #36	; 0x24
  400440:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400442:	f44f 7380 	mov.w	r3, #256	; 0x100
  400446:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40044c:	6003      	str	r3, [r0, #0]
  40044e:	4770      	bx	lr
  400450:	55534100 	.word	0x55534100

00400454 <usart_init_rs232>:
{
  400454:	b570      	push	{r4, r5, r6, lr}
  400456:	4605      	mov	r5, r0
  400458:	460c      	mov	r4, r1
  40045a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40045c:	4b0f      	ldr	r3, [pc, #60]	; (40049c <usart_init_rs232+0x48>)
  40045e:	4798      	blx	r3
	ul_reg_val = 0;
  400460:	2200      	movs	r2, #0
  400462:	4b0f      	ldr	r3, [pc, #60]	; (4004a0 <usart_init_rs232+0x4c>)
  400464:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400466:	b1a4      	cbz	r4, 400492 <usart_init_rs232+0x3e>
  400468:	4632      	mov	r2, r6
  40046a:	6821      	ldr	r1, [r4, #0]
  40046c:	4628      	mov	r0, r5
  40046e:	4b0d      	ldr	r3, [pc, #52]	; (4004a4 <usart_init_rs232+0x50>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	b978      	cbnz	r0, 400496 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400476:	6863      	ldr	r3, [r4, #4]
  400478:	68a1      	ldr	r1, [r4, #8]
  40047a:	430b      	orrs	r3, r1
  40047c:	6921      	ldr	r1, [r4, #16]
  40047e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400480:	68e1      	ldr	r1, [r4, #12]
  400482:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400484:	4906      	ldr	r1, [pc, #24]	; (4004a0 <usart_init_rs232+0x4c>)
  400486:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400488:	6869      	ldr	r1, [r5, #4]
  40048a:	430b      	orrs	r3, r1
  40048c:	606b      	str	r3, [r5, #4]
}
  40048e:	4610      	mov	r0, r2
  400490:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400492:	2201      	movs	r2, #1
  400494:	e7fb      	b.n	40048e <usart_init_rs232+0x3a>
  400496:	2201      	movs	r2, #1
  400498:	e7f9      	b.n	40048e <usart_init_rs232+0x3a>
  40049a:	bf00      	nop
  40049c:	0040042d 	.word	0x0040042d
  4004a0:	204008ac 	.word	0x204008ac
  4004a4:	004003d1 	.word	0x004003d1

004004a8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4004a8:	2340      	movs	r3, #64	; 0x40
  4004aa:	6003      	str	r3, [r0, #0]
  4004ac:	4770      	bx	lr

004004ae <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4004ae:	2310      	movs	r3, #16
  4004b0:	6003      	str	r3, [r0, #0]
  4004b2:	4770      	bx	lr

004004b4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4004b4:	6943      	ldr	r3, [r0, #20]
  4004b6:	f013 0f02 	tst.w	r3, #2
  4004ba:	d004      	beq.n	4004c6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4004bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4004c0:	61c1      	str	r1, [r0, #28]
	return 0;
  4004c2:	2000      	movs	r0, #0
  4004c4:	4770      	bx	lr
		return 1;
  4004c6:	2001      	movs	r0, #1
}
  4004c8:	4770      	bx	lr

004004ca <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4004ca:	6943      	ldr	r3, [r0, #20]
  4004cc:	f013 0f01 	tst.w	r3, #1
  4004d0:	d005      	beq.n	4004de <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4004d2:	6983      	ldr	r3, [r0, #24]
  4004d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4004d8:	600b      	str	r3, [r1, #0]
	return 0;
  4004da:	2000      	movs	r0, #0
  4004dc:	4770      	bx	lr
		return 1;
  4004de:	2001      	movs	r0, #1
}
  4004e0:	4770      	bx	lr
	...

004004e4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4004e4:	4b01      	ldr	r3, [pc, #4]	; (4004ec <gfx_mono_set_framebuffer+0x8>)
  4004e6:	6018      	str	r0, [r3, #0]
  4004e8:	4770      	bx	lr
  4004ea:	bf00      	nop
  4004ec:	204008b0 	.word	0x204008b0

004004f0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4004f0:	4b02      	ldr	r3, [pc, #8]	; (4004fc <gfx_mono_framebuffer_put_byte+0xc>)
  4004f2:	681b      	ldr	r3, [r3, #0]
  4004f4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4004f8:	5442      	strb	r2, [r0, r1]
  4004fa:	4770      	bx	lr
  4004fc:	204008b0 	.word	0x204008b0

00400500 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400500:	4b02      	ldr	r3, [pc, #8]	; (40050c <gfx_mono_framebuffer_get_byte+0xc>)
  400502:	681b      	ldr	r3, [r3, #0]
  400504:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400508:	5c40      	ldrb	r0, [r0, r1]
  40050a:	4770      	bx	lr
  40050c:	204008b0 	.word	0x204008b0

00400510 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400514:	1884      	adds	r4, r0, r2
  400516:	2c80      	cmp	r4, #128	; 0x80
  400518:	dd02      	ble.n	400520 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40051a:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40051e:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400520:	b322      	cbz	r2, 40056c <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400522:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400524:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400528:	2601      	movs	r6, #1
  40052a:	fa06 f101 	lsl.w	r1, r6, r1
  40052e:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400530:	2b01      	cmp	r3, #1
  400532:	d01d      	beq.n	400570 <gfx_mono_generic_draw_horizontal_line+0x60>
  400534:	2b00      	cmp	r3, #0
  400536:	d035      	beq.n	4005a4 <gfx_mono_generic_draw_horizontal_line+0x94>
  400538:	2b02      	cmp	r3, #2
  40053a:	d117      	bne.n	40056c <gfx_mono_generic_draw_horizontal_line+0x5c>
  40053c:	3801      	subs	r0, #1
  40053e:	b2c7      	uxtb	r7, r0
  400540:	19d4      	adds	r4, r2, r7
  400542:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400544:	f8df a090 	ldr.w	sl, [pc, #144]	; 4005d8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400548:	f04f 0900 	mov.w	r9, #0
  40054c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4005dc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400550:	4621      	mov	r1, r4
  400552:	4628      	mov	r0, r5
  400554:	47d0      	blx	sl
			temp ^= pixelmask;
  400556:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40055a:	464b      	mov	r3, r9
  40055c:	b2d2      	uxtb	r2, r2
  40055e:	4621      	mov	r1, r4
  400560:	4628      	mov	r0, r5
  400562:	47c0      	blx	r8
  400564:	3c01      	subs	r4, #1
  400566:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400568:	42bc      	cmp	r4, r7
  40056a:	d1f1      	bne.n	400550 <gfx_mono_generic_draw_horizontal_line+0x40>
  40056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400570:	3801      	subs	r0, #1
  400572:	b2c7      	uxtb	r7, r0
  400574:	19d4      	adds	r4, r2, r7
  400576:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400578:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4005d8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  40057c:	f04f 0900 	mov.w	r9, #0
  400580:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4005dc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400584:	4621      	mov	r1, r4
  400586:	4628      	mov	r0, r5
  400588:	47d0      	blx	sl
			temp |= pixelmask;
  40058a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40058e:	464b      	mov	r3, r9
  400590:	b2d2      	uxtb	r2, r2
  400592:	4621      	mov	r1, r4
  400594:	4628      	mov	r0, r5
  400596:	47c0      	blx	r8
  400598:	3c01      	subs	r4, #1
  40059a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40059c:	42bc      	cmp	r4, r7
  40059e:	d1f1      	bne.n	400584 <gfx_mono_generic_draw_horizontal_line+0x74>
  4005a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005a4:	3801      	subs	r0, #1
  4005a6:	b2c7      	uxtb	r7, r0
  4005a8:	19d4      	adds	r4, r2, r7
  4005aa:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4005ac:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4005d8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4005b0:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4005b2:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4005dc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4005b6:	4621      	mov	r1, r4
  4005b8:	4628      	mov	r0, r5
  4005ba:	47c0      	blx	r8
			temp &= ~pixelmask;
  4005bc:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4005c0:	2300      	movs	r3, #0
  4005c2:	b2d2      	uxtb	r2, r2
  4005c4:	4621      	mov	r1, r4
  4005c6:	4628      	mov	r0, r5
  4005c8:	47c8      	blx	r9
  4005ca:	3c01      	subs	r4, #1
  4005cc:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4005ce:	42bc      	cmp	r4, r7
  4005d0:	d1f1      	bne.n	4005b6 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005d6:	bf00      	nop
  4005d8:	00400811 	.word	0x00400811
  4005dc:	0040070d 	.word	0x0040070d

004005e0 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4005e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005e4:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4005e8:	b18b      	cbz	r3, 40060e <gfx_mono_generic_draw_filled_rect+0x2e>
  4005ea:	461c      	mov	r4, r3
  4005ec:	4690      	mov	r8, r2
  4005ee:	4606      	mov	r6, r0
  4005f0:	1e4d      	subs	r5, r1, #1
  4005f2:	b2ed      	uxtb	r5, r5
  4005f4:	442c      	add	r4, r5
  4005f6:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4005f8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400614 <gfx_mono_generic_draw_filled_rect+0x34>
  4005fc:	463b      	mov	r3, r7
  4005fe:	4642      	mov	r2, r8
  400600:	4621      	mov	r1, r4
  400602:	4630      	mov	r0, r6
  400604:	47c8      	blx	r9
  400606:	3c01      	subs	r4, #1
  400608:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40060a:	42ac      	cmp	r4, r5
  40060c:	d1f6      	bne.n	4005fc <gfx_mono_generic_draw_filled_rect+0x1c>
  40060e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400612:	bf00      	nop
  400614:	00400511 	.word	0x00400511

00400618 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40061c:	b083      	sub	sp, #12
  40061e:	4604      	mov	r4, r0
  400620:	4688      	mov	r8, r1
  400622:	4691      	mov	r9, r2
  400624:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400626:	7a5b      	ldrb	r3, [r3, #9]
  400628:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40062c:	2100      	movs	r1, #0
  40062e:	9100      	str	r1, [sp, #0]
  400630:	4649      	mov	r1, r9
  400632:	4640      	mov	r0, r8
  400634:	4d21      	ldr	r5, [pc, #132]	; (4006bc <gfx_mono_draw_char+0xa4>)
  400636:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400638:	f89b 3000 	ldrb.w	r3, [fp]
  40063c:	b113      	cbz	r3, 400644 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40063e:	b003      	add	sp, #12
  400640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400644:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400648:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40064a:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40064e:	bf18      	it	ne
  400650:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400652:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400656:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40065a:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40065c:	fb17 f70a 	smulbb	r7, r7, sl
  400660:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400664:	f8db 3004 	ldr.w	r3, [fp, #4]
  400668:	fa13 f787 	uxtah	r7, r3, r7
  40066c:	e01f      	b.n	4006ae <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40066e:	0064      	lsls	r4, r4, #1
  400670:	b2e4      	uxtb	r4, r4
  400672:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400674:	b2eb      	uxtb	r3, r5
  400676:	429e      	cmp	r6, r3
  400678:	d910      	bls.n	40069c <gfx_mono_draw_char+0x84>
  40067a:	b2eb      	uxtb	r3, r5
  40067c:	eb08 0003 	add.w	r0, r8, r3
  400680:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400682:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400686:	bf08      	it	eq
  400688:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  40068c:	f014 0f80 	tst.w	r4, #128	; 0x80
  400690:	d0ed      	beq.n	40066e <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400692:	2201      	movs	r2, #1
  400694:	4649      	mov	r1, r9
  400696:	4b0a      	ldr	r3, [pc, #40]	; (4006c0 <gfx_mono_draw_char+0xa8>)
  400698:	4798      	blx	r3
  40069a:	e7e8      	b.n	40066e <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40069c:	f109 0901 	add.w	r9, r9, #1
  4006a0:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4006a4:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4006a8:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4006ac:	d0c7      	beq.n	40063e <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4006ae:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4006b2:	2e00      	cmp	r6, #0
  4006b4:	d0f2      	beq.n	40069c <gfx_mono_draw_char+0x84>
  4006b6:	2500      	movs	r5, #0
  4006b8:	462c      	mov	r4, r5
  4006ba:	e7de      	b.n	40067a <gfx_mono_draw_char+0x62>
  4006bc:	004005e1 	.word	0x004005e1
  4006c0:	004007ad 	.word	0x004007ad

004006c4 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4006c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006c8:	4604      	mov	r4, r0
  4006ca:	4690      	mov	r8, r2
  4006cc:	461d      	mov	r5, r3
  4006ce:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4006d0:	4f0d      	ldr	r7, [pc, #52]	; (400708 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4006d2:	460e      	mov	r6, r1
  4006d4:	e008      	b.n	4006e8 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4006d6:	7a6a      	ldrb	r2, [r5, #9]
  4006d8:	3201      	adds	r2, #1
  4006da:	4442      	add	r2, r8
  4006dc:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4006e0:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4006e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4006e6:	b16b      	cbz	r3, 400704 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4006e8:	7820      	ldrb	r0, [r4, #0]
  4006ea:	280a      	cmp	r0, #10
  4006ec:	d0f3      	beq.n	4006d6 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4006ee:	280d      	cmp	r0, #13
  4006f0:	d0f7      	beq.n	4006e2 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4006f2:	462b      	mov	r3, r5
  4006f4:	4642      	mov	r2, r8
  4006f6:	4649      	mov	r1, r9
  4006f8:	47b8      	blx	r7
			x += font->width;
  4006fa:	7a2b      	ldrb	r3, [r5, #8]
  4006fc:	4499      	add	r9, r3
  4006fe:	fa5f f989 	uxtb.w	r9, r9
  400702:	e7ee      	b.n	4006e2 <gfx_mono_draw_string+0x1e>
}
  400704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400708:	00400619 	.word	0x00400619

0040070c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  40070c:	b570      	push	{r4, r5, r6, lr}
  40070e:	4604      	mov	r4, r0
  400710:	460d      	mov	r5, r1
  400712:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400714:	b91b      	cbnz	r3, 40071e <gfx_mono_ssd1306_put_byte+0x12>
  400716:	4b0d      	ldr	r3, [pc, #52]	; (40074c <gfx_mono_ssd1306_put_byte+0x40>)
  400718:	4798      	blx	r3
  40071a:	42b0      	cmp	r0, r6
  40071c:	d015      	beq.n	40074a <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40071e:	4632      	mov	r2, r6
  400720:	4629      	mov	r1, r5
  400722:	4620      	mov	r0, r4
  400724:	4b0a      	ldr	r3, [pc, #40]	; (400750 <gfx_mono_ssd1306_put_byte+0x44>)
  400726:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400728:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40072c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400730:	4c08      	ldr	r4, [pc, #32]	; (400754 <gfx_mono_ssd1306_put_byte+0x48>)
  400732:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400734:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400738:	f040 0010 	orr.w	r0, r0, #16
  40073c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40073e:	f005 000f 	and.w	r0, r5, #15
  400742:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400744:	4630      	mov	r0, r6
  400746:	4b04      	ldr	r3, [pc, #16]	; (400758 <gfx_mono_ssd1306_put_byte+0x4c>)
  400748:	4798      	blx	r3
  40074a:	bd70      	pop	{r4, r5, r6, pc}
  40074c:	00400501 	.word	0x00400501
  400750:	004004f1 	.word	0x004004f1
  400754:	0040081d 	.word	0x0040081d
  400758:	00400a3d 	.word	0x00400a3d

0040075c <gfx_mono_ssd1306_init>:
{
  40075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400760:	480d      	ldr	r0, [pc, #52]	; (400798 <gfx_mono_ssd1306_init+0x3c>)
  400762:	4b0e      	ldr	r3, [pc, #56]	; (40079c <gfx_mono_ssd1306_init+0x40>)
  400764:	4798      	blx	r3
	ssd1306_init();
  400766:	4b0e      	ldr	r3, [pc, #56]	; (4007a0 <gfx_mono_ssd1306_init+0x44>)
  400768:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40076a:	2040      	movs	r0, #64	; 0x40
  40076c:	4b0d      	ldr	r3, [pc, #52]	; (4007a4 <gfx_mono_ssd1306_init+0x48>)
  40076e:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400770:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400772:	f04f 0801 	mov.w	r8, #1
  400776:	462f      	mov	r7, r5
  400778:	4e0b      	ldr	r6, [pc, #44]	; (4007a8 <gfx_mono_ssd1306_init+0x4c>)
{
  40077a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40077c:	4643      	mov	r3, r8
  40077e:	463a      	mov	r2, r7
  400780:	b2e1      	uxtb	r1, r4
  400782:	4628      	mov	r0, r5
  400784:	47b0      	blx	r6
  400786:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400788:	2c80      	cmp	r4, #128	; 0x80
  40078a:	d1f7      	bne.n	40077c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40078c:	3501      	adds	r5, #1
  40078e:	b2ed      	uxtb	r5, r5
  400790:	2d04      	cmp	r5, #4
  400792:	d1f2      	bne.n	40077a <gfx_mono_ssd1306_init+0x1e>
  400794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400798:	204008b4 	.word	0x204008b4
  40079c:	004004e5 	.word	0x004004e5
  4007a0:	0040085d 	.word	0x0040085d
  4007a4:	0040081d 	.word	0x0040081d
  4007a8:	0040070d 	.word	0x0040070d

004007ac <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4007ac:	09c3      	lsrs	r3, r0, #7
  4007ae:	d12a      	bne.n	400806 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4007b0:	291f      	cmp	r1, #31
  4007b2:	d828      	bhi.n	400806 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4007b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007b8:	4614      	mov	r4, r2
  4007ba:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4007bc:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4007be:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4007c2:	2201      	movs	r2, #1
  4007c4:	fa02 f701 	lsl.w	r7, r2, r1
  4007c8:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4007cc:	4601      	mov	r1, r0
  4007ce:	4630      	mov	r0, r6
  4007d0:	4b0d      	ldr	r3, [pc, #52]	; (400808 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4007d2:	4798      	blx	r3
  4007d4:	4602      	mov	r2, r0
	switch (color) {
  4007d6:	2c01      	cmp	r4, #1
  4007d8:	d009      	beq.n	4007ee <gfx_mono_ssd1306_draw_pixel+0x42>
  4007da:	b164      	cbz	r4, 4007f6 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4007dc:	2c02      	cmp	r4, #2
  4007de:	d00e      	beq.n	4007fe <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4007e0:	2300      	movs	r3, #0
  4007e2:	4629      	mov	r1, r5
  4007e4:	4630      	mov	r0, r6
  4007e6:	4c09      	ldr	r4, [pc, #36]	; (40080c <gfx_mono_ssd1306_draw_pixel+0x60>)
  4007e8:	47a0      	blx	r4
  4007ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4007ee:	ea48 0200 	orr.w	r2, r8, r0
  4007f2:	b2d2      	uxtb	r2, r2
		break;
  4007f4:	e7f4      	b.n	4007e0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4007f6:	ea20 0207 	bic.w	r2, r0, r7
  4007fa:	b2d2      	uxtb	r2, r2
		break;
  4007fc:	e7f0      	b.n	4007e0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4007fe:	ea88 0200 	eor.w	r2, r8, r0
  400802:	b2d2      	uxtb	r2, r2
		break;
  400804:	e7ec      	b.n	4007e0 <gfx_mono_ssd1306_draw_pixel+0x34>
  400806:	4770      	bx	lr
  400808:	00400501 	.word	0x00400501
  40080c:	0040070d 	.word	0x0040070d

00400810 <gfx_mono_ssd1306_get_byte>:
{
  400810:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400812:	4b01      	ldr	r3, [pc, #4]	; (400818 <gfx_mono_ssd1306_get_byte+0x8>)
  400814:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400816:	bd08      	pop	{r3, pc}
  400818:	00400501 	.word	0x00400501

0040081c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  40081c:	b538      	push	{r3, r4, r5, lr}
  40081e:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400820:	2208      	movs	r2, #8
  400822:	4b09      	ldr	r3, [pc, #36]	; (400848 <ssd1306_write_command+0x2c>)
  400824:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400826:	4c09      	ldr	r4, [pc, #36]	; (40084c <ssd1306_write_command+0x30>)
  400828:	2101      	movs	r1, #1
  40082a:	4620      	mov	r0, r4
  40082c:	4b08      	ldr	r3, [pc, #32]	; (400850 <ssd1306_write_command+0x34>)
  40082e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400830:	2301      	movs	r3, #1
  400832:	461a      	mov	r2, r3
  400834:	4629      	mov	r1, r5
  400836:	4620      	mov	r0, r4
  400838:	4c06      	ldr	r4, [pc, #24]	; (400854 <ssd1306_write_command+0x38>)
  40083a:	47a0      	blx	r4
	delay_us(10);
  40083c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400840:	4b05      	ldr	r3, [pc, #20]	; (400858 <ssd1306_write_command+0x3c>)
  400842:	4798      	blx	r3
  400844:	bd38      	pop	{r3, r4, r5, pc}
  400846:	bf00      	nop
  400848:	400e1000 	.word	0x400e1000
  40084c:	40008000 	.word	0x40008000
  400850:	0040028d 	.word	0x0040028d
  400854:	004002a3 	.word	0x004002a3
  400858:	20400001 	.word	0x20400001

0040085c <ssd1306_init>:
{
  40085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400860:	4d66      	ldr	r5, [pc, #408]	; (4009fc <ssd1306_init+0x1a0>)
  400862:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400866:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400868:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40086c:	4b64      	ldr	r3, [pc, #400]	; (400a00 <ssd1306_init+0x1a4>)
  40086e:	2708      	movs	r7, #8
  400870:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400872:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400876:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400878:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40087c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40087e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400880:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400884:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400886:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40088a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40088c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40088e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400892:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400894:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400896:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40089a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40089c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40089e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4008a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008a4:	f022 0208 	bic.w	r2, r2, #8
  4008a8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008ac:	f022 0208 	bic.w	r2, r2, #8
  4008b0:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4008b2:	601f      	str	r7, [r3, #0]
  4008b4:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008b6:	631f      	str	r7, [r3, #48]	; 0x30
  4008b8:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4008ba:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400a38 <ssd1306_init+0x1dc>
  4008be:	2300      	movs	r3, #0
  4008c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4008c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008c8:	4640      	mov	r0, r8
  4008ca:	4c4e      	ldr	r4, [pc, #312]	; (400a04 <ssd1306_init+0x1a8>)
  4008cc:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4008ce:	2300      	movs	r3, #0
  4008d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4008d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008d8:	4640      	mov	r0, r8
  4008da:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4008dc:	2300      	movs	r3, #0
  4008de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4008e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008e6:	4640      	mov	r0, r8
  4008e8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4008ea:	2300      	movs	r3, #0
  4008ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4008f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008f4:	4640      	mov	r0, r8
  4008f6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4008f8:	2300      	movs	r3, #0
  4008fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4008fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400902:	4640      	mov	r0, r8
  400904:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400906:	2300      	movs	r3, #0
  400908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40090c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400910:	4640      	mov	r0, r8
  400912:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400914:	4c3c      	ldr	r4, [pc, #240]	; (400a08 <ssd1306_init+0x1ac>)
  400916:	f04f 0902 	mov.w	r9, #2
  40091a:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40091e:	f04f 0880 	mov.w	r8, #128	; 0x80
  400922:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400926:	6863      	ldr	r3, [r4, #4]
  400928:	f043 0301 	orr.w	r3, r3, #1
  40092c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  40092e:	463a      	mov	r2, r7
  400930:	2101      	movs	r1, #1
  400932:	4620      	mov	r0, r4
  400934:	4b35      	ldr	r3, [pc, #212]	; (400a0c <ssd1306_init+0x1b0>)
  400936:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400938:	2200      	movs	r2, #0
  40093a:	2101      	movs	r1, #1
  40093c:	4620      	mov	r0, r4
  40093e:	4b34      	ldr	r3, [pc, #208]	; (400a10 <ssd1306_init+0x1b4>)
  400940:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400942:	2200      	movs	r2, #0
  400944:	2101      	movs	r1, #1
  400946:	4620      	mov	r0, r4
  400948:	4b32      	ldr	r3, [pc, #200]	; (400a14 <ssd1306_init+0x1b8>)
  40094a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40094c:	6863      	ldr	r3, [r4, #4]
  40094e:	f023 0302 	bic.w	r3, r3, #2
  400952:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400954:	2200      	movs	r2, #0
  400956:	2101      	movs	r1, #1
  400958:	4620      	mov	r0, r4
  40095a:	4b2f      	ldr	r3, [pc, #188]	; (400a18 <ssd1306_init+0x1bc>)
  40095c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40095e:	6863      	ldr	r3, [r4, #4]
  400960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400964:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400966:	6863      	ldr	r3, [r4, #4]
  400968:	f043 0310 	orr.w	r3, r3, #16
  40096c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40096e:	492b      	ldr	r1, [pc, #172]	; (400a1c <ssd1306_init+0x1c0>)
  400970:	482b      	ldr	r0, [pc, #172]	; (400a20 <ssd1306_init+0x1c4>)
  400972:	4b2c      	ldr	r3, [pc, #176]	; (400a24 <ssd1306_init+0x1c8>)
  400974:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400976:	b2c2      	uxtb	r2, r0
  400978:	2101      	movs	r1, #1
  40097a:	4620      	mov	r0, r4
  40097c:	4b2a      	ldr	r3, [pc, #168]	; (400a28 <ssd1306_init+0x1cc>)
  40097e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400980:	4620      	mov	r0, r4
  400982:	4b2a      	ldr	r3, [pc, #168]	; (400a2c <ssd1306_init+0x1d0>)
  400984:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400986:	2301      	movs	r3, #1
  400988:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  40098c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400990:	4c27      	ldr	r4, [pc, #156]	; (400a30 <ssd1306_init+0x1d4>)
  400992:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400994:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400996:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40099a:	47a0      	blx	r4
  40099c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40099e:	20a8      	movs	r0, #168	; 0xa8
  4009a0:	4c24      	ldr	r4, [pc, #144]	; (400a34 <ssd1306_init+0x1d8>)
  4009a2:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4009a4:	201f      	movs	r0, #31
  4009a6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4009a8:	20d3      	movs	r0, #211	; 0xd3
  4009aa:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4009ac:	2000      	movs	r0, #0
  4009ae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4009b0:	2040      	movs	r0, #64	; 0x40
  4009b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4009b4:	20a1      	movs	r0, #161	; 0xa1
  4009b6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4009b8:	20c8      	movs	r0, #200	; 0xc8
  4009ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4009bc:	20da      	movs	r0, #218	; 0xda
  4009be:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4009c0:	4648      	mov	r0, r9
  4009c2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4009c4:	2081      	movs	r0, #129	; 0x81
  4009c6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4009c8:	208f      	movs	r0, #143	; 0x8f
  4009ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4009cc:	20a4      	movs	r0, #164	; 0xa4
  4009ce:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4009d0:	20a6      	movs	r0, #166	; 0xa6
  4009d2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4009d4:	20d5      	movs	r0, #213	; 0xd5
  4009d6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4009d8:	4640      	mov	r0, r8
  4009da:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4009dc:	208d      	movs	r0, #141	; 0x8d
  4009de:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4009e0:	2014      	movs	r0, #20
  4009e2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4009e4:	20db      	movs	r0, #219	; 0xdb
  4009e6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4009e8:	2040      	movs	r0, #64	; 0x40
  4009ea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4009ec:	20d9      	movs	r0, #217	; 0xd9
  4009ee:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4009f0:	20f1      	movs	r0, #241	; 0xf1
  4009f2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4009f4:	20af      	movs	r0, #175	; 0xaf
  4009f6:	47a0      	blx	r4
  4009f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009fc:	400e1200 	.word	0x400e1200
  400a00:	400e1000 	.word	0x400e1000
  400a04:	00400d25 	.word	0x00400d25
  400a08:	40008000 	.word	0x40008000
  400a0c:	00400313 	.word	0x00400313
  400a10:	004002d7 	.word	0x004002d7
  400a14:	004002f5 	.word	0x004002f5
  400a18:	00400359 	.word	0x00400359
  400a1c:	08f0d180 	.word	0x08f0d180
  400a20:	001e8480 	.word	0x001e8480
  400a24:	0040036d 	.word	0x0040036d
  400a28:	00400383 	.word	0x00400383
  400a2c:	00400261 	.word	0x00400261
  400a30:	20400001 	.word	0x20400001
  400a34:	0040081d 	.word	0x0040081d
  400a38:	400e1400 	.word	0x400e1400

00400a3c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400a3c:	b538      	push	{r3, r4, r5, lr}
  400a3e:	4605      	mov	r5, r0
  400a40:	2208      	movs	r2, #8
  400a42:	4b09      	ldr	r3, [pc, #36]	; (400a68 <ssd1306_write_data+0x2c>)
  400a44:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a46:	4c09      	ldr	r4, [pc, #36]	; (400a6c <ssd1306_write_data+0x30>)
  400a48:	2101      	movs	r1, #1
  400a4a:	4620      	mov	r0, r4
  400a4c:	4b08      	ldr	r3, [pc, #32]	; (400a70 <ssd1306_write_data+0x34>)
  400a4e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400a50:	2301      	movs	r3, #1
  400a52:	461a      	mov	r2, r3
  400a54:	4629      	mov	r1, r5
  400a56:	4620      	mov	r0, r4
  400a58:	4c06      	ldr	r4, [pc, #24]	; (400a74 <ssd1306_write_data+0x38>)
  400a5a:	47a0      	blx	r4
	delay_us(10);
  400a5c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a60:	4b05      	ldr	r3, [pc, #20]	; (400a78 <ssd1306_write_data+0x3c>)
  400a62:	4798      	blx	r3
  400a64:	bd38      	pop	{r3, r4, r5, pc}
  400a66:	bf00      	nop
  400a68:	400e1000 	.word	0x400e1000
  400a6c:	40008000 	.word	0x40008000
  400a70:	0040028d 	.word	0x0040028d
  400a74:	004002a3 	.word	0x004002a3
  400a78:	20400001 	.word	0x20400001

00400a7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a7c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400a7e:	4810      	ldr	r0, [pc, #64]	; (400ac0 <sysclk_init+0x44>)
  400a80:	4b10      	ldr	r3, [pc, #64]	; (400ac4 <sysclk_init+0x48>)
  400a82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a84:	213e      	movs	r1, #62	; 0x3e
  400a86:	2000      	movs	r0, #0
  400a88:	4b0f      	ldr	r3, [pc, #60]	; (400ac8 <sysclk_init+0x4c>)
  400a8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a8c:	4c0f      	ldr	r4, [pc, #60]	; (400acc <sysclk_init+0x50>)
  400a8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a90:	2800      	cmp	r0, #0
  400a92:	d0fc      	beq.n	400a8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a94:	4b0e      	ldr	r3, [pc, #56]	; (400ad0 <sysclk_init+0x54>)
  400a96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a98:	4a0e      	ldr	r2, [pc, #56]	; (400ad4 <sysclk_init+0x58>)
  400a9a:	4b0f      	ldr	r3, [pc, #60]	; (400ad8 <sysclk_init+0x5c>)
  400a9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a9e:	4c0f      	ldr	r4, [pc, #60]	; (400adc <sysclk_init+0x60>)
  400aa0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400aa2:	2800      	cmp	r0, #0
  400aa4:	d0fc      	beq.n	400aa0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400aa6:	2002      	movs	r0, #2
  400aa8:	4b0d      	ldr	r3, [pc, #52]	; (400ae0 <sysclk_init+0x64>)
  400aaa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400aac:	2000      	movs	r0, #0
  400aae:	4b0d      	ldr	r3, [pc, #52]	; (400ae4 <sysclk_init+0x68>)
  400ab0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <sysclk_init+0x6c>)
  400ab4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400ab6:	4802      	ldr	r0, [pc, #8]	; (400ac0 <sysclk_init+0x44>)
  400ab8:	4b02      	ldr	r3, [pc, #8]	; (400ac4 <sysclk_init+0x48>)
  400aba:	4798      	blx	r3
  400abc:	bd10      	pop	{r4, pc}
  400abe:	bf00      	nop
  400ac0:	11e1a300 	.word	0x11e1a300
  400ac4:	00401265 	.word	0x00401265
  400ac8:	00400fb5 	.word	0x00400fb5
  400acc:	00401009 	.word	0x00401009
  400ad0:	00401019 	.word	0x00401019
  400ad4:	20183f01 	.word	0x20183f01
  400ad8:	400e0600 	.word	0x400e0600
  400adc:	00401029 	.word	0x00401029
  400ae0:	00400f19 	.word	0x00400f19
  400ae4:	00400f51 	.word	0x00400f51
  400ae8:	00401159 	.word	0x00401159

00400aec <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400aee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400af2:	4b48      	ldr	r3, [pc, #288]	; (400c14 <board_init+0x128>)
  400af4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400afa:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400afe:	4b46      	ldr	r3, [pc, #280]	; (400c18 <board_init+0x12c>)
  400b00:	2200      	movs	r2, #0
  400b02:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400b06:	695a      	ldr	r2, [r3, #20]
  400b08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400b0c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b12:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400b16:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400b1a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400b1e:	f007 0007 	and.w	r0, r7, #7
  400b22:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400b24:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400b28:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400b2c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b30:	f3bf 8f4f 	dsb	sy
  400b34:	f04f 34ff 	mov.w	r4, #4294967295
  400b38:	fa04 fc00 	lsl.w	ip, r4, r0
  400b3c:	fa06 f000 	lsl.w	r0, r6, r0
  400b40:	fa04 f40e 	lsl.w	r4, r4, lr
  400b44:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b48:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b4a:	463a      	mov	r2, r7
  400b4c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b4e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b52:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b56:	3a01      	subs	r2, #1
  400b58:	4423      	add	r3, r4
  400b5a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b5e:	d1f6      	bne.n	400b4e <board_init+0x62>
        } while(sets--);
  400b60:	3e01      	subs	r6, #1
  400b62:	4460      	add	r0, ip
  400b64:	f1b6 3fff 	cmp.w	r6, #4294967295
  400b68:	d1ef      	bne.n	400b4a <board_init+0x5e>
  400b6a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400b6e:	4b2a      	ldr	r3, [pc, #168]	; (400c18 <board_init+0x12c>)
  400b70:	695a      	ldr	r2, [r3, #20]
  400b72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400b76:	615a      	str	r2, [r3, #20]
  400b78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b7c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b80:	4a26      	ldr	r2, [pc, #152]	; (400c1c <board_init+0x130>)
  400b82:	4927      	ldr	r1, [pc, #156]	; (400c20 <board_init+0x134>)
  400b84:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b86:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b8a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b90:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b94:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b98:	f022 0201 	bic.w	r2, r2, #1
  400b9c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ba0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ba4:	f022 0201 	bic.w	r2, r2, #1
  400ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bb0:	f3bf 8f6f 	isb	sy
  400bb4:	200a      	movs	r0, #10
  400bb6:	4c1b      	ldr	r4, [pc, #108]	; (400c24 <board_init+0x138>)
  400bb8:	47a0      	blx	r4
  400bba:	200b      	movs	r0, #11
  400bbc:	47a0      	blx	r4
  400bbe:	200c      	movs	r0, #12
  400bc0:	47a0      	blx	r4
  400bc2:	2010      	movs	r0, #16
  400bc4:	47a0      	blx	r4
  400bc6:	2011      	movs	r0, #17
  400bc8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bca:	4b17      	ldr	r3, [pc, #92]	; (400c28 <board_init+0x13c>)
  400bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
  400bd0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bd6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400be0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400be2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400be6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bec:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400bee:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400bf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400bf6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400bfa:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bfc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400bfe:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400c02:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c08:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c12:	bf00      	nop
  400c14:	400e1850 	.word	0x400e1850
  400c18:	e000ed00 	.word	0xe000ed00
  400c1c:	400e0c00 	.word	0x400e0c00
  400c20:	5a00080c 	.word	0x5a00080c
  400c24:	00401039 	.word	0x00401039
  400c28:	400e1200 	.word	0x400e1200

00400c2c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400c2c:	6301      	str	r1, [r0, #48]	; 0x30
  400c2e:	4770      	bx	lr

00400c30 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400c30:	6341      	str	r1, [r0, #52]	; 0x34
  400c32:	4770      	bx	lr

00400c34 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c34:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c36:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c3a:	d03a      	beq.n	400cb2 <pio_set_peripheral+0x7e>
  400c3c:	d813      	bhi.n	400c66 <pio_set_peripheral+0x32>
  400c3e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c42:	d025      	beq.n	400c90 <pio_set_peripheral+0x5c>
  400c44:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c48:	d10a      	bne.n	400c60 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c4a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c4c:	4313      	orrs	r3, r2
  400c4e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c50:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c52:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c54:	400b      	ands	r3, r1
  400c56:	ea23 0302 	bic.w	r3, r3, r2
  400c5a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c5c:	6042      	str	r2, [r0, #4]
  400c5e:	4770      	bx	lr
	switch (ul_type) {
  400c60:	2900      	cmp	r1, #0
  400c62:	d1fb      	bne.n	400c5c <pio_set_peripheral+0x28>
  400c64:	4770      	bx	lr
  400c66:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c6a:	d021      	beq.n	400cb0 <pio_set_peripheral+0x7c>
  400c6c:	d809      	bhi.n	400c82 <pio_set_peripheral+0x4e>
  400c6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c72:	d1f3      	bne.n	400c5c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c76:	4313      	orrs	r3, r2
  400c78:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c7c:	4313      	orrs	r3, r2
  400c7e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c80:	e7ec      	b.n	400c5c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c82:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c86:	d013      	beq.n	400cb0 <pio_set_peripheral+0x7c>
  400c88:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c8c:	d010      	beq.n	400cb0 <pio_set_peripheral+0x7c>
  400c8e:	e7e5      	b.n	400c5c <pio_set_peripheral+0x28>
{
  400c90:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c92:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c94:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c96:	43d3      	mvns	r3, r2
  400c98:	4021      	ands	r1, r4
  400c9a:	461c      	mov	r4, r3
  400c9c:	4019      	ands	r1, r3
  400c9e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ca0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ca2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ca4:	400b      	ands	r3, r1
  400ca6:	4023      	ands	r3, r4
  400ca8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400caa:	6042      	str	r2, [r0, #4]
}
  400cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cb0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cb2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cb4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400cb6:	400b      	ands	r3, r1
  400cb8:	ea23 0302 	bic.w	r3, r3, r2
  400cbc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400cc0:	4313      	orrs	r3, r2
  400cc2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cc4:	e7ca      	b.n	400c5c <pio_set_peripheral+0x28>

00400cc6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400cc6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400cc8:	f012 0f01 	tst.w	r2, #1
  400ccc:	d10d      	bne.n	400cea <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400cce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400cd0:	f012 0f0a 	tst.w	r2, #10
  400cd4:	d00b      	beq.n	400cee <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400cd6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400cd8:	f012 0f02 	tst.w	r2, #2
  400cdc:	d109      	bne.n	400cf2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400cde:	f012 0f08 	tst.w	r2, #8
  400ce2:	d008      	beq.n	400cf6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400ce4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400ce8:	e005      	b.n	400cf6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cea:	6641      	str	r1, [r0, #100]	; 0x64
  400cec:	e7f0      	b.n	400cd0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cee:	6241      	str	r1, [r0, #36]	; 0x24
  400cf0:	e7f2      	b.n	400cd8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cf2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400cf6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400cf8:	6001      	str	r1, [r0, #0]
  400cfa:	4770      	bx	lr

00400cfc <pio_set_output>:
{
  400cfc:	b410      	push	{r4}
  400cfe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400d00:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d02:	b94c      	cbnz	r4, 400d18 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400d04:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400d06:	b14b      	cbz	r3, 400d1c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400d08:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400d0a:	b94a      	cbnz	r2, 400d20 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400d0c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400d0e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d10:	6001      	str	r1, [r0, #0]
}
  400d12:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d16:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400d18:	6641      	str	r1, [r0, #100]	; 0x64
  400d1a:	e7f4      	b.n	400d06 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400d1c:	6541      	str	r1, [r0, #84]	; 0x54
  400d1e:	e7f4      	b.n	400d0a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400d20:	6301      	str	r1, [r0, #48]	; 0x30
  400d22:	e7f4      	b.n	400d0e <pio_set_output+0x12>

00400d24 <pio_configure>:
{
  400d24:	b570      	push	{r4, r5, r6, lr}
  400d26:	b082      	sub	sp, #8
  400d28:	4605      	mov	r5, r0
  400d2a:	4616      	mov	r6, r2
  400d2c:	461c      	mov	r4, r3
	switch (ul_type) {
  400d2e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d32:	d014      	beq.n	400d5e <pio_configure+0x3a>
  400d34:	d90a      	bls.n	400d4c <pio_configure+0x28>
  400d36:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d3a:	d024      	beq.n	400d86 <pio_configure+0x62>
  400d3c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d40:	d021      	beq.n	400d86 <pio_configure+0x62>
  400d42:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d46:	d017      	beq.n	400d78 <pio_configure+0x54>
		return 0;
  400d48:	2000      	movs	r0, #0
  400d4a:	e01a      	b.n	400d82 <pio_configure+0x5e>
	switch (ul_type) {
  400d4c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d50:	d005      	beq.n	400d5e <pio_configure+0x3a>
  400d52:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d56:	d002      	beq.n	400d5e <pio_configure+0x3a>
  400d58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d5c:	d1f4      	bne.n	400d48 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400d5e:	4632      	mov	r2, r6
  400d60:	4628      	mov	r0, r5
  400d62:	4b11      	ldr	r3, [pc, #68]	; (400da8 <pio_configure+0x84>)
  400d64:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d66:	f014 0f01 	tst.w	r4, #1
  400d6a:	d102      	bne.n	400d72 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d6c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d6e:	2001      	movs	r0, #1
  400d70:	e007      	b.n	400d82 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d72:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d74:	2001      	movs	r0, #1
  400d76:	e004      	b.n	400d82 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d78:	461a      	mov	r2, r3
  400d7a:	4631      	mov	r1, r6
  400d7c:	4b0b      	ldr	r3, [pc, #44]	; (400dac <pio_configure+0x88>)
  400d7e:	4798      	blx	r3
	return 1;
  400d80:	2001      	movs	r0, #1
}
  400d82:	b002      	add	sp, #8
  400d84:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d86:	f004 0301 	and.w	r3, r4, #1
  400d8a:	9300      	str	r3, [sp, #0]
  400d8c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d90:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d94:	bf14      	ite	ne
  400d96:	2200      	movne	r2, #0
  400d98:	2201      	moveq	r2, #1
  400d9a:	4631      	mov	r1, r6
  400d9c:	4628      	mov	r0, r5
  400d9e:	4c04      	ldr	r4, [pc, #16]	; (400db0 <pio_configure+0x8c>)
  400da0:	47a0      	blx	r4
	return 1;
  400da2:	2001      	movs	r0, #1
		break;
  400da4:	e7ed      	b.n	400d82 <pio_configure+0x5e>
  400da6:	bf00      	nop
  400da8:	00400c35 	.word	0x00400c35
  400dac:	00400cc7 	.word	0x00400cc7
  400db0:	00400cfd 	.word	0x00400cfd

00400db4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400db4:	f012 0f10 	tst.w	r2, #16
  400db8:	d012      	beq.n	400de0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400dba:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400dbe:	f012 0f20 	tst.w	r2, #32
  400dc2:	d007      	beq.n	400dd4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400dc4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400dc8:	f012 0f40 	tst.w	r2, #64	; 0x40
  400dcc:	d005      	beq.n	400dda <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400dce:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400dd2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400dd4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400dd8:	e7f6      	b.n	400dc8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400dda:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400dde:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400de0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400de4:	4770      	bx	lr

00400de6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400de6:	6401      	str	r1, [r0, #64]	; 0x40
  400de8:	4770      	bx	lr

00400dea <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400dec:	4770      	bx	lr

00400dee <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dee:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400df0:	4770      	bx	lr
	...

00400df4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400df8:	4604      	mov	r4, r0
  400dfa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dfc:	4b0e      	ldr	r3, [pc, #56]	; (400e38 <pio_handler_process+0x44>)
  400dfe:	4798      	blx	r3
  400e00:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400e02:	4620      	mov	r0, r4
  400e04:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <pio_handler_process+0x48>)
  400e06:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400e08:	4005      	ands	r5, r0
  400e0a:	d013      	beq.n	400e34 <pio_handler_process+0x40>
  400e0c:	4c0c      	ldr	r4, [pc, #48]	; (400e40 <pio_handler_process+0x4c>)
  400e0e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400e12:	e003      	b.n	400e1c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400e14:	42b4      	cmp	r4, r6
  400e16:	d00d      	beq.n	400e34 <pio_handler_process+0x40>
  400e18:	3410      	adds	r4, #16
		while (status != 0) {
  400e1a:	b15d      	cbz	r5, 400e34 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400e1c:	6820      	ldr	r0, [r4, #0]
  400e1e:	4540      	cmp	r0, r8
  400e20:	d1f8      	bne.n	400e14 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400e22:	6861      	ldr	r1, [r4, #4]
  400e24:	4229      	tst	r1, r5
  400e26:	d0f5      	beq.n	400e14 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400e28:	68e3      	ldr	r3, [r4, #12]
  400e2a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400e2c:	6863      	ldr	r3, [r4, #4]
  400e2e:	ea25 0503 	bic.w	r5, r5, r3
  400e32:	e7ef      	b.n	400e14 <pio_handler_process+0x20>
  400e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e38:	00400deb 	.word	0x00400deb
  400e3c:	00400def 	.word	0x00400def
  400e40:	20400ab4 	.word	0x20400ab4

00400e44 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400e46:	4c18      	ldr	r4, [pc, #96]	; (400ea8 <pio_handler_set+0x64>)
  400e48:	6826      	ldr	r6, [r4, #0]
  400e4a:	2e06      	cmp	r6, #6
  400e4c:	d82a      	bhi.n	400ea4 <pio_handler_set+0x60>
  400e4e:	f04f 0c00 	mov.w	ip, #0
  400e52:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e54:	4f15      	ldr	r7, [pc, #84]	; (400eac <pio_handler_set+0x68>)
  400e56:	e004      	b.n	400e62 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e58:	3401      	adds	r4, #1
  400e5a:	b2e4      	uxtb	r4, r4
  400e5c:	46a4      	mov	ip, r4
  400e5e:	42a6      	cmp	r6, r4
  400e60:	d309      	bcc.n	400e76 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e62:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e64:	0125      	lsls	r5, r4, #4
  400e66:	597d      	ldr	r5, [r7, r5]
  400e68:	428d      	cmp	r5, r1
  400e6a:	d1f5      	bne.n	400e58 <pio_handler_set+0x14>
  400e6c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e70:	686d      	ldr	r5, [r5, #4]
  400e72:	4295      	cmp	r5, r2
  400e74:	d1f0      	bne.n	400e58 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e76:	4d0d      	ldr	r5, [pc, #52]	; (400eac <pio_handler_set+0x68>)
  400e78:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e7c:	eb05 040e 	add.w	r4, r5, lr
  400e80:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e84:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e86:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e88:	9906      	ldr	r1, [sp, #24]
  400e8a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e8c:	3601      	adds	r6, #1
  400e8e:	4566      	cmp	r6, ip
  400e90:	d005      	beq.n	400e9e <pio_handler_set+0x5a>
  400e92:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e94:	461a      	mov	r2, r3
  400e96:	4b06      	ldr	r3, [pc, #24]	; (400eb0 <pio_handler_set+0x6c>)
  400e98:	4798      	blx	r3

	return 0;
  400e9a:	2000      	movs	r0, #0
  400e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e9e:	4902      	ldr	r1, [pc, #8]	; (400ea8 <pio_handler_set+0x64>)
  400ea0:	600e      	str	r6, [r1, #0]
  400ea2:	e7f6      	b.n	400e92 <pio_handler_set+0x4e>
		return 1;
  400ea4:	2001      	movs	r0, #1
}
  400ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ea8:	20400b24 	.word	0x20400b24
  400eac:	20400ab4 	.word	0x20400ab4
  400eb0:	00400db5 	.word	0x00400db5

00400eb4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400eb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400eb6:	210a      	movs	r1, #10
  400eb8:	4801      	ldr	r0, [pc, #4]	; (400ec0 <PIOA_Handler+0xc>)
  400eba:	4b02      	ldr	r3, [pc, #8]	; (400ec4 <PIOA_Handler+0x10>)
  400ebc:	4798      	blx	r3
  400ebe:	bd08      	pop	{r3, pc}
  400ec0:	400e0e00 	.word	0x400e0e00
  400ec4:	00400df5 	.word	0x00400df5

00400ec8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ec8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400eca:	210b      	movs	r1, #11
  400ecc:	4801      	ldr	r0, [pc, #4]	; (400ed4 <PIOB_Handler+0xc>)
  400ece:	4b02      	ldr	r3, [pc, #8]	; (400ed8 <PIOB_Handler+0x10>)
  400ed0:	4798      	blx	r3
  400ed2:	bd08      	pop	{r3, pc}
  400ed4:	400e1000 	.word	0x400e1000
  400ed8:	00400df5 	.word	0x00400df5

00400edc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400edc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400ede:	210c      	movs	r1, #12
  400ee0:	4801      	ldr	r0, [pc, #4]	; (400ee8 <PIOC_Handler+0xc>)
  400ee2:	4b02      	ldr	r3, [pc, #8]	; (400eec <PIOC_Handler+0x10>)
  400ee4:	4798      	blx	r3
  400ee6:	bd08      	pop	{r3, pc}
  400ee8:	400e1200 	.word	0x400e1200
  400eec:	00400df5 	.word	0x00400df5

00400ef0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ef0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ef2:	2110      	movs	r1, #16
  400ef4:	4801      	ldr	r0, [pc, #4]	; (400efc <PIOD_Handler+0xc>)
  400ef6:	4b02      	ldr	r3, [pc, #8]	; (400f00 <PIOD_Handler+0x10>)
  400ef8:	4798      	blx	r3
  400efa:	bd08      	pop	{r3, pc}
  400efc:	400e1400 	.word	0x400e1400
  400f00:	00400df5 	.word	0x00400df5

00400f04 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400f04:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400f06:	2111      	movs	r1, #17
  400f08:	4801      	ldr	r0, [pc, #4]	; (400f10 <PIOE_Handler+0xc>)
  400f0a:	4b02      	ldr	r3, [pc, #8]	; (400f14 <PIOE_Handler+0x10>)
  400f0c:	4798      	blx	r3
  400f0e:	bd08      	pop	{r3, pc}
  400f10:	400e1600 	.word	0x400e1600
  400f14:	00400df5 	.word	0x00400df5

00400f18 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400f18:	2803      	cmp	r0, #3
  400f1a:	d011      	beq.n	400f40 <pmc_mck_set_division+0x28>
  400f1c:	2804      	cmp	r0, #4
  400f1e:	d012      	beq.n	400f46 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400f20:	2802      	cmp	r0, #2
  400f22:	bf0c      	ite	eq
  400f24:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400f28:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400f2a:	4a08      	ldr	r2, [pc, #32]	; (400f4c <pmc_mck_set_division+0x34>)
  400f2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400f32:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400f34:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f36:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f38:	f013 0f08 	tst.w	r3, #8
  400f3c:	d0fb      	beq.n	400f36 <pmc_mck_set_division+0x1e>
}
  400f3e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400f40:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400f44:	e7f1      	b.n	400f2a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400f46:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400f4a:	e7ee      	b.n	400f2a <pmc_mck_set_division+0x12>
  400f4c:	400e0600 	.word	0x400e0600

00400f50 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f50:	4a17      	ldr	r2, [pc, #92]	; (400fb0 <pmc_switch_mck_to_pllack+0x60>)
  400f52:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f58:	4318      	orrs	r0, r3
  400f5a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f5e:	f013 0f08 	tst.w	r3, #8
  400f62:	d10a      	bne.n	400f7a <pmc_switch_mck_to_pllack+0x2a>
  400f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f68:	4911      	ldr	r1, [pc, #68]	; (400fb0 <pmc_switch_mck_to_pllack+0x60>)
  400f6a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f6c:	f012 0f08 	tst.w	r2, #8
  400f70:	d103      	bne.n	400f7a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f72:	3b01      	subs	r3, #1
  400f74:	d1f9      	bne.n	400f6a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f76:	2001      	movs	r0, #1
  400f78:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f7a:	4a0d      	ldr	r2, [pc, #52]	; (400fb0 <pmc_switch_mck_to_pllack+0x60>)
  400f7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f7e:	f023 0303 	bic.w	r3, r3, #3
  400f82:	f043 0302 	orr.w	r3, r3, #2
  400f86:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f88:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f8a:	f013 0f08 	tst.w	r3, #8
  400f8e:	d10a      	bne.n	400fa6 <pmc_switch_mck_to_pllack+0x56>
  400f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f94:	4906      	ldr	r1, [pc, #24]	; (400fb0 <pmc_switch_mck_to_pllack+0x60>)
  400f96:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f98:	f012 0f08 	tst.w	r2, #8
  400f9c:	d105      	bne.n	400faa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f9e:	3b01      	subs	r3, #1
  400fa0:	d1f9      	bne.n	400f96 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400fa2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400fa4:	4770      	bx	lr
	return 0;
  400fa6:	2000      	movs	r0, #0
  400fa8:	4770      	bx	lr
  400faa:	2000      	movs	r0, #0
  400fac:	4770      	bx	lr
  400fae:	bf00      	nop
  400fb0:	400e0600 	.word	0x400e0600

00400fb4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400fb4:	b9a0      	cbnz	r0, 400fe0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fb6:	480e      	ldr	r0, [pc, #56]	; (400ff0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fb8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400fba:	0209      	lsls	r1, r1, #8
  400fbc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400fbe:	4a0d      	ldr	r2, [pc, #52]	; (400ff4 <pmc_switch_mainck_to_xtal+0x40>)
  400fc0:	401a      	ands	r2, r3
  400fc2:	4b0d      	ldr	r3, [pc, #52]	; (400ff8 <pmc_switch_mainck_to_xtal+0x44>)
  400fc4:	4313      	orrs	r3, r2
  400fc6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fc8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400fca:	4602      	mov	r2, r0
  400fcc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fce:	f013 0f01 	tst.w	r3, #1
  400fd2:	d0fb      	beq.n	400fcc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fd4:	4a06      	ldr	r2, [pc, #24]	; (400ff0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fd6:	6a11      	ldr	r1, [r2, #32]
  400fd8:	4b08      	ldr	r3, [pc, #32]	; (400ffc <pmc_switch_mainck_to_xtal+0x48>)
  400fda:	430b      	orrs	r3, r1
  400fdc:	6213      	str	r3, [r2, #32]
  400fde:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fe0:	4903      	ldr	r1, [pc, #12]	; (400ff0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fe2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fe4:	4a06      	ldr	r2, [pc, #24]	; (401000 <pmc_switch_mainck_to_xtal+0x4c>)
  400fe6:	401a      	ands	r2, r3
  400fe8:	4b06      	ldr	r3, [pc, #24]	; (401004 <pmc_switch_mainck_to_xtal+0x50>)
  400fea:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fec:	620b      	str	r3, [r1, #32]
  400fee:	4770      	bx	lr
  400ff0:	400e0600 	.word	0x400e0600
  400ff4:	ffc8fffc 	.word	0xffc8fffc
  400ff8:	00370001 	.word	0x00370001
  400ffc:	01370000 	.word	0x01370000
  401000:	fec8fffc 	.word	0xfec8fffc
  401004:	01370002 	.word	0x01370002

00401008 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401008:	4b02      	ldr	r3, [pc, #8]	; (401014 <pmc_osc_is_ready_mainck+0xc>)
  40100a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40100c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401010:	4770      	bx	lr
  401012:	bf00      	nop
  401014:	400e0600 	.word	0x400e0600

00401018 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401018:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40101c:	4b01      	ldr	r3, [pc, #4]	; (401024 <pmc_disable_pllack+0xc>)
  40101e:	629a      	str	r2, [r3, #40]	; 0x28
  401020:	4770      	bx	lr
  401022:	bf00      	nop
  401024:	400e0600 	.word	0x400e0600

00401028 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401028:	4b02      	ldr	r3, [pc, #8]	; (401034 <pmc_is_locked_pllack+0xc>)
  40102a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40102c:	f000 0002 	and.w	r0, r0, #2
  401030:	4770      	bx	lr
  401032:	bf00      	nop
  401034:	400e0600 	.word	0x400e0600

00401038 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401038:	283f      	cmp	r0, #63	; 0x3f
  40103a:	d81e      	bhi.n	40107a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40103c:	281f      	cmp	r0, #31
  40103e:	d80c      	bhi.n	40105a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401040:	4b11      	ldr	r3, [pc, #68]	; (401088 <pmc_enable_periph_clk+0x50>)
  401042:	699a      	ldr	r2, [r3, #24]
  401044:	2301      	movs	r3, #1
  401046:	4083      	lsls	r3, r0
  401048:	4393      	bics	r3, r2
  40104a:	d018      	beq.n	40107e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40104c:	2301      	movs	r3, #1
  40104e:	fa03 f000 	lsl.w	r0, r3, r0
  401052:	4b0d      	ldr	r3, [pc, #52]	; (401088 <pmc_enable_periph_clk+0x50>)
  401054:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401056:	2000      	movs	r0, #0
  401058:	4770      	bx	lr
		ul_id -= 32;
  40105a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40105c:	4b0a      	ldr	r3, [pc, #40]	; (401088 <pmc_enable_periph_clk+0x50>)
  40105e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401062:	2301      	movs	r3, #1
  401064:	4083      	lsls	r3, r0
  401066:	4393      	bics	r3, r2
  401068:	d00b      	beq.n	401082 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40106a:	2301      	movs	r3, #1
  40106c:	fa03 f000 	lsl.w	r0, r3, r0
  401070:	4b05      	ldr	r3, [pc, #20]	; (401088 <pmc_enable_periph_clk+0x50>)
  401072:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401076:	2000      	movs	r0, #0
  401078:	4770      	bx	lr
		return 1;
  40107a:	2001      	movs	r0, #1
  40107c:	4770      	bx	lr
	return 0;
  40107e:	2000      	movs	r0, #0
  401080:	4770      	bx	lr
  401082:	2000      	movs	r0, #0
}
  401084:	4770      	bx	lr
  401086:	bf00      	nop
  401088:	400e0600 	.word	0x400e0600

0040108c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40108c:	e7fe      	b.n	40108c <Dummy_Handler>
	...

00401090 <Reset_Handler>:
{
  401090:	b500      	push	{lr}
  401092:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401094:	4b25      	ldr	r3, [pc, #148]	; (40112c <Reset_Handler+0x9c>)
  401096:	4a26      	ldr	r2, [pc, #152]	; (401130 <Reset_Handler+0xa0>)
  401098:	429a      	cmp	r2, r3
  40109a:	d010      	beq.n	4010be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40109c:	4b25      	ldr	r3, [pc, #148]	; (401134 <Reset_Handler+0xa4>)
  40109e:	4a23      	ldr	r2, [pc, #140]	; (40112c <Reset_Handler+0x9c>)
  4010a0:	429a      	cmp	r2, r3
  4010a2:	d20c      	bcs.n	4010be <Reset_Handler+0x2e>
  4010a4:	3b01      	subs	r3, #1
  4010a6:	1a9b      	subs	r3, r3, r2
  4010a8:	f023 0303 	bic.w	r3, r3, #3
  4010ac:	3304      	adds	r3, #4
  4010ae:	4413      	add	r3, r2
  4010b0:	491f      	ldr	r1, [pc, #124]	; (401130 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4010b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4010b6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4010ba:	429a      	cmp	r2, r3
  4010bc:	d1f9      	bne.n	4010b2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4010be:	4b1e      	ldr	r3, [pc, #120]	; (401138 <Reset_Handler+0xa8>)
  4010c0:	4a1e      	ldr	r2, [pc, #120]	; (40113c <Reset_Handler+0xac>)
  4010c2:	429a      	cmp	r2, r3
  4010c4:	d20a      	bcs.n	4010dc <Reset_Handler+0x4c>
  4010c6:	3b01      	subs	r3, #1
  4010c8:	1a9b      	subs	r3, r3, r2
  4010ca:	f023 0303 	bic.w	r3, r3, #3
  4010ce:	3304      	adds	r3, #4
  4010d0:	4413      	add	r3, r2
                *pDest++ = 0;
  4010d2:	2100      	movs	r1, #0
  4010d4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4010d8:	4293      	cmp	r3, r2
  4010da:	d1fb      	bne.n	4010d4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4010dc:	4a18      	ldr	r2, [pc, #96]	; (401140 <Reset_Handler+0xb0>)
  4010de:	4b19      	ldr	r3, [pc, #100]	; (401144 <Reset_Handler+0xb4>)
  4010e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4010e4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010ea:	fab3 f383 	clz	r3, r3
  4010ee:	095b      	lsrs	r3, r3, #5
  4010f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4010f2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4010f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010f8:	2200      	movs	r2, #0
  4010fa:	4b13      	ldr	r3, [pc, #76]	; (401148 <Reset_Handler+0xb8>)
  4010fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4010fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401100:	4a12      	ldr	r2, [pc, #72]	; (40114c <Reset_Handler+0xbc>)
  401102:	6813      	ldr	r3, [r2, #0]
  401104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401108:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40110a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40110e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401112:	b129      	cbz	r1, 401120 <Reset_Handler+0x90>
		cpu_irq_enable();
  401114:	2201      	movs	r2, #1
  401116:	4b0c      	ldr	r3, [pc, #48]	; (401148 <Reset_Handler+0xb8>)
  401118:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40111a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40111e:	b662      	cpsie	i
        __libc_init_array();
  401120:	4b0b      	ldr	r3, [pc, #44]	; (401150 <Reset_Handler+0xc0>)
  401122:	4798      	blx	r3
        main();
  401124:	4b0b      	ldr	r3, [pc, #44]	; (401154 <Reset_Handler+0xc4>)
  401126:	4798      	blx	r3
  401128:	e7fe      	b.n	401128 <Reset_Handler+0x98>
  40112a:	bf00      	nop
  40112c:	20400000 	.word	0x20400000
  401130:	00403b98 	.word	0x00403b98
  401134:	2040088c 	.word	0x2040088c
  401138:	20400bbc 	.word	0x20400bbc
  40113c:	2040088c 	.word	0x2040088c
  401140:	e000ed00 	.word	0xe000ed00
  401144:	00400000 	.word	0x00400000
  401148:	20400018 	.word	0x20400018
  40114c:	e000ed88 	.word	0xe000ed88
  401150:	0040201d 	.word	0x0040201d
  401154:	00401601 	.word	0x00401601

00401158 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401158:	4b3b      	ldr	r3, [pc, #236]	; (401248 <SystemCoreClockUpdate+0xf0>)
  40115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40115c:	f003 0303 	and.w	r3, r3, #3
  401160:	2b01      	cmp	r3, #1
  401162:	d01d      	beq.n	4011a0 <SystemCoreClockUpdate+0x48>
  401164:	b183      	cbz	r3, 401188 <SystemCoreClockUpdate+0x30>
  401166:	2b02      	cmp	r3, #2
  401168:	d036      	beq.n	4011d8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40116a:	4b37      	ldr	r3, [pc, #220]	; (401248 <SystemCoreClockUpdate+0xf0>)
  40116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40116e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401172:	2b70      	cmp	r3, #112	; 0x70
  401174:	d05f      	beq.n	401236 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401176:	4b34      	ldr	r3, [pc, #208]	; (401248 <SystemCoreClockUpdate+0xf0>)
  401178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40117a:	4934      	ldr	r1, [pc, #208]	; (40124c <SystemCoreClockUpdate+0xf4>)
  40117c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401180:	680b      	ldr	r3, [r1, #0]
  401182:	40d3      	lsrs	r3, r2
  401184:	600b      	str	r3, [r1, #0]
  401186:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401188:	4b31      	ldr	r3, [pc, #196]	; (401250 <SystemCoreClockUpdate+0xf8>)
  40118a:	695b      	ldr	r3, [r3, #20]
  40118c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401190:	bf14      	ite	ne
  401192:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401196:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40119a:	4b2c      	ldr	r3, [pc, #176]	; (40124c <SystemCoreClockUpdate+0xf4>)
  40119c:	601a      	str	r2, [r3, #0]
  40119e:	e7e4      	b.n	40116a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011a0:	4b29      	ldr	r3, [pc, #164]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011a2:	6a1b      	ldr	r3, [r3, #32]
  4011a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011a8:	d003      	beq.n	4011b2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4011aa:	4a2a      	ldr	r2, [pc, #168]	; (401254 <SystemCoreClockUpdate+0xfc>)
  4011ac:	4b27      	ldr	r3, [pc, #156]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011ae:	601a      	str	r2, [r3, #0]
  4011b0:	e7db      	b.n	40116a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011b2:	4a29      	ldr	r2, [pc, #164]	; (401258 <SystemCoreClockUpdate+0x100>)
  4011b4:	4b25      	ldr	r3, [pc, #148]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011b6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011b8:	4b23      	ldr	r3, [pc, #140]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011ba:	6a1b      	ldr	r3, [r3, #32]
  4011bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011c0:	2b10      	cmp	r3, #16
  4011c2:	d005      	beq.n	4011d0 <SystemCoreClockUpdate+0x78>
  4011c4:	2b20      	cmp	r3, #32
  4011c6:	d1d0      	bne.n	40116a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4011c8:	4a22      	ldr	r2, [pc, #136]	; (401254 <SystemCoreClockUpdate+0xfc>)
  4011ca:	4b20      	ldr	r3, [pc, #128]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011cc:	601a      	str	r2, [r3, #0]
          break;
  4011ce:	e7cc      	b.n	40116a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4011d0:	4a22      	ldr	r2, [pc, #136]	; (40125c <SystemCoreClockUpdate+0x104>)
  4011d2:	4b1e      	ldr	r3, [pc, #120]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011d4:	601a      	str	r2, [r3, #0]
          break;
  4011d6:	e7c8      	b.n	40116a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011d8:	4b1b      	ldr	r3, [pc, #108]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011da:	6a1b      	ldr	r3, [r3, #32]
  4011dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011e0:	d016      	beq.n	401210 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4011e2:	4a1c      	ldr	r2, [pc, #112]	; (401254 <SystemCoreClockUpdate+0xfc>)
  4011e4:	4b19      	ldr	r3, [pc, #100]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011e6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4011e8:	4b17      	ldr	r3, [pc, #92]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011ec:	f003 0303 	and.w	r3, r3, #3
  4011f0:	2b02      	cmp	r3, #2
  4011f2:	d1ba      	bne.n	40116a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011f4:	4a14      	ldr	r2, [pc, #80]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4011fa:	4814      	ldr	r0, [pc, #80]	; (40124c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401200:	6803      	ldr	r3, [r0, #0]
  401202:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401206:	b2d2      	uxtb	r2, r2
  401208:	fbb3 f3f2 	udiv	r3, r3, r2
  40120c:	6003      	str	r3, [r0, #0]
  40120e:	e7ac      	b.n	40116a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401210:	4a11      	ldr	r2, [pc, #68]	; (401258 <SystemCoreClockUpdate+0x100>)
  401212:	4b0e      	ldr	r3, [pc, #56]	; (40124c <SystemCoreClockUpdate+0xf4>)
  401214:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401216:	4b0c      	ldr	r3, [pc, #48]	; (401248 <SystemCoreClockUpdate+0xf0>)
  401218:	6a1b      	ldr	r3, [r3, #32]
  40121a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40121e:	2b10      	cmp	r3, #16
  401220:	d005      	beq.n	40122e <SystemCoreClockUpdate+0xd6>
  401222:	2b20      	cmp	r3, #32
  401224:	d1e0      	bne.n	4011e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401226:	4a0b      	ldr	r2, [pc, #44]	; (401254 <SystemCoreClockUpdate+0xfc>)
  401228:	4b08      	ldr	r3, [pc, #32]	; (40124c <SystemCoreClockUpdate+0xf4>)
  40122a:	601a      	str	r2, [r3, #0]
          break;
  40122c:	e7dc      	b.n	4011e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40122e:	4a0b      	ldr	r2, [pc, #44]	; (40125c <SystemCoreClockUpdate+0x104>)
  401230:	4b06      	ldr	r3, [pc, #24]	; (40124c <SystemCoreClockUpdate+0xf4>)
  401232:	601a      	str	r2, [r3, #0]
          break;
  401234:	e7d8      	b.n	4011e8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401236:	4a05      	ldr	r2, [pc, #20]	; (40124c <SystemCoreClockUpdate+0xf4>)
  401238:	6813      	ldr	r3, [r2, #0]
  40123a:	4909      	ldr	r1, [pc, #36]	; (401260 <SystemCoreClockUpdate+0x108>)
  40123c:	fba1 1303 	umull	r1, r3, r1, r3
  401240:	085b      	lsrs	r3, r3, #1
  401242:	6013      	str	r3, [r2, #0]
  401244:	4770      	bx	lr
  401246:	bf00      	nop
  401248:	400e0600 	.word	0x400e0600
  40124c:	2040001c 	.word	0x2040001c
  401250:	400e1810 	.word	0x400e1810
  401254:	00b71b00 	.word	0x00b71b00
  401258:	003d0900 	.word	0x003d0900
  40125c:	007a1200 	.word	0x007a1200
  401260:	aaaaaaab 	.word	0xaaaaaaab

00401264 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401264:	4b16      	ldr	r3, [pc, #88]	; (4012c0 <system_init_flash+0x5c>)
  401266:	4298      	cmp	r0, r3
  401268:	d913      	bls.n	401292 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40126a:	4b16      	ldr	r3, [pc, #88]	; (4012c4 <system_init_flash+0x60>)
  40126c:	4298      	cmp	r0, r3
  40126e:	d915      	bls.n	40129c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401270:	4b15      	ldr	r3, [pc, #84]	; (4012c8 <system_init_flash+0x64>)
  401272:	4298      	cmp	r0, r3
  401274:	d916      	bls.n	4012a4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401276:	4b15      	ldr	r3, [pc, #84]	; (4012cc <system_init_flash+0x68>)
  401278:	4298      	cmp	r0, r3
  40127a:	d917      	bls.n	4012ac <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40127c:	4b14      	ldr	r3, [pc, #80]	; (4012d0 <system_init_flash+0x6c>)
  40127e:	4298      	cmp	r0, r3
  401280:	d918      	bls.n	4012b4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401282:	4b14      	ldr	r3, [pc, #80]	; (4012d4 <system_init_flash+0x70>)
  401284:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401286:	bf94      	ite	ls
  401288:	4a13      	ldrls	r2, [pc, #76]	; (4012d8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40128a:	4a14      	ldrhi	r2, [pc, #80]	; (4012dc <system_init_flash+0x78>)
  40128c:	4b14      	ldr	r3, [pc, #80]	; (4012e0 <system_init_flash+0x7c>)
  40128e:	601a      	str	r2, [r3, #0]
  401290:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401292:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401296:	4b12      	ldr	r3, [pc, #72]	; (4012e0 <system_init_flash+0x7c>)
  401298:	601a      	str	r2, [r3, #0]
  40129a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40129c:	4a11      	ldr	r2, [pc, #68]	; (4012e4 <system_init_flash+0x80>)
  40129e:	4b10      	ldr	r3, [pc, #64]	; (4012e0 <system_init_flash+0x7c>)
  4012a0:	601a      	str	r2, [r3, #0]
  4012a2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012a4:	4a10      	ldr	r2, [pc, #64]	; (4012e8 <system_init_flash+0x84>)
  4012a6:	4b0e      	ldr	r3, [pc, #56]	; (4012e0 <system_init_flash+0x7c>)
  4012a8:	601a      	str	r2, [r3, #0]
  4012aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012ac:	4a0f      	ldr	r2, [pc, #60]	; (4012ec <system_init_flash+0x88>)
  4012ae:	4b0c      	ldr	r3, [pc, #48]	; (4012e0 <system_init_flash+0x7c>)
  4012b0:	601a      	str	r2, [r3, #0]
  4012b2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4012b8:	4b09      	ldr	r3, [pc, #36]	; (4012e0 <system_init_flash+0x7c>)
  4012ba:	601a      	str	r2, [r3, #0]
  4012bc:	4770      	bx	lr
  4012be:	bf00      	nop
  4012c0:	015ef3bf 	.word	0x015ef3bf
  4012c4:	02bde77f 	.word	0x02bde77f
  4012c8:	041cdb3f 	.word	0x041cdb3f
  4012cc:	057bceff 	.word	0x057bceff
  4012d0:	06dac2bf 	.word	0x06dac2bf
  4012d4:	0839b67f 	.word	0x0839b67f
  4012d8:	04000500 	.word	0x04000500
  4012dc:	04000600 	.word	0x04000600
  4012e0:	400e0c00 	.word	0x400e0c00
  4012e4:	04000100 	.word	0x04000100
  4012e8:	04000200 	.word	0x04000200
  4012ec:	04000300 	.word	0x04000300

004012f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4012f0:	4b0a      	ldr	r3, [pc, #40]	; (40131c <_sbrk+0x2c>)
  4012f2:	681b      	ldr	r3, [r3, #0]
  4012f4:	b153      	cbz	r3, 40130c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4012f6:	4b09      	ldr	r3, [pc, #36]	; (40131c <_sbrk+0x2c>)
  4012f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4012fa:	181a      	adds	r2, r3, r0
  4012fc:	4908      	ldr	r1, [pc, #32]	; (401320 <_sbrk+0x30>)
  4012fe:	4291      	cmp	r1, r2
  401300:	db08      	blt.n	401314 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401302:	4610      	mov	r0, r2
  401304:	4a05      	ldr	r2, [pc, #20]	; (40131c <_sbrk+0x2c>)
  401306:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401308:	4618      	mov	r0, r3
  40130a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40130c:	4a05      	ldr	r2, [pc, #20]	; (401324 <_sbrk+0x34>)
  40130e:	4b03      	ldr	r3, [pc, #12]	; (40131c <_sbrk+0x2c>)
  401310:	601a      	str	r2, [r3, #0]
  401312:	e7f0      	b.n	4012f6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401314:	f04f 30ff 	mov.w	r0, #4294967295
}
  401318:	4770      	bx	lr
  40131a:	bf00      	nop
  40131c:	20400b28 	.word	0x20400b28
  401320:	2045fffc 	.word	0x2045fffc
  401324:	20402dc0 	.word	0x20402dc0

00401328 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401328:	f04f 30ff 	mov.w	r0, #4294967295
  40132c:	4770      	bx	lr

0040132e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401332:	604b      	str	r3, [r1, #4]

	return 0;
}
  401334:	2000      	movs	r0, #0
  401336:	4770      	bx	lr

00401338 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401338:	2000      	movs	r0, #0
  40133a:	4770      	bx	lr

0040133c <but_callback>:
  setbuf(stdout, NULL);
}

void but_callback(void)
{
	but_flag = 1;
  40133c:	2201      	movs	r2, #1
  40133e:	4b01      	ldr	r3, [pc, #4]	; (401344 <but_callback+0x8>)
  401340:	701a      	strb	r2, [r3, #0]
  401342:	4770      	bx	lr
  401344:	20400b90 	.word	0x20400b90

00401348 <callback_echo>:
}

void callback_echo(void)
{
	echo_flag = !echo_flag;
  401348:	4a03      	ldr	r2, [pc, #12]	; (401358 <callback_echo+0x10>)
  40134a:	7813      	ldrb	r3, [r2, #0]
  40134c:	fab3 f383 	clz	r3, r3
  401350:	095b      	lsrs	r3, r3, #5
  401352:	7013      	strb	r3, [r2, #0]
  401354:	4770      	bx	lr
  401356:	bf00      	nop
  401358:	20400b89 	.word	0x20400b89

0040135c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40135c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40135e:	b083      	sub	sp, #12
  401360:	4605      	mov	r5, r0
  401362:	460c      	mov	r4, r1
	uint32_t val = 0;
  401364:	2300      	movs	r3, #0
  401366:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401368:	4b2a      	ldr	r3, [pc, #168]	; (401414 <usart_serial_getchar+0xb8>)
  40136a:	4298      	cmp	r0, r3
  40136c:	d013      	beq.n	401396 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40136e:	4b2a      	ldr	r3, [pc, #168]	; (401418 <usart_serial_getchar+0xbc>)
  401370:	4298      	cmp	r0, r3
  401372:	d018      	beq.n	4013a6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401374:	4b29      	ldr	r3, [pc, #164]	; (40141c <usart_serial_getchar+0xc0>)
  401376:	4298      	cmp	r0, r3
  401378:	d01d      	beq.n	4013b6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40137a:	4b29      	ldr	r3, [pc, #164]	; (401420 <usart_serial_getchar+0xc4>)
  40137c:	429d      	cmp	r5, r3
  40137e:	d022      	beq.n	4013c6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401380:	4b28      	ldr	r3, [pc, #160]	; (401424 <usart_serial_getchar+0xc8>)
  401382:	429d      	cmp	r5, r3
  401384:	d027      	beq.n	4013d6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401386:	4b28      	ldr	r3, [pc, #160]	; (401428 <usart_serial_getchar+0xcc>)
  401388:	429d      	cmp	r5, r3
  40138a:	d02e      	beq.n	4013ea <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40138c:	4b27      	ldr	r3, [pc, #156]	; (40142c <usart_serial_getchar+0xd0>)
  40138e:	429d      	cmp	r5, r3
  401390:	d035      	beq.n	4013fe <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401392:	b003      	add	sp, #12
  401394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  401396:	461f      	mov	r7, r3
  401398:	4e25      	ldr	r6, [pc, #148]	; (401430 <usart_serial_getchar+0xd4>)
  40139a:	4621      	mov	r1, r4
  40139c:	4638      	mov	r0, r7
  40139e:	47b0      	blx	r6
  4013a0:	2800      	cmp	r0, #0
  4013a2:	d1fa      	bne.n	40139a <usart_serial_getchar+0x3e>
  4013a4:	e7e9      	b.n	40137a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4013a6:	461f      	mov	r7, r3
  4013a8:	4e21      	ldr	r6, [pc, #132]	; (401430 <usart_serial_getchar+0xd4>)
  4013aa:	4621      	mov	r1, r4
  4013ac:	4638      	mov	r0, r7
  4013ae:	47b0      	blx	r6
  4013b0:	2800      	cmp	r0, #0
  4013b2:	d1fa      	bne.n	4013aa <usart_serial_getchar+0x4e>
  4013b4:	e7e4      	b.n	401380 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4013b6:	461f      	mov	r7, r3
  4013b8:	4e1d      	ldr	r6, [pc, #116]	; (401430 <usart_serial_getchar+0xd4>)
  4013ba:	4621      	mov	r1, r4
  4013bc:	4638      	mov	r0, r7
  4013be:	47b0      	blx	r6
  4013c0:	2800      	cmp	r0, #0
  4013c2:	d1fa      	bne.n	4013ba <usart_serial_getchar+0x5e>
  4013c4:	e7df      	b.n	401386 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4013c6:	461f      	mov	r7, r3
  4013c8:	4e19      	ldr	r6, [pc, #100]	; (401430 <usart_serial_getchar+0xd4>)
  4013ca:	4621      	mov	r1, r4
  4013cc:	4638      	mov	r0, r7
  4013ce:	47b0      	blx	r6
  4013d0:	2800      	cmp	r0, #0
  4013d2:	d1fa      	bne.n	4013ca <usart_serial_getchar+0x6e>
  4013d4:	e7da      	b.n	40138c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4013d6:	461e      	mov	r6, r3
  4013d8:	4d16      	ldr	r5, [pc, #88]	; (401434 <usart_serial_getchar+0xd8>)
  4013da:	a901      	add	r1, sp, #4
  4013dc:	4630      	mov	r0, r6
  4013de:	47a8      	blx	r5
  4013e0:	2800      	cmp	r0, #0
  4013e2:	d1fa      	bne.n	4013da <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4013e4:	9b01      	ldr	r3, [sp, #4]
  4013e6:	7023      	strb	r3, [r4, #0]
  4013e8:	e7d3      	b.n	401392 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4013ea:	461e      	mov	r6, r3
  4013ec:	4d11      	ldr	r5, [pc, #68]	; (401434 <usart_serial_getchar+0xd8>)
  4013ee:	a901      	add	r1, sp, #4
  4013f0:	4630      	mov	r0, r6
  4013f2:	47a8      	blx	r5
  4013f4:	2800      	cmp	r0, #0
  4013f6:	d1fa      	bne.n	4013ee <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4013f8:	9b01      	ldr	r3, [sp, #4]
  4013fa:	7023      	strb	r3, [r4, #0]
  4013fc:	e7c9      	b.n	401392 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4013fe:	461e      	mov	r6, r3
  401400:	4d0c      	ldr	r5, [pc, #48]	; (401434 <usart_serial_getchar+0xd8>)
  401402:	a901      	add	r1, sp, #4
  401404:	4630      	mov	r0, r6
  401406:	47a8      	blx	r5
  401408:	2800      	cmp	r0, #0
  40140a:	d1fa      	bne.n	401402 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40140c:	9b01      	ldr	r3, [sp, #4]
  40140e:	7023      	strb	r3, [r4, #0]
}
  401410:	e7bf      	b.n	401392 <usart_serial_getchar+0x36>
  401412:	bf00      	nop
  401414:	400e0800 	.word	0x400e0800
  401418:	400e0a00 	.word	0x400e0a00
  40141c:	400e1a00 	.word	0x400e1a00
  401420:	400e1c00 	.word	0x400e1c00
  401424:	40024000 	.word	0x40024000
  401428:	40028000 	.word	0x40028000
  40142c:	4002c000 	.word	0x4002c000
  401430:	004003bd 	.word	0x004003bd
  401434:	004004cb 	.word	0x004004cb

00401438 <usart_serial_putchar>:
{
  401438:	b570      	push	{r4, r5, r6, lr}
  40143a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40143c:	4b2a      	ldr	r3, [pc, #168]	; (4014e8 <usart_serial_putchar+0xb0>)
  40143e:	4298      	cmp	r0, r3
  401440:	d013      	beq.n	40146a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401442:	4b2a      	ldr	r3, [pc, #168]	; (4014ec <usart_serial_putchar+0xb4>)
  401444:	4298      	cmp	r0, r3
  401446:	d019      	beq.n	40147c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401448:	4b29      	ldr	r3, [pc, #164]	; (4014f0 <usart_serial_putchar+0xb8>)
  40144a:	4298      	cmp	r0, r3
  40144c:	d01f      	beq.n	40148e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40144e:	4b29      	ldr	r3, [pc, #164]	; (4014f4 <usart_serial_putchar+0xbc>)
  401450:	4298      	cmp	r0, r3
  401452:	d025      	beq.n	4014a0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401454:	4b28      	ldr	r3, [pc, #160]	; (4014f8 <usart_serial_putchar+0xc0>)
  401456:	4298      	cmp	r0, r3
  401458:	d02b      	beq.n	4014b2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40145a:	4b28      	ldr	r3, [pc, #160]	; (4014fc <usart_serial_putchar+0xc4>)
  40145c:	4298      	cmp	r0, r3
  40145e:	d031      	beq.n	4014c4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401460:	4b27      	ldr	r3, [pc, #156]	; (401500 <usart_serial_putchar+0xc8>)
  401462:	4298      	cmp	r0, r3
  401464:	d037      	beq.n	4014d6 <usart_serial_putchar+0x9e>
	return 0;
  401466:	2000      	movs	r0, #0
}
  401468:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40146a:	461e      	mov	r6, r3
  40146c:	4d25      	ldr	r5, [pc, #148]	; (401504 <usart_serial_putchar+0xcc>)
  40146e:	4621      	mov	r1, r4
  401470:	4630      	mov	r0, r6
  401472:	47a8      	blx	r5
  401474:	2800      	cmp	r0, #0
  401476:	d1fa      	bne.n	40146e <usart_serial_putchar+0x36>
		return 1;
  401478:	2001      	movs	r0, #1
  40147a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40147c:	461e      	mov	r6, r3
  40147e:	4d21      	ldr	r5, [pc, #132]	; (401504 <usart_serial_putchar+0xcc>)
  401480:	4621      	mov	r1, r4
  401482:	4630      	mov	r0, r6
  401484:	47a8      	blx	r5
  401486:	2800      	cmp	r0, #0
  401488:	d1fa      	bne.n	401480 <usart_serial_putchar+0x48>
		return 1;
  40148a:	2001      	movs	r0, #1
  40148c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40148e:	461e      	mov	r6, r3
  401490:	4d1c      	ldr	r5, [pc, #112]	; (401504 <usart_serial_putchar+0xcc>)
  401492:	4621      	mov	r1, r4
  401494:	4630      	mov	r0, r6
  401496:	47a8      	blx	r5
  401498:	2800      	cmp	r0, #0
  40149a:	d1fa      	bne.n	401492 <usart_serial_putchar+0x5a>
		return 1;
  40149c:	2001      	movs	r0, #1
  40149e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4014a0:	461e      	mov	r6, r3
  4014a2:	4d18      	ldr	r5, [pc, #96]	; (401504 <usart_serial_putchar+0xcc>)
  4014a4:	4621      	mov	r1, r4
  4014a6:	4630      	mov	r0, r6
  4014a8:	47a8      	blx	r5
  4014aa:	2800      	cmp	r0, #0
  4014ac:	d1fa      	bne.n	4014a4 <usart_serial_putchar+0x6c>
		return 1;
  4014ae:	2001      	movs	r0, #1
  4014b0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4014b2:	461e      	mov	r6, r3
  4014b4:	4d14      	ldr	r5, [pc, #80]	; (401508 <usart_serial_putchar+0xd0>)
  4014b6:	4621      	mov	r1, r4
  4014b8:	4630      	mov	r0, r6
  4014ba:	47a8      	blx	r5
  4014bc:	2800      	cmp	r0, #0
  4014be:	d1fa      	bne.n	4014b6 <usart_serial_putchar+0x7e>
		return 1;
  4014c0:	2001      	movs	r0, #1
  4014c2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4014c4:	461e      	mov	r6, r3
  4014c6:	4d10      	ldr	r5, [pc, #64]	; (401508 <usart_serial_putchar+0xd0>)
  4014c8:	4621      	mov	r1, r4
  4014ca:	4630      	mov	r0, r6
  4014cc:	47a8      	blx	r5
  4014ce:	2800      	cmp	r0, #0
  4014d0:	d1fa      	bne.n	4014c8 <usart_serial_putchar+0x90>
		return 1;
  4014d2:	2001      	movs	r0, #1
  4014d4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4014d6:	461e      	mov	r6, r3
  4014d8:	4d0b      	ldr	r5, [pc, #44]	; (401508 <usart_serial_putchar+0xd0>)
  4014da:	4621      	mov	r1, r4
  4014dc:	4630      	mov	r0, r6
  4014de:	47a8      	blx	r5
  4014e0:	2800      	cmp	r0, #0
  4014e2:	d1fa      	bne.n	4014da <usart_serial_putchar+0xa2>
		return 1;
  4014e4:	2001      	movs	r0, #1
  4014e6:	bd70      	pop	{r4, r5, r6, pc}
  4014e8:	400e0800 	.word	0x400e0800
  4014ec:	400e0a00 	.word	0x400e0a00
  4014f0:	400e1a00 	.word	0x400e1a00
  4014f4:	400e1c00 	.word	0x400e1c00
  4014f8:	40024000 	.word	0x40024000
  4014fc:	40028000 	.word	0x40028000
  401500:	4002c000 	.word	0x4002c000
  401504:	004003ab 	.word	0x004003ab
  401508:	004004b5 	.word	0x004004b5

0040150c <atualiza_graf>:
	int resultado = 7 - altura;
	return resultado;
}

// Funcao para colocar o valor como o ultimo valor do vetor, e deslocar os outros valores
void atualiza_graf(int distancia) {
  40150c:	4b05      	ldr	r3, [pc, #20]	; (401524 <atualiza_graf+0x18>)
  40150e:	f103 0120 	add.w	r1, r3, #32
	int i;
	for (i = 0; i < 8; i++) {
		distancias[i] = distancias[i+1];
  401512:	685a      	ldr	r2, [r3, #4]
  401514:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 8; i++) {
  401518:	428b      	cmp	r3, r1
  40151a:	d1fa      	bne.n	401512 <atualiza_graf+0x6>
	}
	distancias[8] = distancia;
  40151c:	4b01      	ldr	r3, [pc, #4]	; (401524 <atualiza_graf+0x18>)
  40151e:	6218      	str	r0, [r3, #32]
  401520:	4770      	bx	lr
  401522:	bf00      	nop
  401524:	20400020 	.word	0x20400020

00401528 <io_init>:
}

int io_init(void) {	
  401528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40152c:	b083      	sub	sp, #12
	// Iniciando botoes
	// -- BUT 1 --
	pmc_enable_periph_clk(BUT_1_ID);
  40152e:	2010      	movs	r0, #16
  401530:	4f29      	ldr	r7, [pc, #164]	; (4015d8 <io_init+0xb0>)
  401532:	47b8      	blx	r7
	pio_configure(BUT_1, PIO_INPUT, BUT_1_IDX_MASK, PIO_PULLUP);
  401534:	4c29      	ldr	r4, [pc, #164]	; (4015dc <io_init+0xb4>)
  401536:	2301      	movs	r3, #1
  401538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40153c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401540:	4620      	mov	r0, r4
  401542:	4e27      	ldr	r6, [pc, #156]	; (4015e0 <io_init+0xb8>)
  401544:	47b0      	blx	r6
	pio_handler_set(BUT_1, BUT_1_ID, BUT_1_IDX_MASK, PIO_IT_FALL_EDGE, but_callback);
  401546:	4b27      	ldr	r3, [pc, #156]	; (4015e4 <io_init+0xbc>)
  401548:	9300      	str	r3, [sp, #0]
  40154a:	2350      	movs	r3, #80	; 0x50
  40154c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401550:	2110      	movs	r1, #16
  401552:	4620      	mov	r0, r4
  401554:	f8df b09c 	ldr.w	fp, [pc, #156]	; 4015f4 <io_init+0xcc>
  401558:	47d8      	blx	fp
	
	pio_enable_interrupt(BUT_1, BUT_1_IDX_MASK);
  40155a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40155e:	4620      	mov	r0, r4
  401560:	f8df a094 	ldr.w	sl, [pc, #148]	; 4015f8 <io_init+0xd0>
  401564:	47d0      	blx	sl
	pio_get_interrupt_status(BUT_1);
  401566:	4620      	mov	r0, r4
  401568:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4015fc <io_init+0xd4>
  40156c:	47c8      	blx	r9
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40156e:	4d1e      	ldr	r5, [pc, #120]	; (4015e8 <io_init+0xc0>)
  401570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401574:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401576:	f04f 0880 	mov.w	r8, #128	; 0x80
  40157a:	f885 8310 	strb.w	r8, [r5, #784]	; 0x310
	NVIC_SetPriority(BUT_1_ID, 4);
	// -- FIM --
	
	// Iniciando LED's
	// -- LED 1 --
	pmc_enable_periph_clk(LED_1_ID);
  40157e:	200a      	movs	r0, #10
  401580:	47b8      	blx	r7
	pio_configure(LED_1, PIO_OUTPUT_1, LED_1_IDX_MASK, PIO_DEFAULT);
  401582:	2300      	movs	r3, #0
  401584:	2201      	movs	r2, #1
  401586:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40158a:	4818      	ldr	r0, [pc, #96]	; (4015ec <io_init+0xc4>)
  40158c:	47b0      	blx	r6

	// Configurar TRIG como output
	pmc_enable_periph_clk(TRIG_ID);
  40158e:	2010      	movs	r0, #16
  401590:	47b8      	blx	r7
	pio_configure(TRIG, PIO_OUTPUT_0, TRIG_IDX_MASK, PIO_DEFAULT);
  401592:	2300      	movs	r3, #0
  401594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401598:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40159c:	4620      	mov	r0, r4
  40159e:	47b0      	blx	r6

	// Configurar ECHO como inputs
	pmc_enable_periph_clk(ECHO_ID);
  4015a0:	200a      	movs	r0, #10
  4015a2:	47b8      	blx	r7
	pio_configure(ECHO, PIO_INPUT, ECHO_IDX_MASK, PIO_DEFAULT);
  4015a4:	2300      	movs	r3, #0
  4015a6:	2240      	movs	r2, #64	; 0x40
  4015a8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4015ac:	480f      	ldr	r0, [pc, #60]	; (4015ec <io_init+0xc4>)
  4015ae:	47b0      	blx	r6
	pio_handler_set(ECHO, ECHO_ID, ECHO_IDX_MASK, PIO_IT_EDGE, callback_echo);
  4015b0:	4b0f      	ldr	r3, [pc, #60]	; (4015f0 <io_init+0xc8>)
  4015b2:	9300      	str	r3, [sp, #0]
  4015b4:	2340      	movs	r3, #64	; 0x40
  4015b6:	461a      	mov	r2, r3
  4015b8:	210a      	movs	r1, #10
  4015ba:	480c      	ldr	r0, [pc, #48]	; (4015ec <io_init+0xc4>)
  4015bc:	47d8      	blx	fp

	pio_enable_interrupt(ECHO, ECHO_IDX_MASK);
  4015be:	2140      	movs	r1, #64	; 0x40
  4015c0:	480a      	ldr	r0, [pc, #40]	; (4015ec <io_init+0xc4>)
  4015c2:	47d0      	blx	sl
	pio_get_interrupt_status(ECHO);
  4015c4:	4809      	ldr	r0, [pc, #36]	; (4015ec <io_init+0xc4>)
  4015c6:	47c8      	blx	r9
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4015cc:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015ce:	f885 830a 	strb.w	r8, [r5, #778]	; 0x30a

	NVIC_EnableIRQ(ECHO_ID);
	NVIC_SetPriority(ECHO_ID, 4);

	
}
  4015d2:	b003      	add	sp, #12
  4015d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015d8:	00401039 	.word	0x00401039
  4015dc:	400e1400 	.word	0x400e1400
  4015e0:	00400d25 	.word	0x00400d25
  4015e4:	0040133d 	.word	0x0040133d
  4015e8:	e000e100 	.word	0xe000e100
  4015ec:	400e0e00 	.word	0x400e0e00
  4015f0:	00401349 	.word	0x00401349
  4015f4:	00400e45 	.word	0x00400e45
  4015f8:	00400de7 	.word	0x00400de7
  4015fc:	00400deb 	.word	0x00400deb

00401600 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main (void) {
  401600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401604:	b089      	sub	sp, #36	; 0x24
	board_init();
  401606:	4b60      	ldr	r3, [pc, #384]	; (401788 <main+0x188>)
  401608:	4798      	blx	r3
	sysclk_init();
  40160a:	4b60      	ldr	r3, [pc, #384]	; (40178c <main+0x18c>)
  40160c:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40160e:	4d60      	ldr	r5, [pc, #384]	; (401790 <main+0x190>)
  401610:	4b60      	ldr	r3, [pc, #384]	; (401794 <main+0x194>)
  401612:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401614:	4a60      	ldr	r2, [pc, #384]	; (401798 <main+0x198>)
  401616:	4b61      	ldr	r3, [pc, #388]	; (40179c <main+0x19c>)
  401618:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40161a:	4a61      	ldr	r2, [pc, #388]	; (4017a0 <main+0x1a0>)
  40161c:	4b61      	ldr	r3, [pc, #388]	; (4017a4 <main+0x1a4>)
  40161e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401620:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401624:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  401626:	23c0      	movs	r3, #192	; 0xc0
  401628:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  40162a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40162e:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  401630:	2400      	movs	r4, #0
  401632:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401634:	9406      	str	r4, [sp, #24]
  401636:	200e      	movs	r0, #14
  401638:	4b5b      	ldr	r3, [pc, #364]	; (4017a8 <main+0x1a8>)
  40163a:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40163c:	4a5b      	ldr	r2, [pc, #364]	; (4017ac <main+0x1ac>)
  40163e:	a902      	add	r1, sp, #8
  401640:	4628      	mov	r0, r5
  401642:	4b5b      	ldr	r3, [pc, #364]	; (4017b0 <main+0x1b0>)
  401644:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401646:	4628      	mov	r0, r5
  401648:	4b5a      	ldr	r3, [pc, #360]	; (4017b4 <main+0x1b4>)
  40164a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40164c:	4628      	mov	r0, r5
  40164e:	4b5a      	ldr	r3, [pc, #360]	; (4017b8 <main+0x1b8>)
  401650:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401652:	4e5a      	ldr	r6, [pc, #360]	; (4017bc <main+0x1bc>)
  401654:	6833      	ldr	r3, [r6, #0]
  401656:	4621      	mov	r1, r4
  401658:	6898      	ldr	r0, [r3, #8]
  40165a:	4d59      	ldr	r5, [pc, #356]	; (4017c0 <main+0x1c0>)
  40165c:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40165e:	6833      	ldr	r3, [r6, #0]
  401660:	4621      	mov	r1, r4
  401662:	6858      	ldr	r0, [r3, #4]
  401664:	47a8      	blx	r5
  setbuf(stdout, NULL);
  401666:	6833      	ldr	r3, [r6, #0]
  401668:	4621      	mov	r1, r4
  40166a:	6898      	ldr	r0, [r3, #8]
  40166c:	47a8      	blx	r5
	delay_init();
  	configure_console();

    // Init OLED
	gfx_mono_ssd1306_init();
  40166e:	4b55      	ldr	r3, [pc, #340]	; (4017c4 <main+0x1c4>)
  401670:	4798      	blx	r3
	
	// Inicializando
	io_init();
  401672:	4b55      	ldr	r3, [pc, #340]	; (4017c8 <main+0x1c8>)
  401674:	4798      	blx	r3
  /* Insert application code here, after the board has been initialized. */
	while(1) {
		
		// Gerando pulso de 10us no pino
		pio_set(TRIG, TRIG_IDX_MASK);
		delay_us(10);
  401676:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 401828 <main+0x228>
		pio_clear(TRIG, TRIG_IDX_MASK);

		// Esperando o pino ECHO subir
		while (echo_flag == 0);
  40167a:	4d54      	ldr	r5, [pc, #336]	; (4017cc <main+0x1cc>)
		// gfx_mono_draw_string(texto, 0, 0, &sysfont);
		// delay_ms(80);

		// ================== DESCOMENTAR PARA VIZUALIZAR APENAS O GRAFICO ==================
		// Nomeando os eixos do grafico no OLED
		gfx_mono_draw_string("c", 0, 0, &sysfont);
  40167c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 40182c <main+0x22c>
  401680:	4f53      	ldr	r7, [pc, #332]	; (4017d0 <main+0x1d0>)
  401682:	e001      	b.n	401688 <main+0x88>
		// Desenhando o grafico
		for (int i = 8; i > -1; i--) {
			int n = altura_graf(distancias[i]);
			gfx_mono_draw_string(".", 25 + i*10, n, &sysfont);
		}
		delay_ms(100);
  401684:	4853      	ldr	r0, [pc, #332]	; (4017d4 <main+0x1d4>)
  401686:	47c8      	blx	r9
		pio_set(TRIG, TRIG_IDX_MASK);
  401688:	4c53      	ldr	r4, [pc, #332]	; (4017d8 <main+0x1d8>)
  40168a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40168e:	4620      	mov	r0, r4
  401690:	4b52      	ldr	r3, [pc, #328]	; (4017dc <main+0x1dc>)
  401692:	4798      	blx	r3
		delay_us(10);
  401694:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  401698:	47c8      	blx	r9
		pio_clear(TRIG, TRIG_IDX_MASK);
  40169a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40169e:	4620      	mov	r0, r4
  4016a0:	4b4f      	ldr	r3, [pc, #316]	; (4017e0 <main+0x1e0>)
  4016a2:	4798      	blx	r3
		while (echo_flag == 0);
  4016a4:	782b      	ldrb	r3, [r5, #0]
  4016a6:	2b00      	cmp	r3, #0
  4016a8:	d0fc      	beq.n	4016a4 <main+0xa4>
		rtt_init(RTT, 1);
  4016aa:	2101      	movs	r1, #1
  4016ac:	484d      	ldr	r0, [pc, #308]	; (4017e4 <main+0x1e4>)
  4016ae:	4b4e      	ldr	r3, [pc, #312]	; (4017e8 <main+0x1e8>)
  4016b0:	4798      	blx	r3
		while (echo_flag == 1);
  4016b2:	782b      	ldrb	r3, [r5, #0]
  4016b4:	b2db      	uxtb	r3, r3
  4016b6:	2b01      	cmp	r3, #1
  4016b8:	d0fb      	beq.n	4016b2 <main+0xb2>
		contagem = rtt_read_timer_value(RTT);
  4016ba:	484a      	ldr	r0, [pc, #296]	; (4017e4 <main+0x1e4>)
  4016bc:	4b4b      	ldr	r3, [pc, #300]	; (4017ec <main+0x1ec>)
  4016be:	4798      	blx	r3
  4016c0:	4b4b      	ldr	r3, [pc, #300]	; (4017f0 <main+0x1f0>)
  4016c2:	6018      	str	r0, [r3, #0]
		delta_t = contagem * 10e5 / freq;
  4016c4:	4c4b      	ldr	r4, [pc, #300]	; (4017f4 <main+0x1f4>)
  4016c6:	47a0      	blx	r4
  4016c8:	a32d      	add	r3, pc, #180	; (adr r3, 401780 <main+0x180>)
  4016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016ce:	4e4a      	ldr	r6, [pc, #296]	; (4017f8 <main+0x1f8>)
  4016d0:	47b0      	blx	r6
  4016d2:	4682      	mov	sl, r0
  4016d4:	468b      	mov	fp, r1
  4016d6:	4b49      	ldr	r3, [pc, #292]	; (4017fc <main+0x1fc>)
  4016d8:	6818      	ldr	r0, [r3, #0]
  4016da:	47a0      	blx	r4
  4016dc:	4602      	mov	r2, r0
  4016de:	460b      	mov	r3, r1
  4016e0:	4650      	mov	r0, sl
  4016e2:	4659      	mov	r1, fp
  4016e4:	4c46      	ldr	r4, [pc, #280]	; (401800 <main+0x200>)
  4016e6:	47a0      	blx	r4
  4016e8:	4b46      	ldr	r3, [pc, #280]	; (401804 <main+0x204>)
  4016ea:	4798      	blx	r3
  4016ec:	4604      	mov	r4, r0
  4016ee:	4b46      	ldr	r3, [pc, #280]	; (401808 <main+0x208>)
  4016f0:	6018      	str	r0, [r3, #0]
		gfx_mono_draw_string("c", 0, 0, &sysfont);
  4016f2:	4643      	mov	r3, r8
  4016f4:	2200      	movs	r2, #0
  4016f6:	4611      	mov	r1, r2
  4016f8:	4844      	ldr	r0, [pc, #272]	; (40180c <main+0x20c>)
  4016fa:	47b8      	blx	r7
		gfx_mono_draw_string("m", 0, 12, &sysfont);
  4016fc:	4643      	mov	r3, r8
  4016fe:	220c      	movs	r2, #12
  401700:	2100      	movs	r1, #0
  401702:	4843      	ldr	r0, [pc, #268]	; (401810 <main+0x210>)
  401704:	47b8      	blx	r7
		gfx_mono_draw_string("tempo", 40, 20, &sysfont);
  401706:	4643      	mov	r3, r8
  401708:	2214      	movs	r2, #20
  40170a:	2128      	movs	r1, #40	; 0x28
  40170c:	4841      	ldr	r0, [pc, #260]	; (401814 <main+0x214>)
  40170e:	47b8      	blx	r7
		int distancia = (delta_t * 340 / 2 / 10000);
  401710:	f44f 73aa 	mov.w	r3, #340	; 0x154
  401714:	fb03 f304 	mul.w	r3, r3, r4
  401718:	4a3f      	ldr	r2, [pc, #252]	; (401818 <main+0x218>)
  40171a:	fb82 1203 	smull	r1, r2, r2, r3
  40171e:	17d8      	asrs	r0, r3, #31
  401720:	ebc0 3062 	rsb	r0, r0, r2, asr #13
  401724:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		atualiza_graf(distancia);
  401728:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  40172c:	bfa8      	it	ge
  40172e:	f44f 70c8 	movge.w	r0, #400	; 0x190
  401732:	4b3a      	ldr	r3, [pc, #232]	; (40181c <main+0x21c>)
  401734:	4798      	blx	r3
		gfx_mono_draw_filled_rect(8, 0, 128, 10, GFX_PIXEL_CLR);
  401736:	2100      	movs	r1, #0
  401738:	9100      	str	r1, [sp, #0]
  40173a:	230a      	movs	r3, #10
  40173c:	2280      	movs	r2, #128	; 0x80
  40173e:	2008      	movs	r0, #8
  401740:	4c37      	ldr	r4, [pc, #220]	; (401820 <main+0x220>)
  401742:	47a0      	blx	r4
  401744:	4e37      	ldr	r6, [pc, #220]	; (401824 <main+0x224>)
  401746:	2469      	movs	r4, #105	; 0x69
	int altura = distancia * 7 / 250;
  401748:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 401830 <main+0x230>
			gfx_mono_draw_string(".", 25 + i*10, n, &sysfont);
  40174c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 401834 <main+0x234>
	int altura = distancia * 7 / 250;
  401750:	f856 3d04 	ldr.w	r3, [r6, #-4]!
  401754:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  401758:	fb8b 2103 	smull	r2, r1, fp, r3
  40175c:	17da      	asrs	r2, r3, #31
  40175e:	ebc2 1221 	rsb	r2, r2, r1, asr #4
	int resultado = 7 - altura;
  401762:	f1c2 0207 	rsb	r2, r2, #7
			gfx_mono_draw_string(".", 25 + i*10, n, &sysfont);
  401766:	4643      	mov	r3, r8
  401768:	b2d2      	uxtb	r2, r2
  40176a:	4621      	mov	r1, r4
  40176c:	4650      	mov	r0, sl
  40176e:	47b8      	blx	r7
  401770:	3c0a      	subs	r4, #10
  401772:	b2e4      	uxtb	r4, r4
		for (int i = 8; i > -1; i--) {
  401774:	2c0f      	cmp	r4, #15
  401776:	d1eb      	bne.n	401750 <main+0x150>
  401778:	e784      	b.n	401684 <main+0x84>
  40177a:	bf00      	nop
  40177c:	f3af 8000 	nop.w
  401780:	00000000 	.word	0x00000000
  401784:	412e8480 	.word	0x412e8480
  401788:	00400aed 	.word	0x00400aed
  40178c:	00400a7d 	.word	0x00400a7d
  401790:	40028000 	.word	0x40028000
  401794:	20400b68 	.word	0x20400b68
  401798:	00401439 	.word	0x00401439
  40179c:	20400b64 	.word	0x20400b64
  4017a0:	0040135d 	.word	0x0040135d
  4017a4:	20400b60 	.word	0x20400b60
  4017a8:	00401039 	.word	0x00401039
  4017ac:	08f0d180 	.word	0x08f0d180
  4017b0:	00400455 	.word	0x00400455
  4017b4:	004004a9 	.word	0x004004a9
  4017b8:	004004af 	.word	0x004004af
  4017bc:	20400048 	.word	0x20400048
  4017c0:	00402109 	.word	0x00402109
  4017c4:	0040075d 	.word	0x0040075d
  4017c8:	00401529 	.word	0x00401529
  4017cc:	20400b89 	.word	0x20400b89
  4017d0:	004006c5 	.word	0x004006c5
  4017d4:	004d2b25 	.word	0x004d2b25
  4017d8:	400e1400 	.word	0x400e1400
  4017dc:	00400c2d 	.word	0x00400c2d
  4017e0:	00400c31 	.word	0x00400c31
  4017e4:	400e1830 	.word	0x400e1830
  4017e8:	00400239 	.word	0x00400239
  4017ec:	0040024d 	.word	0x0040024d
  4017f0:	20400b6c 	.word	0x20400b6c
  4017f4:	00401add 	.word	0x00401add
  4017f8:	00401ba9 	.word	0x00401ba9
  4017fc:	20400044 	.word	0x20400044
  401800:	00401dfd 	.word	0x00401dfd
  401804:	00401fcd 	.word	0x00401fcd
  401808:	20400b8c 	.word	0x20400b8c
  40180c:	00403b5c 	.word	0x00403b5c
  401810:	00403b60 	.word	0x00403b60
  401814:	00403b64 	.word	0x00403b64
  401818:	68db8bad 	.word	0x68db8bad
  40181c:	0040150d 	.word	0x0040150d
  401820:	004005e1 	.word	0x004005e1
  401824:	20400044 	.word	0x20400044
  401828:	20400001 	.word	0x20400001
  40182c:	2040000c 	.word	0x2040000c
  401830:	10624dd3 	.word	0x10624dd3
  401834:	00403b6c 	.word	0x00403b6c

00401838 <__aeabi_drsub>:
  401838:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40183c:	e002      	b.n	401844 <__adddf3>
  40183e:	bf00      	nop

00401840 <__aeabi_dsub>:
  401840:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401844 <__adddf3>:
  401844:	b530      	push	{r4, r5, lr}
  401846:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40184a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40184e:	ea94 0f05 	teq	r4, r5
  401852:	bf08      	it	eq
  401854:	ea90 0f02 	teqeq	r0, r2
  401858:	bf1f      	itttt	ne
  40185a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40185e:	ea55 0c02 	orrsne.w	ip, r5, r2
  401862:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401866:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40186a:	f000 80e2 	beq.w	401a32 <__adddf3+0x1ee>
  40186e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401872:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401876:	bfb8      	it	lt
  401878:	426d      	neglt	r5, r5
  40187a:	dd0c      	ble.n	401896 <__adddf3+0x52>
  40187c:	442c      	add	r4, r5
  40187e:	ea80 0202 	eor.w	r2, r0, r2
  401882:	ea81 0303 	eor.w	r3, r1, r3
  401886:	ea82 0000 	eor.w	r0, r2, r0
  40188a:	ea83 0101 	eor.w	r1, r3, r1
  40188e:	ea80 0202 	eor.w	r2, r0, r2
  401892:	ea81 0303 	eor.w	r3, r1, r3
  401896:	2d36      	cmp	r5, #54	; 0x36
  401898:	bf88      	it	hi
  40189a:	bd30      	pophi	{r4, r5, pc}
  40189c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4018a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4018a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4018a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4018ac:	d002      	beq.n	4018b4 <__adddf3+0x70>
  4018ae:	4240      	negs	r0, r0
  4018b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4018b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4018b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4018bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4018c0:	d002      	beq.n	4018c8 <__adddf3+0x84>
  4018c2:	4252      	negs	r2, r2
  4018c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4018c8:	ea94 0f05 	teq	r4, r5
  4018cc:	f000 80a7 	beq.w	401a1e <__adddf3+0x1da>
  4018d0:	f1a4 0401 	sub.w	r4, r4, #1
  4018d4:	f1d5 0e20 	rsbs	lr, r5, #32
  4018d8:	db0d      	blt.n	4018f6 <__adddf3+0xb2>
  4018da:	fa02 fc0e 	lsl.w	ip, r2, lr
  4018de:	fa22 f205 	lsr.w	r2, r2, r5
  4018e2:	1880      	adds	r0, r0, r2
  4018e4:	f141 0100 	adc.w	r1, r1, #0
  4018e8:	fa03 f20e 	lsl.w	r2, r3, lr
  4018ec:	1880      	adds	r0, r0, r2
  4018ee:	fa43 f305 	asr.w	r3, r3, r5
  4018f2:	4159      	adcs	r1, r3
  4018f4:	e00e      	b.n	401914 <__adddf3+0xd0>
  4018f6:	f1a5 0520 	sub.w	r5, r5, #32
  4018fa:	f10e 0e20 	add.w	lr, lr, #32
  4018fe:	2a01      	cmp	r2, #1
  401900:	fa03 fc0e 	lsl.w	ip, r3, lr
  401904:	bf28      	it	cs
  401906:	f04c 0c02 	orrcs.w	ip, ip, #2
  40190a:	fa43 f305 	asr.w	r3, r3, r5
  40190e:	18c0      	adds	r0, r0, r3
  401910:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401918:	d507      	bpl.n	40192a <__adddf3+0xe6>
  40191a:	f04f 0e00 	mov.w	lr, #0
  40191e:	f1dc 0c00 	rsbs	ip, ip, #0
  401922:	eb7e 0000 	sbcs.w	r0, lr, r0
  401926:	eb6e 0101 	sbc.w	r1, lr, r1
  40192a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40192e:	d31b      	bcc.n	401968 <__adddf3+0x124>
  401930:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401934:	d30c      	bcc.n	401950 <__adddf3+0x10c>
  401936:	0849      	lsrs	r1, r1, #1
  401938:	ea5f 0030 	movs.w	r0, r0, rrx
  40193c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401940:	f104 0401 	add.w	r4, r4, #1
  401944:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401948:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40194c:	f080 809a 	bcs.w	401a84 <__adddf3+0x240>
  401950:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401954:	bf08      	it	eq
  401956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40195a:	f150 0000 	adcs.w	r0, r0, #0
  40195e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401962:	ea41 0105 	orr.w	r1, r1, r5
  401966:	bd30      	pop	{r4, r5, pc}
  401968:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40196c:	4140      	adcs	r0, r0
  40196e:	eb41 0101 	adc.w	r1, r1, r1
  401972:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401976:	f1a4 0401 	sub.w	r4, r4, #1
  40197a:	d1e9      	bne.n	401950 <__adddf3+0x10c>
  40197c:	f091 0f00 	teq	r1, #0
  401980:	bf04      	itt	eq
  401982:	4601      	moveq	r1, r0
  401984:	2000      	moveq	r0, #0
  401986:	fab1 f381 	clz	r3, r1
  40198a:	bf08      	it	eq
  40198c:	3320      	addeq	r3, #32
  40198e:	f1a3 030b 	sub.w	r3, r3, #11
  401992:	f1b3 0220 	subs.w	r2, r3, #32
  401996:	da0c      	bge.n	4019b2 <__adddf3+0x16e>
  401998:	320c      	adds	r2, #12
  40199a:	dd08      	ble.n	4019ae <__adddf3+0x16a>
  40199c:	f102 0c14 	add.w	ip, r2, #20
  4019a0:	f1c2 020c 	rsb	r2, r2, #12
  4019a4:	fa01 f00c 	lsl.w	r0, r1, ip
  4019a8:	fa21 f102 	lsr.w	r1, r1, r2
  4019ac:	e00c      	b.n	4019c8 <__adddf3+0x184>
  4019ae:	f102 0214 	add.w	r2, r2, #20
  4019b2:	bfd8      	it	le
  4019b4:	f1c2 0c20 	rsble	ip, r2, #32
  4019b8:	fa01 f102 	lsl.w	r1, r1, r2
  4019bc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4019c0:	bfdc      	itt	le
  4019c2:	ea41 010c 	orrle.w	r1, r1, ip
  4019c6:	4090      	lslle	r0, r2
  4019c8:	1ae4      	subs	r4, r4, r3
  4019ca:	bfa2      	ittt	ge
  4019cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4019d0:	4329      	orrge	r1, r5
  4019d2:	bd30      	popge	{r4, r5, pc}
  4019d4:	ea6f 0404 	mvn.w	r4, r4
  4019d8:	3c1f      	subs	r4, #31
  4019da:	da1c      	bge.n	401a16 <__adddf3+0x1d2>
  4019dc:	340c      	adds	r4, #12
  4019de:	dc0e      	bgt.n	4019fe <__adddf3+0x1ba>
  4019e0:	f104 0414 	add.w	r4, r4, #20
  4019e4:	f1c4 0220 	rsb	r2, r4, #32
  4019e8:	fa20 f004 	lsr.w	r0, r0, r4
  4019ec:	fa01 f302 	lsl.w	r3, r1, r2
  4019f0:	ea40 0003 	orr.w	r0, r0, r3
  4019f4:	fa21 f304 	lsr.w	r3, r1, r4
  4019f8:	ea45 0103 	orr.w	r1, r5, r3
  4019fc:	bd30      	pop	{r4, r5, pc}
  4019fe:	f1c4 040c 	rsb	r4, r4, #12
  401a02:	f1c4 0220 	rsb	r2, r4, #32
  401a06:	fa20 f002 	lsr.w	r0, r0, r2
  401a0a:	fa01 f304 	lsl.w	r3, r1, r4
  401a0e:	ea40 0003 	orr.w	r0, r0, r3
  401a12:	4629      	mov	r1, r5
  401a14:	bd30      	pop	{r4, r5, pc}
  401a16:	fa21 f004 	lsr.w	r0, r1, r4
  401a1a:	4629      	mov	r1, r5
  401a1c:	bd30      	pop	{r4, r5, pc}
  401a1e:	f094 0f00 	teq	r4, #0
  401a22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401a26:	bf06      	itte	eq
  401a28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401a2c:	3401      	addeq	r4, #1
  401a2e:	3d01      	subne	r5, #1
  401a30:	e74e      	b.n	4018d0 <__adddf3+0x8c>
  401a32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a36:	bf18      	it	ne
  401a38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401a3c:	d029      	beq.n	401a92 <__adddf3+0x24e>
  401a3e:	ea94 0f05 	teq	r4, r5
  401a42:	bf08      	it	eq
  401a44:	ea90 0f02 	teqeq	r0, r2
  401a48:	d005      	beq.n	401a56 <__adddf3+0x212>
  401a4a:	ea54 0c00 	orrs.w	ip, r4, r0
  401a4e:	bf04      	itt	eq
  401a50:	4619      	moveq	r1, r3
  401a52:	4610      	moveq	r0, r2
  401a54:	bd30      	pop	{r4, r5, pc}
  401a56:	ea91 0f03 	teq	r1, r3
  401a5a:	bf1e      	ittt	ne
  401a5c:	2100      	movne	r1, #0
  401a5e:	2000      	movne	r0, #0
  401a60:	bd30      	popne	{r4, r5, pc}
  401a62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401a66:	d105      	bne.n	401a74 <__adddf3+0x230>
  401a68:	0040      	lsls	r0, r0, #1
  401a6a:	4149      	adcs	r1, r1
  401a6c:	bf28      	it	cs
  401a6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401a72:	bd30      	pop	{r4, r5, pc}
  401a74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401a78:	bf3c      	itt	cc
  401a7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401a7e:	bd30      	popcc	{r4, r5, pc}
  401a80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401a84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401a88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a8c:	f04f 0000 	mov.w	r0, #0
  401a90:	bd30      	pop	{r4, r5, pc}
  401a92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a96:	bf1a      	itte	ne
  401a98:	4619      	movne	r1, r3
  401a9a:	4610      	movne	r0, r2
  401a9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401aa0:	bf1c      	itt	ne
  401aa2:	460b      	movne	r3, r1
  401aa4:	4602      	movne	r2, r0
  401aa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401aaa:	bf06      	itte	eq
  401aac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401ab0:	ea91 0f03 	teqeq	r1, r3
  401ab4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401ab8:	bd30      	pop	{r4, r5, pc}
  401aba:	bf00      	nop

00401abc <__aeabi_ui2d>:
  401abc:	f090 0f00 	teq	r0, #0
  401ac0:	bf04      	itt	eq
  401ac2:	2100      	moveq	r1, #0
  401ac4:	4770      	bxeq	lr
  401ac6:	b530      	push	{r4, r5, lr}
  401ac8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401acc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401ad0:	f04f 0500 	mov.w	r5, #0
  401ad4:	f04f 0100 	mov.w	r1, #0
  401ad8:	e750      	b.n	40197c <__adddf3+0x138>
  401ada:	bf00      	nop

00401adc <__aeabi_i2d>:
  401adc:	f090 0f00 	teq	r0, #0
  401ae0:	bf04      	itt	eq
  401ae2:	2100      	moveq	r1, #0
  401ae4:	4770      	bxeq	lr
  401ae6:	b530      	push	{r4, r5, lr}
  401ae8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401aec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401af0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401af4:	bf48      	it	mi
  401af6:	4240      	negmi	r0, r0
  401af8:	f04f 0100 	mov.w	r1, #0
  401afc:	e73e      	b.n	40197c <__adddf3+0x138>
  401afe:	bf00      	nop

00401b00 <__aeabi_f2d>:
  401b00:	0042      	lsls	r2, r0, #1
  401b02:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401b06:	ea4f 0131 	mov.w	r1, r1, rrx
  401b0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401b0e:	bf1f      	itttt	ne
  401b10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401b14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401b1c:	4770      	bxne	lr
  401b1e:	f092 0f00 	teq	r2, #0
  401b22:	bf14      	ite	ne
  401b24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b28:	4770      	bxeq	lr
  401b2a:	b530      	push	{r4, r5, lr}
  401b2c:	f44f 7460 	mov.w	r4, #896	; 0x380
  401b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401b34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401b38:	e720      	b.n	40197c <__adddf3+0x138>
  401b3a:	bf00      	nop

00401b3c <__aeabi_ul2d>:
  401b3c:	ea50 0201 	orrs.w	r2, r0, r1
  401b40:	bf08      	it	eq
  401b42:	4770      	bxeq	lr
  401b44:	b530      	push	{r4, r5, lr}
  401b46:	f04f 0500 	mov.w	r5, #0
  401b4a:	e00a      	b.n	401b62 <__aeabi_l2d+0x16>

00401b4c <__aeabi_l2d>:
  401b4c:	ea50 0201 	orrs.w	r2, r0, r1
  401b50:	bf08      	it	eq
  401b52:	4770      	bxeq	lr
  401b54:	b530      	push	{r4, r5, lr}
  401b56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401b5a:	d502      	bpl.n	401b62 <__aeabi_l2d+0x16>
  401b5c:	4240      	negs	r0, r0
  401b5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401b62:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401b66:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401b6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401b6e:	f43f aedc 	beq.w	40192a <__adddf3+0xe6>
  401b72:	f04f 0203 	mov.w	r2, #3
  401b76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b7a:	bf18      	it	ne
  401b7c:	3203      	addne	r2, #3
  401b7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b82:	bf18      	it	ne
  401b84:	3203      	addne	r2, #3
  401b86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401b8a:	f1c2 0320 	rsb	r3, r2, #32
  401b8e:	fa00 fc03 	lsl.w	ip, r0, r3
  401b92:	fa20 f002 	lsr.w	r0, r0, r2
  401b96:	fa01 fe03 	lsl.w	lr, r1, r3
  401b9a:	ea40 000e 	orr.w	r0, r0, lr
  401b9e:	fa21 f102 	lsr.w	r1, r1, r2
  401ba2:	4414      	add	r4, r2
  401ba4:	e6c1      	b.n	40192a <__adddf3+0xe6>
  401ba6:	bf00      	nop

00401ba8 <__aeabi_dmul>:
  401ba8:	b570      	push	{r4, r5, r6, lr}
  401baa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401bae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401bb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401bb6:	bf1d      	ittte	ne
  401bb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401bbc:	ea94 0f0c 	teqne	r4, ip
  401bc0:	ea95 0f0c 	teqne	r5, ip
  401bc4:	f000 f8de 	bleq	401d84 <__aeabi_dmul+0x1dc>
  401bc8:	442c      	add	r4, r5
  401bca:	ea81 0603 	eor.w	r6, r1, r3
  401bce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401bd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401bd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401bda:	bf18      	it	ne
  401bdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401be0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401be8:	d038      	beq.n	401c5c <__aeabi_dmul+0xb4>
  401bea:	fba0 ce02 	umull	ip, lr, r0, r2
  401bee:	f04f 0500 	mov.w	r5, #0
  401bf2:	fbe1 e502 	umlal	lr, r5, r1, r2
  401bf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401bfa:	fbe0 e503 	umlal	lr, r5, r0, r3
  401bfe:	f04f 0600 	mov.w	r6, #0
  401c02:	fbe1 5603 	umlal	r5, r6, r1, r3
  401c06:	f09c 0f00 	teq	ip, #0
  401c0a:	bf18      	it	ne
  401c0c:	f04e 0e01 	orrne.w	lr, lr, #1
  401c10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401c14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401c18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401c1c:	d204      	bcs.n	401c28 <__aeabi_dmul+0x80>
  401c1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401c22:	416d      	adcs	r5, r5
  401c24:	eb46 0606 	adc.w	r6, r6, r6
  401c28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401c2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401c30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401c34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401c38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401c3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401c40:	bf88      	it	hi
  401c42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401c46:	d81e      	bhi.n	401c86 <__aeabi_dmul+0xde>
  401c48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401c4c:	bf08      	it	eq
  401c4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401c52:	f150 0000 	adcs.w	r0, r0, #0
  401c56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401c5a:	bd70      	pop	{r4, r5, r6, pc}
  401c5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401c60:	ea46 0101 	orr.w	r1, r6, r1
  401c64:	ea40 0002 	orr.w	r0, r0, r2
  401c68:	ea81 0103 	eor.w	r1, r1, r3
  401c6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401c70:	bfc2      	ittt	gt
  401c72:	ebd4 050c 	rsbsgt	r5, r4, ip
  401c76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401c7a:	bd70      	popgt	{r4, r5, r6, pc}
  401c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c80:	f04f 0e00 	mov.w	lr, #0
  401c84:	3c01      	subs	r4, #1
  401c86:	f300 80ab 	bgt.w	401de0 <__aeabi_dmul+0x238>
  401c8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401c8e:	bfde      	ittt	le
  401c90:	2000      	movle	r0, #0
  401c92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401c96:	bd70      	pople	{r4, r5, r6, pc}
  401c98:	f1c4 0400 	rsb	r4, r4, #0
  401c9c:	3c20      	subs	r4, #32
  401c9e:	da35      	bge.n	401d0c <__aeabi_dmul+0x164>
  401ca0:	340c      	adds	r4, #12
  401ca2:	dc1b      	bgt.n	401cdc <__aeabi_dmul+0x134>
  401ca4:	f104 0414 	add.w	r4, r4, #20
  401ca8:	f1c4 0520 	rsb	r5, r4, #32
  401cac:	fa00 f305 	lsl.w	r3, r0, r5
  401cb0:	fa20 f004 	lsr.w	r0, r0, r4
  401cb4:	fa01 f205 	lsl.w	r2, r1, r5
  401cb8:	ea40 0002 	orr.w	r0, r0, r2
  401cbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401cc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401cc8:	fa21 f604 	lsr.w	r6, r1, r4
  401ccc:	eb42 0106 	adc.w	r1, r2, r6
  401cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401cd4:	bf08      	it	eq
  401cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401cda:	bd70      	pop	{r4, r5, r6, pc}
  401cdc:	f1c4 040c 	rsb	r4, r4, #12
  401ce0:	f1c4 0520 	rsb	r5, r4, #32
  401ce4:	fa00 f304 	lsl.w	r3, r0, r4
  401ce8:	fa20 f005 	lsr.w	r0, r0, r5
  401cec:	fa01 f204 	lsl.w	r2, r1, r4
  401cf0:	ea40 0002 	orr.w	r0, r0, r2
  401cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401cf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401cfc:	f141 0100 	adc.w	r1, r1, #0
  401d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d04:	bf08      	it	eq
  401d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d0a:	bd70      	pop	{r4, r5, r6, pc}
  401d0c:	f1c4 0520 	rsb	r5, r4, #32
  401d10:	fa00 f205 	lsl.w	r2, r0, r5
  401d14:	ea4e 0e02 	orr.w	lr, lr, r2
  401d18:	fa20 f304 	lsr.w	r3, r0, r4
  401d1c:	fa01 f205 	lsl.w	r2, r1, r5
  401d20:	ea43 0302 	orr.w	r3, r3, r2
  401d24:	fa21 f004 	lsr.w	r0, r1, r4
  401d28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d2c:	fa21 f204 	lsr.w	r2, r1, r4
  401d30:	ea20 0002 	bic.w	r0, r0, r2
  401d34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d3c:	bf08      	it	eq
  401d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d42:	bd70      	pop	{r4, r5, r6, pc}
  401d44:	f094 0f00 	teq	r4, #0
  401d48:	d10f      	bne.n	401d6a <__aeabi_dmul+0x1c2>
  401d4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401d4e:	0040      	lsls	r0, r0, #1
  401d50:	eb41 0101 	adc.w	r1, r1, r1
  401d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d58:	bf08      	it	eq
  401d5a:	3c01      	subeq	r4, #1
  401d5c:	d0f7      	beq.n	401d4e <__aeabi_dmul+0x1a6>
  401d5e:	ea41 0106 	orr.w	r1, r1, r6
  401d62:	f095 0f00 	teq	r5, #0
  401d66:	bf18      	it	ne
  401d68:	4770      	bxne	lr
  401d6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401d6e:	0052      	lsls	r2, r2, #1
  401d70:	eb43 0303 	adc.w	r3, r3, r3
  401d74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401d78:	bf08      	it	eq
  401d7a:	3d01      	subeq	r5, #1
  401d7c:	d0f7      	beq.n	401d6e <__aeabi_dmul+0x1c6>
  401d7e:	ea43 0306 	orr.w	r3, r3, r6
  401d82:	4770      	bx	lr
  401d84:	ea94 0f0c 	teq	r4, ip
  401d88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401d8c:	bf18      	it	ne
  401d8e:	ea95 0f0c 	teqne	r5, ip
  401d92:	d00c      	beq.n	401dae <__aeabi_dmul+0x206>
  401d94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401d98:	bf18      	it	ne
  401d9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401d9e:	d1d1      	bne.n	401d44 <__aeabi_dmul+0x19c>
  401da0:	ea81 0103 	eor.w	r1, r1, r3
  401da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401da8:	f04f 0000 	mov.w	r0, #0
  401dac:	bd70      	pop	{r4, r5, r6, pc}
  401dae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401db2:	bf06      	itte	eq
  401db4:	4610      	moveq	r0, r2
  401db6:	4619      	moveq	r1, r3
  401db8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401dbc:	d019      	beq.n	401df2 <__aeabi_dmul+0x24a>
  401dbe:	ea94 0f0c 	teq	r4, ip
  401dc2:	d102      	bne.n	401dca <__aeabi_dmul+0x222>
  401dc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401dc8:	d113      	bne.n	401df2 <__aeabi_dmul+0x24a>
  401dca:	ea95 0f0c 	teq	r5, ip
  401dce:	d105      	bne.n	401ddc <__aeabi_dmul+0x234>
  401dd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401dd4:	bf1c      	itt	ne
  401dd6:	4610      	movne	r0, r2
  401dd8:	4619      	movne	r1, r3
  401dda:	d10a      	bne.n	401df2 <__aeabi_dmul+0x24a>
  401ddc:	ea81 0103 	eor.w	r1, r1, r3
  401de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401de4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401de8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401dec:	f04f 0000 	mov.w	r0, #0
  401df0:	bd70      	pop	{r4, r5, r6, pc}
  401df2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401df6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401dfa:	bd70      	pop	{r4, r5, r6, pc}

00401dfc <__aeabi_ddiv>:
  401dfc:	b570      	push	{r4, r5, r6, lr}
  401dfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401e02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401e06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401e0a:	bf1d      	ittte	ne
  401e0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401e10:	ea94 0f0c 	teqne	r4, ip
  401e14:	ea95 0f0c 	teqne	r5, ip
  401e18:	f000 f8a7 	bleq	401f6a <__aeabi_ddiv+0x16e>
  401e1c:	eba4 0405 	sub.w	r4, r4, r5
  401e20:	ea81 0e03 	eor.w	lr, r1, r3
  401e24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401e28:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401e2c:	f000 8088 	beq.w	401f40 <__aeabi_ddiv+0x144>
  401e30:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401e38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401e3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401e40:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401e44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401e48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401e4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401e50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401e54:	429d      	cmp	r5, r3
  401e56:	bf08      	it	eq
  401e58:	4296      	cmpeq	r6, r2
  401e5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401e5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401e62:	d202      	bcs.n	401e6a <__aeabi_ddiv+0x6e>
  401e64:	085b      	lsrs	r3, r3, #1
  401e66:	ea4f 0232 	mov.w	r2, r2, rrx
  401e6a:	1ab6      	subs	r6, r6, r2
  401e6c:	eb65 0503 	sbc.w	r5, r5, r3
  401e70:	085b      	lsrs	r3, r3, #1
  401e72:	ea4f 0232 	mov.w	r2, r2, rrx
  401e76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401e7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401e7e:	ebb6 0e02 	subs.w	lr, r6, r2
  401e82:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e86:	bf22      	ittt	cs
  401e88:	1ab6      	subcs	r6, r6, r2
  401e8a:	4675      	movcs	r5, lr
  401e8c:	ea40 000c 	orrcs.w	r0, r0, ip
  401e90:	085b      	lsrs	r3, r3, #1
  401e92:	ea4f 0232 	mov.w	r2, r2, rrx
  401e96:	ebb6 0e02 	subs.w	lr, r6, r2
  401e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e9e:	bf22      	ittt	cs
  401ea0:	1ab6      	subcs	r6, r6, r2
  401ea2:	4675      	movcs	r5, lr
  401ea4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401ea8:	085b      	lsrs	r3, r3, #1
  401eaa:	ea4f 0232 	mov.w	r2, r2, rrx
  401eae:	ebb6 0e02 	subs.w	lr, r6, r2
  401eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
  401eb6:	bf22      	ittt	cs
  401eb8:	1ab6      	subcs	r6, r6, r2
  401eba:	4675      	movcs	r5, lr
  401ebc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401ec0:	085b      	lsrs	r3, r3, #1
  401ec2:	ea4f 0232 	mov.w	r2, r2, rrx
  401ec6:	ebb6 0e02 	subs.w	lr, r6, r2
  401eca:	eb75 0e03 	sbcs.w	lr, r5, r3
  401ece:	bf22      	ittt	cs
  401ed0:	1ab6      	subcs	r6, r6, r2
  401ed2:	4675      	movcs	r5, lr
  401ed4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401ed8:	ea55 0e06 	orrs.w	lr, r5, r6
  401edc:	d018      	beq.n	401f10 <__aeabi_ddiv+0x114>
  401ede:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401ee2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401ee6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401eea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401eee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401ef2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401ef6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401efa:	d1c0      	bne.n	401e7e <__aeabi_ddiv+0x82>
  401efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f00:	d10b      	bne.n	401f1a <__aeabi_ddiv+0x11e>
  401f02:	ea41 0100 	orr.w	r1, r1, r0
  401f06:	f04f 0000 	mov.w	r0, #0
  401f0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401f0e:	e7b6      	b.n	401e7e <__aeabi_ddiv+0x82>
  401f10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f14:	bf04      	itt	eq
  401f16:	4301      	orreq	r1, r0
  401f18:	2000      	moveq	r0, #0
  401f1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401f1e:	bf88      	it	hi
  401f20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401f24:	f63f aeaf 	bhi.w	401c86 <__aeabi_dmul+0xde>
  401f28:	ebb5 0c03 	subs.w	ip, r5, r3
  401f2c:	bf04      	itt	eq
  401f2e:	ebb6 0c02 	subseq.w	ip, r6, r2
  401f32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401f36:	f150 0000 	adcs.w	r0, r0, #0
  401f3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401f3e:	bd70      	pop	{r4, r5, r6, pc}
  401f40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401f44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401f48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401f4c:	bfc2      	ittt	gt
  401f4e:	ebd4 050c 	rsbsgt	r5, r4, ip
  401f52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401f56:	bd70      	popgt	{r4, r5, r6, pc}
  401f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401f5c:	f04f 0e00 	mov.w	lr, #0
  401f60:	3c01      	subs	r4, #1
  401f62:	e690      	b.n	401c86 <__aeabi_dmul+0xde>
  401f64:	ea45 0e06 	orr.w	lr, r5, r6
  401f68:	e68d      	b.n	401c86 <__aeabi_dmul+0xde>
  401f6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401f6e:	ea94 0f0c 	teq	r4, ip
  401f72:	bf08      	it	eq
  401f74:	ea95 0f0c 	teqeq	r5, ip
  401f78:	f43f af3b 	beq.w	401df2 <__aeabi_dmul+0x24a>
  401f7c:	ea94 0f0c 	teq	r4, ip
  401f80:	d10a      	bne.n	401f98 <__aeabi_ddiv+0x19c>
  401f82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401f86:	f47f af34 	bne.w	401df2 <__aeabi_dmul+0x24a>
  401f8a:	ea95 0f0c 	teq	r5, ip
  401f8e:	f47f af25 	bne.w	401ddc <__aeabi_dmul+0x234>
  401f92:	4610      	mov	r0, r2
  401f94:	4619      	mov	r1, r3
  401f96:	e72c      	b.n	401df2 <__aeabi_dmul+0x24a>
  401f98:	ea95 0f0c 	teq	r5, ip
  401f9c:	d106      	bne.n	401fac <__aeabi_ddiv+0x1b0>
  401f9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401fa2:	f43f aefd 	beq.w	401da0 <__aeabi_dmul+0x1f8>
  401fa6:	4610      	mov	r0, r2
  401fa8:	4619      	mov	r1, r3
  401faa:	e722      	b.n	401df2 <__aeabi_dmul+0x24a>
  401fac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401fb0:	bf18      	it	ne
  401fb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401fb6:	f47f aec5 	bne.w	401d44 <__aeabi_dmul+0x19c>
  401fba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401fbe:	f47f af0d 	bne.w	401ddc <__aeabi_dmul+0x234>
  401fc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401fc6:	f47f aeeb 	bne.w	401da0 <__aeabi_dmul+0x1f8>
  401fca:	e712      	b.n	401df2 <__aeabi_dmul+0x24a>

00401fcc <__aeabi_d2iz>:
  401fcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  401fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401fd4:	d215      	bcs.n	402002 <__aeabi_d2iz+0x36>
  401fd6:	d511      	bpl.n	401ffc <__aeabi_d2iz+0x30>
  401fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401fe0:	d912      	bls.n	402008 <__aeabi_d2iz+0x3c>
  401fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401fee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401ff2:	fa23 f002 	lsr.w	r0, r3, r2
  401ff6:	bf18      	it	ne
  401ff8:	4240      	negne	r0, r0
  401ffa:	4770      	bx	lr
  401ffc:	f04f 0000 	mov.w	r0, #0
  402000:	4770      	bx	lr
  402002:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402006:	d105      	bne.n	402014 <__aeabi_d2iz+0x48>
  402008:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40200c:	bf08      	it	eq
  40200e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402012:	4770      	bx	lr
  402014:	f04f 0000 	mov.w	r0, #0
  402018:	4770      	bx	lr
  40201a:	bf00      	nop

0040201c <__libc_init_array>:
  40201c:	b570      	push	{r4, r5, r6, lr}
  40201e:	4e0f      	ldr	r6, [pc, #60]	; (40205c <__libc_init_array+0x40>)
  402020:	4d0f      	ldr	r5, [pc, #60]	; (402060 <__libc_init_array+0x44>)
  402022:	1b76      	subs	r6, r6, r5
  402024:	10b6      	asrs	r6, r6, #2
  402026:	bf18      	it	ne
  402028:	2400      	movne	r4, #0
  40202a:	d005      	beq.n	402038 <__libc_init_array+0x1c>
  40202c:	3401      	adds	r4, #1
  40202e:	f855 3b04 	ldr.w	r3, [r5], #4
  402032:	4798      	blx	r3
  402034:	42a6      	cmp	r6, r4
  402036:	d1f9      	bne.n	40202c <__libc_init_array+0x10>
  402038:	4e0a      	ldr	r6, [pc, #40]	; (402064 <__libc_init_array+0x48>)
  40203a:	4d0b      	ldr	r5, [pc, #44]	; (402068 <__libc_init_array+0x4c>)
  40203c:	1b76      	subs	r6, r6, r5
  40203e:	f001 fd99 	bl	403b74 <_init>
  402042:	10b6      	asrs	r6, r6, #2
  402044:	bf18      	it	ne
  402046:	2400      	movne	r4, #0
  402048:	d006      	beq.n	402058 <__libc_init_array+0x3c>
  40204a:	3401      	adds	r4, #1
  40204c:	f855 3b04 	ldr.w	r3, [r5], #4
  402050:	4798      	blx	r3
  402052:	42a6      	cmp	r6, r4
  402054:	d1f9      	bne.n	40204a <__libc_init_array+0x2e>
  402056:	bd70      	pop	{r4, r5, r6, pc}
  402058:	bd70      	pop	{r4, r5, r6, pc}
  40205a:	bf00      	nop
  40205c:	00403b80 	.word	0x00403b80
  402060:	00403b80 	.word	0x00403b80
  402064:	00403b88 	.word	0x00403b88
  402068:	00403b80 	.word	0x00403b80

0040206c <memset>:
  40206c:	b470      	push	{r4, r5, r6}
  40206e:	0786      	lsls	r6, r0, #30
  402070:	d046      	beq.n	402100 <memset+0x94>
  402072:	1e54      	subs	r4, r2, #1
  402074:	2a00      	cmp	r2, #0
  402076:	d041      	beq.n	4020fc <memset+0x90>
  402078:	b2ca      	uxtb	r2, r1
  40207a:	4603      	mov	r3, r0
  40207c:	e002      	b.n	402084 <memset+0x18>
  40207e:	f114 34ff 	adds.w	r4, r4, #4294967295
  402082:	d33b      	bcc.n	4020fc <memset+0x90>
  402084:	f803 2b01 	strb.w	r2, [r3], #1
  402088:	079d      	lsls	r5, r3, #30
  40208a:	d1f8      	bne.n	40207e <memset+0x12>
  40208c:	2c03      	cmp	r4, #3
  40208e:	d92e      	bls.n	4020ee <memset+0x82>
  402090:	b2cd      	uxtb	r5, r1
  402092:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402096:	2c0f      	cmp	r4, #15
  402098:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40209c:	d919      	bls.n	4020d2 <memset+0x66>
  40209e:	f103 0210 	add.w	r2, r3, #16
  4020a2:	4626      	mov	r6, r4
  4020a4:	3e10      	subs	r6, #16
  4020a6:	2e0f      	cmp	r6, #15
  4020a8:	f842 5c10 	str.w	r5, [r2, #-16]
  4020ac:	f842 5c0c 	str.w	r5, [r2, #-12]
  4020b0:	f842 5c08 	str.w	r5, [r2, #-8]
  4020b4:	f842 5c04 	str.w	r5, [r2, #-4]
  4020b8:	f102 0210 	add.w	r2, r2, #16
  4020bc:	d8f2      	bhi.n	4020a4 <memset+0x38>
  4020be:	f1a4 0210 	sub.w	r2, r4, #16
  4020c2:	f022 020f 	bic.w	r2, r2, #15
  4020c6:	f004 040f 	and.w	r4, r4, #15
  4020ca:	3210      	adds	r2, #16
  4020cc:	2c03      	cmp	r4, #3
  4020ce:	4413      	add	r3, r2
  4020d0:	d90d      	bls.n	4020ee <memset+0x82>
  4020d2:	461e      	mov	r6, r3
  4020d4:	4622      	mov	r2, r4
  4020d6:	3a04      	subs	r2, #4
  4020d8:	2a03      	cmp	r2, #3
  4020da:	f846 5b04 	str.w	r5, [r6], #4
  4020de:	d8fa      	bhi.n	4020d6 <memset+0x6a>
  4020e0:	1f22      	subs	r2, r4, #4
  4020e2:	f022 0203 	bic.w	r2, r2, #3
  4020e6:	3204      	adds	r2, #4
  4020e8:	4413      	add	r3, r2
  4020ea:	f004 0403 	and.w	r4, r4, #3
  4020ee:	b12c      	cbz	r4, 4020fc <memset+0x90>
  4020f0:	b2c9      	uxtb	r1, r1
  4020f2:	441c      	add	r4, r3
  4020f4:	f803 1b01 	strb.w	r1, [r3], #1
  4020f8:	429c      	cmp	r4, r3
  4020fa:	d1fb      	bne.n	4020f4 <memset+0x88>
  4020fc:	bc70      	pop	{r4, r5, r6}
  4020fe:	4770      	bx	lr
  402100:	4614      	mov	r4, r2
  402102:	4603      	mov	r3, r0
  402104:	e7c2      	b.n	40208c <memset+0x20>
  402106:	bf00      	nop

00402108 <setbuf>:
  402108:	2900      	cmp	r1, #0
  40210a:	bf0c      	ite	eq
  40210c:	2202      	moveq	r2, #2
  40210e:	2200      	movne	r2, #0
  402110:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402114:	f000 b800 	b.w	402118 <setvbuf>

00402118 <setvbuf>:
  402118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40211c:	4c61      	ldr	r4, [pc, #388]	; (4022a4 <setvbuf+0x18c>)
  40211e:	6825      	ldr	r5, [r4, #0]
  402120:	b083      	sub	sp, #12
  402122:	4604      	mov	r4, r0
  402124:	460f      	mov	r7, r1
  402126:	4690      	mov	r8, r2
  402128:	461e      	mov	r6, r3
  40212a:	b115      	cbz	r5, 402132 <setvbuf+0x1a>
  40212c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40212e:	2b00      	cmp	r3, #0
  402130:	d064      	beq.n	4021fc <setvbuf+0xe4>
  402132:	f1b8 0f02 	cmp.w	r8, #2
  402136:	d006      	beq.n	402146 <setvbuf+0x2e>
  402138:	f1b8 0f01 	cmp.w	r8, #1
  40213c:	f200 809f 	bhi.w	40227e <setvbuf+0x166>
  402140:	2e00      	cmp	r6, #0
  402142:	f2c0 809c 	blt.w	40227e <setvbuf+0x166>
  402146:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402148:	07d8      	lsls	r0, r3, #31
  40214a:	d534      	bpl.n	4021b6 <setvbuf+0x9e>
  40214c:	4621      	mov	r1, r4
  40214e:	4628      	mov	r0, r5
  402150:	f000 f95a 	bl	402408 <_fflush_r>
  402154:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402156:	b141      	cbz	r1, 40216a <setvbuf+0x52>
  402158:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40215c:	4299      	cmp	r1, r3
  40215e:	d002      	beq.n	402166 <setvbuf+0x4e>
  402160:	4628      	mov	r0, r5
  402162:	f000 fa4b 	bl	4025fc <_free_r>
  402166:	2300      	movs	r3, #0
  402168:	6323      	str	r3, [r4, #48]	; 0x30
  40216a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40216e:	2200      	movs	r2, #0
  402170:	61a2      	str	r2, [r4, #24]
  402172:	6062      	str	r2, [r4, #4]
  402174:	061a      	lsls	r2, r3, #24
  402176:	d43a      	bmi.n	4021ee <setvbuf+0xd6>
  402178:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40217c:	f023 0303 	bic.w	r3, r3, #3
  402180:	f1b8 0f02 	cmp.w	r8, #2
  402184:	81a3      	strh	r3, [r4, #12]
  402186:	d01d      	beq.n	4021c4 <setvbuf+0xac>
  402188:	ab01      	add	r3, sp, #4
  40218a:	466a      	mov	r2, sp
  40218c:	4621      	mov	r1, r4
  40218e:	4628      	mov	r0, r5
  402190:	f000 fb4c 	bl	40282c <__swhatbuf_r>
  402194:	89a3      	ldrh	r3, [r4, #12]
  402196:	4318      	orrs	r0, r3
  402198:	81a0      	strh	r0, [r4, #12]
  40219a:	2e00      	cmp	r6, #0
  40219c:	d132      	bne.n	402204 <setvbuf+0xec>
  40219e:	9e00      	ldr	r6, [sp, #0]
  4021a0:	4630      	mov	r0, r6
  4021a2:	f000 fb71 	bl	402888 <malloc>
  4021a6:	4607      	mov	r7, r0
  4021a8:	2800      	cmp	r0, #0
  4021aa:	d06b      	beq.n	402284 <setvbuf+0x16c>
  4021ac:	89a3      	ldrh	r3, [r4, #12]
  4021ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021b2:	81a3      	strh	r3, [r4, #12]
  4021b4:	e028      	b.n	402208 <setvbuf+0xf0>
  4021b6:	89a3      	ldrh	r3, [r4, #12]
  4021b8:	0599      	lsls	r1, r3, #22
  4021ba:	d4c7      	bmi.n	40214c <setvbuf+0x34>
  4021bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4021be:	f000 fb31 	bl	402824 <__retarget_lock_acquire_recursive>
  4021c2:	e7c3      	b.n	40214c <setvbuf+0x34>
  4021c4:	2500      	movs	r5, #0
  4021c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4021c8:	2600      	movs	r6, #0
  4021ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4021ce:	f043 0302 	orr.w	r3, r3, #2
  4021d2:	2001      	movs	r0, #1
  4021d4:	60a6      	str	r6, [r4, #8]
  4021d6:	07ce      	lsls	r6, r1, #31
  4021d8:	81a3      	strh	r3, [r4, #12]
  4021da:	6022      	str	r2, [r4, #0]
  4021dc:	6122      	str	r2, [r4, #16]
  4021de:	6160      	str	r0, [r4, #20]
  4021e0:	d401      	bmi.n	4021e6 <setvbuf+0xce>
  4021e2:	0598      	lsls	r0, r3, #22
  4021e4:	d53e      	bpl.n	402264 <setvbuf+0x14c>
  4021e6:	4628      	mov	r0, r5
  4021e8:	b003      	add	sp, #12
  4021ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021ee:	6921      	ldr	r1, [r4, #16]
  4021f0:	4628      	mov	r0, r5
  4021f2:	f000 fa03 	bl	4025fc <_free_r>
  4021f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4021fa:	e7bd      	b.n	402178 <setvbuf+0x60>
  4021fc:	4628      	mov	r0, r5
  4021fe:	f000 f95b 	bl	4024b8 <__sinit>
  402202:	e796      	b.n	402132 <setvbuf+0x1a>
  402204:	2f00      	cmp	r7, #0
  402206:	d0cb      	beq.n	4021a0 <setvbuf+0x88>
  402208:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40220a:	2b00      	cmp	r3, #0
  40220c:	d033      	beq.n	402276 <setvbuf+0x15e>
  40220e:	9b00      	ldr	r3, [sp, #0]
  402210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402214:	6027      	str	r7, [r4, #0]
  402216:	429e      	cmp	r6, r3
  402218:	bf1c      	itt	ne
  40221a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40221e:	81a2      	strhne	r2, [r4, #12]
  402220:	f1b8 0f01 	cmp.w	r8, #1
  402224:	bf04      	itt	eq
  402226:	f042 0201 	orreq.w	r2, r2, #1
  40222a:	81a2      	strheq	r2, [r4, #12]
  40222c:	b292      	uxth	r2, r2
  40222e:	f012 0308 	ands.w	r3, r2, #8
  402232:	6127      	str	r7, [r4, #16]
  402234:	6166      	str	r6, [r4, #20]
  402236:	d00e      	beq.n	402256 <setvbuf+0x13e>
  402238:	07d1      	lsls	r1, r2, #31
  40223a:	d51a      	bpl.n	402272 <setvbuf+0x15a>
  40223c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40223e:	4276      	negs	r6, r6
  402240:	2300      	movs	r3, #0
  402242:	f015 0501 	ands.w	r5, r5, #1
  402246:	61a6      	str	r6, [r4, #24]
  402248:	60a3      	str	r3, [r4, #8]
  40224a:	d009      	beq.n	402260 <setvbuf+0x148>
  40224c:	2500      	movs	r5, #0
  40224e:	4628      	mov	r0, r5
  402250:	b003      	add	sp, #12
  402252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402256:	60a3      	str	r3, [r4, #8]
  402258:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40225a:	f015 0501 	ands.w	r5, r5, #1
  40225e:	d1f5      	bne.n	40224c <setvbuf+0x134>
  402260:	0593      	lsls	r3, r2, #22
  402262:	d4c0      	bmi.n	4021e6 <setvbuf+0xce>
  402264:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402266:	f000 fadf 	bl	402828 <__retarget_lock_release_recursive>
  40226a:	4628      	mov	r0, r5
  40226c:	b003      	add	sp, #12
  40226e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402272:	60a6      	str	r6, [r4, #8]
  402274:	e7f0      	b.n	402258 <setvbuf+0x140>
  402276:	4628      	mov	r0, r5
  402278:	f000 f91e 	bl	4024b8 <__sinit>
  40227c:	e7c7      	b.n	40220e <setvbuf+0xf6>
  40227e:	f04f 35ff 	mov.w	r5, #4294967295
  402282:	e7b0      	b.n	4021e6 <setvbuf+0xce>
  402284:	f8dd 9000 	ldr.w	r9, [sp]
  402288:	45b1      	cmp	r9, r6
  40228a:	d004      	beq.n	402296 <setvbuf+0x17e>
  40228c:	4648      	mov	r0, r9
  40228e:	f000 fafb 	bl	402888 <malloc>
  402292:	4607      	mov	r7, r0
  402294:	b920      	cbnz	r0, 4022a0 <setvbuf+0x188>
  402296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40229a:	f04f 35ff 	mov.w	r5, #4294967295
  40229e:	e792      	b.n	4021c6 <setvbuf+0xae>
  4022a0:	464e      	mov	r6, r9
  4022a2:	e783      	b.n	4021ac <setvbuf+0x94>
  4022a4:	20400048 	.word	0x20400048

004022a8 <register_fini>:
  4022a8:	4b02      	ldr	r3, [pc, #8]	; (4022b4 <register_fini+0xc>)
  4022aa:	b113      	cbz	r3, 4022b2 <register_fini+0xa>
  4022ac:	4802      	ldr	r0, [pc, #8]	; (4022b8 <register_fini+0x10>)
  4022ae:	f000 b805 	b.w	4022bc <atexit>
  4022b2:	4770      	bx	lr
  4022b4:	00000000 	.word	0x00000000
  4022b8:	00402529 	.word	0x00402529

004022bc <atexit>:
  4022bc:	2300      	movs	r3, #0
  4022be:	4601      	mov	r1, r0
  4022c0:	461a      	mov	r2, r3
  4022c2:	4618      	mov	r0, r3
  4022c4:	f000 be10 	b.w	402ee8 <__register_exitproc>

004022c8 <__sflush_r>:
  4022c8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4022cc:	b29a      	uxth	r2, r3
  4022ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022d2:	460d      	mov	r5, r1
  4022d4:	0711      	lsls	r1, r2, #28
  4022d6:	4680      	mov	r8, r0
  4022d8:	d43a      	bmi.n	402350 <__sflush_r+0x88>
  4022da:	686a      	ldr	r2, [r5, #4]
  4022dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4022e0:	2a00      	cmp	r2, #0
  4022e2:	81ab      	strh	r3, [r5, #12]
  4022e4:	dd6f      	ble.n	4023c6 <__sflush_r+0xfe>
  4022e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4022e8:	2c00      	cmp	r4, #0
  4022ea:	d049      	beq.n	402380 <__sflush_r+0xb8>
  4022ec:	2200      	movs	r2, #0
  4022ee:	b29b      	uxth	r3, r3
  4022f0:	f8d8 6000 	ldr.w	r6, [r8]
  4022f4:	f8c8 2000 	str.w	r2, [r8]
  4022f8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4022fc:	d067      	beq.n	4023ce <__sflush_r+0x106>
  4022fe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402300:	075f      	lsls	r7, r3, #29
  402302:	d505      	bpl.n	402310 <__sflush_r+0x48>
  402304:	6869      	ldr	r1, [r5, #4]
  402306:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402308:	1a52      	subs	r2, r2, r1
  40230a:	b10b      	cbz	r3, 402310 <__sflush_r+0x48>
  40230c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40230e:	1ad2      	subs	r2, r2, r3
  402310:	2300      	movs	r3, #0
  402312:	69e9      	ldr	r1, [r5, #28]
  402314:	4640      	mov	r0, r8
  402316:	47a0      	blx	r4
  402318:	1c44      	adds	r4, r0, #1
  40231a:	d03c      	beq.n	402396 <__sflush_r+0xce>
  40231c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402320:	692a      	ldr	r2, [r5, #16]
  402322:	602a      	str	r2, [r5, #0]
  402324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402328:	2200      	movs	r2, #0
  40232a:	81ab      	strh	r3, [r5, #12]
  40232c:	04db      	lsls	r3, r3, #19
  40232e:	606a      	str	r2, [r5, #4]
  402330:	d447      	bmi.n	4023c2 <__sflush_r+0xfa>
  402332:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402334:	f8c8 6000 	str.w	r6, [r8]
  402338:	b311      	cbz	r1, 402380 <__sflush_r+0xb8>
  40233a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40233e:	4299      	cmp	r1, r3
  402340:	d002      	beq.n	402348 <__sflush_r+0x80>
  402342:	4640      	mov	r0, r8
  402344:	f000 f95a 	bl	4025fc <_free_r>
  402348:	2000      	movs	r0, #0
  40234a:	6328      	str	r0, [r5, #48]	; 0x30
  40234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402350:	692e      	ldr	r6, [r5, #16]
  402352:	b1ae      	cbz	r6, 402380 <__sflush_r+0xb8>
  402354:	682c      	ldr	r4, [r5, #0]
  402356:	602e      	str	r6, [r5, #0]
  402358:	0791      	lsls	r1, r2, #30
  40235a:	bf0c      	ite	eq
  40235c:	696b      	ldreq	r3, [r5, #20]
  40235e:	2300      	movne	r3, #0
  402360:	1ba4      	subs	r4, r4, r6
  402362:	60ab      	str	r3, [r5, #8]
  402364:	e00a      	b.n	40237c <__sflush_r+0xb4>
  402366:	4623      	mov	r3, r4
  402368:	4632      	mov	r2, r6
  40236a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40236c:	69e9      	ldr	r1, [r5, #28]
  40236e:	4640      	mov	r0, r8
  402370:	47b8      	blx	r7
  402372:	2800      	cmp	r0, #0
  402374:	eba4 0400 	sub.w	r4, r4, r0
  402378:	4406      	add	r6, r0
  40237a:	dd04      	ble.n	402386 <__sflush_r+0xbe>
  40237c:	2c00      	cmp	r4, #0
  40237e:	dcf2      	bgt.n	402366 <__sflush_r+0x9e>
  402380:	2000      	movs	r0, #0
  402382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402386:	89ab      	ldrh	r3, [r5, #12]
  402388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40238c:	81ab      	strh	r3, [r5, #12]
  40238e:	f04f 30ff 	mov.w	r0, #4294967295
  402392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402396:	f8d8 4000 	ldr.w	r4, [r8]
  40239a:	2c1d      	cmp	r4, #29
  40239c:	d8f3      	bhi.n	402386 <__sflush_r+0xbe>
  40239e:	4b19      	ldr	r3, [pc, #100]	; (402404 <__sflush_r+0x13c>)
  4023a0:	40e3      	lsrs	r3, r4
  4023a2:	43db      	mvns	r3, r3
  4023a4:	f013 0301 	ands.w	r3, r3, #1
  4023a8:	d1ed      	bne.n	402386 <__sflush_r+0xbe>
  4023aa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4023ae:	606b      	str	r3, [r5, #4]
  4023b0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4023b4:	6929      	ldr	r1, [r5, #16]
  4023b6:	81ab      	strh	r3, [r5, #12]
  4023b8:	04da      	lsls	r2, r3, #19
  4023ba:	6029      	str	r1, [r5, #0]
  4023bc:	d5b9      	bpl.n	402332 <__sflush_r+0x6a>
  4023be:	2c00      	cmp	r4, #0
  4023c0:	d1b7      	bne.n	402332 <__sflush_r+0x6a>
  4023c2:	6528      	str	r0, [r5, #80]	; 0x50
  4023c4:	e7b5      	b.n	402332 <__sflush_r+0x6a>
  4023c6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4023c8:	2a00      	cmp	r2, #0
  4023ca:	dc8c      	bgt.n	4022e6 <__sflush_r+0x1e>
  4023cc:	e7d8      	b.n	402380 <__sflush_r+0xb8>
  4023ce:	2301      	movs	r3, #1
  4023d0:	69e9      	ldr	r1, [r5, #28]
  4023d2:	4640      	mov	r0, r8
  4023d4:	47a0      	blx	r4
  4023d6:	1c43      	adds	r3, r0, #1
  4023d8:	4602      	mov	r2, r0
  4023da:	d002      	beq.n	4023e2 <__sflush_r+0x11a>
  4023dc:	89ab      	ldrh	r3, [r5, #12]
  4023de:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4023e0:	e78e      	b.n	402300 <__sflush_r+0x38>
  4023e2:	f8d8 3000 	ldr.w	r3, [r8]
  4023e6:	2b00      	cmp	r3, #0
  4023e8:	d0f8      	beq.n	4023dc <__sflush_r+0x114>
  4023ea:	2b1d      	cmp	r3, #29
  4023ec:	d001      	beq.n	4023f2 <__sflush_r+0x12a>
  4023ee:	2b16      	cmp	r3, #22
  4023f0:	d102      	bne.n	4023f8 <__sflush_r+0x130>
  4023f2:	f8c8 6000 	str.w	r6, [r8]
  4023f6:	e7c3      	b.n	402380 <__sflush_r+0xb8>
  4023f8:	89ab      	ldrh	r3, [r5, #12]
  4023fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023fe:	81ab      	strh	r3, [r5, #12]
  402400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402404:	20400001 	.word	0x20400001

00402408 <_fflush_r>:
  402408:	b538      	push	{r3, r4, r5, lr}
  40240a:	460d      	mov	r5, r1
  40240c:	4604      	mov	r4, r0
  40240e:	b108      	cbz	r0, 402414 <_fflush_r+0xc>
  402410:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402412:	b1bb      	cbz	r3, 402444 <_fflush_r+0x3c>
  402414:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402418:	b188      	cbz	r0, 40243e <_fflush_r+0x36>
  40241a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40241c:	07db      	lsls	r3, r3, #31
  40241e:	d401      	bmi.n	402424 <_fflush_r+0x1c>
  402420:	0581      	lsls	r1, r0, #22
  402422:	d517      	bpl.n	402454 <_fflush_r+0x4c>
  402424:	4620      	mov	r0, r4
  402426:	4629      	mov	r1, r5
  402428:	f7ff ff4e 	bl	4022c8 <__sflush_r>
  40242c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40242e:	07da      	lsls	r2, r3, #31
  402430:	4604      	mov	r4, r0
  402432:	d402      	bmi.n	40243a <_fflush_r+0x32>
  402434:	89ab      	ldrh	r3, [r5, #12]
  402436:	059b      	lsls	r3, r3, #22
  402438:	d507      	bpl.n	40244a <_fflush_r+0x42>
  40243a:	4620      	mov	r0, r4
  40243c:	bd38      	pop	{r3, r4, r5, pc}
  40243e:	4604      	mov	r4, r0
  402440:	4620      	mov	r0, r4
  402442:	bd38      	pop	{r3, r4, r5, pc}
  402444:	f000 f838 	bl	4024b8 <__sinit>
  402448:	e7e4      	b.n	402414 <_fflush_r+0xc>
  40244a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40244c:	f000 f9ec 	bl	402828 <__retarget_lock_release_recursive>
  402450:	4620      	mov	r0, r4
  402452:	bd38      	pop	{r3, r4, r5, pc}
  402454:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402456:	f000 f9e5 	bl	402824 <__retarget_lock_acquire_recursive>
  40245a:	e7e3      	b.n	402424 <_fflush_r+0x1c>

0040245c <_cleanup_r>:
  40245c:	4901      	ldr	r1, [pc, #4]	; (402464 <_cleanup_r+0x8>)
  40245e:	f000 b9b3 	b.w	4027c8 <_fwalk_reent>
  402462:	bf00      	nop
  402464:	00402fd1 	.word	0x00402fd1

00402468 <std.isra.0>:
  402468:	b510      	push	{r4, lr}
  40246a:	2300      	movs	r3, #0
  40246c:	4604      	mov	r4, r0
  40246e:	8181      	strh	r1, [r0, #12]
  402470:	81c2      	strh	r2, [r0, #14]
  402472:	6003      	str	r3, [r0, #0]
  402474:	6043      	str	r3, [r0, #4]
  402476:	6083      	str	r3, [r0, #8]
  402478:	6643      	str	r3, [r0, #100]	; 0x64
  40247a:	6103      	str	r3, [r0, #16]
  40247c:	6143      	str	r3, [r0, #20]
  40247e:	6183      	str	r3, [r0, #24]
  402480:	4619      	mov	r1, r3
  402482:	2208      	movs	r2, #8
  402484:	305c      	adds	r0, #92	; 0x5c
  402486:	f7ff fdf1 	bl	40206c <memset>
  40248a:	4807      	ldr	r0, [pc, #28]	; (4024a8 <std.isra.0+0x40>)
  40248c:	4907      	ldr	r1, [pc, #28]	; (4024ac <std.isra.0+0x44>)
  40248e:	4a08      	ldr	r2, [pc, #32]	; (4024b0 <std.isra.0+0x48>)
  402490:	4b08      	ldr	r3, [pc, #32]	; (4024b4 <std.isra.0+0x4c>)
  402492:	6220      	str	r0, [r4, #32]
  402494:	61e4      	str	r4, [r4, #28]
  402496:	6261      	str	r1, [r4, #36]	; 0x24
  402498:	62a2      	str	r2, [r4, #40]	; 0x28
  40249a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40249c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4024a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4024a4:	f000 b9ba 	b.w	40281c <__retarget_lock_init_recursive>
  4024a8:	00402e35 	.word	0x00402e35
  4024ac:	00402e59 	.word	0x00402e59
  4024b0:	00402e95 	.word	0x00402e95
  4024b4:	00402eb5 	.word	0x00402eb5

004024b8 <__sinit>:
  4024b8:	b510      	push	{r4, lr}
  4024ba:	4604      	mov	r4, r0
  4024bc:	4812      	ldr	r0, [pc, #72]	; (402508 <__sinit+0x50>)
  4024be:	f000 f9b1 	bl	402824 <__retarget_lock_acquire_recursive>
  4024c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4024c4:	b9d2      	cbnz	r2, 4024fc <__sinit+0x44>
  4024c6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4024ca:	4810      	ldr	r0, [pc, #64]	; (40250c <__sinit+0x54>)
  4024cc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4024d0:	2103      	movs	r1, #3
  4024d2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4024d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4024d8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4024dc:	6860      	ldr	r0, [r4, #4]
  4024de:	2104      	movs	r1, #4
  4024e0:	f7ff ffc2 	bl	402468 <std.isra.0>
  4024e4:	2201      	movs	r2, #1
  4024e6:	2109      	movs	r1, #9
  4024e8:	68a0      	ldr	r0, [r4, #8]
  4024ea:	f7ff ffbd 	bl	402468 <std.isra.0>
  4024ee:	2202      	movs	r2, #2
  4024f0:	2112      	movs	r1, #18
  4024f2:	68e0      	ldr	r0, [r4, #12]
  4024f4:	f7ff ffb8 	bl	402468 <std.isra.0>
  4024f8:	2301      	movs	r3, #1
  4024fa:	63a3      	str	r3, [r4, #56]	; 0x38
  4024fc:	4802      	ldr	r0, [pc, #8]	; (402508 <__sinit+0x50>)
  4024fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402502:	f000 b991 	b.w	402828 <__retarget_lock_release_recursive>
  402506:	bf00      	nop
  402508:	20400ba0 	.word	0x20400ba0
  40250c:	0040245d 	.word	0x0040245d

00402510 <__sfp_lock_acquire>:
  402510:	4801      	ldr	r0, [pc, #4]	; (402518 <__sfp_lock_acquire+0x8>)
  402512:	f000 b987 	b.w	402824 <__retarget_lock_acquire_recursive>
  402516:	bf00      	nop
  402518:	20400bb4 	.word	0x20400bb4

0040251c <__sfp_lock_release>:
  40251c:	4801      	ldr	r0, [pc, #4]	; (402524 <__sfp_lock_release+0x8>)
  40251e:	f000 b983 	b.w	402828 <__retarget_lock_release_recursive>
  402522:	bf00      	nop
  402524:	20400bb4 	.word	0x20400bb4

00402528 <__libc_fini_array>:
  402528:	b538      	push	{r3, r4, r5, lr}
  40252a:	4c0a      	ldr	r4, [pc, #40]	; (402554 <__libc_fini_array+0x2c>)
  40252c:	4d0a      	ldr	r5, [pc, #40]	; (402558 <__libc_fini_array+0x30>)
  40252e:	1b64      	subs	r4, r4, r5
  402530:	10a4      	asrs	r4, r4, #2
  402532:	d00a      	beq.n	40254a <__libc_fini_array+0x22>
  402534:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402538:	3b01      	subs	r3, #1
  40253a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40253e:	3c01      	subs	r4, #1
  402540:	f855 3904 	ldr.w	r3, [r5], #-4
  402544:	4798      	blx	r3
  402546:	2c00      	cmp	r4, #0
  402548:	d1f9      	bne.n	40253e <__libc_fini_array+0x16>
  40254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40254e:	f001 bb1b 	b.w	403b88 <_fini>
  402552:	bf00      	nop
  402554:	00403b98 	.word	0x00403b98
  402558:	00403b94 	.word	0x00403b94

0040255c <_malloc_trim_r>:
  40255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40255e:	4f24      	ldr	r7, [pc, #144]	; (4025f0 <_malloc_trim_r+0x94>)
  402560:	460c      	mov	r4, r1
  402562:	4606      	mov	r6, r0
  402564:	f000 fc48 	bl	402df8 <__malloc_lock>
  402568:	68bb      	ldr	r3, [r7, #8]
  40256a:	685d      	ldr	r5, [r3, #4]
  40256c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402570:	310f      	adds	r1, #15
  402572:	f025 0503 	bic.w	r5, r5, #3
  402576:	4429      	add	r1, r5
  402578:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40257c:	f021 010f 	bic.w	r1, r1, #15
  402580:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402584:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402588:	db07      	blt.n	40259a <_malloc_trim_r+0x3e>
  40258a:	2100      	movs	r1, #0
  40258c:	4630      	mov	r0, r6
  40258e:	f000 fc3f 	bl	402e10 <_sbrk_r>
  402592:	68bb      	ldr	r3, [r7, #8]
  402594:	442b      	add	r3, r5
  402596:	4298      	cmp	r0, r3
  402598:	d004      	beq.n	4025a4 <_malloc_trim_r+0x48>
  40259a:	4630      	mov	r0, r6
  40259c:	f000 fc32 	bl	402e04 <__malloc_unlock>
  4025a0:	2000      	movs	r0, #0
  4025a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025a4:	4261      	negs	r1, r4
  4025a6:	4630      	mov	r0, r6
  4025a8:	f000 fc32 	bl	402e10 <_sbrk_r>
  4025ac:	3001      	adds	r0, #1
  4025ae:	d00d      	beq.n	4025cc <_malloc_trim_r+0x70>
  4025b0:	4b10      	ldr	r3, [pc, #64]	; (4025f4 <_malloc_trim_r+0x98>)
  4025b2:	68ba      	ldr	r2, [r7, #8]
  4025b4:	6819      	ldr	r1, [r3, #0]
  4025b6:	1b2d      	subs	r5, r5, r4
  4025b8:	f045 0501 	orr.w	r5, r5, #1
  4025bc:	4630      	mov	r0, r6
  4025be:	1b09      	subs	r1, r1, r4
  4025c0:	6055      	str	r5, [r2, #4]
  4025c2:	6019      	str	r1, [r3, #0]
  4025c4:	f000 fc1e 	bl	402e04 <__malloc_unlock>
  4025c8:	2001      	movs	r0, #1
  4025ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025cc:	2100      	movs	r1, #0
  4025ce:	4630      	mov	r0, r6
  4025d0:	f000 fc1e 	bl	402e10 <_sbrk_r>
  4025d4:	68ba      	ldr	r2, [r7, #8]
  4025d6:	1a83      	subs	r3, r0, r2
  4025d8:	2b0f      	cmp	r3, #15
  4025da:	ddde      	ble.n	40259a <_malloc_trim_r+0x3e>
  4025dc:	4c06      	ldr	r4, [pc, #24]	; (4025f8 <_malloc_trim_r+0x9c>)
  4025de:	4905      	ldr	r1, [pc, #20]	; (4025f4 <_malloc_trim_r+0x98>)
  4025e0:	6824      	ldr	r4, [r4, #0]
  4025e2:	f043 0301 	orr.w	r3, r3, #1
  4025e6:	1b00      	subs	r0, r0, r4
  4025e8:	6053      	str	r3, [r2, #4]
  4025ea:	6008      	str	r0, [r1, #0]
  4025ec:	e7d5      	b.n	40259a <_malloc_trim_r+0x3e>
  4025ee:	bf00      	nop
  4025f0:	2040047c 	.word	0x2040047c
  4025f4:	20400b2c 	.word	0x20400b2c
  4025f8:	20400884 	.word	0x20400884

004025fc <_free_r>:
  4025fc:	2900      	cmp	r1, #0
  4025fe:	d044      	beq.n	40268a <_free_r+0x8e>
  402600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402604:	460d      	mov	r5, r1
  402606:	4680      	mov	r8, r0
  402608:	f000 fbf6 	bl	402df8 <__malloc_lock>
  40260c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402610:	4969      	ldr	r1, [pc, #420]	; (4027b8 <_free_r+0x1bc>)
  402612:	f027 0301 	bic.w	r3, r7, #1
  402616:	f1a5 0408 	sub.w	r4, r5, #8
  40261a:	18e2      	adds	r2, r4, r3
  40261c:	688e      	ldr	r6, [r1, #8]
  40261e:	6850      	ldr	r0, [r2, #4]
  402620:	42b2      	cmp	r2, r6
  402622:	f020 0003 	bic.w	r0, r0, #3
  402626:	d05e      	beq.n	4026e6 <_free_r+0xea>
  402628:	07fe      	lsls	r6, r7, #31
  40262a:	6050      	str	r0, [r2, #4]
  40262c:	d40b      	bmi.n	402646 <_free_r+0x4a>
  40262e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402632:	1be4      	subs	r4, r4, r7
  402634:	f101 0e08 	add.w	lr, r1, #8
  402638:	68a5      	ldr	r5, [r4, #8]
  40263a:	4575      	cmp	r5, lr
  40263c:	443b      	add	r3, r7
  40263e:	d06d      	beq.n	40271c <_free_r+0x120>
  402640:	68e7      	ldr	r7, [r4, #12]
  402642:	60ef      	str	r7, [r5, #12]
  402644:	60bd      	str	r5, [r7, #8]
  402646:	1815      	adds	r5, r2, r0
  402648:	686d      	ldr	r5, [r5, #4]
  40264a:	07ed      	lsls	r5, r5, #31
  40264c:	d53e      	bpl.n	4026cc <_free_r+0xd0>
  40264e:	f043 0201 	orr.w	r2, r3, #1
  402652:	6062      	str	r2, [r4, #4]
  402654:	50e3      	str	r3, [r4, r3]
  402656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40265a:	d217      	bcs.n	40268c <_free_r+0x90>
  40265c:	08db      	lsrs	r3, r3, #3
  40265e:	1c58      	adds	r0, r3, #1
  402660:	109a      	asrs	r2, r3, #2
  402662:	684d      	ldr	r5, [r1, #4]
  402664:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402668:	60a7      	str	r7, [r4, #8]
  40266a:	2301      	movs	r3, #1
  40266c:	4093      	lsls	r3, r2
  40266e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402672:	432b      	orrs	r3, r5
  402674:	3a08      	subs	r2, #8
  402676:	60e2      	str	r2, [r4, #12]
  402678:	604b      	str	r3, [r1, #4]
  40267a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40267e:	60fc      	str	r4, [r7, #12]
  402680:	4640      	mov	r0, r8
  402682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402686:	f000 bbbd 	b.w	402e04 <__malloc_unlock>
  40268a:	4770      	bx	lr
  40268c:	0a5a      	lsrs	r2, r3, #9
  40268e:	2a04      	cmp	r2, #4
  402690:	d852      	bhi.n	402738 <_free_r+0x13c>
  402692:	099a      	lsrs	r2, r3, #6
  402694:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402698:	00ff      	lsls	r7, r7, #3
  40269a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40269e:	19c8      	adds	r0, r1, r7
  4026a0:	59ca      	ldr	r2, [r1, r7]
  4026a2:	3808      	subs	r0, #8
  4026a4:	4290      	cmp	r0, r2
  4026a6:	d04f      	beq.n	402748 <_free_r+0x14c>
  4026a8:	6851      	ldr	r1, [r2, #4]
  4026aa:	f021 0103 	bic.w	r1, r1, #3
  4026ae:	428b      	cmp	r3, r1
  4026b0:	d232      	bcs.n	402718 <_free_r+0x11c>
  4026b2:	6892      	ldr	r2, [r2, #8]
  4026b4:	4290      	cmp	r0, r2
  4026b6:	d1f7      	bne.n	4026a8 <_free_r+0xac>
  4026b8:	68c3      	ldr	r3, [r0, #12]
  4026ba:	60a0      	str	r0, [r4, #8]
  4026bc:	60e3      	str	r3, [r4, #12]
  4026be:	609c      	str	r4, [r3, #8]
  4026c0:	60c4      	str	r4, [r0, #12]
  4026c2:	4640      	mov	r0, r8
  4026c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4026c8:	f000 bb9c 	b.w	402e04 <__malloc_unlock>
  4026cc:	6895      	ldr	r5, [r2, #8]
  4026ce:	4f3b      	ldr	r7, [pc, #236]	; (4027bc <_free_r+0x1c0>)
  4026d0:	42bd      	cmp	r5, r7
  4026d2:	4403      	add	r3, r0
  4026d4:	d040      	beq.n	402758 <_free_r+0x15c>
  4026d6:	68d0      	ldr	r0, [r2, #12]
  4026d8:	60e8      	str	r0, [r5, #12]
  4026da:	f043 0201 	orr.w	r2, r3, #1
  4026de:	6085      	str	r5, [r0, #8]
  4026e0:	6062      	str	r2, [r4, #4]
  4026e2:	50e3      	str	r3, [r4, r3]
  4026e4:	e7b7      	b.n	402656 <_free_r+0x5a>
  4026e6:	07ff      	lsls	r7, r7, #31
  4026e8:	4403      	add	r3, r0
  4026ea:	d407      	bmi.n	4026fc <_free_r+0x100>
  4026ec:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4026f0:	1aa4      	subs	r4, r4, r2
  4026f2:	4413      	add	r3, r2
  4026f4:	68a0      	ldr	r0, [r4, #8]
  4026f6:	68e2      	ldr	r2, [r4, #12]
  4026f8:	60c2      	str	r2, [r0, #12]
  4026fa:	6090      	str	r0, [r2, #8]
  4026fc:	4a30      	ldr	r2, [pc, #192]	; (4027c0 <_free_r+0x1c4>)
  4026fe:	6812      	ldr	r2, [r2, #0]
  402700:	f043 0001 	orr.w	r0, r3, #1
  402704:	4293      	cmp	r3, r2
  402706:	6060      	str	r0, [r4, #4]
  402708:	608c      	str	r4, [r1, #8]
  40270a:	d3b9      	bcc.n	402680 <_free_r+0x84>
  40270c:	4b2d      	ldr	r3, [pc, #180]	; (4027c4 <_free_r+0x1c8>)
  40270e:	4640      	mov	r0, r8
  402710:	6819      	ldr	r1, [r3, #0]
  402712:	f7ff ff23 	bl	40255c <_malloc_trim_r>
  402716:	e7b3      	b.n	402680 <_free_r+0x84>
  402718:	4610      	mov	r0, r2
  40271a:	e7cd      	b.n	4026b8 <_free_r+0xbc>
  40271c:	1811      	adds	r1, r2, r0
  40271e:	6849      	ldr	r1, [r1, #4]
  402720:	07c9      	lsls	r1, r1, #31
  402722:	d444      	bmi.n	4027ae <_free_r+0x1b2>
  402724:	6891      	ldr	r1, [r2, #8]
  402726:	68d2      	ldr	r2, [r2, #12]
  402728:	60ca      	str	r2, [r1, #12]
  40272a:	4403      	add	r3, r0
  40272c:	f043 0001 	orr.w	r0, r3, #1
  402730:	6091      	str	r1, [r2, #8]
  402732:	6060      	str	r0, [r4, #4]
  402734:	50e3      	str	r3, [r4, r3]
  402736:	e7a3      	b.n	402680 <_free_r+0x84>
  402738:	2a14      	cmp	r2, #20
  40273a:	d816      	bhi.n	40276a <_free_r+0x16e>
  40273c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402740:	00ff      	lsls	r7, r7, #3
  402742:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402746:	e7aa      	b.n	40269e <_free_r+0xa2>
  402748:	10aa      	asrs	r2, r5, #2
  40274a:	2301      	movs	r3, #1
  40274c:	684d      	ldr	r5, [r1, #4]
  40274e:	4093      	lsls	r3, r2
  402750:	432b      	orrs	r3, r5
  402752:	604b      	str	r3, [r1, #4]
  402754:	4603      	mov	r3, r0
  402756:	e7b0      	b.n	4026ba <_free_r+0xbe>
  402758:	f043 0201 	orr.w	r2, r3, #1
  40275c:	614c      	str	r4, [r1, #20]
  40275e:	610c      	str	r4, [r1, #16]
  402760:	60e5      	str	r5, [r4, #12]
  402762:	60a5      	str	r5, [r4, #8]
  402764:	6062      	str	r2, [r4, #4]
  402766:	50e3      	str	r3, [r4, r3]
  402768:	e78a      	b.n	402680 <_free_r+0x84>
  40276a:	2a54      	cmp	r2, #84	; 0x54
  40276c:	d806      	bhi.n	40277c <_free_r+0x180>
  40276e:	0b1a      	lsrs	r2, r3, #12
  402770:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402774:	00ff      	lsls	r7, r7, #3
  402776:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40277a:	e790      	b.n	40269e <_free_r+0xa2>
  40277c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402780:	d806      	bhi.n	402790 <_free_r+0x194>
  402782:	0bda      	lsrs	r2, r3, #15
  402784:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402788:	00ff      	lsls	r7, r7, #3
  40278a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40278e:	e786      	b.n	40269e <_free_r+0xa2>
  402790:	f240 5054 	movw	r0, #1364	; 0x554
  402794:	4282      	cmp	r2, r0
  402796:	d806      	bhi.n	4027a6 <_free_r+0x1aa>
  402798:	0c9a      	lsrs	r2, r3, #18
  40279a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40279e:	00ff      	lsls	r7, r7, #3
  4027a0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4027a4:	e77b      	b.n	40269e <_free_r+0xa2>
  4027a6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4027aa:	257e      	movs	r5, #126	; 0x7e
  4027ac:	e777      	b.n	40269e <_free_r+0xa2>
  4027ae:	f043 0101 	orr.w	r1, r3, #1
  4027b2:	6061      	str	r1, [r4, #4]
  4027b4:	6013      	str	r3, [r2, #0]
  4027b6:	e763      	b.n	402680 <_free_r+0x84>
  4027b8:	2040047c 	.word	0x2040047c
  4027bc:	20400484 	.word	0x20400484
  4027c0:	20400888 	.word	0x20400888
  4027c4:	20400b5c 	.word	0x20400b5c

004027c8 <_fwalk_reent>:
  4027c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4027cc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4027d0:	d01f      	beq.n	402812 <_fwalk_reent+0x4a>
  4027d2:	4688      	mov	r8, r1
  4027d4:	4606      	mov	r6, r0
  4027d6:	f04f 0900 	mov.w	r9, #0
  4027da:	687d      	ldr	r5, [r7, #4]
  4027dc:	68bc      	ldr	r4, [r7, #8]
  4027de:	3d01      	subs	r5, #1
  4027e0:	d411      	bmi.n	402806 <_fwalk_reent+0x3e>
  4027e2:	89a3      	ldrh	r3, [r4, #12]
  4027e4:	2b01      	cmp	r3, #1
  4027e6:	f105 35ff 	add.w	r5, r5, #4294967295
  4027ea:	d908      	bls.n	4027fe <_fwalk_reent+0x36>
  4027ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4027f0:	3301      	adds	r3, #1
  4027f2:	4621      	mov	r1, r4
  4027f4:	4630      	mov	r0, r6
  4027f6:	d002      	beq.n	4027fe <_fwalk_reent+0x36>
  4027f8:	47c0      	blx	r8
  4027fa:	ea49 0900 	orr.w	r9, r9, r0
  4027fe:	1c6b      	adds	r3, r5, #1
  402800:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402804:	d1ed      	bne.n	4027e2 <_fwalk_reent+0x1a>
  402806:	683f      	ldr	r7, [r7, #0]
  402808:	2f00      	cmp	r7, #0
  40280a:	d1e6      	bne.n	4027da <_fwalk_reent+0x12>
  40280c:	4648      	mov	r0, r9
  40280e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402812:	46b9      	mov	r9, r7
  402814:	4648      	mov	r0, r9
  402816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40281a:	bf00      	nop

0040281c <__retarget_lock_init_recursive>:
  40281c:	4770      	bx	lr
  40281e:	bf00      	nop

00402820 <__retarget_lock_close_recursive>:
  402820:	4770      	bx	lr
  402822:	bf00      	nop

00402824 <__retarget_lock_acquire_recursive>:
  402824:	4770      	bx	lr
  402826:	bf00      	nop

00402828 <__retarget_lock_release_recursive>:
  402828:	4770      	bx	lr
  40282a:	bf00      	nop

0040282c <__swhatbuf_r>:
  40282c:	b570      	push	{r4, r5, r6, lr}
  40282e:	460c      	mov	r4, r1
  402830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402834:	2900      	cmp	r1, #0
  402836:	b090      	sub	sp, #64	; 0x40
  402838:	4615      	mov	r5, r2
  40283a:	461e      	mov	r6, r3
  40283c:	db14      	blt.n	402868 <__swhatbuf_r+0x3c>
  40283e:	aa01      	add	r2, sp, #4
  402840:	f000 fc28 	bl	403094 <_fstat_r>
  402844:	2800      	cmp	r0, #0
  402846:	db0f      	blt.n	402868 <__swhatbuf_r+0x3c>
  402848:	9a02      	ldr	r2, [sp, #8]
  40284a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40284e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402852:	fab2 f282 	clz	r2, r2
  402856:	0952      	lsrs	r2, r2, #5
  402858:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40285c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402860:	6032      	str	r2, [r6, #0]
  402862:	602b      	str	r3, [r5, #0]
  402864:	b010      	add	sp, #64	; 0x40
  402866:	bd70      	pop	{r4, r5, r6, pc}
  402868:	89a2      	ldrh	r2, [r4, #12]
  40286a:	2300      	movs	r3, #0
  40286c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402870:	6033      	str	r3, [r6, #0]
  402872:	d004      	beq.n	40287e <__swhatbuf_r+0x52>
  402874:	2240      	movs	r2, #64	; 0x40
  402876:	4618      	mov	r0, r3
  402878:	602a      	str	r2, [r5, #0]
  40287a:	b010      	add	sp, #64	; 0x40
  40287c:	bd70      	pop	{r4, r5, r6, pc}
  40287e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402882:	602b      	str	r3, [r5, #0]
  402884:	b010      	add	sp, #64	; 0x40
  402886:	bd70      	pop	{r4, r5, r6, pc}

00402888 <malloc>:
  402888:	4b02      	ldr	r3, [pc, #8]	; (402894 <malloc+0xc>)
  40288a:	4601      	mov	r1, r0
  40288c:	6818      	ldr	r0, [r3, #0]
  40288e:	f000 b803 	b.w	402898 <_malloc_r>
  402892:	bf00      	nop
  402894:	20400048 	.word	0x20400048

00402898 <_malloc_r>:
  402898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40289c:	f101 060b 	add.w	r6, r1, #11
  4028a0:	2e16      	cmp	r6, #22
  4028a2:	b083      	sub	sp, #12
  4028a4:	4605      	mov	r5, r0
  4028a6:	f240 809e 	bls.w	4029e6 <_malloc_r+0x14e>
  4028aa:	f036 0607 	bics.w	r6, r6, #7
  4028ae:	f100 80bd 	bmi.w	402a2c <_malloc_r+0x194>
  4028b2:	42b1      	cmp	r1, r6
  4028b4:	f200 80ba 	bhi.w	402a2c <_malloc_r+0x194>
  4028b8:	f000 fa9e 	bl	402df8 <__malloc_lock>
  4028bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4028c0:	f0c0 8293 	bcc.w	402dea <_malloc_r+0x552>
  4028c4:	0a73      	lsrs	r3, r6, #9
  4028c6:	f000 80b8 	beq.w	402a3a <_malloc_r+0x1a2>
  4028ca:	2b04      	cmp	r3, #4
  4028cc:	f200 8179 	bhi.w	402bc2 <_malloc_r+0x32a>
  4028d0:	09b3      	lsrs	r3, r6, #6
  4028d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4028d6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4028da:	00c3      	lsls	r3, r0, #3
  4028dc:	4fbf      	ldr	r7, [pc, #764]	; (402bdc <_malloc_r+0x344>)
  4028de:	443b      	add	r3, r7
  4028e0:	f1a3 0108 	sub.w	r1, r3, #8
  4028e4:	685c      	ldr	r4, [r3, #4]
  4028e6:	42a1      	cmp	r1, r4
  4028e8:	d106      	bne.n	4028f8 <_malloc_r+0x60>
  4028ea:	e00c      	b.n	402906 <_malloc_r+0x6e>
  4028ec:	2a00      	cmp	r2, #0
  4028ee:	f280 80aa 	bge.w	402a46 <_malloc_r+0x1ae>
  4028f2:	68e4      	ldr	r4, [r4, #12]
  4028f4:	42a1      	cmp	r1, r4
  4028f6:	d006      	beq.n	402906 <_malloc_r+0x6e>
  4028f8:	6863      	ldr	r3, [r4, #4]
  4028fa:	f023 0303 	bic.w	r3, r3, #3
  4028fe:	1b9a      	subs	r2, r3, r6
  402900:	2a0f      	cmp	r2, #15
  402902:	ddf3      	ble.n	4028ec <_malloc_r+0x54>
  402904:	4670      	mov	r0, lr
  402906:	693c      	ldr	r4, [r7, #16]
  402908:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402bf0 <_malloc_r+0x358>
  40290c:	4574      	cmp	r4, lr
  40290e:	f000 81ab 	beq.w	402c68 <_malloc_r+0x3d0>
  402912:	6863      	ldr	r3, [r4, #4]
  402914:	f023 0303 	bic.w	r3, r3, #3
  402918:	1b9a      	subs	r2, r3, r6
  40291a:	2a0f      	cmp	r2, #15
  40291c:	f300 8190 	bgt.w	402c40 <_malloc_r+0x3a8>
  402920:	2a00      	cmp	r2, #0
  402922:	f8c7 e014 	str.w	lr, [r7, #20]
  402926:	f8c7 e010 	str.w	lr, [r7, #16]
  40292a:	f280 809d 	bge.w	402a68 <_malloc_r+0x1d0>
  40292e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402932:	f080 8161 	bcs.w	402bf8 <_malloc_r+0x360>
  402936:	08db      	lsrs	r3, r3, #3
  402938:	f103 0c01 	add.w	ip, r3, #1
  40293c:	1099      	asrs	r1, r3, #2
  40293e:	687a      	ldr	r2, [r7, #4]
  402940:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402944:	f8c4 8008 	str.w	r8, [r4, #8]
  402948:	2301      	movs	r3, #1
  40294a:	408b      	lsls	r3, r1
  40294c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402950:	4313      	orrs	r3, r2
  402952:	3908      	subs	r1, #8
  402954:	60e1      	str	r1, [r4, #12]
  402956:	607b      	str	r3, [r7, #4]
  402958:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40295c:	f8c8 400c 	str.w	r4, [r8, #12]
  402960:	1082      	asrs	r2, r0, #2
  402962:	2401      	movs	r4, #1
  402964:	4094      	lsls	r4, r2
  402966:	429c      	cmp	r4, r3
  402968:	f200 808b 	bhi.w	402a82 <_malloc_r+0x1ea>
  40296c:	421c      	tst	r4, r3
  40296e:	d106      	bne.n	40297e <_malloc_r+0xe6>
  402970:	f020 0003 	bic.w	r0, r0, #3
  402974:	0064      	lsls	r4, r4, #1
  402976:	421c      	tst	r4, r3
  402978:	f100 0004 	add.w	r0, r0, #4
  40297c:	d0fa      	beq.n	402974 <_malloc_r+0xdc>
  40297e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402982:	46cc      	mov	ip, r9
  402984:	4680      	mov	r8, r0
  402986:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40298a:	459c      	cmp	ip, r3
  40298c:	d107      	bne.n	40299e <_malloc_r+0x106>
  40298e:	e16d      	b.n	402c6c <_malloc_r+0x3d4>
  402990:	2a00      	cmp	r2, #0
  402992:	f280 817b 	bge.w	402c8c <_malloc_r+0x3f4>
  402996:	68db      	ldr	r3, [r3, #12]
  402998:	459c      	cmp	ip, r3
  40299a:	f000 8167 	beq.w	402c6c <_malloc_r+0x3d4>
  40299e:	6859      	ldr	r1, [r3, #4]
  4029a0:	f021 0103 	bic.w	r1, r1, #3
  4029a4:	1b8a      	subs	r2, r1, r6
  4029a6:	2a0f      	cmp	r2, #15
  4029a8:	ddf2      	ble.n	402990 <_malloc_r+0xf8>
  4029aa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4029ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4029b2:	9300      	str	r3, [sp, #0]
  4029b4:	199c      	adds	r4, r3, r6
  4029b6:	4628      	mov	r0, r5
  4029b8:	f046 0601 	orr.w	r6, r6, #1
  4029bc:	f042 0501 	orr.w	r5, r2, #1
  4029c0:	605e      	str	r6, [r3, #4]
  4029c2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4029c6:	f8cc 8008 	str.w	r8, [ip, #8]
  4029ca:	617c      	str	r4, [r7, #20]
  4029cc:	613c      	str	r4, [r7, #16]
  4029ce:	f8c4 e00c 	str.w	lr, [r4, #12]
  4029d2:	f8c4 e008 	str.w	lr, [r4, #8]
  4029d6:	6065      	str	r5, [r4, #4]
  4029d8:	505a      	str	r2, [r3, r1]
  4029da:	f000 fa13 	bl	402e04 <__malloc_unlock>
  4029de:	9b00      	ldr	r3, [sp, #0]
  4029e0:	f103 0408 	add.w	r4, r3, #8
  4029e4:	e01e      	b.n	402a24 <_malloc_r+0x18c>
  4029e6:	2910      	cmp	r1, #16
  4029e8:	d820      	bhi.n	402a2c <_malloc_r+0x194>
  4029ea:	f000 fa05 	bl	402df8 <__malloc_lock>
  4029ee:	2610      	movs	r6, #16
  4029f0:	2318      	movs	r3, #24
  4029f2:	2002      	movs	r0, #2
  4029f4:	4f79      	ldr	r7, [pc, #484]	; (402bdc <_malloc_r+0x344>)
  4029f6:	443b      	add	r3, r7
  4029f8:	f1a3 0208 	sub.w	r2, r3, #8
  4029fc:	685c      	ldr	r4, [r3, #4]
  4029fe:	4294      	cmp	r4, r2
  402a00:	f000 813d 	beq.w	402c7e <_malloc_r+0x3e6>
  402a04:	6863      	ldr	r3, [r4, #4]
  402a06:	68e1      	ldr	r1, [r4, #12]
  402a08:	68a6      	ldr	r6, [r4, #8]
  402a0a:	f023 0303 	bic.w	r3, r3, #3
  402a0e:	4423      	add	r3, r4
  402a10:	4628      	mov	r0, r5
  402a12:	685a      	ldr	r2, [r3, #4]
  402a14:	60f1      	str	r1, [r6, #12]
  402a16:	f042 0201 	orr.w	r2, r2, #1
  402a1a:	608e      	str	r6, [r1, #8]
  402a1c:	605a      	str	r2, [r3, #4]
  402a1e:	f000 f9f1 	bl	402e04 <__malloc_unlock>
  402a22:	3408      	adds	r4, #8
  402a24:	4620      	mov	r0, r4
  402a26:	b003      	add	sp, #12
  402a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a2c:	2400      	movs	r4, #0
  402a2e:	230c      	movs	r3, #12
  402a30:	4620      	mov	r0, r4
  402a32:	602b      	str	r3, [r5, #0]
  402a34:	b003      	add	sp, #12
  402a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a3a:	2040      	movs	r0, #64	; 0x40
  402a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
  402a40:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402a44:	e74a      	b.n	4028dc <_malloc_r+0x44>
  402a46:	4423      	add	r3, r4
  402a48:	68e1      	ldr	r1, [r4, #12]
  402a4a:	685a      	ldr	r2, [r3, #4]
  402a4c:	68a6      	ldr	r6, [r4, #8]
  402a4e:	f042 0201 	orr.w	r2, r2, #1
  402a52:	60f1      	str	r1, [r6, #12]
  402a54:	4628      	mov	r0, r5
  402a56:	608e      	str	r6, [r1, #8]
  402a58:	605a      	str	r2, [r3, #4]
  402a5a:	f000 f9d3 	bl	402e04 <__malloc_unlock>
  402a5e:	3408      	adds	r4, #8
  402a60:	4620      	mov	r0, r4
  402a62:	b003      	add	sp, #12
  402a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a68:	4423      	add	r3, r4
  402a6a:	4628      	mov	r0, r5
  402a6c:	685a      	ldr	r2, [r3, #4]
  402a6e:	f042 0201 	orr.w	r2, r2, #1
  402a72:	605a      	str	r2, [r3, #4]
  402a74:	f000 f9c6 	bl	402e04 <__malloc_unlock>
  402a78:	3408      	adds	r4, #8
  402a7a:	4620      	mov	r0, r4
  402a7c:	b003      	add	sp, #12
  402a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a82:	68bc      	ldr	r4, [r7, #8]
  402a84:	6863      	ldr	r3, [r4, #4]
  402a86:	f023 0803 	bic.w	r8, r3, #3
  402a8a:	45b0      	cmp	r8, r6
  402a8c:	d304      	bcc.n	402a98 <_malloc_r+0x200>
  402a8e:	eba8 0306 	sub.w	r3, r8, r6
  402a92:	2b0f      	cmp	r3, #15
  402a94:	f300 8085 	bgt.w	402ba2 <_malloc_r+0x30a>
  402a98:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402bf4 <_malloc_r+0x35c>
  402a9c:	4b50      	ldr	r3, [pc, #320]	; (402be0 <_malloc_r+0x348>)
  402a9e:	f8d9 2000 	ldr.w	r2, [r9]
  402aa2:	681b      	ldr	r3, [r3, #0]
  402aa4:	3201      	adds	r2, #1
  402aa6:	4433      	add	r3, r6
  402aa8:	eb04 0a08 	add.w	sl, r4, r8
  402aac:	f000 8155 	beq.w	402d5a <_malloc_r+0x4c2>
  402ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402ab4:	330f      	adds	r3, #15
  402ab6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402aba:	f02b 0b0f 	bic.w	fp, fp, #15
  402abe:	4659      	mov	r1, fp
  402ac0:	4628      	mov	r0, r5
  402ac2:	f000 f9a5 	bl	402e10 <_sbrk_r>
  402ac6:	1c41      	adds	r1, r0, #1
  402ac8:	4602      	mov	r2, r0
  402aca:	f000 80fc 	beq.w	402cc6 <_malloc_r+0x42e>
  402ace:	4582      	cmp	sl, r0
  402ad0:	f200 80f7 	bhi.w	402cc2 <_malloc_r+0x42a>
  402ad4:	4b43      	ldr	r3, [pc, #268]	; (402be4 <_malloc_r+0x34c>)
  402ad6:	6819      	ldr	r1, [r3, #0]
  402ad8:	4459      	add	r1, fp
  402ada:	6019      	str	r1, [r3, #0]
  402adc:	f000 814d 	beq.w	402d7a <_malloc_r+0x4e2>
  402ae0:	f8d9 0000 	ldr.w	r0, [r9]
  402ae4:	3001      	adds	r0, #1
  402ae6:	bf1b      	ittet	ne
  402ae8:	eba2 0a0a 	subne.w	sl, r2, sl
  402aec:	4451      	addne	r1, sl
  402aee:	f8c9 2000 	streq.w	r2, [r9]
  402af2:	6019      	strne	r1, [r3, #0]
  402af4:	f012 0107 	ands.w	r1, r2, #7
  402af8:	f000 8115 	beq.w	402d26 <_malloc_r+0x48e>
  402afc:	f1c1 0008 	rsb	r0, r1, #8
  402b00:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402b04:	4402      	add	r2, r0
  402b06:	3108      	adds	r1, #8
  402b08:	eb02 090b 	add.w	r9, r2, fp
  402b0c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402b10:	eba1 0909 	sub.w	r9, r1, r9
  402b14:	4649      	mov	r1, r9
  402b16:	4628      	mov	r0, r5
  402b18:	9301      	str	r3, [sp, #4]
  402b1a:	9200      	str	r2, [sp, #0]
  402b1c:	f000 f978 	bl	402e10 <_sbrk_r>
  402b20:	1c43      	adds	r3, r0, #1
  402b22:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402b26:	f000 8143 	beq.w	402db0 <_malloc_r+0x518>
  402b2a:	1a80      	subs	r0, r0, r2
  402b2c:	4448      	add	r0, r9
  402b2e:	f040 0001 	orr.w	r0, r0, #1
  402b32:	6819      	ldr	r1, [r3, #0]
  402b34:	60ba      	str	r2, [r7, #8]
  402b36:	4449      	add	r1, r9
  402b38:	42bc      	cmp	r4, r7
  402b3a:	6050      	str	r0, [r2, #4]
  402b3c:	6019      	str	r1, [r3, #0]
  402b3e:	d017      	beq.n	402b70 <_malloc_r+0x2d8>
  402b40:	f1b8 0f0f 	cmp.w	r8, #15
  402b44:	f240 80fb 	bls.w	402d3e <_malloc_r+0x4a6>
  402b48:	6860      	ldr	r0, [r4, #4]
  402b4a:	f1a8 020c 	sub.w	r2, r8, #12
  402b4e:	f022 0207 	bic.w	r2, r2, #7
  402b52:	eb04 0e02 	add.w	lr, r4, r2
  402b56:	f000 0001 	and.w	r0, r0, #1
  402b5a:	f04f 0c05 	mov.w	ip, #5
  402b5e:	4310      	orrs	r0, r2
  402b60:	2a0f      	cmp	r2, #15
  402b62:	6060      	str	r0, [r4, #4]
  402b64:	f8ce c004 	str.w	ip, [lr, #4]
  402b68:	f8ce c008 	str.w	ip, [lr, #8]
  402b6c:	f200 8117 	bhi.w	402d9e <_malloc_r+0x506>
  402b70:	4b1d      	ldr	r3, [pc, #116]	; (402be8 <_malloc_r+0x350>)
  402b72:	68bc      	ldr	r4, [r7, #8]
  402b74:	681a      	ldr	r2, [r3, #0]
  402b76:	4291      	cmp	r1, r2
  402b78:	bf88      	it	hi
  402b7a:	6019      	strhi	r1, [r3, #0]
  402b7c:	4b1b      	ldr	r3, [pc, #108]	; (402bec <_malloc_r+0x354>)
  402b7e:	681a      	ldr	r2, [r3, #0]
  402b80:	4291      	cmp	r1, r2
  402b82:	6862      	ldr	r2, [r4, #4]
  402b84:	bf88      	it	hi
  402b86:	6019      	strhi	r1, [r3, #0]
  402b88:	f022 0203 	bic.w	r2, r2, #3
  402b8c:	4296      	cmp	r6, r2
  402b8e:	eba2 0306 	sub.w	r3, r2, r6
  402b92:	d801      	bhi.n	402b98 <_malloc_r+0x300>
  402b94:	2b0f      	cmp	r3, #15
  402b96:	dc04      	bgt.n	402ba2 <_malloc_r+0x30a>
  402b98:	4628      	mov	r0, r5
  402b9a:	f000 f933 	bl	402e04 <__malloc_unlock>
  402b9e:	2400      	movs	r4, #0
  402ba0:	e740      	b.n	402a24 <_malloc_r+0x18c>
  402ba2:	19a2      	adds	r2, r4, r6
  402ba4:	f043 0301 	orr.w	r3, r3, #1
  402ba8:	f046 0601 	orr.w	r6, r6, #1
  402bac:	6066      	str	r6, [r4, #4]
  402bae:	4628      	mov	r0, r5
  402bb0:	60ba      	str	r2, [r7, #8]
  402bb2:	6053      	str	r3, [r2, #4]
  402bb4:	f000 f926 	bl	402e04 <__malloc_unlock>
  402bb8:	3408      	adds	r4, #8
  402bba:	4620      	mov	r0, r4
  402bbc:	b003      	add	sp, #12
  402bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bc2:	2b14      	cmp	r3, #20
  402bc4:	d971      	bls.n	402caa <_malloc_r+0x412>
  402bc6:	2b54      	cmp	r3, #84	; 0x54
  402bc8:	f200 80a3 	bhi.w	402d12 <_malloc_r+0x47a>
  402bcc:	0b33      	lsrs	r3, r6, #12
  402bce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402bd2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402bd6:	00c3      	lsls	r3, r0, #3
  402bd8:	e680      	b.n	4028dc <_malloc_r+0x44>
  402bda:	bf00      	nop
  402bdc:	2040047c 	.word	0x2040047c
  402be0:	20400b5c 	.word	0x20400b5c
  402be4:	20400b2c 	.word	0x20400b2c
  402be8:	20400b54 	.word	0x20400b54
  402bec:	20400b58 	.word	0x20400b58
  402bf0:	20400484 	.word	0x20400484
  402bf4:	20400884 	.word	0x20400884
  402bf8:	0a5a      	lsrs	r2, r3, #9
  402bfa:	2a04      	cmp	r2, #4
  402bfc:	d95b      	bls.n	402cb6 <_malloc_r+0x41e>
  402bfe:	2a14      	cmp	r2, #20
  402c00:	f200 80ae 	bhi.w	402d60 <_malloc_r+0x4c8>
  402c04:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402c08:	00c9      	lsls	r1, r1, #3
  402c0a:	325b      	adds	r2, #91	; 0x5b
  402c0c:	eb07 0c01 	add.w	ip, r7, r1
  402c10:	5879      	ldr	r1, [r7, r1]
  402c12:	f1ac 0c08 	sub.w	ip, ip, #8
  402c16:	458c      	cmp	ip, r1
  402c18:	f000 8088 	beq.w	402d2c <_malloc_r+0x494>
  402c1c:	684a      	ldr	r2, [r1, #4]
  402c1e:	f022 0203 	bic.w	r2, r2, #3
  402c22:	4293      	cmp	r3, r2
  402c24:	d273      	bcs.n	402d0e <_malloc_r+0x476>
  402c26:	6889      	ldr	r1, [r1, #8]
  402c28:	458c      	cmp	ip, r1
  402c2a:	d1f7      	bne.n	402c1c <_malloc_r+0x384>
  402c2c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402c30:	687b      	ldr	r3, [r7, #4]
  402c32:	60e2      	str	r2, [r4, #12]
  402c34:	f8c4 c008 	str.w	ip, [r4, #8]
  402c38:	6094      	str	r4, [r2, #8]
  402c3a:	f8cc 400c 	str.w	r4, [ip, #12]
  402c3e:	e68f      	b.n	402960 <_malloc_r+0xc8>
  402c40:	19a1      	adds	r1, r4, r6
  402c42:	f046 0c01 	orr.w	ip, r6, #1
  402c46:	f042 0601 	orr.w	r6, r2, #1
  402c4a:	f8c4 c004 	str.w	ip, [r4, #4]
  402c4e:	4628      	mov	r0, r5
  402c50:	6179      	str	r1, [r7, #20]
  402c52:	6139      	str	r1, [r7, #16]
  402c54:	f8c1 e00c 	str.w	lr, [r1, #12]
  402c58:	f8c1 e008 	str.w	lr, [r1, #8]
  402c5c:	604e      	str	r6, [r1, #4]
  402c5e:	50e2      	str	r2, [r4, r3]
  402c60:	f000 f8d0 	bl	402e04 <__malloc_unlock>
  402c64:	3408      	adds	r4, #8
  402c66:	e6dd      	b.n	402a24 <_malloc_r+0x18c>
  402c68:	687b      	ldr	r3, [r7, #4]
  402c6a:	e679      	b.n	402960 <_malloc_r+0xc8>
  402c6c:	f108 0801 	add.w	r8, r8, #1
  402c70:	f018 0f03 	tst.w	r8, #3
  402c74:	f10c 0c08 	add.w	ip, ip, #8
  402c78:	f47f ae85 	bne.w	402986 <_malloc_r+0xee>
  402c7c:	e02d      	b.n	402cda <_malloc_r+0x442>
  402c7e:	68dc      	ldr	r4, [r3, #12]
  402c80:	42a3      	cmp	r3, r4
  402c82:	bf08      	it	eq
  402c84:	3002      	addeq	r0, #2
  402c86:	f43f ae3e 	beq.w	402906 <_malloc_r+0x6e>
  402c8a:	e6bb      	b.n	402a04 <_malloc_r+0x16c>
  402c8c:	4419      	add	r1, r3
  402c8e:	461c      	mov	r4, r3
  402c90:	684a      	ldr	r2, [r1, #4]
  402c92:	68db      	ldr	r3, [r3, #12]
  402c94:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402c98:	f042 0201 	orr.w	r2, r2, #1
  402c9c:	604a      	str	r2, [r1, #4]
  402c9e:	4628      	mov	r0, r5
  402ca0:	60f3      	str	r3, [r6, #12]
  402ca2:	609e      	str	r6, [r3, #8]
  402ca4:	f000 f8ae 	bl	402e04 <__malloc_unlock>
  402ca8:	e6bc      	b.n	402a24 <_malloc_r+0x18c>
  402caa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402cae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402cb2:	00c3      	lsls	r3, r0, #3
  402cb4:	e612      	b.n	4028dc <_malloc_r+0x44>
  402cb6:	099a      	lsrs	r2, r3, #6
  402cb8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402cbc:	00c9      	lsls	r1, r1, #3
  402cbe:	3238      	adds	r2, #56	; 0x38
  402cc0:	e7a4      	b.n	402c0c <_malloc_r+0x374>
  402cc2:	42bc      	cmp	r4, r7
  402cc4:	d054      	beq.n	402d70 <_malloc_r+0x4d8>
  402cc6:	68bc      	ldr	r4, [r7, #8]
  402cc8:	6862      	ldr	r2, [r4, #4]
  402cca:	f022 0203 	bic.w	r2, r2, #3
  402cce:	e75d      	b.n	402b8c <_malloc_r+0x2f4>
  402cd0:	f859 3908 	ldr.w	r3, [r9], #-8
  402cd4:	4599      	cmp	r9, r3
  402cd6:	f040 8086 	bne.w	402de6 <_malloc_r+0x54e>
  402cda:	f010 0f03 	tst.w	r0, #3
  402cde:	f100 30ff 	add.w	r0, r0, #4294967295
  402ce2:	d1f5      	bne.n	402cd0 <_malloc_r+0x438>
  402ce4:	687b      	ldr	r3, [r7, #4]
  402ce6:	ea23 0304 	bic.w	r3, r3, r4
  402cea:	607b      	str	r3, [r7, #4]
  402cec:	0064      	lsls	r4, r4, #1
  402cee:	429c      	cmp	r4, r3
  402cf0:	f63f aec7 	bhi.w	402a82 <_malloc_r+0x1ea>
  402cf4:	2c00      	cmp	r4, #0
  402cf6:	f43f aec4 	beq.w	402a82 <_malloc_r+0x1ea>
  402cfa:	421c      	tst	r4, r3
  402cfc:	4640      	mov	r0, r8
  402cfe:	f47f ae3e 	bne.w	40297e <_malloc_r+0xe6>
  402d02:	0064      	lsls	r4, r4, #1
  402d04:	421c      	tst	r4, r3
  402d06:	f100 0004 	add.w	r0, r0, #4
  402d0a:	d0fa      	beq.n	402d02 <_malloc_r+0x46a>
  402d0c:	e637      	b.n	40297e <_malloc_r+0xe6>
  402d0e:	468c      	mov	ip, r1
  402d10:	e78c      	b.n	402c2c <_malloc_r+0x394>
  402d12:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402d16:	d815      	bhi.n	402d44 <_malloc_r+0x4ac>
  402d18:	0bf3      	lsrs	r3, r6, #15
  402d1a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402d1e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402d22:	00c3      	lsls	r3, r0, #3
  402d24:	e5da      	b.n	4028dc <_malloc_r+0x44>
  402d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402d2a:	e6ed      	b.n	402b08 <_malloc_r+0x270>
  402d2c:	687b      	ldr	r3, [r7, #4]
  402d2e:	1092      	asrs	r2, r2, #2
  402d30:	2101      	movs	r1, #1
  402d32:	fa01 f202 	lsl.w	r2, r1, r2
  402d36:	4313      	orrs	r3, r2
  402d38:	607b      	str	r3, [r7, #4]
  402d3a:	4662      	mov	r2, ip
  402d3c:	e779      	b.n	402c32 <_malloc_r+0x39a>
  402d3e:	2301      	movs	r3, #1
  402d40:	6053      	str	r3, [r2, #4]
  402d42:	e729      	b.n	402b98 <_malloc_r+0x300>
  402d44:	f240 5254 	movw	r2, #1364	; 0x554
  402d48:	4293      	cmp	r3, r2
  402d4a:	d822      	bhi.n	402d92 <_malloc_r+0x4fa>
  402d4c:	0cb3      	lsrs	r3, r6, #18
  402d4e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402d52:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402d56:	00c3      	lsls	r3, r0, #3
  402d58:	e5c0      	b.n	4028dc <_malloc_r+0x44>
  402d5a:	f103 0b10 	add.w	fp, r3, #16
  402d5e:	e6ae      	b.n	402abe <_malloc_r+0x226>
  402d60:	2a54      	cmp	r2, #84	; 0x54
  402d62:	d829      	bhi.n	402db8 <_malloc_r+0x520>
  402d64:	0b1a      	lsrs	r2, r3, #12
  402d66:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402d6a:	00c9      	lsls	r1, r1, #3
  402d6c:	326e      	adds	r2, #110	; 0x6e
  402d6e:	e74d      	b.n	402c0c <_malloc_r+0x374>
  402d70:	4b20      	ldr	r3, [pc, #128]	; (402df4 <_malloc_r+0x55c>)
  402d72:	6819      	ldr	r1, [r3, #0]
  402d74:	4459      	add	r1, fp
  402d76:	6019      	str	r1, [r3, #0]
  402d78:	e6b2      	b.n	402ae0 <_malloc_r+0x248>
  402d7a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402d7e:	2800      	cmp	r0, #0
  402d80:	f47f aeae 	bne.w	402ae0 <_malloc_r+0x248>
  402d84:	eb08 030b 	add.w	r3, r8, fp
  402d88:	68ba      	ldr	r2, [r7, #8]
  402d8a:	f043 0301 	orr.w	r3, r3, #1
  402d8e:	6053      	str	r3, [r2, #4]
  402d90:	e6ee      	b.n	402b70 <_malloc_r+0x2d8>
  402d92:	207f      	movs	r0, #127	; 0x7f
  402d94:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402d98:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402d9c:	e59e      	b.n	4028dc <_malloc_r+0x44>
  402d9e:	f104 0108 	add.w	r1, r4, #8
  402da2:	4628      	mov	r0, r5
  402da4:	9300      	str	r3, [sp, #0]
  402da6:	f7ff fc29 	bl	4025fc <_free_r>
  402daa:	9b00      	ldr	r3, [sp, #0]
  402dac:	6819      	ldr	r1, [r3, #0]
  402dae:	e6df      	b.n	402b70 <_malloc_r+0x2d8>
  402db0:	2001      	movs	r0, #1
  402db2:	f04f 0900 	mov.w	r9, #0
  402db6:	e6bc      	b.n	402b32 <_malloc_r+0x29a>
  402db8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402dbc:	d805      	bhi.n	402dca <_malloc_r+0x532>
  402dbe:	0bda      	lsrs	r2, r3, #15
  402dc0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402dc4:	00c9      	lsls	r1, r1, #3
  402dc6:	3277      	adds	r2, #119	; 0x77
  402dc8:	e720      	b.n	402c0c <_malloc_r+0x374>
  402dca:	f240 5154 	movw	r1, #1364	; 0x554
  402dce:	428a      	cmp	r2, r1
  402dd0:	d805      	bhi.n	402dde <_malloc_r+0x546>
  402dd2:	0c9a      	lsrs	r2, r3, #18
  402dd4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402dd8:	00c9      	lsls	r1, r1, #3
  402dda:	327c      	adds	r2, #124	; 0x7c
  402ddc:	e716      	b.n	402c0c <_malloc_r+0x374>
  402dde:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402de2:	227e      	movs	r2, #126	; 0x7e
  402de4:	e712      	b.n	402c0c <_malloc_r+0x374>
  402de6:	687b      	ldr	r3, [r7, #4]
  402de8:	e780      	b.n	402cec <_malloc_r+0x454>
  402dea:	08f0      	lsrs	r0, r6, #3
  402dec:	f106 0308 	add.w	r3, r6, #8
  402df0:	e600      	b.n	4029f4 <_malloc_r+0x15c>
  402df2:	bf00      	nop
  402df4:	20400b2c 	.word	0x20400b2c

00402df8 <__malloc_lock>:
  402df8:	4801      	ldr	r0, [pc, #4]	; (402e00 <__malloc_lock+0x8>)
  402dfa:	f7ff bd13 	b.w	402824 <__retarget_lock_acquire_recursive>
  402dfe:	bf00      	nop
  402e00:	20400ba4 	.word	0x20400ba4

00402e04 <__malloc_unlock>:
  402e04:	4801      	ldr	r0, [pc, #4]	; (402e0c <__malloc_unlock+0x8>)
  402e06:	f7ff bd0f 	b.w	402828 <__retarget_lock_release_recursive>
  402e0a:	bf00      	nop
  402e0c:	20400ba4 	.word	0x20400ba4

00402e10 <_sbrk_r>:
  402e10:	b538      	push	{r3, r4, r5, lr}
  402e12:	4c07      	ldr	r4, [pc, #28]	; (402e30 <_sbrk_r+0x20>)
  402e14:	2300      	movs	r3, #0
  402e16:	4605      	mov	r5, r0
  402e18:	4608      	mov	r0, r1
  402e1a:	6023      	str	r3, [r4, #0]
  402e1c:	f7fe fa68 	bl	4012f0 <_sbrk>
  402e20:	1c43      	adds	r3, r0, #1
  402e22:	d000      	beq.n	402e26 <_sbrk_r+0x16>
  402e24:	bd38      	pop	{r3, r4, r5, pc}
  402e26:	6823      	ldr	r3, [r4, #0]
  402e28:	2b00      	cmp	r3, #0
  402e2a:	d0fb      	beq.n	402e24 <_sbrk_r+0x14>
  402e2c:	602b      	str	r3, [r5, #0]
  402e2e:	bd38      	pop	{r3, r4, r5, pc}
  402e30:	20400bb8 	.word	0x20400bb8

00402e34 <__sread>:
  402e34:	b510      	push	{r4, lr}
  402e36:	460c      	mov	r4, r1
  402e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e3c:	f000 f954 	bl	4030e8 <_read_r>
  402e40:	2800      	cmp	r0, #0
  402e42:	db03      	blt.n	402e4c <__sread+0x18>
  402e44:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402e46:	4403      	add	r3, r0
  402e48:	6523      	str	r3, [r4, #80]	; 0x50
  402e4a:	bd10      	pop	{r4, pc}
  402e4c:	89a3      	ldrh	r3, [r4, #12]
  402e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402e52:	81a3      	strh	r3, [r4, #12]
  402e54:	bd10      	pop	{r4, pc}
  402e56:	bf00      	nop

00402e58 <__swrite>:
  402e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e5c:	4616      	mov	r6, r2
  402e5e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402e62:	461f      	mov	r7, r3
  402e64:	05d3      	lsls	r3, r2, #23
  402e66:	460c      	mov	r4, r1
  402e68:	4605      	mov	r5, r0
  402e6a:	d507      	bpl.n	402e7c <__swrite+0x24>
  402e6c:	2200      	movs	r2, #0
  402e6e:	2302      	movs	r3, #2
  402e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e74:	f000 f922 	bl	4030bc <_lseek_r>
  402e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402e84:	81a2      	strh	r2, [r4, #12]
  402e86:	463b      	mov	r3, r7
  402e88:	4632      	mov	r2, r6
  402e8a:	4628      	mov	r0, r5
  402e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402e90:	f000 b814 	b.w	402ebc <_write_r>

00402e94 <__sseek>:
  402e94:	b510      	push	{r4, lr}
  402e96:	460c      	mov	r4, r1
  402e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e9c:	f000 f90e 	bl	4030bc <_lseek_r>
  402ea0:	89a3      	ldrh	r3, [r4, #12]
  402ea2:	1c42      	adds	r2, r0, #1
  402ea4:	bf0e      	itee	eq
  402ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402eae:	6520      	strne	r0, [r4, #80]	; 0x50
  402eb0:	81a3      	strh	r3, [r4, #12]
  402eb2:	bd10      	pop	{r4, pc}

00402eb4 <__sclose>:
  402eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402eb8:	f000 b878 	b.w	402fac <_close_r>

00402ebc <_write_r>:
  402ebc:	b570      	push	{r4, r5, r6, lr}
  402ebe:	460d      	mov	r5, r1
  402ec0:	4c08      	ldr	r4, [pc, #32]	; (402ee4 <_write_r+0x28>)
  402ec2:	4611      	mov	r1, r2
  402ec4:	4606      	mov	r6, r0
  402ec6:	461a      	mov	r2, r3
  402ec8:	4628      	mov	r0, r5
  402eca:	2300      	movs	r3, #0
  402ecc:	6023      	str	r3, [r4, #0]
  402ece:	f7fd f98b 	bl	4001e8 <_write>
  402ed2:	1c43      	adds	r3, r0, #1
  402ed4:	d000      	beq.n	402ed8 <_write_r+0x1c>
  402ed6:	bd70      	pop	{r4, r5, r6, pc}
  402ed8:	6823      	ldr	r3, [r4, #0]
  402eda:	2b00      	cmp	r3, #0
  402edc:	d0fb      	beq.n	402ed6 <_write_r+0x1a>
  402ede:	6033      	str	r3, [r6, #0]
  402ee0:	bd70      	pop	{r4, r5, r6, pc}
  402ee2:	bf00      	nop
  402ee4:	20400bb8 	.word	0x20400bb8

00402ee8 <__register_exitproc>:
  402ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402eec:	4d2c      	ldr	r5, [pc, #176]	; (402fa0 <__register_exitproc+0xb8>)
  402eee:	4606      	mov	r6, r0
  402ef0:	6828      	ldr	r0, [r5, #0]
  402ef2:	4698      	mov	r8, r3
  402ef4:	460f      	mov	r7, r1
  402ef6:	4691      	mov	r9, r2
  402ef8:	f7ff fc94 	bl	402824 <__retarget_lock_acquire_recursive>
  402efc:	4b29      	ldr	r3, [pc, #164]	; (402fa4 <__register_exitproc+0xbc>)
  402efe:	681c      	ldr	r4, [r3, #0]
  402f00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402f04:	2b00      	cmp	r3, #0
  402f06:	d03e      	beq.n	402f86 <__register_exitproc+0x9e>
  402f08:	685a      	ldr	r2, [r3, #4]
  402f0a:	2a1f      	cmp	r2, #31
  402f0c:	dc1c      	bgt.n	402f48 <__register_exitproc+0x60>
  402f0e:	f102 0e01 	add.w	lr, r2, #1
  402f12:	b176      	cbz	r6, 402f32 <__register_exitproc+0x4a>
  402f14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402f18:	2401      	movs	r4, #1
  402f1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402f1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402f22:	4094      	lsls	r4, r2
  402f24:	4320      	orrs	r0, r4
  402f26:	2e02      	cmp	r6, #2
  402f28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402f2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402f30:	d023      	beq.n	402f7a <__register_exitproc+0x92>
  402f32:	3202      	adds	r2, #2
  402f34:	f8c3 e004 	str.w	lr, [r3, #4]
  402f38:	6828      	ldr	r0, [r5, #0]
  402f3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402f3e:	f7ff fc73 	bl	402828 <__retarget_lock_release_recursive>
  402f42:	2000      	movs	r0, #0
  402f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f48:	4b17      	ldr	r3, [pc, #92]	; (402fa8 <__register_exitproc+0xc0>)
  402f4a:	b30b      	cbz	r3, 402f90 <__register_exitproc+0xa8>
  402f4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402f50:	f7ff fc9a 	bl	402888 <malloc>
  402f54:	4603      	mov	r3, r0
  402f56:	b1d8      	cbz	r0, 402f90 <__register_exitproc+0xa8>
  402f58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402f5c:	6002      	str	r2, [r0, #0]
  402f5e:	2100      	movs	r1, #0
  402f60:	6041      	str	r1, [r0, #4]
  402f62:	460a      	mov	r2, r1
  402f64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402f68:	f04f 0e01 	mov.w	lr, #1
  402f6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402f70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402f74:	2e00      	cmp	r6, #0
  402f76:	d0dc      	beq.n	402f32 <__register_exitproc+0x4a>
  402f78:	e7cc      	b.n	402f14 <__register_exitproc+0x2c>
  402f7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402f7e:	430c      	orrs	r4, r1
  402f80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402f84:	e7d5      	b.n	402f32 <__register_exitproc+0x4a>
  402f86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402f8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402f8e:	e7bb      	b.n	402f08 <__register_exitproc+0x20>
  402f90:	6828      	ldr	r0, [r5, #0]
  402f92:	f7ff fc49 	bl	402828 <__retarget_lock_release_recursive>
  402f96:	f04f 30ff 	mov.w	r0, #4294967295
  402f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f9e:	bf00      	nop
  402fa0:	20400478 	.word	0x20400478
  402fa4:	00403b70 	.word	0x00403b70
  402fa8:	00402889 	.word	0x00402889

00402fac <_close_r>:
  402fac:	b538      	push	{r3, r4, r5, lr}
  402fae:	4c07      	ldr	r4, [pc, #28]	; (402fcc <_close_r+0x20>)
  402fb0:	2300      	movs	r3, #0
  402fb2:	4605      	mov	r5, r0
  402fb4:	4608      	mov	r0, r1
  402fb6:	6023      	str	r3, [r4, #0]
  402fb8:	f7fe f9b6 	bl	401328 <_close>
  402fbc:	1c43      	adds	r3, r0, #1
  402fbe:	d000      	beq.n	402fc2 <_close_r+0x16>
  402fc0:	bd38      	pop	{r3, r4, r5, pc}
  402fc2:	6823      	ldr	r3, [r4, #0]
  402fc4:	2b00      	cmp	r3, #0
  402fc6:	d0fb      	beq.n	402fc0 <_close_r+0x14>
  402fc8:	602b      	str	r3, [r5, #0]
  402fca:	bd38      	pop	{r3, r4, r5, pc}
  402fcc:	20400bb8 	.word	0x20400bb8

00402fd0 <_fclose_r>:
  402fd0:	b570      	push	{r4, r5, r6, lr}
  402fd2:	b159      	cbz	r1, 402fec <_fclose_r+0x1c>
  402fd4:	4605      	mov	r5, r0
  402fd6:	460c      	mov	r4, r1
  402fd8:	b110      	cbz	r0, 402fe0 <_fclose_r+0x10>
  402fda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402fdc:	2b00      	cmp	r3, #0
  402fde:	d03c      	beq.n	40305a <_fclose_r+0x8a>
  402fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402fe2:	07d8      	lsls	r0, r3, #31
  402fe4:	d505      	bpl.n	402ff2 <_fclose_r+0x22>
  402fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fea:	b92b      	cbnz	r3, 402ff8 <_fclose_r+0x28>
  402fec:	2600      	movs	r6, #0
  402fee:	4630      	mov	r0, r6
  402ff0:	bd70      	pop	{r4, r5, r6, pc}
  402ff2:	89a3      	ldrh	r3, [r4, #12]
  402ff4:	0599      	lsls	r1, r3, #22
  402ff6:	d53c      	bpl.n	403072 <_fclose_r+0xa2>
  402ff8:	4621      	mov	r1, r4
  402ffa:	4628      	mov	r0, r5
  402ffc:	f7ff f964 	bl	4022c8 <__sflush_r>
  403000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403002:	4606      	mov	r6, r0
  403004:	b133      	cbz	r3, 403014 <_fclose_r+0x44>
  403006:	69e1      	ldr	r1, [r4, #28]
  403008:	4628      	mov	r0, r5
  40300a:	4798      	blx	r3
  40300c:	2800      	cmp	r0, #0
  40300e:	bfb8      	it	lt
  403010:	f04f 36ff 	movlt.w	r6, #4294967295
  403014:	89a3      	ldrh	r3, [r4, #12]
  403016:	061a      	lsls	r2, r3, #24
  403018:	d422      	bmi.n	403060 <_fclose_r+0x90>
  40301a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40301c:	b141      	cbz	r1, 403030 <_fclose_r+0x60>
  40301e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403022:	4299      	cmp	r1, r3
  403024:	d002      	beq.n	40302c <_fclose_r+0x5c>
  403026:	4628      	mov	r0, r5
  403028:	f7ff fae8 	bl	4025fc <_free_r>
  40302c:	2300      	movs	r3, #0
  40302e:	6323      	str	r3, [r4, #48]	; 0x30
  403030:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403032:	b121      	cbz	r1, 40303e <_fclose_r+0x6e>
  403034:	4628      	mov	r0, r5
  403036:	f7ff fae1 	bl	4025fc <_free_r>
  40303a:	2300      	movs	r3, #0
  40303c:	6463      	str	r3, [r4, #68]	; 0x44
  40303e:	f7ff fa67 	bl	402510 <__sfp_lock_acquire>
  403042:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403044:	2200      	movs	r2, #0
  403046:	07db      	lsls	r3, r3, #31
  403048:	81a2      	strh	r2, [r4, #12]
  40304a:	d50e      	bpl.n	40306a <_fclose_r+0x9a>
  40304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40304e:	f7ff fbe7 	bl	402820 <__retarget_lock_close_recursive>
  403052:	f7ff fa63 	bl	40251c <__sfp_lock_release>
  403056:	4630      	mov	r0, r6
  403058:	bd70      	pop	{r4, r5, r6, pc}
  40305a:	f7ff fa2d 	bl	4024b8 <__sinit>
  40305e:	e7bf      	b.n	402fe0 <_fclose_r+0x10>
  403060:	6921      	ldr	r1, [r4, #16]
  403062:	4628      	mov	r0, r5
  403064:	f7ff faca 	bl	4025fc <_free_r>
  403068:	e7d7      	b.n	40301a <_fclose_r+0x4a>
  40306a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40306c:	f7ff fbdc 	bl	402828 <__retarget_lock_release_recursive>
  403070:	e7ec      	b.n	40304c <_fclose_r+0x7c>
  403072:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403074:	f7ff fbd6 	bl	402824 <__retarget_lock_acquire_recursive>
  403078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40307c:	2b00      	cmp	r3, #0
  40307e:	d1bb      	bne.n	402ff8 <_fclose_r+0x28>
  403080:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403082:	f016 0601 	ands.w	r6, r6, #1
  403086:	d1b1      	bne.n	402fec <_fclose_r+0x1c>
  403088:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40308a:	f7ff fbcd 	bl	402828 <__retarget_lock_release_recursive>
  40308e:	4630      	mov	r0, r6
  403090:	bd70      	pop	{r4, r5, r6, pc}
  403092:	bf00      	nop

00403094 <_fstat_r>:
  403094:	b538      	push	{r3, r4, r5, lr}
  403096:	460b      	mov	r3, r1
  403098:	4c07      	ldr	r4, [pc, #28]	; (4030b8 <_fstat_r+0x24>)
  40309a:	4605      	mov	r5, r0
  40309c:	4611      	mov	r1, r2
  40309e:	4618      	mov	r0, r3
  4030a0:	2300      	movs	r3, #0
  4030a2:	6023      	str	r3, [r4, #0]
  4030a4:	f7fe f943 	bl	40132e <_fstat>
  4030a8:	1c43      	adds	r3, r0, #1
  4030aa:	d000      	beq.n	4030ae <_fstat_r+0x1a>
  4030ac:	bd38      	pop	{r3, r4, r5, pc}
  4030ae:	6823      	ldr	r3, [r4, #0]
  4030b0:	2b00      	cmp	r3, #0
  4030b2:	d0fb      	beq.n	4030ac <_fstat_r+0x18>
  4030b4:	602b      	str	r3, [r5, #0]
  4030b6:	bd38      	pop	{r3, r4, r5, pc}
  4030b8:	20400bb8 	.word	0x20400bb8

004030bc <_lseek_r>:
  4030bc:	b570      	push	{r4, r5, r6, lr}
  4030be:	460d      	mov	r5, r1
  4030c0:	4c08      	ldr	r4, [pc, #32]	; (4030e4 <_lseek_r+0x28>)
  4030c2:	4611      	mov	r1, r2
  4030c4:	4606      	mov	r6, r0
  4030c6:	461a      	mov	r2, r3
  4030c8:	4628      	mov	r0, r5
  4030ca:	2300      	movs	r3, #0
  4030cc:	6023      	str	r3, [r4, #0]
  4030ce:	f7fe f933 	bl	401338 <_lseek>
  4030d2:	1c43      	adds	r3, r0, #1
  4030d4:	d000      	beq.n	4030d8 <_lseek_r+0x1c>
  4030d6:	bd70      	pop	{r4, r5, r6, pc}
  4030d8:	6823      	ldr	r3, [r4, #0]
  4030da:	2b00      	cmp	r3, #0
  4030dc:	d0fb      	beq.n	4030d6 <_lseek_r+0x1a>
  4030de:	6033      	str	r3, [r6, #0]
  4030e0:	bd70      	pop	{r4, r5, r6, pc}
  4030e2:	bf00      	nop
  4030e4:	20400bb8 	.word	0x20400bb8

004030e8 <_read_r>:
  4030e8:	b570      	push	{r4, r5, r6, lr}
  4030ea:	460d      	mov	r5, r1
  4030ec:	4c08      	ldr	r4, [pc, #32]	; (403110 <_read_r+0x28>)
  4030ee:	4611      	mov	r1, r2
  4030f0:	4606      	mov	r6, r0
  4030f2:	461a      	mov	r2, r3
  4030f4:	4628      	mov	r0, r5
  4030f6:	2300      	movs	r3, #0
  4030f8:	6023      	str	r3, [r4, #0]
  4030fa:	f7fd f857 	bl	4001ac <_read>
  4030fe:	1c43      	adds	r3, r0, #1
  403100:	d000      	beq.n	403104 <_read_r+0x1c>
  403102:	bd70      	pop	{r4, r5, r6, pc}
  403104:	6823      	ldr	r3, [r4, #0]
  403106:	2b00      	cmp	r3, #0
  403108:	d0fb      	beq.n	403102 <_read_r+0x1a>
  40310a:	6033      	str	r3, [r6, #0]
  40310c:	bd70      	pop	{r4, r5, r6, pc}
  40310e:	bf00      	nop
  403110:	20400bb8 	.word	0x20400bb8

00403114 <sysfont_glyphs>:
	...
  403134:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  403144:	00000030 00000000 00000000 006c006c     0...........l.l.
  403154:	006c006c 00000000 00000000 00000000     l.l.............
	...
  40316c:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  40317c:	00000028 00000000 00000000 003c0010     (.............<.
  40318c:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  4031a4:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  4031b4:	00000088 00000000 00000000 00900060     ............`...
  4031c4:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4031dc:	00100010 00000010 00000000 00000000     ................
	...
  4031f8:	00100008 00200020 00200020 00200020     .... . . . . . .
  403208:	00080010 00000000 00000000 00100020     ............ ...
  403218:	00080008 00080008 00080008 00200010     .............. .
  403228:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  403250:	00100010 00fe0010 00100010 00000010     ................
	...
  403278:	00300010 00000020 00000000 00000000     ..0. ...........
  403288:	00000000 007c0000 00000000 00000000     ......|.........
	...
  4032ac:	00300000 00000030 00000000 00000000     ..0.0...........
  4032bc:	00080000 00100008 00200010 00400020     .......... . .@.
  4032cc:	00000040 00000000 00000000 00780000     @.............x.
  4032dc:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  4032f4:	00100000 00500030 00100010 00100010     ....0.P.........
  403304:	0000007c 00000000 00000000 00700000     |.............p.
  403314:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  40332c:	00700000 00080088 00080030 00880008     ..p.....0.......
  40333c:	00000070 00000000 00000000 00080000     p...............
  40334c:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  403364:	00780000 00800080 000800f0 00080008     ..x.............
  403374:	000000f0 00000000 00000000 00300000     ..............0.
  403384:	00800040 008800f0 00880088 00000070     @...........p...
	...
  40339c:	00f80000 00100008 00200010 00400020     .......... . .@.
  4033ac:	00000040 00000000 00000000 00700000     @.............p.
  4033bc:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  4033d4:	00700000 00880088 00780088 00100008     ..p.......x.....
  4033e4:	00000060 00000000 00000000 00000000     `...............
  4033f4:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  403410:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  403420:	00000040 00000000 00000000 00100008     @...............
  403430:	00400020 00100020 00000008 00000000      .@. ...........
	...
  40344c:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  403464:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  40347c:	00300000 00080048 00200010 00000000     ..0.H..... .....
  40348c:	00000020 00000000 00000000 00000000      ...............
  40349c:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  4034b4:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  4034c4:	00000044 00000000 00000000 00f80000     D...............
  4034d4:	00840084 008400f8 00840084 000000f8     ................
	...
  4034ec:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  4034fc:	0000003c 00000000 00000000 00f00000     <...............
  40350c:	00840088 00840084 00880084 000000f0     ................
	...
  403524:	00f80000 00800080 008000f0 00800080     ................
  403534:	000000f8 00000000 00000000 00f80000     ................
  403544:	00800080 008000f8 00800080 00000080     ................
	...
  40355c:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  40356c:	00000038 00000000 00000000 00880000     8...............
  40357c:	00880088 008800f8 00880088 00000088     ................
	...
  403594:	00f80000 00200020 00200020 00200020     .... . . . . . .
  4035a4:	000000f8 00000000 00000000 00f80000     ................
  4035b4:	00080008 00080008 00080008 000000f0     ................
	...
  4035cc:	00840000 00900088 00d000a0 00840088     ................
  4035dc:	00000084 00000000 00000000 00800000     ................
  4035ec:	00800080 00800080 00800080 000000fc     ................
	...
  403604:	00840000 00cc00cc 00b400b4 00840084     ................
  403614:	00000084 00000000 00000000 00840000     ................
  403624:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  40363c:	00780000 00840084 00840084 00840084     ..x.............
  40364c:	00000078 00000000 00000000 00f80000     x...............
  40365c:	00840084 00f80084 00800080 00000080     ................
	...
  403674:	00780000 00840084 00840084 00840084     ..x.............
  403684:	00200078 00000018 00000000 00f80000     x. .............
  403694:	00840084 00f80084 00840088 00000084     ................
	...
  4036ac:	007c0000 00800080 00180060 00040004     ..|.....`.......
  4036bc:	000000f8 00000000 00000000 00f80000     ................
  4036cc:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4036e4:	00840000 00840084 00840084 00840084     ................
  4036f4:	00000078 00000000 00000000 00840000     x...............
  403704:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  40371c:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  40372c:	00000050 00000000 00000000 00880000     P...............
  40373c:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  403754:	00880000 00880088 00500050 00200020     ........P.P. . .
  403764:	00000020 00000000 00000000 00fc0000      ...............
  403774:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  40378c:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  40379c:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  4037ac:	00200020 00100020 00100010 00080008      . . ...........
	...
  4037c4:	00080038 00080008 00080008 00080008     8...............
  4037d4:	00080008 00000038 00000000 00280010     ....8.........(.
  4037e4:	00000044 00000000 00000000 00000000     D...............
	...
  40380c:	00000038 00000000 00000000 00200000     8............. .
  40381c:	00000010 00000000 00000000 00000000     ................
	...
  403838:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  403850:	00800080 00f80080 00840084 00840084     ................
  403860:	000000f8 00000000 00000000 00000000     ................
  403870:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  403888:	00040004 007c0004 00840084 008c0084     ......|.........
  403898:	00000074 00000000 00000000 00000000     t...............
  4038a8:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  4038c0:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  4038d0:	000000fc 00000000 00000000 00000000     ................
  4038e0:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4038f0:	00000078 00000000 00800080 00b80080     x...............
  403900:	008400c4 00840084 00000084 00000000     ................
  403910:	00000000 00100000 00700000 00100010     ..........p.....
  403920:	00100010 0000007c 00000000 00000000     ....|...........
  403930:	00080000 00780000 00080008 00080008     ......x.........
  403940:	00080008 00700008 00000000 00800080     ......p.........
  403950:	00880080 00a00090 008800d0 00000088     ................
	...
  403968:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  403978:	000000f8 00000000 00000000 00000000     ................
  403988:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  4039a4:	00b80000 008400c4 00840084 00000084     ................
	...
  4039c0:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  4039dc:	00b80000 008400c4 00840084 008000f8     ................
  4039ec:	00000080 00000000 00000000 007c0000     ..............|.
  4039fc:	00840084 00840084 0004007c 00000004     ........|.......
	...
  403a14:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  403a30:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  403a4c:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  403a68:	00880000 00880088 00880088 0000007c     ............|...
	...
  403a84:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  403aa0:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  403abc:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  403ad8:	00840000 00480084 00300048 00200010     ......H.H.0... .
  403ae8:	00000040 00000000 00000000 00f80000     @...............
  403af8:	00100008 00400020 000000f8 00000000     .... .@.........
  403b08:	00000000 00200010 00100020 00200020     ...... . ... . .
  403b18:	00200010 00100020 00000000 00000000     .. . ...........
  403b28:	00100010 00100010 00000000 00100010     ................
  403b38:	00100010 00000000 00000000 00100020     ............ ...
  403b48:	00200010 00100010 00100020 00200010     .. ..... ..... .
  403b58:	00000000 00000063 0000006d 706d6574     ....c...m...temp
  403b68:	0000006f 0000002e                       o.......

00403b70 <_global_impure_ptr>:
  403b70:	20400050                                P.@ 

00403b74 <_init>:
  403b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b76:	bf00      	nop
  403b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403b7a:	bc08      	pop	{r3}
  403b7c:	469e      	mov	lr, r3
  403b7e:	4770      	bx	lr

00403b80 <__init_array_start>:
  403b80:	004022a9 	.word	0x004022a9

00403b84 <__frame_dummy_init_array_entry>:
  403b84:	00400165                                e.@.

00403b88 <_fini>:
  403b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b8a:	bf00      	nop
  403b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403b8e:	bc08      	pop	{r3}
  403b90:	469e      	mov	lr, r3
  403b92:	4770      	bx	lr

00403b94 <__fini_array_start>:
  403b94:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 3114 0040 0e0a 7d20               .....1@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <distancias>:
20400020:	0001 0000 0001 0000 0001 0000 0001 0000     ................
20400030:	0001 0000 0001 0000 0001 0000 0001 0000     ................
20400040:	0001 0000                                   ....

20400044 <freq>:
20400044:	8000 0000                                   ....

20400048 <_impure_ptr>:
20400048:	0050 2040 0000 0000                         P.@ ....

20400050 <impure_data>:
20400050:	0000 0000 033c 2040 03a4 2040 040c 2040     ....<.@ ..@ ..@ 
	...
204000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400478 <__atexit_recursive_mutex>:
20400478:	0b94 2040                                   ..@ 

2040047c <__malloc_av_>:
	...
20400484:	047c 2040 047c 2040 0484 2040 0484 2040     |.@ |.@ ..@ ..@ 
20400494:	048c 2040 048c 2040 0494 2040 0494 2040     ..@ ..@ ..@ ..@ 
204004a4:	049c 2040 049c 2040 04a4 2040 04a4 2040     ..@ ..@ ..@ ..@ 
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 

20400884 <__malloc_sbrk_base>:
20400884:	ffff ffff                                   ....

20400888 <__malloc_trim_threshold>:
20400888:	0000 0002                                   ....
